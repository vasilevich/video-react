(function(e, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? t(exports, require('react'), require('redux'))
    : 'function' == typeof define && define.amd
    ? define(['exports', 'react', 'redux'], t)
    : ((e = e || self), t((e['video-react'] = {}), e.React, e.Redux));
})(this, function(a, o, i) {
  'use strict';
  var s = Math.max,
    u = Math.min,
    E = Math.round,
    T = Math.floor,
    S = String.fromCharCode;
  function _(e, t) {
    for (var a = 0, r; a < t.length; a++)
      (r = t[a]),
        (r.enumerable = r.enumerable || !1),
        (r.configurable = !0),
        'value' in r && (r.writable = !0),
        Object.defineProperty(e, O(r.key), r);
  }
  function R(e, t, a) {
    return (
      t && _(e.prototype, t),
      a && _(e, a),
      Object.defineProperty(e, 'prototype', { writable: !1 }),
      e
    );
  }
  function D() {
    return (
      (D = Object.assign
        ? Object.assign.bind()
        : function(e) {
            for (var t = 1, a; t < arguments.length; t++)
              for (var r in ((a = arguments[t]), a))
                Object.prototype.hasOwnProperty.call(a, r) && (e[r] = a[r]);
            return e;
          }),
      D.apply(this, arguments)
    );
  }
  function L(e, t) {
    (e.prototype = Object.create(t.prototype)),
      (e.prototype.constructor = e),
      C(e, t);
  }
  function C(e, t) {
    return (
      (C = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function a(e, t) {
            return (e.__proto__ = t), e;
          }),
      C(e, t)
    );
  }
  function P(e, t) {
    if (null == e) return {};
    var a = {},
      r = Object.keys(e),
      n,
      o;
    for (o = 0; o < r.length; o++)
      (n = r[o]), 0 <= t.indexOf(n) || (a[n] = e[n]);
    return a;
  }
  function I(e) {
    if (void 0 === e)
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      );
    return e;
  }
  function N(e, t) {
    if ('object' != typeof e || null === e) return e;
    var a = e[Symbol.toPrimitive];
    if (a !== void 0) {
      var r = a.call(e, t || 'default');
      if ('object' != typeof r) return r;
      throw new TypeError('@@toPrimitive must return a primitive value.');
    }
    return ('string' === t ? String : Number)(e);
  }
  function O(e) {
    var t = N(e, 'string');
    return 'symbol' == typeof t ? t : t + '';
  }
  function F(e, t) {
    return (t = { exports: {} }), e(t, t.exports), t.exports;
  }
  function M(t) {
    if ('object' == typeof t && null !== t) {
      var o = t.$$typeof;
      switch (o) {
        case b:
          switch (((t = t.type), t)) {
            case k:
            case l:
            case d:
            case f:
            case e:
            case n:
              return t;
            default:
              switch (((t = t && t.$$typeof), t)) {
                case h:
                case m:
                case r:
                case q:
                case g:
                  return t;
                default:
                  return o;
              }
          }
        case c:
          return o;
      }
    }
  }
  function B(e) {
    return M(e) === l;
  }
  function A(e) {
    if (null === e || e === void 0)
      throw new TypeError(
        'Object.assign cannot be called with null or undefined'
      );
    return Object(e);
  }
  function U() {}
  function G() {}
  function K(e) {
    return (
      void 0 === e && (e = { action: 'play', source: '' }),
      this.video.play(),
      { type: 'video-react/OPERATE', operation: e }
    );
  }
  function H(e) {
    return (
      void 0 === e && (e = { action: 'pause', source: '' }),
      this.video.pause(),
      { type: 'video-react/OPERATE', operation: e }
    );
  }
  function V(e) {
    return (
      void 0 === e && (e = { action: 'toggle-play', source: '' }),
      this.video.togglePlay(),
      { type: 'video-react/OPERATE', operation: e }
    );
  }
  function W(e, t) {
    return (
      void 0 === t && (t = { action: 'seek', source: '' }),
      this.video.seek(e),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function j(e, t) {
    return (
      void 0 === t && (t = { action: 'forward-' + e, source: '' }),
      this.video.forward(e),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function Y(e, t) {
    return (
      void 0 === t && (t = { action: 'replay-' + e, source: '' }),
      this.video.replay(e),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function z(e, t) {
    return (
      void 0 === t && (t = { action: 'change-rate', source: '' }),
      (this.video.playbackRate = e),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function X(e, t) {
    void 0 === t && (t = { action: 'change-volume', source: '' });
    var a = e;
    return (
      0 > e && (a = 0),
      1 < e && (a = 1),
      (this.video.volume = a),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function $(e, t) {
    return (
      void 0 === t && (t = { action: e ? 'muted' : 'unmuted', source: '' }),
      (this.video.muted = e),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function Q(e) {
    return ut.enabled
      ? (ut.isFullscreen ? ut.exit() : ut.request(this.rootElement),
        {
          type: 'video-react/OPERATE',
          operation: { action: 'toggle-fullscreen', source: '' }
        })
      : {
          type: 'video-react/FULLSCREEN_CHANGE',
          isFullscreen: !e.isFullscreen
        };
  }
  function Z(e, t) {
    switch ((void 0 === e && (e = gt), t.type)) {
      case 'video-react/USER_ACTIVATE':
        return D({}, e, { userActivity: t.activity });
      case 'video-react/PLAYER_ACTIVATE':
        return D({}, e, { isActive: t.activity });
      case 'video-react/FULLSCREEN_CHANGE':
        return D({}, e, { isFullscreen: !!t.isFullscreen });
      case 'video-react/SEEKING_TIME':
        return D({}, e, { seekingTime: t.time });
      case 'video-react/END_SEEKING':
        return D({}, e, { seekingTime: 0 });
      case 'video-react/LOAD_START':
        return D({}, e, t.videoProps, { hasStarted: !1, ended: !1 });
      case 'video-react/CAN_PLAY':
        return D({}, e, t.videoProps, { waiting: !1 });
      case 'video-react/WAITING':
        return D({}, e, t.videoProps, { waiting: !0 });
      case 'video-react/CAN_PLAY_THROUGH':
      case 'video-react/PLAYING':
        return D({}, e, t.videoProps, { waiting: !1 });
      case 'video-react/PLAY':
        return D({}, e, t.videoProps, {
          ended: !1,
          paused: !1,
          autoPaused: !1,
          waiting: !1,
          hasStarted: !0
        });
      case 'video-react/PAUSE':
        return D({}, e, t.videoProps, { paused: !0 });
      case 'video-react/END':
        return D({}, e, t.videoProps, { ended: !0 });
      case 'video-react/SEEKING':
        return D({}, e, t.videoProps, { seeking: !0 });
      case 'video-react/SEEKED':
        return D({}, e, t.videoProps, { seeking: !1 });
      case 'video-react/ERROR':
        return D({}, e, t.videoProps, { error: 'UNKNOWN ERROR', ended: !0 });
      case 'video-react/DURATION_CHANGE':
      case 'video-react/TIME_UPDATE':
      case 'video-react/VOLUME_CHANGE':
      case 'video-react/PROGRESS_CHANGE':
      case 'video-react/RATE_CHANGE':
      case 'video-react/SUSPEND':
      case 'video-react/ABORT':
      case 'video-react/EMPTIED':
      case 'video-react/STALLED':
      case 'video-react/LOADED_META_DATA':
      case 'video-react/LOADED_DATA':
      case 'video-react/RESIZE':
        return D({}, e, t.videoProps);
      case 'video-react/ACTIVATE_TEXT_TRACK':
        return D({}, e, { activeTextTrack: t.textTrack });
      default:
        return e;
    }
  }
  function J(e, t) {
    switch ((void 0 === e && (e = ft), t.type)) {
      case 'video-react/OPERATE':
        return D({}, e, {
          count: e.count + 1,
          operation: D({}, e.operation, t.operation)
        });
      default:
        return e;
    }
  }
  function ee(e, t) {
    return (
      void 0 === e && (e = {}),
      { player: Z(e.player, t), operation: J(e.operation, t) }
    );
  }
  function te(e) {
    var t = e.player,
      a = e.className;
    return t.error
      ? null
      : be.createElement('div', {
          className: st('video-react-loading-spinner', a)
        });
  }
  function ae(e) {
    var t = e.poster,
      a = e.player,
      r = e.actions,
      n = e.className;
    return !t || a.hasStarted
      ? null
      : be.createElement('div', {
          className: st('video-react-poster', n),
          style: { backgroundImage: 'url("' + t + '")' },
          onClick: function e() {
            a.paused && r.play();
          }
        });
  }
  function re(e) {
    var t = e.hlsConfig,
      a = e.playerRef,
      r = void 0 === a ? be.createRef() : a,
      n = e.src,
      i = e.autoPlay,
      d = _t(e, ['hlsConfig', 'playerRef', 'src', 'autoPlay']);
    return (
      o.useEffect(
        function() {
          function e() {
            null != a && a.destroy();
            var o = new St(bt({ enableWorker: !1 }, t));
            null != r.current && o.attachMedia(r.current),
              o.on(St.Events.MEDIA_ATTACHED, function() {
                o.loadSource(n),
                  o.on(St.Events.MANIFEST_PARSED, function() {
                    var e;
                    i &&
                      (null ===
                        (e = null === r || void 0 === r ? void 0 : r.current) ||
                      void 0 === e
                        ? void 0
                        : e.play().catch(function() {
                            return console.log(
                              'Unable to autoplay prior to user interaction with the dom.'
                            );
                          }));
                  });
              }),
              o.on(St.Events.ERROR, function(t, a) {
                if (a.fatal)
                  switch (a.type) {
                    case St.ErrorTypes.NETWORK_ERROR:
                      o.startLoad();
                      break;
                    case St.ErrorTypes.MEDIA_ERROR:
                      o.recoverMediaError();
                      break;
                    default:
                      e();
                  }
              }),
              (a = o);
          }
          var a;
          return (
            St.isSupported() && e(),
            function() {
              null != a && a.destroy();
            }
          );
        },
        [i, t, r, n]
      ),
      St.isSupported()
        ? be.createElement('video', bt({ ref: r }, d))
        : be.createElement('video', bt({ ref: r, src: n, autoPlay: i }, d))
    );
  }
  function ne(e, t) {
    void 0 === e && (e = 0), void 0 === t && (t = e);
    var a = T(e % 60),
      r = T((e / 60) % 60),
      n = T(e / 3600),
      o = T((t / 60) % 60),
      i = T(t / 3600);
    return (
      (At(e) || e === 1 / 0) && ((n = '-'), (r = '-'), (a = '-')),
      (n = 0 < n || 0 < i ? n + ':' : ''),
      (r = ((n || 10 <= o) && 10 > r ? '0' + r : r) + ':'),
      (a = 10 > a ? '0' + a : a),
      n + r + a
    );
  }
  function oe(e) {
    return (
      !!(e.props && e.props.isVideoChild) ||
      'source' === e.type ||
      'track' === e.type
    );
  }
  function ie(t, a, r, n) {
    void 0 === n && (n = 1);
    var o = be.Children.toArray(a),
      i = r.order,
      d = P(r, Rt);
    return o
      .filter(function(t) {
        return !t.props.disabled;
      })
      .concat(
        t.filter(function(e) {
          return !kt(o, function(t) {
            return Dt(t, e);
          });
        })
      )
      .map(function(a) {
        var r = kt(t, function(e) {
            return Dt(e, a);
          }),
          n = r ? r.props : {},
          o = D({}, d, n, a.props),
          i = be.cloneElement(a, o, a.props.children);
        return i;
      })
      .sort(function(e, t) {
        return (e.props.order || n) - (t.props.order || n);
      });
  }
  function de(e, t) {
    console.warn(
      'WARNING: ' +
        e +
        ' will be deprecated soon! Please use ' +
        t +
        ' instead.'
    );
  }
  function se(e, t) {
    var a = arguments,
      r = !1;
    return function() {
      r ||
        (e.apply(void 0, a),
        (r = !0),
        setTimeout(function() {
          r = !1;
        }, t));
    };
  }
  function le(e) {
    var t;
    if (
      (e.getBoundingClientRect &&
        e.parentNode &&
        (t = e.getBoundingClientRect()),
      !t)
    )
      return { left: 0, top: 0 };
    var a = document,
      r = a.body,
      n = a.documentElement,
      o = n.clientLeft || r.clientLeft || 0,
      i = window.pageXOffset || r.scrollLeft,
      d = t.left + i - o,
      s = n.clientTop || r.clientTop || 0,
      l = window.pageYOffset || r.scrollTop,
      c = t.top + l - s;
    return { left: E(d), top: E(c) };
  }
  function ce(e, t) {
    var a = {},
      r = le(e),
      n = e.offsetWidth,
      o = e.offsetHeight,
      i = r.top,
      d = r.left,
      l = t.pageY,
      c = t.pageX;
    return (
      t.changedTouches &&
        ((c = t.changedTouches[0].pageX), (l = t.changedTouches[0].pageY)),
      (a.y = s(0, u(1, (i - l + o) / o))),
      (a.x = s(0, u(1, (c - d) / n))),
      a
    );
  }
  function ue(e) {
    e && e.focus && e.focus();
  }
  function pe(e, t) {
    for (var a = e.className.split(' '), r = 0; r < a.length; r++)
      if (a[r].toLowerCase() === t.toLowerCase()) return !0;
    return !1;
  }
  function ge(e) {
    var t = e.currentTime,
      a = e.duration,
      r = e.percentage,
      n = e.className;
    return be.createElement(
      'div',
      {
        'data-current-time': ne(t, a),
        className: st('video-react-play-progress video-react-slider-bar', n),
        style: { width: r }
      },
      be.createElement(
        'span',
        { className: 'video-react-control-text' },
        'Progress: ' + r
      )
    );
  }
  function fe(e) {
    function t(e, t) {
      var a = e / t || 0;
      return 100 * (1 <= a ? 1 : a) + '%';
    }
    var a = e.buffered,
      r = e.duration,
      n = e.className;
    if (!a || !a.length) return null;
    var o = a.end(a.length - 1),
      d = {};
    o > r && (o = r), (d.width = t(o, r));
    for (var s = [], l = 0; l < a.length; l++) {
      var c = a.start(l),
        u = a.end(l),
        p = be.createElement('div', {
          style: { left: t(c, o), width: t(u - c, o) },
          key: 'part-' + l
        });
      s.push(p);
    }
    return (
      0 === s.length && (s = null),
      be.createElement(
        'div',
        { style: d, className: st('video-react-load-progress', n) },
        be.createElement(
          'span',
          { className: 'video-react-control-text' },
          'Loaded: 0%'
        ),
        s
      )
    );
  }
  function me(e) {
    var t = e.duration,
      a = e.mouseTime,
      r = e.className,
      n = e.text;
    if (!a.time) return null;
    var o = n || ne(a.time, t);
    return be.createElement('div', {
      className: st('video-react-mouse-display', r),
      style: { left: a.position + 'px' },
      'data-current-time': o
    });
  }
  function ye(e) {
    var t = e.player,
      a = t.currentTime,
      r = t.duration,
      n = e.className,
      o = r - a,
      i = ne(o);
    return be.createElement(
      'div',
      {
        className: st(
          'video-react-remaining-time video-react-time-control video-react-control',
          n
        )
      },
      be.createElement(
        'div',
        { className: 'video-react-remaining-time-display', 'aria-live': 'off' },
        be.createElement(
          'span',
          { className: 'video-react-control-text' },
          'Remaining Time '
        ),
        '-' + i
      )
    );
  }
  function he(e) {
    var t = e.player,
      a = t.currentTime,
      r = t.duration,
      n = e.className,
      o = ne(a, r);
    return be.createElement(
      'div',
      {
        className: st(
          'video-react-current-time video-react-time-control video-react-control',
          n
        )
      },
      be.createElement(
        'div',
        { className: 'video-react-current-time-display', 'aria-live': 'off' },
        be.createElement(
          'span',
          { className: 'video-react-control-text' },
          'Current Time '
        ),
        o
      )
    );
  }
  function Ee(e) {
    var t = e.player.duration,
      a = e.className,
      r = ne(t);
    return be.createElement(
      'div',
      {
        className: st(
          a,
          'video-react-duration video-react-time-control video-react-control'
        )
      },
      be.createElement(
        'div',
        { className: 'video-react-duration-display', 'aria-live': 'off' },
        be.createElement(
          'span',
          { className: 'video-react-control-text' },
          'Duration Time '
        ),
        r
      )
    );
  }
  function Te(e) {
    var t = e.separator,
      a = e.className,
      r = t || '/';
    return be.createElement(
      'div',
      {
        className: st('video-react-time-control video-react-time-divider', a),
        dir: 'ltr'
      },
      be.createElement('div', null, be.createElement('span', null, r))
    );
  }
  function ve(e) {
    var t = e.inline,
      a = e.className,
      r = D({}, e);
    return (
      delete r.children,
      delete r.inline,
      delete r.className,
      be.createElement(
        ra,
        D(
          {
            className: st(
              a,
              {
                'video-react-menu-button-inline': !!t,
                'video-react-menu-button-popup': !t
              },
              'video-react-control video-react-button video-react-menu-button'
            )
          },
          r
        ),
        be.createElement(oa, e)
      )
    );
  }
  function Se(e) {
    var t = e.percentage,
      a = e.vertical,
      r = e.className,
      n = {};
    return (
      a ? (n.height = t) : (n.width = t),
      be.createElement(
        'div',
        { className: st(r, 'video-react-volume-level'), style: n },
        be.createElement('span', { className: 'video-react-control-text' })
      )
    );
  }
  var be = 'default' in o ? o['default'] : o,
    _e =
      'undefined' == typeof globalThis
        ? 'undefined' == typeof window
          ? 'undefined' == typeof global
            ? 'undefined' == typeof self
              ? {}
              : self
            : global
          : window
        : globalThis,
    Re = 'function' == typeof Symbol && Symbol.for,
    b = Re ? Symbol.for('react.element') : 60103,
    c = Re ? Symbol.for('react.portal') : 60106,
    d = Re ? Symbol.for('react.fragment') : 60107,
    e = Re ? Symbol.for('react.strict_mode') : 60108,
    f = Re ? Symbol.for('react.profiler') : 60114,
    g = Re ? Symbol.for('react.provider') : 60109,
    h = Re ? Symbol.for('react.context') : 60110,
    k = Re ? Symbol.for('react.async_mode') : 60111,
    l = Re ? Symbol.for('react.concurrent_mode') : 60111,
    m = Re ? Symbol.for('react.forward_ref') : 60112,
    n = Re ? Symbol.for('react.suspense') : 60113,
    p = Re ? Symbol.for('react.suspense_list') : 60120,
    q = Re ? Symbol.for('react.memo') : 60115,
    r = Re ? Symbol.for('react.lazy') : 60116,
    t = Re ? Symbol.for('react.block') : 60121,
    v = Re ? Symbol.for('react.fundamental') : 60117,
    w = Re ? Symbol.for('react.responder') : 60118,
    x = Re ? Symbol.for('react.scope') : 60119,
    y = {
      AsyncMode: k,
      ConcurrentMode: l,
      ContextConsumer: h,
      ContextProvider: g,
      Element: b,
      ForwardRef: m,
      Fragment: d,
      Lazy: r,
      Memo: q,
      Portal: c,
      Profiler: f,
      StrictMode: e,
      Suspense: n,
      isAsyncMode: function t(e) {
        return B(e) || M(e) === k;
      },
      isConcurrentMode: B,
      isContextConsumer: function t(e) {
        return M(e) === h;
      },
      isContextProvider: function t(e) {
        return M(e) === g;
      },
      isElement: function t(e) {
        return 'object' == typeof e && null !== e && e.$$typeof === b;
      },
      isForwardRef: function t(e) {
        return M(e) === m;
      },
      isFragment: function t(e) {
        return M(e) === d;
      },
      isLazy: function t(e) {
        return M(e) === r;
      },
      isMemo: function t(e) {
        return M(e) === q;
      },
      isPortal: function t(e) {
        return M(e) === c;
      },
      isProfiler: function t(e) {
        return M(e) === f;
      },
      isStrictMode: function a(t) {
        return M(t) === e;
      },
      isSuspense: function t(e) {
        return M(e) === n;
      },
      isValidElementType: function a(o) {
        return (
          'string' == typeof o ||
          'function' == typeof o ||
          o === d ||
          o === l ||
          o === f ||
          o === e ||
          o === n ||
          o === p ||
          ('object' == typeof o &&
            null !== o &&
            (o.$$typeof === r ||
              o.$$typeof === q ||
              o.$$typeof === g ||
              o.$$typeof === h ||
              o.$$typeof === m ||
              o.$$typeof === v ||
              o.$$typeof === w ||
              o.$$typeof === x ||
              o.$$typeof === t))
        );
      },
      typeOf: M
    },
    Ae = F(function(e, t) {}),
    ke = Ae.AsyncMode,
    De = Ae.ConcurrentMode,
    Le = Ae.ContextConsumer,
    Ce = Ae.ContextProvider,
    Pe = Ae.Element,
    Ie = Ae.ForwardRef,
    Ne = Ae.Fragment,
    xe = Ae.Lazy,
    Oe = Ae.Memo,
    Fe = Ae.Portal,
    we = Ae.Profiler,
    Me = Ae.StrictMode,
    Be = Ae.Suspense,
    Ue = Ae.isAsyncMode,
    Ge = Ae.isConcurrentMode,
    Ke = Ae.isContextConsumer,
    He = Ae.isContextProvider,
    Ve = Ae.isElement,
    We = Ae.isForwardRef,
    je = Ae.isFragment,
    Ye = Ae.isLazy,
    qe = Ae.isMemo,
    ze = Ae.isPortal,
    Xe = Ae.isProfiler,
    $e = Ae.isStrictMode,
    Qe = Ae.isSuspense,
    Ze = Ae.isValidElementType,
    Je = Ae.typeOf,
    et = F(function(e) {
      e.exports = y;
    }),
    tt = Object.getOwnPropertySymbols,
    at = Object.prototype.hasOwnProperty,
    rt = Object.prototype.propertyIsEnumerable,
    nt = (function e() {
      try {
        if (!Object.assign) return !1;
        var t = new String('abc');
        if (((t[5] = 'de'), '5' === Object.getOwnPropertyNames(t)[0]))
          return !1;
        for (var a = {}, r = 0; 10 > r; r++) a['_' + S(r)] = r;
        var n = Object.getOwnPropertyNames(a).map(function(e) {
          return a[e];
        });
        if ('0123456789' !== n.join('')) return !1;
        var o = {};
        return (
          [
            'a',
            'b',
            'c',
            'd',
            'e',
            'f',
            'g',
            'h',
            'i',
            'j',
            'k',
            'l',
            'm',
            'n',
            'o',
            'p',
            'q',
            'r',
            's',
            't'
          ].forEach(function(e) {
            o[e] = e;
          }),
          'abcdefghijklmnopqrst' === Object.keys(Object.assign({}, o)).join('')
        );
      } catch (e) {
        return !1;
      }
    })()
      ? Object.assign
      : function(e, t) {
          for (var a = A(e), r = 1, n, o; r < arguments.length; r++) {
            for (var d in ((n = Object(arguments[r])), n))
              at.call(n, d) && (a[d] = n[d]);
            if (tt) {
              o = tt(n);
              for (var l = 0; l < o.length; l++)
                rt.call(n, o[l]) && (a[o[l]] = n[o[l]]);
            }
          }
          return a;
        },
    ot = Function.call.bind(Object.prototype.hasOwnProperty);
  G.resetWarningCache = U;
  var it = function e() {
      function t(e, t, a, r, n, o) {
        if (o !== 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED') {
          var i = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types'
          );
          throw ((i.name = 'Invariant Violation'), i);
        }
      }
      function a() {
        return t;
      }
      t.isRequired = t;
      var r = {
        array: t,
        bigint: t,
        bool: t,
        func: t,
        number: t,
        object: t,
        string: t,
        symbol: t,
        any: t,
        arrayOf: a,
        element: t,
        elementType: t,
        instanceOf: a,
        node: t,
        objectOf: a,
        oneOf: a,
        oneOfType: a,
        shape: a,
        exact: a,
        checkPropTypes: G,
        resetWarningCache: U
      };
      return (r.PropTypes = r), r;
    },
    dt = F(function(e) {
      e.exports = it();
    }),
    st = F(function(e) {
      (function() {
        function t() {
          for (var e = [], r = 0, n; r < arguments.length; r++)
            if (((n = arguments[r]), n)) {
              var o = typeof n;
              if ('string' === o || 'number' === o) e.push(n);
              else if (Array.isArray(n)) {
                if (n.length) {
                  var d = t.apply(null, n);
                  d && e.push(d);
                }
              } else if ('object' === o) {
                if (
                  n.toString !== Object.prototype.toString &&
                  !n.toString.toString().includes('[native code]')
                ) {
                  e.push(n.toString());
                  continue;
                }
                for (var s in n) a.call(n, s) && n[s] && e.push(s);
              }
            }
          return e.join(' ');
        }
        var a = {}.hasOwnProperty;
        e.exports
          ? ((t.default = t), (e.exports = t))
          : (window.classNames = t);
      })();
    }),
    lt = Object.freeze({
      __proto__: null,
      LOAD_START: 'video-react/LOAD_START',
      CAN_PLAY: 'video-react/CAN_PLAY',
      WAITING: 'video-react/WAITING',
      CAN_PLAY_THROUGH: 'video-react/CAN_PLAY_THROUGH',
      PLAYING: 'video-react/PLAYING',
      PLAY: 'video-react/PLAY',
      PAUSE: 'video-react/PAUSE',
      END: 'video-react/END',
      SEEKING: 'video-react/SEEKING',
      SEEKED: 'video-react/SEEKED',
      SEEKING_TIME: 'video-react/SEEKING_TIME',
      END_SEEKING: 'video-react/END_SEEKING',
      DURATION_CHANGE: 'video-react/DURATION_CHANGE',
      TIME_UPDATE: 'video-react/TIME_UPDATE',
      VOLUME_CHANGE: 'video-react/VOLUME_CHANGE',
      PROGRESS_CHANGE: 'video-react/PROGRESS_CHANGE',
      RATE_CHANGE: 'video-react/RATE_CHANGE',
      SUSPEND: 'video-react/SUSPEND',
      ABORT: 'video-react/ABORT',
      EMPTIED: 'video-react/EMPTIED',
      STALLED: 'video-react/STALLED',
      LOADED_META_DATA: 'video-react/LOADED_META_DATA',
      LOADED_DATA: 'video-react/LOADED_DATA',
      RESIZE: 'video-react/RESIZE',
      ERROR: 'video-react/ERROR',
      ACTIVATE_TEXT_TRACK: 'video-react/ACTIVATE_TEXT_TRACK',
      handleLoadStart: function t(e) {
        return { type: 'video-react/LOAD_START', videoProps: e };
      },
      handleCanPlay: function t(e) {
        return { type: 'video-react/CAN_PLAY', videoProps: e };
      },
      handleWaiting: function t(e) {
        return { type: 'video-react/WAITING', videoProps: e };
      },
      handleCanPlayThrough: function t(e) {
        return { type: 'video-react/CAN_PLAY_THROUGH', videoProps: e };
      },
      handlePlaying: function t(e) {
        return { type: 'video-react/PLAYING', videoProps: e };
      },
      handlePlay: function t(e) {
        return { type: 'video-react/PLAY', videoProps: e };
      },
      handlePause: function t(e) {
        return { type: 'video-react/PAUSE', videoProps: e };
      },
      handleEnd: function t(e) {
        return { type: 'video-react/END', videoProps: e };
      },
      handleSeeking: function t(e) {
        return { type: 'video-react/SEEKING', videoProps: e };
      },
      handleSeeked: function t(e) {
        return { type: 'video-react/SEEKED', videoProps: e };
      },
      handleDurationChange: function t(e) {
        return { type: 'video-react/DURATION_CHANGE', videoProps: e };
      },
      handleTimeUpdate: function t(e) {
        return { type: 'video-react/TIME_UPDATE', videoProps: e };
      },
      handleVolumeChange: function t(e) {
        return { type: 'video-react/VOLUME_CHANGE', videoProps: e };
      },
      handleProgressChange: function t(e) {
        return { type: 'video-react/PROGRESS_CHANGE', videoProps: e };
      },
      handleRateChange: function t(e) {
        return { type: 'video-react/RATE_CHANGE', videoProps: e };
      },
      handleSuspend: function t(e) {
        return { type: 'video-react/SUSPEND', videoProps: e };
      },
      handleAbort: function t(e) {
        return { type: 'video-react/ABORT', videoProps: e };
      },
      handleEmptied: function t(e) {
        return { type: 'video-react/EMPTIED', videoProps: e };
      },
      handleStalled: function t(e) {
        return { type: 'video-react/STALLED', videoProps: e };
      },
      handleLoadedMetaData: function t(e) {
        return { type: 'video-react/LOADED_META_DATA', videoProps: e };
      },
      handleLoadedData: function t(e) {
        return { type: 'video-react/LOADED_DATA', videoProps: e };
      },
      handleResize: function t(e) {
        return { type: 'video-react/RESIZE', videoProps: e };
      },
      handleError: function t(e) {
        return { type: 'video-react/ERROR', videoProps: e };
      },
      handleSeekingTime: function t(e) {
        return { type: 'video-react/SEEKING_TIME', time: e };
      },
      handleEndSeeking: function t(e) {
        return { type: 'video-react/END_SEEKING', time: e };
      },
      activateTextTrack: function t(e) {
        return { type: 'video-react/ACTIVATE_TEXT_TRACK', textTrack: e };
      }
    }),
    ct = (function() {
      function e() {}
      var t = e.prototype;
      return (
        (t.request = function t(e) {
          e.requestFullscreen
            ? e.requestFullscreen()
            : e.webkitRequestFullscreen
            ? e.webkitRequestFullscreen()
            : e.mozRequestFullScreen
            ? e.mozRequestFullScreen()
            : e.msRequestFullscreen && e.msRequestFullscreen();
        }),
        (t.exit = function e() {
          document.exitFullscreen
            ? document.exitFullscreen()
            : document.webkitExitFullscreen
            ? document.webkitExitFullscreen()
            : document.mozCancelFullScreen
            ? document.mozCancelFullScreen()
            : document.msExitFullscreen && document.msExitFullscreen();
        }),
        (t.addEventListener = function t(e) {
          document.addEventListener('fullscreenchange', e),
            document.addEventListener('webkitfullscreenchange', e),
            document.addEventListener('mozfullscreenchange', e),
            document.addEventListener('MSFullscreenChange', e);
        }),
        (t.removeEventListener = function t(e) {
          document.removeEventListener('fullscreenchange', e),
            document.removeEventListener('webkitfullscreenchange', e),
            document.removeEventListener('mozfullscreenchange', e),
            document.removeEventListener('MSFullscreenChange', e);
        }),
        R(e, [
          {
            key: 'isFullscreen',
            get: function e() {
              return (
                document.fullscreenElement ||
                document.webkitFullscreenElement ||
                document.mozFullScreenElement ||
                document.msFullscreenElement
              );
            }
          },
          {
            key: 'enabled',
            get: function e() {
              return (
                document.fullscreenEnabled ||
                document.webkitFullscreenEnabled ||
                document.mozFullScreenEnabled ||
                document.msFullscreenEnabled
              );
            }
          }
        ]),
        e
      );
    })(),
    ut = new ct(),
    pt = Object.freeze({
      __proto__: null,
      OPERATE: 'video-react/OPERATE',
      FULLSCREEN_CHANGE: 'video-react/FULLSCREEN_CHANGE',
      PLAYER_ACTIVATE: 'video-react/PLAYER_ACTIVATE',
      USER_ACTIVATE: 'video-react/USER_ACTIVATE',
      handleFullscreenChange: function t(e) {
        return { type: 'video-react/FULLSCREEN_CHANGE', isFullscreen: e };
      },
      activate: function t(e) {
        return { type: 'video-react/PLAYER_ACTIVATE', activity: e };
      },
      userActivate: function t(e) {
        return { type: 'video-react/USER_ACTIVATE', activity: e };
      },
      play: K,
      pause: H,
      togglePlay: V,
      seek: W,
      forward: j,
      replay: Y,
      changeRate: z,
      changeVolume: X,
      mute: $,
      toggleFullscreen: Q
    }),
    gt = {
      currentSrc: null,
      duration: 0,
      currentTime: 0,
      seekingTime: 0,
      buffered: null,
      waiting: !1,
      seeking: !1,
      paused: !0,
      autoPaused: !1,
      ended: !1,
      playbackRate: 1,
      muted: !1,
      volume: 1,
      readyState: 0,
      networkState: 0,
      videoWidth: 0,
      videoHeight: 0,
      hasStarted: !1,
      userActivity: !0,
      isActive: !1,
      isFullscreen: !1,
      activeTextTrack: null
    },
    ft = { count: 0, operation: { action: '', source: '' } },
    mt = (function() {
      function e(e) {
        (this.store = e || i.createStore(ee)),
          (this.video = null),
          (this.rootElement = null);
      }
      var t = e.prototype;
      return (
        (t.getActions = function e() {
          function t(e) {
            return function t() {
              var n = e.apply(a, arguments);
              'undefined' != typeof n && r(n);
            };
          }
          var a = this,
            r = this.store.dispatch,
            n = D({}, pt, lt);
          return Object.keys(n)
            .filter(function(e) {
              return 'function' == typeof n[e];
            })
            .reduce(function(e, a) {
              return (e[a] = t(n[a])), e;
            }, {});
        }),
        (t.getState = function e() {
          return this.store.getState();
        }),
        (t.subscribeToStateChange = function a(e, t) {
          t || (t = this.getState.bind(this));
          var r = t(),
            n = function a() {
              var n = t();
              if (n !== r) {
                var o = r;
                (r = n), e(n, o);
              }
            };
          return this.store.subscribe(n);
        }),
        (t.subscribeToOperationStateChange = function t(e) {
          var a = this;
          return this.subscribeToStateChange(e, function() {
            return a.getState().operation;
          });
        }),
        (t.subscribeToPlayerStateChange = function t(e) {
          var a = this;
          return this.subscribeToStateChange(e, function() {
            return a.getState().player;
          });
        }),
        e
      );
    })(),
    yt = {
      actions: dt.object,
      player: dt.object,
      position: dt.string,
      className: dt.string
    },
    ht = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {}),
        (a.handleClick = function e() {
          var t = this.props.actions;
          t.play();
        }),
        (a.render = function e() {
          var t = this.props,
            a = t.player,
            r = t.position;
          return be.createElement(
            'button',
            {
              className: st(
                'video-react-button',
                'video-react-big-play-button',
                'video-react-big-play-button-' + r,
                this.props.className,
                { 'big-play-button-hide': a.hasStarted || !a.currentSrc }
              ),
              type: 'button',
              'aria-live': 'polite',
              tabIndex: '0',
              onClick: this.handleClick
            },
            be.createElement(
              'span',
              { className: 'video-react-control-text' },
              'Play Video'
            )
          );
        }),
        t
      );
    })(o.Component);
  (ht.propTypes = yt),
    (ht.defaultProps = { position: 'left' }),
    (ht.displayName = 'BigPlayButton');
  var Et = { player: dt.object, className: dt.string };
  (te.propTypes = Et), (te.displayName = 'LoadingSpinner');
  var Tt = {
    poster: dt.string,
    player: dt.object,
    actions: dt.object,
    className: dt.string
  };
  (ae.propTypes = Tt), (ae.displayName = 'PosterImage');
  var vt = F(function(e, t) {
      'undefined' != typeof window &&
        (function r(t, a) {
          e.exports = a();
        })(_e, function() {
          var e = Number.MAX_SAFE_INTEGER,
            t = Number.POSITIVE_INFINITY,
            a = Math.pow,
            r = Math.abs;
          return (function(e) {
            function t(r) {
              if (a[r]) return a[r].exports;
              var n = (a[r] = { i: r, l: !1, exports: {} });
              return (
                e[r].call(n.exports, n, n.exports, t), (n.l = !0), n.exports
              );
            }
            var a = {};
            return (
              (t.m = e),
              (t.c = a),
              (t.d = function(e, a, r) {
                t.o(e, a) ||
                  Object.defineProperty(e, a, { enumerable: !0, get: r });
              }),
              (t.r = function(e) {
                'undefined' != typeof Symbol &&
                  Symbol.toStringTag &&
                  Object.defineProperty(e, Symbol.toStringTag, {
                    value: 'Module'
                  }),
                  Object.defineProperty(e, '__esModule', { value: !0 });
              }),
              (t.t = function(e, a) {
                if ((1 & a && (e = t(e)), 8 & a)) return e;
                if (4 & a && 'object' == typeof e && e && e.__esModule)
                  return e;
                var r = Object.create(null);
                if (
                  (t.r(r),
                  Object.defineProperty(r, 'default', {
                    enumerable: !0,
                    value: e
                  }),
                  2 & a && 'string' != typeof e)
                )
                  for (var n in e)
                    t.d(
                      r,
                      n,
                      function(t) {
                        return e[t];
                      }.bind(null, n)
                    );
                return r;
              }),
              (t.n = function(e) {
                var a =
                  e && e.__esModule
                    ? function t() {
                        return e['default'];
                      }
                    : function t() {
                        return e;
                      };
                return t.d(a, 'a', a), a;
              }),
              (t.o = function(e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              }),
              (t.p = '/dist/'),
              t((t.s = './src/hls.ts'))
            );
          })({
            './node_modules/eventemitter3/index.js': function r(e, t, a) {
              function n() {}
              function o(e, t, a) {
                (this.fn = e), (this.context = t), (this.once = a || !1);
              }
              function i(e, t, a, r, n) {
                if ('function' != typeof a)
                  throw new TypeError('The listener must be a function');
                var i = new o(a, r || e, n),
                  d = c ? c + t : t;
                return (
                  e._events[d]
                    ? e._events[d].fn
                      ? (e._events[d] = [e._events[d], i])
                      : e._events[d].push(i)
                    : ((e._events[d] = i), e._eventsCount++),
                  e
                );
              }
              function d(e, t) {
                0 == --e._eventsCount
                  ? (e._events = new n())
                  : delete e._events[t];
              }
              function s() {
                (this._events = new n()), (this._eventsCount = 0);
              }
              var l = Object.prototype.hasOwnProperty,
                c = '~';
              Object.create &&
                ((n.prototype = Object.create(null)),
                !new n().__proto__ && (c = !1)),
                (s.prototype.eventNames = function e() {
                  var t = [],
                    a,
                    r;
                  if (0 === this._eventsCount) return t;
                  for (r in (a = this._events))
                    l.call(a, r) && t.push(c ? r.slice(1) : r);
                  return Object.getOwnPropertySymbols
                    ? t.concat(Object.getOwnPropertySymbols(a))
                    : t;
                }),
                (s.prototype.listeners = function t(e) {
                  var a = c ? c + e : e,
                    r = this._events[a];
                  if (!r) return [];
                  if (r.fn) return [r.fn];
                  for (var n = 0, o = r.length, d = Array(o); n < o; n++)
                    d[n] = r[n].fn;
                  return d;
                }),
                (s.prototype.listenerCount = function t(e) {
                  var a = c ? c + e : e,
                    r = this._events[a];
                  return r ? (r.fn ? 1 : r.length) : 0;
                }),
                (s.prototype.emit = function d(e, t, a, r, n, o) {
                  var s = c ? c + e : e;
                  if (!this._events[s]) return !1;
                  var l = this._events[s],
                    u = arguments.length,
                    p,
                    g;
                  if (l.fn) {
                    switch (
                      (l.once && this.removeListener(e, l.fn, void 0, !0), u)
                    ) {
                      case 1:
                        return l.fn.call(l.context), !0;
                      case 2:
                        return l.fn.call(l.context, t), !0;
                      case 3:
                        return l.fn.call(l.context, t, a), !0;
                      case 4:
                        return l.fn.call(l.context, t, a, r), !0;
                      case 5:
                        return l.fn.call(l.context, t, a, r, n), !0;
                      case 6:
                        return l.fn.call(l.context, t, a, r, n, o), !0;
                    }
                    for (g = 1, p = Array(u - 1); g < u; g++)
                      p[g - 1] = arguments[g];
                    l.fn.apply(l.context, p);
                  } else {
                    var f = l.length,
                      m;
                    for (g = 0; g < f; g++)
                      switch (
                        (l[g].once &&
                          this.removeListener(e, l[g].fn, void 0, !0),
                        u)
                      ) {
                        case 1:
                          l[g].fn.call(l[g].context);
                          break;
                        case 2:
                          l[g].fn.call(l[g].context, t);
                          break;
                        case 3:
                          l[g].fn.call(l[g].context, t, a);
                          break;
                        case 4:
                          l[g].fn.call(l[g].context, t, a, r);
                          break;
                        default:
                          if (!p)
                            for (m = 1, p = Array(u - 1); m < u; m++)
                              p[m - 1] = arguments[m];
                          l[g].fn.apply(l[g].context, p);
                      }
                  }
                  return !0;
                }),
                (s.prototype.on = function r(e, t, a) {
                  return i(this, e, t, a, !1);
                }),
                (s.prototype.once = function r(e, t, a) {
                  return i(this, e, t, a, !0);
                }),
                (s.prototype.removeListener = function n(e, t, a, r) {
                  var o = c ? c + e : e;
                  if (!this._events[o]) return this;
                  if (!t) return d(this, o), this;
                  var s = this._events[o];
                  if (s.fn)
                    s.fn !== t ||
                      (r && !s.once) ||
                      (a && s.context !== a) ||
                      d(this, o);
                  else {
                    for (var l = 0, u = [], p = s.length; l < p; l++)
                      (s[l].fn !== t ||
                        (r && !s[l].once) ||
                        (a && s[l].context !== a)) &&
                        u.push(s[l]);
                    u.length
                      ? (this._events[o] = 1 === u.length ? u[0] : u)
                      : d(this, o);
                  }
                  return this;
                }),
                (s.prototype.removeAllListeners = function t(e) {
                  var a;
                  return (
                    e
                      ? ((a = c ? c + e : e), this._events[a] && d(this, a))
                      : ((this._events = new n()), (this._eventsCount = 0)),
                    this
                  );
                }),
                (s.prototype.off = s.prototype.removeListener),
                (s.prototype.addListener = s.prototype.on),
                (s.prefixed = c),
                (s.EventEmitter = s),
                (e.exports = s);
            },
            './node_modules/url-toolkit/src/url-toolkit.js': function r(
              e,
              t,
              a
            ) {
              (function(t) {
                var a = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/?#]*\/)*[^;?#]*)?(;[^?#]*)?(\?[^#]*)?(#.*)?$/,
                  r = /^([^\/?#]*)(.*)$/,
                  n = /(?:\/|^)\.(?=\/)/g,
                  o = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g,
                  i = {
                    buildAbsoluteURL: function n(e, t, a) {
                      if (((a = a || {}), (e = e.trim()), (t = t.trim()), !t)) {
                        if (!a.alwaysNormalize) return e;
                        var o = i.parseURL(e);
                        if (!o)
                          throw new Error('Error trying to parse base URL.');
                        return (
                          (o.path = i.normalizePath(o.path)),
                          i.buildURLFromParts(o)
                        );
                      }
                      var d = i.parseURL(t);
                      if (!d)
                        throw new Error('Error trying to parse relative URL.');
                      if (d.scheme)
                        return a.alwaysNormalize
                          ? ((d.path = i.normalizePath(d.path)),
                            i.buildURLFromParts(d))
                          : t;
                      var s = i.parseURL(e);
                      if (!s)
                        throw new Error('Error trying to parse base URL.');
                      if (!s.netLoc && s.path && '/' !== s.path[0]) {
                        var l = r.exec(s.path);
                        (s.netLoc = l[1]), (s.path = l[2]);
                      }
                      s.netLoc && !s.path && (s.path = '/');
                      var c = {
                        scheme: s.scheme,
                        netLoc: d.netLoc,
                        path: null,
                        params: d.params,
                        query: d.query,
                        fragment: d.fragment
                      };
                      if (
                        !d.netLoc &&
                        ((c.netLoc = s.netLoc), '/' !== d.path[0])
                      )
                        if (!d.path)
                          (c.path = s.path),
                            d.params ||
                              ((c.params = s.params),
                              !d.query && (c.query = s.query));
                        else {
                          var u = s.path,
                            p = u.substring(0, u.lastIndexOf('/') + 1) + d.path;
                          c.path = i.normalizePath(p);
                        }
                      return (
                        null === c.path &&
                          (c.path = a.alwaysNormalize
                            ? i.normalizePath(d.path)
                            : d.path),
                        i.buildURLFromParts(c)
                      );
                    },
                    parseURL: function t(e) {
                      var r = a.exec(e);
                      return r
                        ? {
                            scheme: r[1] || '',
                            netLoc: r[2] || '',
                            path: r[3] || '',
                            params: r[4] || '',
                            query: r[5] || '',
                            fragment: r[6] || ''
                          }
                        : null;
                    },
                    normalizePath: function t(e) {
                      for (
                        e = e
                          .split('')
                          .reverse()
                          .join('')
                          .replace(n, '');
                        e.length !== (e = e.replace(o, '')).length;

                      );
                      return e
                        .split('')
                        .reverse()
                        .join('');
                    },
                    buildURLFromParts: function t(e) {
                      return (
                        e.scheme +
                        e.netLoc +
                        e.path +
                        e.params +
                        e.query +
                        e.fragment
                      );
                    }
                  };
                e.exports = i;
              })();
            },
            './node_modules/webworkify-webpack/index.js': function r(e, t, a) {
              function n(e) {
                function t(r) {
                  if (a[r]) return a[r].exports;
                  var n = (a[r] = { i: r, l: !1, exports: {} });
                  return (
                    e[r].call(n.exports, n, n.exports, t), (n.l = !0), n.exports
                  );
                }
                var a = {};
                (t.m = e),
                  (t.c = a),
                  (t.i = function(e) {
                    return e;
                  }),
                  (t.d = function(e, a, r) {
                    t.o(e, a) ||
                      Object.defineProperty(e, a, {
                        configurable: !1,
                        enumerable: !0,
                        get: r
                      });
                  }),
                  (t.r = function(e) {
                    Object.defineProperty(e, '__esModule', { value: !0 });
                  }),
                  (t.n = function(e) {
                    var a =
                      e && e.__esModule
                        ? function t() {
                            return e['default'];
                          }
                        : function t() {
                            return e;
                          };
                    return t.d(a, 'a', a), a;
                  }),
                  (t.o = function(e, t) {
                    return Object.prototype.hasOwnProperty.call(e, t);
                  }),
                  (t.p = '/'),
                  (t.oe = function(e) {
                    throw (console.error(e), e);
                  });
                var r = t((t.s = ENTRY_MODULE));
                return r.default || r;
              }
              function o(e) {
                return (e + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
              }
              function d(e) {
                return !isNaN(1 * e);
              }
              function s(e, t, r) {
                var n = {};
                n[r] = [];
                var s = t.toString(),
                  l = s.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
                if (!l) return n;
                for (
                  var c = l[1],
                    u = new RegExp(
                      '(\\\\n|\\W)' +
                        o(c) +
                        '\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)',
                      'g'
                    ),
                    p;
                  (p = u.exec(s));

                )
                  'dll-reference' !== p[3] && n[r].push(p[3]);
                for (
                  u = new RegExp(
                    '\\(' +
                      o(c) +
                      '\\("(dll-reference\\s([\\.|\\-|\\+|\\w|/|@]+))"\\)\\)\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)',
                    'g'
                  );
                  (p = u.exec(s));

                )
                  e[p[2]] || (n[r].push(p[1]), (e[p[2]] = a(p[1]).m)),
                    (n[p[2]] = n[p[2]] || []),
                    n[p[2]].push(p[4]);
                for (var g = Object.keys(n), f = 0; f < g.length; f++)
                  for (var m = 0; m < n[g[f]].length; m++)
                    d(n[g[f]][m]) && (n[g[f]][m] = 1 * n[g[f]][m]);
                return n;
              }
              function l(e) {
                var t = Object.keys(e);
                return t.reduce(function(t, a) {
                  return t || 0 < e[a].length;
                }, !1);
              }
              function c(e, t) {
                for (
                  var a = { main: [t] }, r = { main: [] }, n = { main: {} };
                  l(a);

                )
                  for (var o = Object.keys(a), d = 0; d < o.length; d++) {
                    var c = o[d],
                      u = a[c],
                      p = u.pop();
                    if (((n[c] = n[c] || {}), !n[c][p] && e[c][p])) {
                      (n[c][p] = !0), (r[c] = r[c] || []), r[c].push(p);
                      for (
                        var g = s(e, e[c][p], c), f = Object.keys(g), m = 0;
                        m < f.length;
                        m++
                      )
                        (a[f[m]] = a[f[m]] || []),
                          (a[f[m]] = a[f[m]].concat(g[f[m]]));
                    }
                  }
                return r;
              }
              var u = '[\\.|\\-|\\+|\\w|/|@]+',
                p =
                  '\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)';
              e.exports = function(e, t) {
                t = t || {};
                var r = { main: a.m },
                  o = t.all ? { main: Object.keys(r.main) } : c(r, e),
                  i = '';
                Object.keys(o)
                  .filter(function(e) {
                    return 'main' !== e;
                  })
                  .forEach(function(e) {
                    for (var t = 0; o[e][t]; ) t++;
                    o[e].push(t),
                      (r[e][t] =
                        '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'),
                      (i =
                        i +
                        'var ' +
                        e +
                        ' = (' +
                        n
                          .toString()
                          .replace('ENTRY_MODULE', JSON.stringify(t)) +
                        ')({' +
                        o[e]
                          .map(function(t) {
                            return (
                              '' + JSON.stringify(t) + ': ' + r[e][t].toString()
                            );
                          })
                          .join(',') +
                        '});\n');
                  }),
                  (i =
                    i +
                    'new ((' +
                    n.toString().replace('ENTRY_MODULE', JSON.stringify(e)) +
                    ')({' +
                    o.main
                      .map(function(e) {
                        return (
                          '' + JSON.stringify(e) + ': ' + r.main[e].toString()
                        );
                      })
                      .join(',') +
                    '}))(self);');
                var d = new window.Blob([i], { type: 'text/javascript' });
                if (t.bare) return d;
                var s =
                    window.URL ||
                    window.webkitURL ||
                    window.mozURL ||
                    window.msURL,
                  l = s.createObjectURL(d),
                  u = new window.Worker(l);
                return (u.objectURL = l), u;
              };
            },
            './src/crypt/decrypter.js': function r(e, t, a) {
              function n(e) {
                var t = e.byteLength,
                  a = t && new DataView(e).getUint8(t - 1);
                return a ? e.slice(0, t - a) : e;
              }
              a.r(t);
              var o = (function() {
                  function e(e, t) {
                    (this.subtle = e), (this.aesIV = t);
                  }
                  var t = e.prototype;
                  return (
                    (t.decrypt = function a(e, t) {
                      return this.subtle.decrypt(
                        { name: 'AES-CBC', iv: this.aesIV },
                        t,
                        e
                      );
                    }),
                    e
                  );
                })(),
                i = (function() {
                  function e(e, t) {
                    (this.subtle = e), (this.key = t);
                  }
                  var t = e.prototype;
                  return (
                    (t.expandKey = function e() {
                      return this.subtle.importKey(
                        'raw',
                        this.key,
                        { name: 'AES-CBC' },
                        !1,
                        ['encrypt', 'decrypt']
                      );
                    }),
                    e
                  );
                })(),
                d = i,
                s = (function() {
                  function e() {
                    (this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54]),
                      (this.subMix = [
                        new Uint32Array(256),
                        new Uint32Array(256),
                        new Uint32Array(256),
                        new Uint32Array(256)
                      ]),
                      (this.invSubMix = [
                        new Uint32Array(256),
                        new Uint32Array(256),
                        new Uint32Array(256),
                        new Uint32Array(256)
                      ]),
                      (this.sBox = new Uint32Array(256)),
                      (this.invSBox = new Uint32Array(256)),
                      (this.key = new Uint32Array(0)),
                      this.initTable();
                  }
                  var t = e.prototype;
                  return (
                    (t.uint8ArrayToUint32Array_ = function t(e) {
                      for (
                        var a = new DataView(e), r = new Uint32Array(4), n = 0;
                        4 > n;
                        n++
                      )
                        r[n] = a.getUint32(4 * n);
                      return r;
                    }),
                    (t.initTable = function e() {
                      var a = this.sBox,
                        r = this.invSBox,
                        n = this.subMix,
                        o = n[0],
                        s = n[1],
                        l = n[2],
                        c = n[3],
                        u = this.invSubMix,
                        p = u[0],
                        g = u[1],
                        f = u[2],
                        m = u[3],
                        y = new Uint32Array(256),
                        d = 0,
                        h = 0,
                        E = 0;
                      for (E = 0; 256 > E; E++)
                        y[E] = 128 > E ? E << 1 : 283 ^ (E << 1);
                      for (E = 0; 256 > E; E++) {
                        var T = h ^ (h << 1) ^ (h << 2) ^ (h << 3) ^ (h << 4);
                        (T = 99 ^ ((T >>> 8) ^ (255 & T))),
                          (a[d] = T),
                          (r[T] = d);
                        var v = y[d],
                          S = y[v],
                          b = y[S],
                          _ = (257 * y[T]) ^ (16843008 * T);
                        (o[d] = (_ << 24) | (_ >>> 8)),
                          (s[d] = (_ << 16) | (_ >>> 16)),
                          (l[d] = (_ << 8) | (_ >>> 24)),
                          (c[d] = _),
                          (_ =
                            (16843009 * b) ^
                            (65537 * S) ^
                            (257 * v) ^
                            (16843008 * d)),
                          (p[T] = (_ << 24) | (_ >>> 8)),
                          (g[T] = (_ << 16) | (_ >>> 16)),
                          (f[T] = (_ << 8) | (_ >>> 24)),
                          (m[T] = _),
                          d
                            ? ((d = v ^ y[y[y[b ^ v]]]), (h ^= y[y[h]]))
                            : (d = h = 1);
                      }
                    }),
                    (t.expandKey = function a(e) {
                      for (
                        var r = this.uint8ArrayToUint32Array_(e), n = !0, o = 0;
                        o < r.length && n;

                      )
                        (n = r[o] === this.key[o]), o++;
                      if (!n) {
                        this.key = r;
                        var i = (this.keySize = r.length);
                        if (4 !== i && 6 !== i && 8 !== i)
                          throw new Error('Invalid aes key size=' + i);
                        var d = (this.ksRows = 4 * (i + 6 + 1)),
                          s = (this.keySchedule = new Uint32Array(d)),
                          l = (this.invKeySchedule = new Uint32Array(d)),
                          c = this.sBox,
                          u = this.rcon,
                          p = this.invSubMix,
                          g = p[0],
                          f = p[1],
                          m = p[2],
                          y = p[3],
                          h,
                          E,
                          T,
                          v;
                        for (h = 0; h < d; h++) {
                          if (h < i) {
                            T = s[h] = r[h];
                            continue;
                          }
                          (v = T),
                            0 == h % i
                              ? ((v = (v << 8) | (v >>> 24)),
                                (v =
                                  (c[v >>> 24] << 24) |
                                  (c[255 & (v >>> 16)] << 16) |
                                  (c[255 & (v >>> 8)] << 8) |
                                  c[255 & v]),
                                (v ^= u[0 | (h / i)] << 24))
                              : 6 < i &&
                                4 == h % i &&
                                (v =
                                  (c[v >>> 24] << 24) |
                                  (c[255 & (v >>> 16)] << 16) |
                                  (c[255 & (v >>> 8)] << 8) |
                                  c[255 & v]),
                            (s[h] = T = (s[h - i] ^ v) >>> 0);
                        }
                        for (E = 0; E < d; E++)
                          (h = d - E),
                            (v = 3 & E ? s[h] : s[h - 4]),
                            (l[E] =
                              4 > E || 4 >= h
                                ? v
                                : g[c[v >>> 24]] ^
                                  f[c[255 & (v >>> 16)]] ^
                                  m[c[255 & (v >>> 8)]] ^
                                  y[c[255 & v]]),
                            (l[E] >>>= 0);
                      }
                    }),
                    (t.networkToHostOrderSwap = function t(e) {
                      return (
                        (e << 24) |
                        ((65280 & e) << 8) |
                        ((16711680 & e) >> 8) |
                        (e >>> 24)
                      );
                    }),
                    (t.decrypt = function o(e, t, a, r) {
                      for (
                        var d = this.keySize + 6,
                          s = this.invKeySchedule,
                          l = this.invSBox,
                          c = this.invSubMix,
                          u = c[0],
                          p = c[1],
                          g = c[2],
                          f = c[3],
                          m = this.uint8ArrayToUint32Array_(a),
                          y = m[0],
                          h = m[1],
                          E = m[2],
                          T = m[3],
                          v = new Int32Array(e),
                          S = new Int32Array(v.length),
                          b = this.networkToHostOrderSwap,
                          _,
                          R,
                          A,
                          k,
                          D,
                          L,
                          C,
                          P,
                          I,
                          N,
                          x,
                          O,
                          F,
                          w;
                        t < v.length;

                      ) {
                        for (
                          I = b(v[t]),
                            N = b(v[t + 1]),
                            x = b(v[t + 2]),
                            O = b(v[t + 3]),
                            D = I ^ s[0],
                            L = O ^ s[1],
                            C = x ^ s[2],
                            P = N ^ s[3],
                            F = 4,
                            w = 1;
                          w < d;
                          w++
                        )
                          (_ =
                            u[D >>> 24] ^
                            p[255 & (L >> 16)] ^
                            g[255 & (C >> 8)] ^
                            f[255 & P] ^
                            s[F]),
                            (R =
                              u[L >>> 24] ^
                              p[255 & (C >> 16)] ^
                              g[255 & (P >> 8)] ^
                              f[255 & D] ^
                              s[F + 1]),
                            (A =
                              u[C >>> 24] ^
                              p[255 & (P >> 16)] ^
                              g[255 & (D >> 8)] ^
                              f[255 & L] ^
                              s[F + 2]),
                            (k =
                              u[P >>> 24] ^
                              p[255 & (D >> 16)] ^
                              g[255 & (L >> 8)] ^
                              f[255 & C] ^
                              s[F + 3]),
                            (D = _),
                            (L = R),
                            (C = A),
                            (P = k),
                            (F += 4);
                        (_ =
                          (l[D >>> 24] << 24) ^
                          (l[255 & (L >> 16)] << 16) ^
                          (l[255 & (C >> 8)] << 8) ^
                          l[255 & P] ^
                          s[F]),
                          (R =
                            (l[L >>> 24] << 24) ^
                            (l[255 & (C >> 16)] << 16) ^
                            (l[255 & (P >> 8)] << 8) ^
                            l[255 & D] ^
                            s[F + 1]),
                          (A =
                            (l[C >>> 24] << 24) ^
                            (l[255 & (P >> 16)] << 16) ^
                            (l[255 & (D >> 8)] << 8) ^
                            l[255 & L] ^
                            s[F + 2]),
                          (k =
                            (l[P >>> 24] << 24) ^
                            (l[255 & (D >> 16)] << 16) ^
                            (l[255 & (L >> 8)] << 8) ^
                            l[255 & C] ^
                            s[F + 3]),
                          (F += 3),
                          (S[t] = b(_ ^ y)),
                          (S[t + 1] = b(k ^ h)),
                          (S[t + 2] = b(A ^ E)),
                          (S[t + 3] = b(R ^ T)),
                          (y = I),
                          (h = N),
                          (E = x),
                          (T = O),
                          (t += 4);
                      }
                      return r ? n(S.buffer) : S.buffer;
                    }),
                    (t.destroy = function e() {
                      (this.key = void 0),
                        (this.keySize = void 0),
                        (this.ksRows = void 0),
                        (this.sBox = void 0),
                        (this.invSBox = void 0),
                        (this.subMix = void 0),
                        (this.invSubMix = void 0),
                        (this.keySchedule = void 0),
                        (this.invKeySchedule = void 0),
                        (this.rcon = void 0);
                    }),
                    e
                  );
                })(),
                l = s,
                c = a('./src/errors.ts'),
                u = a('./src/utils/logger.js'),
                p = a('./src/events.js'),
                g = a('./src/utils/get-self-scope.js'),
                f = Object(g.getSelfScope)(),
                m = (function() {
                  function e(e, t, a) {
                    var r = void 0 === a ? {} : a,
                      n = r.removePKCS7Padding,
                      o = void 0 === n || n;
                    if (
                      ((this.logEnabled = !0),
                      (this.observer = e),
                      (this.config = t),
                      (this.removePKCS7Padding = o),
                      o)
                    )
                      try {
                        var i = f.crypto;
                        i && (this.subtle = i.subtle || i.webkitSubtle);
                      } catch (t) {}
                    this.disableWebCrypto = !this.subtle;
                  }
                  var t = e.prototype;
                  return (
                    (t.isSync = function e() {
                      return (
                        this.disableWebCrypto && this.config.enableSoftwareAES
                      );
                    }),
                    (t.decrypt = function n(e, t, a, r) {
                      var i = this;
                      if (
                        this.disableWebCrypto &&
                        this.config.enableSoftwareAES
                      ) {
                        this.logEnabled &&
                          (u.logger.log('JS AES decrypt'),
                          (this.logEnabled = !1));
                        var s = this.decryptor;
                        s || (this.decryptor = s = new l()),
                          s.expandKey(t),
                          r(s.decrypt(e, 0, a, this.removePKCS7Padding));
                      } else {
                        this.logEnabled &&
                          (u.logger.log('WebCrypto AES decrypt'),
                          (this.logEnabled = !1));
                        var c = this.subtle;
                        this.key !== t &&
                          ((this.key = t), (this.fastAesKey = new d(c, t))),
                          this.fastAesKey
                            .expandKey()
                            .then(function(n) {
                              var d = new o(c, a);
                              d.decrypt(e, n)
                                .catch(function(n) {
                                  i.onWebCryptoError(n, e, t, a, r);
                                })
                                .then(function(e) {
                                  r(e);
                                });
                            })
                            .catch(function(n) {
                              i.onWebCryptoError(n, e, t, a, r);
                            });
                      }
                    }),
                    (t.onWebCryptoError = function o(e, t, a, r, n) {
                      this.config.enableSoftwareAES
                        ? (u.logger.log(
                            'WebCrypto Error, disable WebCrypto API'
                          ),
                          (this.disableWebCrypto = !0),
                          (this.logEnabled = !0),
                          this.decrypt(t, a, r, n))
                        : (u.logger.error('decrypting error : ' + e.message),
                          this.observer.trigger(p['default'].ERROR, {
                            type: c.ErrorTypes.MEDIA_ERROR,
                            details: c.ErrorDetails.FRAG_DECRYPT_ERROR,
                            fatal: !0,
                            reason: e.message
                          }));
                    }),
                    (t.destroy = function e() {
                      var t = this.decryptor;
                      t && (t.destroy(), (this.decryptor = void 0));
                    }),
                    e
                  );
                })(),
                y = (t['default'] = m);
            },
            './src/demux/demuxer-inline.js': function i(e, n, o) {
              var d = Math.ceil;
              function l(e, t, a, r) {
                var n = navigator.userAgent.toLowerCase(),
                  o = r,
                  i = [
                    96e3,
                    88200,
                    64e3,
                    48e3,
                    44100,
                    32e3,
                    24e3,
                    22050,
                    16e3,
                    12e3,
                    11025,
                    8e3,
                    7350
                  ],
                  d,
                  s,
                  l,
                  c,
                  u;
                return ((d = ((192 & t[a + 2]) >>> 6) + 1),
                (s = (60 & t[a + 2]) >>> 2),
                s > i.length - 1)
                  ? void e.trigger(k['default'].ERROR, {
                      type: D.ErrorTypes.MEDIA_ERROR,
                      details: D.ErrorDetails.FRAG_PARSING_ERROR,
                      fatal: !0,
                      reason: 'invalid ADTS sampling index:' + s
                    })
                  : ((c = (1 & t[a + 2]) << 2),
                    (c |= (192 & t[a + 3]) >>> 6),
                    P.logger.log(
                      'manifest codec:' +
                        r +
                        ',ADTS data:type:' +
                        d +
                        ',sampleingIndex:' +
                        s +
                        '[' +
                        i[s] +
                        'Hz],channelConfig:' +
                        c
                    ),
                    /firefox/i.test(n)
                      ? 6 <= s
                        ? ((d = 5), (u = [, , , ,]), (l = s - 3))
                        : ((d = 2), (u = [, ,]), (l = s))
                      : -1 === n.indexOf('android')
                      ? ((d = 5),
                        (u = [, , , ,]),
                        (r &&
                          (-1 !== r.indexOf('mp4a.40.29') ||
                            -1 !== r.indexOf('mp4a.40.5'))) ||
                        (!r && 6 <= s)
                          ? (l = s - 3)
                          : (((r &&
                              -1 !== r.indexOf('mp4a.40.2') &&
                              ((6 <= s && 1 === c) || /vivaldi/i.test(n))) ||
                              (!r && 1 === c)) &&
                              ((d = 2), (u = [, ,])),
                            (l = s)))
                      : ((d = 2), (u = [, ,]), (l = s)),
                    (u[0] = d << 3),
                    (u[0] |= (14 & s) >> 1),
                    (u[1] |= (1 & s) << 7),
                    (u[1] |= c << 3),
                    5 === d &&
                      ((u[1] |= (14 & l) >> 1),
                      (u[2] = (1 & l) << 7),
                      (u[2] |= 8),
                      (u[3] = 0)),
                    {
                      config: u,
                      samplerate: i[s],
                      channelCount: c,
                      codec: 'mp4a.40.' + d,
                      manifestCodec: o
                    });
              }
              function c(e, t) {
                return 255 === e[t] && 240 == (246 & e[t + 1]);
              }
              function p(e, t) {
                return 1 & e[t + 1] ? 7 : 9;
              }
              function g(e, t) {
                return (
                  ((3 & e[t + 3]) << 11) |
                  (e[t + 4] << 3) |
                  ((224 & e[t + 5]) >>> 5)
                );
              }
              function f(e, t) {
                return !!(t + 1 < e.length && c(e, t));
              }
              function m(e, t) {
                if (f(e, t)) {
                  var a = p(e, t);
                  if (t + a >= e.length) return !1;
                  var r = g(e, t);
                  if (r <= a) return !1;
                  var n = t + r;
                  if (n === e.length || (n + 1 < e.length && c(e, n)))
                    return !0;
                }
                return !1;
              }
              function y(e, t, a, r, n) {
                if (!e.samplerate) {
                  var o = l(t, a, r, n);
                  (e.config = o.config),
                    (e.samplerate = o.samplerate),
                    (e.channelCount = o.channelCount),
                    (e.codec = o.codec),
                    (e.manifestCodec = o.manifestCodec),
                    P.logger.log(
                      'parsed codec:' +
                        e.codec +
                        ',rate:' +
                        o.samplerate +
                        ',nb channel:' +
                        o.channelCount
                    );
                }
              }
              function h(e) {
                return 92160000 / e;
              }
              function v(e, t, a, r, n) {
                var o = e.length,
                  i,
                  d,
                  s;
                return (
                  (i = p(e, t)),
                  (d = g(e, t)),
                  (d -= i),
                  0 < d && t + i + d <= o
                    ? ((s = a + r * n),
                      { headerLength: i, frameLength: d, stamp: s })
                    : void 0
                );
              }
              function S(e, t, a, r, n) {
                var o = h(e.samplerate),
                  i = v(t, a, r, n, o);
                if (i) {
                  var d = i.stamp,
                    s = i.headerLength,
                    l = i.frameLength,
                    c = { unit: t.subarray(a + s, a + s + l), pts: d, dts: d };
                  return e.samples.push(c), { sample: c, length: l + s };
                }
              }
              function b(e, t, a, r) {
                void 0 === a && (a = 1), void 0 === r && (r = !1);
                var n = e * t * a;
                return r ? E(n) : n;
              }
              function _(e, t) {
                return void 0 === t && (t = !1), b(e, 1e3, 1 / 90000, t);
              }
              function R(e, t) {
                return void 0 === t && (t = 1), b(e, 90000, 1 / t);
              }
              function A(e, t) {
                var a;
                if (void 0 === t) return e;
                for (
                  a = t < e ? -8589934592 : 8589934592;
                  4294967296 < r(e - t);

                )
                  e += a;
                return e;
              }
              o.r(n);
              var k = o('./src/events.js'),
                D = o('./src/errors.ts'),
                L = o('./src/crypt/decrypter.js'),
                C = o('./src/polyfills/number.js'),
                P = o('./src/utils/logger.js'),
                I = o('./src/utils/get-self-scope.js'),
                N = o('./src/demux/id3.js'),
                x = (function() {
                  function e(e, t, a) {
                    (this.observer = e), (this.config = a), (this.remuxer = t);
                  }
                  var t = e.prototype;
                  return (
                    (t.resetInitSegment = function n(e, t, a, r) {
                      this._audioTrack = {
                        container: 'audio/adts',
                        type: 'audio',
                        id: 0,
                        sequenceNumber: 0,
                        isAAC: !0,
                        samples: [],
                        len: 0,
                        manifestCodec: t,
                        duration: r,
                        inputTimeScale: 9e4
                      };
                    }),
                    (t.resetTimeStamp = function e() {}),
                    (e.probe = function t(e) {
                      if (!e) return !1;
                      for (
                        var a = N['default'].getID3Data(e, 0) || [],
                          r = a.length,
                          n = e.length;
                        r < n;
                        r++
                      )
                        if (m(e, r))
                          return P.logger.log('ADTS sync word found !'), !0;
                      return !1;
                    }),
                    (t.append = function n(e, t, a, r) {
                      for (
                        var o = this._audioTrack,
                          i = N['default'].getID3Data(e, 0) || [],
                          d = N['default'].getTimeStamp(i),
                          s = Object(C.isFiniteNumber)(d) ? 90 * d : 9e4 * t,
                          l = 0,
                          c = s,
                          u = e.length,
                          p = i.length,
                          g = [{ pts: c, dts: c, data: i }];
                        p < u - 1;

                      )
                        if (f(e, p) && p + 5 < u) {
                          y(o, this.observer, e, p, o.manifestCodec);
                          var m = S(o, e, p, s, l);
                          if (m) (p += m.length), (c = m.sample.pts), l++;
                          else {
                            P.logger.log('Unable to parse AAC frame');
                            break;
                          }
                        } else
                          N['default'].isHeader(e, p)
                            ? ((i = N['default'].getID3Data(e, p)),
                              g.push({ pts: c, dts: c, data: i }),
                              (p += i.length))
                            : p++;
                      this.remuxer.remux(
                        o,
                        { samples: [] },
                        { samples: g, inputTimeScale: 9e4 },
                        { samples: [] },
                        t,
                        a,
                        r
                      );
                    }),
                    (t.destroy = function e() {}),
                    e
                  );
                })(),
                O = x,
                F = o('./src/demux/mp4demuxer.js'),
                w = {
                  BitratesMap: [
                    32,
                    64,
                    96,
                    128,
                    160,
                    192,
                    224,
                    256,
                    288,
                    320,
                    352,
                    384,
                    416,
                    448,
                    32,
                    48,
                    56,
                    64,
                    80,
                    96,
                    112,
                    128,
                    160,
                    192,
                    224,
                    256,
                    320,
                    384,
                    32,
                    40,
                    48,
                    56,
                    64,
                    80,
                    96,
                    112,
                    128,
                    160,
                    192,
                    224,
                    256,
                    320,
                    32,
                    48,
                    56,
                    64,
                    80,
                    96,
                    112,
                    128,
                    144,
                    160,
                    176,
                    192,
                    224,
                    256,
                    8,
                    16,
                    24,
                    32,
                    40,
                    48,
                    56,
                    64,
                    80,
                    96,
                    112,
                    128,
                    144,
                    160
                  ],
                  SamplingRateMap: [
                    44100,
                    48e3,
                    32e3,
                    22050,
                    24e3,
                    16e3,
                    11025,
                    12e3,
                    8e3
                  ],
                  SamplesCoefficients: [
                    [0, 72, 144, 12],
                    [0, 0, 0, 0],
                    [0, 72, 144, 12],
                    [0, 144, 144, 12]
                  ],
                  BytesInSlot: [0, 1, 1, 4],
                  appendFrame: function o(e, t, a, r, n) {
                    if (!(a + 24 > t.length)) {
                      var i = this.parseHeader(t, a);
                      if (i && a + i.frameLength <= t.length) {
                        var d = (9e4 * i.samplesPerFrame) / i.sampleRate,
                          s = r + n * d,
                          l = {
                            unit: t.subarray(a, a + i.frameLength),
                            pts: s,
                            dts: s
                          };
                        return (
                          (e.config = []),
                          (e.channelCount = i.channelCount),
                          (e.samplerate = i.sampleRate),
                          e.samples.push(l),
                          { sample: l, length: i.frameLength }
                        );
                      }
                    }
                  },
                  parseHeader: function a(e, t) {
                    var r = 3 & (e[t + 1] >> 3),
                      n = 3 & (e[t + 1] >> 1),
                      o = 15 & (e[t + 2] >> 4),
                      i = 3 & (e[t + 2] >> 2),
                      d = 1 & (e[t + 2] >> 1);
                    if (1 != r && 0 !== o && 15 !== o && 3 !== i) {
                      var s = 3 === r ? 3 - n : 3 === n ? 3 : 4,
                        l = 1e3 * w.BitratesMap[14 * s + o - 1],
                        c = 3 === r ? 0 : 2 === r ? 1 : 2,
                        u = w.SamplingRateMap[3 * c + i],
                        p = 3 == e[t + 3] >> 6 ? 1 : 2,
                        g = w.SamplesCoefficients[r][n],
                        f = w.BytesInSlot[n],
                        m = 8 * g * f,
                        y = parseInt((g * l) / u + d, 10) * f;
                      return {
                        sampleRate: u,
                        channelCount: p,
                        frameLength: y,
                        samplesPerFrame: m
                      };
                    }
                  },
                  isHeaderPattern: function a(e, t) {
                    return (
                      255 === e[t] &&
                      224 == (224 & e[t + 1]) &&
                      0 != (6 & e[t + 1])
                    );
                  },
                  isHeader: function a(e, t) {
                    return !!(t + 1 < e.length && this.isHeaderPattern(e, t));
                  },
                  probe: function a(e, t) {
                    if (t + 1 < e.length && this.isHeaderPattern(e, t)) {
                      var r = 4,
                        n = this.parseHeader(e, t),
                        o = 4;
                      n && n.frameLength && (o = n.frameLength);
                      var i = t + o;
                      if (
                        i === e.length ||
                        (i + 1 < e.length && this.isHeaderPattern(e, i))
                      )
                        return !0;
                    }
                    return !1;
                  }
                },
                M = w,
                B = (function() {
                  function e(e) {
                    (this.data = e),
                      (this.bytesAvailable = e.byteLength),
                      (this.word = 0),
                      (this.bitsAvailable = 0);
                  }
                  var t = e.prototype;
                  return (
                    (t.loadWord = function e() {
                      var t = this.data,
                        a = this.bytesAvailable,
                        r = t.byteLength - a,
                        n = new Uint8Array(4),
                        o = u(4, a);
                      if (0 === o) throw new Error('no bytes available');
                      n.set(t.subarray(r, r + o)),
                        (this.word = new DataView(n.buffer).getUint32(0)),
                        (this.bitsAvailable = 8 * o),
                        (this.bytesAvailable -= o);
                    }),
                    (t.skipBits = function t(e) {
                      var a;
                      this.bitsAvailable > e
                        ? ((this.word <<= e), (this.bitsAvailable -= e))
                        : ((e -= this.bitsAvailable),
                          (a = e >> 3),
                          (e -= a >> 3),
                          (this.bytesAvailable -= a),
                          this.loadWord(),
                          (this.word <<= e),
                          (this.bitsAvailable -= e));
                    }),
                    (t.readBits = function t(e) {
                      var a = u(this.bitsAvailable, e),
                        r = this.word >>> (32 - a);
                      return (
                        32 < e &&
                          P.logger.error(
                            'Cannot read more than 32 bits at a time'
                          ),
                        (this.bitsAvailable -= a),
                        0 < this.bitsAvailable
                          ? (this.word <<= a)
                          : 0 < this.bytesAvailable && this.loadWord(),
                        (a = e - a),
                        0 < a && this.bitsAvailable
                          ? (r << a) | this.readBits(a)
                          : r
                      );
                    }),
                    (t.skipLZ = function e() {
                      var t;
                      for (t = 0; t < this.bitsAvailable; ++t)
                        if (0 != (this.word & (2147483648 >>> t)))
                          return (
                            (this.word <<= t), (this.bitsAvailable -= t), t
                          );
                      return this.loadWord(), t + this.skipLZ();
                    }),
                    (t.skipUEG = function e() {
                      this.skipBits(1 + this.skipLZ());
                    }),
                    (t.skipEG = function e() {
                      this.skipBits(1 + this.skipLZ());
                    }),
                    (t.readUEG = function e() {
                      var t = this.skipLZ();
                      return this.readBits(t + 1) - 1;
                    }),
                    (t.readEG = function e() {
                      var t = this.readUEG();
                      return 1 & t ? (1 + t) >>> 1 : -1 * (t >>> 1);
                    }),
                    (t.readBoolean = function e() {
                      return 1 === this.readBits(1);
                    }),
                    (t.readUByte = function e() {
                      return this.readBits(8);
                    }),
                    (t.readUShort = function e() {
                      return this.readBits(16);
                    }),
                    (t.readUInt = function e() {
                      return this.readBits(32);
                    }),
                    (t.skipScalingList = function t(e) {
                      var a = 8,
                        r = 8,
                        n,
                        o;
                      for (n = 0; n < e; n++)
                        0 !== r &&
                          ((o = this.readEG()), (r = (a + o + 256) % 256)),
                          (a = 0 === r ? a : r);
                    }),
                    (t.readSPS = function e() {
                      var t = 0,
                        a = 0,
                        r = 0,
                        n = 0,
                        o = this.readUByte.bind(this),
                        s = this.readBits.bind(this),
                        l = this.readUEG.bind(this),
                        c = this.readBoolean.bind(this),
                        u = this.skipBits.bind(this),
                        p = this.skipEG.bind(this),
                        g = this.skipUEG.bind(this),
                        f = this.skipScalingList.bind(this),
                        m,
                        y,
                        h,
                        E,
                        T,
                        v,
                        S,
                        b,
                        _;
                      if (
                        (o(),
                        (m = o()),
                        (y = s(5)),
                        u(3),
                        (h = o()),
                        g(),
                        100 === m ||
                          110 === m ||
                          122 === m ||
                          244 === m ||
                          44 === m ||
                          83 === m ||
                          86 === m ||
                          118 === m ||
                          128 === m)
                      ) {
                        var R = l();
                        if ((3 === R && u(1), g(), g(), u(1), c()))
                          for (b = 3 === R ? 12 : 8, _ = 0; _ < b; _++)
                            c() && (6 > _ ? f(16) : f(64));
                      }
                      g();
                      var A = l();
                      if (0 === A) l();
                      else if (1 === A)
                        for (u(1), p(), p(), E = l(), _ = 0; _ < E; _++) p();
                      g(),
                        u(1),
                        (T = l()),
                        (v = l()),
                        (S = s(1)),
                        0 === S && u(1),
                        u(1),
                        c() && ((t = l()), (a = l()), (r = l()), (n = l()));
                      var k = [1, 1];
                      if (c() && c()) {
                        var D = o();
                        switch (D) {
                          case 1:
                            k = [1, 1];
                            break;
                          case 2:
                            k = [12, 11];
                            break;
                          case 3:
                            k = [10, 11];
                            break;
                          case 4:
                            k = [16, 11];
                            break;
                          case 5:
                            k = [40, 33];
                            break;
                          case 6:
                            k = [24, 11];
                            break;
                          case 7:
                            k = [20, 11];
                            break;
                          case 8:
                            k = [32, 11];
                            break;
                          case 9:
                            k = [80, 33];
                            break;
                          case 10:
                            k = [18, 11];
                            break;
                          case 11:
                            k = [15, 11];
                            break;
                          case 12:
                            k = [64, 33];
                            break;
                          case 13:
                            k = [160, 99];
                            break;
                          case 14:
                            k = [4, 3];
                            break;
                          case 15:
                            k = [3, 2];
                            break;
                          case 16:
                            k = [2, 1];
                            break;
                          case 255: {
                            k = [(o() << 8) | o(), (o() << 8) | o()];
                            break;
                          }
                        }
                      }
                      return {
                        width: d(16 * (T + 1) - 2 * t - 2 * a),
                        height:
                          16 * ((2 - S) * (v + 1)) - (S ? 2 : 4) * (r + n),
                        pixelRatio: k
                      };
                    }),
                    (t.readSliceType = function e() {
                      return this.readUByte(), this.readUEG(), this.readUEG();
                    }),
                    e
                  );
                })(),
                U = B,
                G = (function() {
                  function e(e, t, a, r) {
                    (this.decryptdata = a),
                      (this.discardEPB = r),
                      (this.decrypter = new L['default'](e, t, {
                        removePKCS7Padding: !1
                      }));
                  }
                  var t = e.prototype;
                  return (
                    (t.decryptBuffer = function a(e, t) {
                      this.decrypter.decrypt(
                        e,
                        this.decryptdata.key.buffer,
                        this.decryptdata.iv.buffer,
                        t
                      );
                    }),
                    (t.decryptAacSample = function n(e, t, a, r) {
                      var o = e[t].unit,
                        i = o.subarray(16, o.length - (o.length % 16)),
                        d = i.buffer.slice(
                          i.byteOffset,
                          i.byteOffset + i.length
                        ),
                        s = this;
                      this.decryptBuffer(d, function(n) {
                        (n = new Uint8Array(n)),
                          o.set(n, 16),
                          r || s.decryptAacSamples(e, t + 1, a);
                      });
                    }),
                    (t.decryptAacSamples = function r(e, t, a) {
                      for (; ; t++) {
                        if (t >= e.length) return void a();
                        if (!(32 > e[t].unit.length)) {
                          var n = this.decrypter.isSync();
                          if ((this.decryptAacSample(e, t, a, n), !n)) return;
                        }
                      }
                    }),
                    (t.getAvcEncryptedData = function t(e) {
                      for (
                        var a = 16 * T((e.length - 48) / 160) + 16,
                          r = new Int8Array(a),
                          n = 0,
                          o = 32;
                        o <= e.length - 16;
                        o += 160, n += 16
                      )
                        r.set(e.subarray(o, o + 16), n);
                      return r;
                    }),
                    (t.getAvcDecryptedUnit = function a(e, t) {
                      t = new Uint8Array(t);
                      for (
                        var r = 0, n = 32;
                        n <= e.length - 16;
                        n += 160, r += 16
                      )
                        e.set(t.subarray(r, r + 16), n);
                      return e;
                    }),
                    (t.decryptAvcSample = function i(e, t, a, r, n, o) {
                      var d = this.discardEPB(n.data),
                        s = this.getAvcEncryptedData(d),
                        l = this;
                      this.decryptBuffer(s.buffer, function(i) {
                        (n.data = l.getAvcDecryptedUnit(d, i)),
                          o || l.decryptAvcSamples(e, t, a + 1, r);
                      });
                    }),
                    (t.decryptAvcSamples = function n(e, t, a, r) {
                      for (; ; t++, a = 0) {
                        if (t >= e.length) return void r();
                        for (var o = e[t].units; ; a++) {
                          if (a >= o.length) break;
                          var i = o[a];
                          if (
                            !(
                              48 >= i.data.length ||
                              (1 !== i.type && 5 !== i.type)
                            )
                          ) {
                            var d = this.decrypter.isSync();
                            if ((this.decryptAvcSample(e, t, a, r, i, d), !d))
                              return;
                          }
                        }
                      }
                    }),
                    e
                  );
                })(),
                K = G,
                H = { video: 1, audio: 2, id3: 3, text: 4 },
                V = (function() {
                  function e(e, t, a, r) {
                    (this.observer = e),
                      (this.config = a),
                      (this.typeSupported = r),
                      (this.remuxer = t),
                      (this.sampleAes = null),
                      (this.pmtUnknownTypes = {});
                  }
                  var t = e.prototype;
                  return (
                    (t.setDecryptData = function t(e) {
                      this.sampleAes =
                        null != e && null != e.key && 'SAMPLE-AES' === e.method
                          ? new K(
                              this.observer,
                              this.config,
                              e,
                              this.discardEPB
                            )
                          : null;
                    }),
                    (e.probe = function a(t) {
                      var r = e._syncOffset(t);
                      return (
                        !(0 > r) &&
                        (r &&
                          P.logger.warn(
                            'MPEG2-TS detected but first sync word found @ offset ' +
                              r +
                              ', junk ahead ?'
                          ),
                        !0)
                      );
                    }),
                    (e._syncOffset = function t(e) {
                      for (var a = u(1e3, e.length - 564), r = 0; r < a; ) {
                        if (
                          71 === e[r] &&
                          71 === e[r + 188] &&
                          71 === e[r + 376]
                        )
                          return r;
                        r++;
                      }
                      return -1;
                    }),
                    (e.createTrack = function a(e, t) {
                      return {
                        container:
                          'video' === e || 'audio' === e
                            ? 'video/mp2t'
                            : void 0,
                        type: e,
                        id: H[e],
                        pid: -1,
                        inputTimeScale: 9e4,
                        sequenceNumber: 0,
                        samples: [],
                        dropped: 'video' === e ? 0 : void 0,
                        isAAC: 'audio' === e || void 0,
                        duration: 'audio' === e ? t : void 0
                      };
                    }),
                    (t.resetInitSegment = function o(t, a, r, n) {
                      (this.pmtParsed = !1),
                        (this._pmtId = -1),
                        (this.pmtUnknownTypes = {}),
                        (this._avcTrack = e.createTrack('video', n)),
                        (this._audioTrack = e.createTrack('audio', n)),
                        (this._id3Track = e.createTrack('id3', n)),
                        (this._txtTrack = e.createTrack('text', n)),
                        (this.aacOverFlow = null),
                        (this.aacLastPTS = null),
                        (this.avcSample = null),
                        (this.audioCodec = a),
                        (this.videoCodec = r),
                        (this._duration = n);
                    }),
                    (t.resetTimeStamp = function e() {}),
                    (t.append = function o(t, a, r, n) {
                      var i = t.length,
                        d = !1,
                        s,
                        l,
                        c,
                        u,
                        p,
                        g;
                      (this.pmtUnknownTypes = {}), (this.contiguous = r);
                      var f = this.pmtParsed,
                        m = this._avcTrack,
                        y = this._audioTrack,
                        h = this._id3Track,
                        E = m.pid,
                        T = y.pid,
                        v = h.pid,
                        S = this._pmtId,
                        b = m.pesData,
                        _ = y.pesData,
                        R = h.pesData,
                        A = this._parsePAT,
                        L = this._parsePMT.bind(this),
                        C = this._parsePES,
                        I = this._parseAVCPES.bind(this),
                        N = this._parseAACPES.bind(this),
                        x = this._parseMPEGPES.bind(this),
                        O = this._parseID3PES.bind(this),
                        F = e._syncOffset(t);
                      for (i -= (i + F) % 188, s = F; s < i; s += 188)
                        if (71 === t[s]) {
                          if (
                            ((l = !!(64 & t[s + 1])),
                            (c = ((31 & t[s + 1]) << 8) + t[s + 2]),
                            (u = (48 & t[s + 3]) >> 4),
                            !(1 < u))
                          )
                            p = s + 4;
                          else if (((p = s + 5 + t[s + 4]), p === s + 188))
                            continue;
                          switch (c) {
                            case E:
                              l &&
                                (b && (g = C(b)) && I(g, !1),
                                (b = { data: [], size: 0 })),
                                b &&
                                  (b.data.push(t.subarray(p, s + 188)),
                                  (b.size += s + 188 - p));
                              break;
                            case T:
                              l &&
                                (_ && (g = C(_)) && (y.isAAC ? N(g) : x(g)),
                                (_ = { data: [], size: 0 })),
                                _ &&
                                  (_.data.push(t.subarray(p, s + 188)),
                                  (_.size += s + 188 - p));
                              break;
                            case v:
                              l &&
                                (R && (g = C(R)) && O(g),
                                (R = { data: [], size: 0 })),
                                R &&
                                  (R.data.push(t.subarray(p, s + 188)),
                                  (R.size += s + 188 - p));
                              break;
                            case 0:
                              l && (p += t[p] + 1), (S = this._pmtId = A(t, p));
                              break;
                            case S:
                              l && (p += t[p] + 1);
                              var w = L(
                                t,
                                p,
                                !0 === this.typeSupported.mpeg ||
                                  !0 === this.typeSupported.mp3,
                                null != this.sampleAes
                              );
                              (E = w.avc),
                                0 < E && (m.pid = E),
                                (T = w.audio),
                                0 < T && ((y.pid = T), (y.isAAC = w.isAAC)),
                                (v = w.id3),
                                0 < v && (h.pid = v),
                                d &&
                                  !f &&
                                  (P.logger.log('reparse from beginning'),
                                  (d = !1),
                                  (s = F - 188)),
                                (f = this.pmtParsed = !0);
                              break;
                            case 17:
                            case 8191:
                              break;
                            default:
                              d = !0;
                          }
                        } else
                          this.observer.trigger(k['default'].ERROR, {
                            type: D.ErrorTypes.MEDIA_ERROR,
                            details: D.ErrorDetails.FRAG_PARSING_ERROR,
                            fatal: !1,
                            reason: 'TS packet did not start with 0x47'
                          });
                      b && (g = C(b))
                        ? (I(g, !0), (m.pesData = null))
                        : (m.pesData = b),
                        _ && (g = C(_))
                          ? (y.isAAC ? N(g) : x(g), (y.pesData = null))
                          : (_ &&
                              _.size &&
                              P.logger.log(
                                'last AAC PES packet truncated,might overlap between fragments'
                              ),
                            (y.pesData = _)),
                        R && (g = C(R))
                          ? (O(g), (h.pesData = null))
                          : (h.pesData = R),
                        null == this.sampleAes
                          ? this.remuxer.remux(y, m, h, this._txtTrack, a, r, n)
                          : this.decryptAndRemux(
                              y,
                              m,
                              h,
                              this._txtTrack,
                              a,
                              r,
                              n
                            );
                    }),
                    (t.decryptAndRemux = function d(e, t, a, r, n, o, i) {
                      if (e.samples && e.isAAC) {
                        var s = this;
                        this.sampleAes.decryptAacSamples(
                          e.samples,
                          0,
                          function() {
                            s.decryptAndRemuxAvc(e, t, a, r, n, o, i);
                          }
                        );
                      } else this.decryptAndRemuxAvc(e, t, a, r, n, o, i);
                    }),
                    (t.decryptAndRemuxAvc = function d(e, t, a, r, n, o, i) {
                      if (t.samples) {
                        var s = this;
                        this.sampleAes.decryptAvcSamples(
                          t.samples,
                          0,
                          0,
                          function() {
                            s.remuxer.remux(e, t, a, r, n, o, i);
                          }
                        );
                      } else this.remuxer.remux(e, t, a, r, n, o, i);
                    }),
                    (t.destroy = function e() {
                      (this._initPTS = this._initDTS = void 0),
                        (this._duration = 0);
                    }),
                    (t._parsePAT = function a(e, t) {
                      return ((31 & e[t + 10]) << 8) | e[t + 11];
                    }),
                    (t._trackUnknownPmt = function r(e, t, a) {
                      var n = this.pmtUnknownTypes[e] || 0;
                      return (
                        0 === n &&
                          ((this.pmtUnknownTypes[e] = 0), t.call(P.logger, a)),
                        this.pmtUnknownTypes[e]++,
                        n
                      );
                    }),
                    (t._parsePMT = function n(e, t, a, r) {
                      var o = { audio: -1, avc: -1, id3: -1, isAAC: !0 },
                        i,
                        d,
                        s,
                        l;
                      for (
                        i = ((15 & e[t + 1]) << 8) | e[t + 2],
                          d = t + 3 + i - 4,
                          s = ((15 & e[t + 10]) << 8) | e[t + 11],
                          t += 12 + s;
                        t < d;

                      ) {
                        switch (
                          ((l = ((31 & e[t + 1]) << 8) | e[t + 2]), e[t])
                        ) {
                          case 207:
                            if (!r) {
                              this._trackUnknownPmt(
                                e[t],
                                P.logger.warn,
                                'ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream'
                              );
                              break;
                            }
                          case 15:
                            -1 === o.audio && (o.audio = l);
                            break;
                          case 21:
                            -1 === o.id3 && (o.id3 = l);
                            break;
                          case 219:
                            if (!r) {
                              this._trackUnknownPmt(
                                e[t],
                                P.logger.warn,
                                'H.264 with AES-128-CBC slice encryption found in unencrypted stream'
                              );
                              break;
                            }
                          case 27:
                            -1 === o.avc && (o.avc = l);
                            break;
                          case 3:
                          case 4:
                            a
                              ? -1 === o.audio &&
                                ((o.audio = l), (o.isAAC = !1))
                              : this._trackUnknownPmt(
                                  e[t],
                                  P.logger.warn,
                                  'MPEG audio found, not supported in this browser'
                                );
                            break;
                          case 36:
                            this._trackUnknownPmt(
                              e[t],
                              P.logger.warn,
                              'Unsupported HEVC stream type found'
                            );
                            break;
                          default:
                            this._trackUnknownPmt(
                              e[t],
                              P.logger.log,
                              'Unknown stream type:' + e[t]
                            );
                        }
                        t += (((15 & e[t + 3]) << 8) | e[t + 4]) + 5;
                      }
                      return o;
                    }),
                    (t._parsePES = function t(e) {
                      var a = 0,
                        r = e.data,
                        n,
                        o,
                        d,
                        s,
                        l,
                        c,
                        u,
                        p,
                        g;
                      if (!e || 0 === e.size) return null;
                      for (; 19 > r[0].length && 1 < r.length; ) {
                        var f = new Uint8Array(r[0].length + r[1].length);
                        f.set(r[0]),
                          f.set(r[1], r[0].length),
                          (r[0] = f),
                          r.splice(1, 1);
                      }
                      if (
                        ((n = r[0]),
                        (d = (n[0] << 16) + (n[1] << 8) + n[2]),
                        1 === d)
                      ) {
                        if (((s = (n[4] << 8) + n[5]), s && s > e.size - 6))
                          return null;
                        if (
                          ((o = n[7]),
                          192 & o &&
                            ((u =
                              536870912 * (14 & n[9]) +
                              4194304 * (255 & n[10]) +
                              16384 * (254 & n[11]) +
                              128 * (255 & n[12]) +
                              (254 & n[13]) / 2),
                            64 & o
                              ? ((p =
                                  536870912 * (14 & n[14]) +
                                  4194304 * (255 & n[15]) +
                                  16384 * (254 & n[16]) +
                                  128 * (255 & n[17]) +
                                  (254 & n[18]) / 2),
                                5400000 < u - p &&
                                  (P.logger.warn(
                                    E((u - p) / 9e4) +
                                      's delta between PTS and DTS, align them'
                                  ),
                                  (u = p)))
                              : (p = u)),
                          (l = n[8]),
                          (g = l + 9),
                          e.size <= g)
                        )
                          return null;
                        (e.size -= g), (c = new Uint8Array(e.size));
                        for (var m = 0, y = r.length; m < y; m++) {
                          n = r[m];
                          var h = n.byteLength;
                          if (g)
                            if (g > h) {
                              g -= h;
                              continue;
                            } else (n = n.subarray(g)), (h -= g), (g = 0);
                          c.set(n, a), (a += h);
                        }
                        return (
                          s && (s -= l + 3), { data: c, pts: u, dts: p, len: s }
                        );
                      }
                      return null;
                    }),
                    (t.pushAccesUnit = function a(e, t) {
                      if (e.units.length && e.frame) {
                        var r = t.samples,
                          n = r.length;
                        if (isNaN(e.pts))
                          if (n) {
                            var o = r[n - 1];
                            (e.pts = o.pts), (e.dts = o.dts);
                          } else return void t.dropped++;
                        !this.config.forceKeyFrameOnDiscontinuity ||
                        !0 === e.key ||
                        (t.sps && (n || this.contiguous))
                          ? ((e.id = n), r.push(e))
                          : t.dropped++;
                      }
                      e.debug.length &&
                        P.logger.log(e.pts + '/' + e.dts + ':' + e.debug);
                    }),
                    (t._parseAVCPES = function a(e, t) {
                      var r = this,
                        n = this._avcTrack,
                        o = this._parseAVCNALu(e.data),
                        d = this.avcSample,
                        s = !1,
                        l = this.pushAccesUnit.bind(this),
                        c = function n(e, t, a, r) {
                          return {
                            key: e,
                            pts: t,
                            dts: a,
                            units: [],
                            debug: r
                          };
                        },
                        u,
                        p,
                        g;
                      (e.data = null),
                        d &&
                          o.length &&
                          !n.audFound &&
                          (l(d, n),
                          (d = this.avcSample = c(!1, e.pts, e.dts, ''))),
                        o.forEach(function(t) {
                          switch (t.type) {
                            case 1:
                              (p = !0),
                                d ||
                                  (d = r.avcSample = c(!0, e.pts, e.dts, '')),
                                (d.frame = !0);
                              var a = t.data;
                              if (s && 4 < a.length) {
                                var o = new U(a).readSliceType();
                                (2 === o || 4 === o || 7 === o || 9 === o) &&
                                  (d.key = !0);
                              }
                              break;
                            case 5:
                              (p = !0),
                                d ||
                                  (d = r.avcSample = c(!0, e.pts, e.dts, '')),
                                (d.key = !0),
                                (d.frame = !0);
                              break;
                            case 6:
                              (p = !0),
                                (u = new U(r.discardEPB(t.data))),
                                u.readUByte();
                              for (
                                var i = 0, f = 0, m = !1, y = 0;
                                !m && 1 < u.bytesAvailable;

                              ) {
                                i = 0;
                                do (y = u.readUByte()), (i += y);
                                while (255 === y);
                                f = 0;
                                do (y = u.readUByte()), (f += y);
                                while (255 === y);
                                if (4 === i && 0 !== u.bytesAvailable) {
                                  m = !0;
                                  var E = u.readUByte();
                                  if (181 === E) {
                                    var T = u.readUShort();
                                    if (49 === T) {
                                      var v = u.readUInt();
                                      if (1195456820 === v) {
                                        var S = u.readUByte();
                                        if (3 === S) {
                                          var _ = u.readUByte(),
                                            R = u.readUByte(),
                                            A = 31 & _,
                                            k = [_, R];
                                          for (g = 0; g < A; g++)
                                            k.push(u.readUByte()),
                                              k.push(u.readUByte()),
                                              k.push(u.readUByte());
                                          r._insertSampleInOrder(
                                            r._txtTrack.samples,
                                            { type: 3, pts: e.pts, bytes: k }
                                          );
                                        }
                                      }
                                    }
                                  }
                                } else if (5 === i && 0 !== u.bytesAvailable) {
                                  if (((m = !0), 16 < f)) {
                                    var D = [];
                                    for (g = 0; 16 > g; g++)
                                      D.push(u.readUByte().toString(16)),
                                        (3 === g ||
                                          5 === g ||
                                          7 === g ||
                                          9 === g) &&
                                          D.push('-');
                                    var L = f - 16,
                                      C = new Uint8Array(L);
                                    for (g = 0; g < L; g++)
                                      C[g] = u.readUByte();
                                    r._insertSampleInOrder(
                                      r._txtTrack.samples,
                                      {
                                        pts: e.pts,
                                        payloadType: i,
                                        uuid: D.join(''),
                                        userDataBytes: C,
                                        userData: Object(N.utf8ArrayToStr)(
                                          C.buffer
                                        )
                                      }
                                    );
                                  }
                                } else if (f < u.bytesAvailable)
                                  for (g = 0; g < f; g++) u.readUByte();
                              }
                              break;
                            case 7:
                              if (((p = !0), (s = !0), !n.sps)) {
                                u = new U(t.data);
                                var P = u.readSPS();
                                (n.width = P.width),
                                  (n.height = P.height),
                                  (n.pixelRatio = P.pixelRatio),
                                  (n.sps = [t.data]),
                                  (n.duration = r._duration);
                                var I = t.data.subarray(1, 4),
                                  x = 'avc1.';
                                for (g = 0; 3 > g; g++) {
                                  var O = I[g].toString(16);
                                  2 > O.length && (O = '0' + O), (x += O);
                                }
                                n.codec = x;
                              }
                              break;
                            case 8:
                              (p = !0), n.pps || (n.pps = [t.data]);
                              break;
                            case 9:
                              (p = !1),
                                (n.audFound = !0),
                                d && l(d, n),
                                (d = r.avcSample = c(!1, e.pts, e.dts, ''));
                              break;
                            case 12:
                              p = !1;
                              break;
                            default:
                              (p = !1),
                                d && (d.debug += 'unknown NAL ' + t.type + ' ');
                          }
                          if (d && p) {
                            var F = d.units;
                            F.push(t);
                          }
                        }),
                        t && d && (l(d, n), (this.avcSample = null));
                    }),
                    (t._insertSampleInOrder = function a(e, t) {
                      var r = e.length;
                      if (!(0 < r)) e.push(t);
                      else if (t.pts >= e[r - 1].pts) e.push(t);
                      else
                        for (var n = r - 1; 0 <= n; n--)
                          if (t.pts < e[n].pts) {
                            e.splice(n, 0, t);
                            break;
                          }
                    }),
                    (t._getLastNalUnit = function e() {
                      var t = this.avcSample,
                        a;
                      if (!t || 0 === t.units.length) {
                        var r = this._avcTrack,
                          n = r.samples;
                        t = n[n.length - 1];
                      }
                      if (t) {
                        var o = t.units;
                        a = o[o.length - 1];
                      }
                      return a;
                    }),
                    (t._parseAVCNALu = function t(e) {
                      var a = 0,
                        r = e.byteLength,
                        n = this._avcTrack,
                        o = n.naluState || 0,
                        d = o,
                        s = [],
                        l = -1,
                        c,
                        u,
                        p,
                        g,
                        f;
                      for (
                        -1 === o &&
                        ((l = 0), (f = 31 & e[0]), (o = 0), (a = 1));
                        a < r;

                      ) {
                        if (((c = e[a++]), !o)) {
                          o = c ? 0 : 1;
                          continue;
                        }
                        if (1 === o) {
                          o = c ? 0 : 2;
                          continue;
                        }
                        if (!c) o = 3;
                        else if (1 === c) {
                          if (0 <= l)
                            (p = { data: e.subarray(l, a - o - 1), type: f }),
                              s.push(p);
                          else {
                            var m = this._getLastNalUnit();
                            if (
                              m &&
                              (d &&
                                a <= 4 - d &&
                                m.state &&
                                (m.data = m.data.subarray(
                                  0,
                                  m.data.byteLength - d
                                )),
                              (u = a - o - 1),
                              0 < u)
                            ) {
                              var y = new Uint8Array(m.data.byteLength + u);
                              y.set(m.data, 0),
                                y.set(e.subarray(0, u), m.data.byteLength),
                                (m.data = y);
                            }
                          }
                          a < r
                            ? ((g = 31 & e[a]), (l = a), (f = g), (o = 0))
                            : (o = -1);
                        } else o = 0;
                      }
                      if (
                        (0 <= l &&
                          0 <= o &&
                          ((p = { data: e.subarray(l, r), type: f, state: o }),
                          s.push(p)),
                        0 === s.length)
                      ) {
                        var h = this._getLastNalUnit();
                        if (h) {
                          var E = new Uint8Array(
                            h.data.byteLength + e.byteLength
                          );
                          E.set(h.data, 0),
                            E.set(e, h.data.byteLength),
                            (h.data = E);
                        }
                      }
                      return (n.naluState = o), s;
                    }),
                    (t.discardEPB = function t(e) {
                      for (
                        var a = e.byteLength, r = [], n = 1, o, d;
                        n < a - 2;

                      )
                        0 === e[n] && 0 === e[n + 1] && 3 === e[n + 2]
                          ? (r.push(n + 2), (n += 2))
                          : n++;
                      if (0 === r.length) return e;
                      (o = a - r.length), (d = new Uint8Array(o));
                      var s = 0;
                      for (n = 0; n < o; s++, n++)
                        s === r[0] && (s++, r.shift()), (d[n] = e[s]);
                      return d;
                    }),
                    (t._parseAACPES = function t(e) {
                      var a = this._audioTrack,
                        n = e.data,
                        o = e.pts,
                        i = 0,
                        d = this.aacOverFlow,
                        s = this.aacLastPTS,
                        l,
                        c,
                        u,
                        p,
                        g;
                      if (d) {
                        var m = new Uint8Array(d.byteLength + n.byteLength);
                        m.set(d, 0), m.set(n, d.byteLength), (n = m);
                      }
                      for (u = 0, g = n.length; u < g - 1 && !f(n, u); u++);
                      if (u) {
                        var T, v;
                        if (
                          (u < g - 1
                            ? ((T =
                                'AAC PES did not start with ADTS header,offset:' +
                                u),
                              (v = !1))
                            : ((T = 'no ADTS header found in AAC PES'),
                              (v = !0)),
                          P.logger.warn('parsing error:' + T),
                          this.observer.trigger(k['default'].ERROR, {
                            type: D.ErrorTypes.MEDIA_ERROR,
                            details: D.ErrorDetails.FRAG_PARSING_ERROR,
                            fatal: v,
                            reason: T
                          }),
                          v)
                        )
                          return;
                      }
                      if (
                        (y(a, this.observer, n, u, this.audioCodec),
                        (c = 0),
                        (l = h(a.samplerate)),
                        d && s)
                      ) {
                        var b = s + l;
                        1 < r(b - o) &&
                          (P.logger.log(
                            'AAC: align PTS for overlapping frames by ' +
                              E((b - o) / 90)
                          ),
                          (o = b));
                      }
                      for (; u < g; )
                        if (f(n, u)) {
                          if (u + 5 < g) {
                            var _ = S(a, n, u, o, c);
                            if (_) {
                              (u += _.length), (p = _.sample.pts), c++;
                              continue;
                            }
                          }
                          break;
                        } else u++;
                      (d = u < g ? n.subarray(u, g) : null),
                        (this.aacOverFlow = d),
                        (this.aacLastPTS = p);
                    }),
                    (t._parseMPEGPES = function t(e) {
                      for (
                        var a = e.data, r = a.length, n = 0, o = 0, i = e.pts;
                        o < r;

                      )
                        if (M.isHeader(a, o)) {
                          var d = M.appendFrame(this._audioTrack, a, o, i, n);
                          if (d) (o += d.length), n++;
                          else break;
                        } else o++;
                    }),
                    (t._parseID3PES = function t(e) {
                      this._id3Track.samples.push(e);
                    }),
                    e
                  );
                })(),
                W = V,
                j = (function() {
                  function e(e, t, a) {
                    (this.observer = e), (this.config = a), (this.remuxer = t);
                  }
                  var t = e.prototype;
                  return (
                    (t.resetInitSegment = function n(e, t, a, r) {
                      this._audioTrack = {
                        container: 'audio/mpeg',
                        type: 'audio',
                        id: -1,
                        sequenceNumber: 0,
                        isAAC: !1,
                        samples: [],
                        len: 0,
                        manifestCodec: t,
                        duration: r,
                        inputTimeScale: 9e4
                      };
                    }),
                    (t.resetTimeStamp = function e() {}),
                    (e.probe = function t(e) {
                      var a = N['default'].getID3Data(e, 0),
                        r,
                        n;
                      if (a && void 0 !== N['default'].getTimeStamp(a))
                        for (
                          r = a.length, n = u(e.length - 1, r + 100);
                          r < n;
                          r++
                        )
                          if (M.probe(e, r))
                            return (
                              P.logger.log('MPEG Audio sync word found !'), !0
                            );
                      return !1;
                    }),
                    (t.append = function n(e, t, a, r) {
                      for (
                        var o = N['default'].getID3Data(e, 0) || [],
                          i = N['default'].getTimeStamp(o),
                          d = void 0 === i ? 9e4 * t : 90 * i,
                          s = o.length,
                          l = e.length,
                          c = 0,
                          u = 0,
                          p = this._audioTrack,
                          g = [{ pts: d, dts: d, data: o }];
                        s < l;

                      )
                        if (M.isHeader(e, s)) {
                          var f = M.appendFrame(p, e, s, d, c);
                          if (f) (s += f.length), (u = f.sample.pts), c++;
                          else break;
                        } else
                          N['default'].isHeader(e, s)
                            ? ((o = N['default'].getID3Data(e, s)),
                              g.push({ pts: u, dts: u, data: o }),
                              (s += o.length))
                            : s++;
                      this.remuxer.remux(
                        p,
                        { samples: [] },
                        { samples: g, inputTimeScale: 9e4 },
                        { samples: [] },
                        t,
                        a,
                        r
                      );
                    }),
                    (t.destroy = function e() {}),
                    e
                  );
                })(),
                Y = j,
                q = (function() {
                  function e() {}
                  return (
                    (e.getSilentFrame = function a(e, t) {
                      switch (e) {
                        case 'mp4a.40.2':
                          if (1 === t)
                            return new Uint8Array([0, 200, 0, 128, 35, 128]);
                          if (2 === t)
                            return new Uint8Array([
                              33,
                              0,
                              73,
                              144,
                              2,
                              25,
                              0,
                              35,
                              128
                            ]);
                          if (3 === t)
                            return new Uint8Array([
                              0,
                              200,
                              0,
                              128,
                              32,
                              132,
                              1,
                              38,
                              64,
                              8,
                              100,
                              0,
                              142
                            ]);
                          if (4 === t)
                            return new Uint8Array([
                              0,
                              200,
                              0,
                              128,
                              32,
                              132,
                              1,
                              38,
                              64,
                              8,
                              100,
                              0,
                              128,
                              44,
                              128,
                              8,
                              2,
                              56
                            ]);
                          if (5 === t)
                            return new Uint8Array([
                              0,
                              200,
                              0,
                              128,
                              32,
                              132,
                              1,
                              38,
                              64,
                              8,
                              100,
                              0,
                              130,
                              48,
                              4,
                              153,
                              0,
                              33,
                              144,
                              2,
                              56
                            ]);
                          if (6 === t)
                            return new Uint8Array([
                              0,
                              200,
                              0,
                              128,
                              32,
                              132,
                              1,
                              38,
                              64,
                              8,
                              100,
                              0,
                              130,
                              48,
                              4,
                              153,
                              0,
                              33,
                              144,
                              2,
                              0,
                              178,
                              0,
                              32,
                              8,
                              224
                            ]);
                          break;
                        default:
                          if (1 === t)
                            return new Uint8Array([
                              1,
                              64,
                              34,
                              128,
                              163,
                              78,
                              230,
                              128,
                              186,
                              8,
                              0,
                              0,
                              0,
                              28,
                              6,
                              241,
                              193,
                              10,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              94
                            ]);
                          if (2 === t)
                            return new Uint8Array([
                              1,
                              64,
                              34,
                              128,
                              163,
                              94,
                              230,
                              128,
                              186,
                              8,
                              0,
                              0,
                              0,
                              0,
                              149,
                              0,
                              6,
                              241,
                              161,
                              10,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              94
                            ]);
                          if (3 === t)
                            return new Uint8Array([
                              1,
                              64,
                              34,
                              128,
                              163,
                              94,
                              230,
                              128,
                              186,
                              8,
                              0,
                              0,
                              0,
                              0,
                              149,
                              0,
                              6,
                              241,
                              161,
                              10,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              90,
                              94
                            ]);
                      }
                      return null;
                    }),
                    e
                  );
                })(),
                z = q,
                X = a(2, 32) - 1,
                $ = (function() {
                  function e() {}
                  return (
                    (e.init = function t() {
                      e.types = {
                        avc1: [],
                        avcC: [],
                        btrt: [],
                        dinf: [],
                        dref: [],
                        esds: [],
                        ftyp: [],
                        hdlr: [],
                        mdat: [],
                        mdhd: [],
                        mdia: [],
                        mfhd: [],
                        minf: [],
                        moof: [],
                        moov: [],
                        mp4a: [],
                        '.mp3': [],
                        mvex: [],
                        mvhd: [],
                        pasp: [],
                        sdtp: [],
                        stbl: [],
                        stco: [],
                        stsc: [],
                        stsd: [],
                        stsz: [],
                        stts: [],
                        tfdt: [],
                        tfhd: [],
                        traf: [],
                        trak: [],
                        trun: [],
                        trex: [],
                        tkhd: [],
                        vmhd: [],
                        smhd: []
                      };
                      var a;
                      for (a in e.types)
                        e.types.hasOwnProperty(a) &&
                          (e.types[a] = [
                            a.charCodeAt(0),
                            a.charCodeAt(1),
                            a.charCodeAt(2),
                            a.charCodeAt(3)
                          ]);
                      var r = new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          118,
                          105,
                          100,
                          101,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          86,
                          105,
                          100,
                          101,
                          111,
                          72,
                          97,
                          110,
                          100,
                          108,
                          101,
                          114,
                          0
                        ]),
                        n = new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          115,
                          111,
                          117,
                          110,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          83,
                          111,
                          117,
                          110,
                          100,
                          72,
                          97,
                          110,
                          100,
                          108,
                          101,
                          114,
                          0
                        ]);
                      e.HDLR_TYPES = { video: r, audio: n };
                      var o = new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          12,
                          117,
                          114,
                          108,
                          32,
                          0,
                          0,
                          0,
                          1
                        ]),
                        d = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                      (e.STTS = e.STSC = e.STCO = d),
                        (e.STSZ = new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ])),
                        (e.VMHD = new Uint8Array([
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ])),
                        (e.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])),
                        (e.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]));
                      var s = new Uint8Array([105, 115, 111, 109]),
                        l = new Uint8Array([97, 118, 99, 49]),
                        c = new Uint8Array([0, 0, 0, 1]);
                      (e.FTYP = e.box(e.types.ftyp, s, c, s, l)),
                        (e.DINF = e.box(e.types.dinf, e.box(e.types.dref, o)));
                    }),
                    (e.box = function t(e) {
                      for (
                        var a = Array.prototype.slice.call(arguments, 1),
                          r = 8,
                          n = a.length,
                          o = n,
                          d;
                        n--;

                      )
                        r += a[n].byteLength;
                      for (
                        d = new Uint8Array(r),
                          d[0] = 255 & (r >> 24),
                          d[1] = 255 & (r >> 16),
                          d[2] = 255 & (r >> 8),
                          d[3] = 255 & r,
                          d.set(e, 4),
                          ((n = 0), (r = 8));
                        n < o;
                        n++
                      )
                        d.set(a[n], r), (r += a[n].byteLength);
                      return d;
                    }),
                    (e.hdlr = function a(t) {
                      return e.box(e.types.hdlr, e.HDLR_TYPES[t]);
                    }),
                    (e.mdat = function a(t) {
                      return e.box(e.types.mdat, t);
                    }),
                    (e.mdhd = function r(t, a) {
                      a *= t;
                      var n = T(a / 4294967296),
                        o = T(a % 4294967296);
                      return e.box(
                        e.types.mdhd,
                        new Uint8Array([
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          2,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          3,
                          255 & (t >> 24),
                          255 & (t >> 16),
                          255 & (t >> 8),
                          255 & t,
                          n >> 24,
                          255 & (n >> 16),
                          255 & (n >> 8),
                          255 & n,
                          o >> 24,
                          255 & (o >> 16),
                          255 & (o >> 8),
                          255 & o,
                          85,
                          196,
                          0,
                          0
                        ])
                      );
                    }),
                    (e.mdia = function a(t) {
                      return e.box(
                        e.types.mdia,
                        e.mdhd(t.timescale, t.duration),
                        e.hdlr(t.type),
                        e.minf(t)
                      );
                    }),
                    (e.mfhd = function a(t) {
                      return e.box(
                        e.types.mfhd,
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          t >> 24,
                          255 & (t >> 16),
                          255 & (t >> 8),
                          255 & t
                        ])
                      );
                    }),
                    (e.minf = function a(t) {
                      return 'audio' === t.type
                        ? e.box(
                            e.types.minf,
                            e.box(e.types.smhd, e.SMHD),
                            e.DINF,
                            e.stbl(t)
                          )
                        : e.box(
                            e.types.minf,
                            e.box(e.types.vmhd, e.VMHD),
                            e.DINF,
                            e.stbl(t)
                          );
                    }),
                    (e.moof = function n(t, a, r) {
                      return e.box(e.types.moof, e.mfhd(t), e.traf(r, a));
                    }),
                    (e.moov = function a(t) {
                      for (var r = t.length, n = []; r--; ) n[r] = e.trak(t[r]);
                      return e.box.apply(
                        null,
                        [e.types.moov, e.mvhd(t[0].timescale, t[0].duration)]
                          .concat(n)
                          .concat(e.mvex(t))
                      );
                    }),
                    (e.mvex = function a(t) {
                      for (var r = t.length, n = []; r--; ) n[r] = e.trex(t[r]);
                      return e.box.apply(null, [e.types.mvex].concat(n));
                    }),
                    (e.mvhd = function r(t, a) {
                      a *= t;
                      var n = T(a / 4294967296),
                        o = T(a % 4294967296),
                        i = new Uint8Array([
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          2,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          3,
                          255 & (t >> 24),
                          255 & (t >> 16),
                          255 & (t >> 8),
                          255 & t,
                          n >> 24,
                          255 & (n >> 16),
                          255 & (n >> 8),
                          255 & n,
                          o >> 24,
                          255 & (o >> 16),
                          255 & (o >> 8),
                          255 & o,
                          0,
                          1,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          64,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          255,
                          255,
                          255,
                          255
                        ]);
                      return e.box(e.types.mvhd, i);
                    }),
                    (e.sdtp = function a(t) {
                      var r = t.samples || [],
                        n = new Uint8Array(4 + r.length),
                        o,
                        d;
                      for (d = 0; d < r.length; d++)
                        (o = r[d].flags),
                          (n[d + 4] =
                            (o.dependsOn << 4) |
                            (o.isDependedOn << 2) |
                            o.hasRedundancy);
                      return e.box(e.types.sdtp, n);
                    }),
                    (e.stbl = function a(t) {
                      return e.box(
                        e.types.stbl,
                        e.stsd(t),
                        e.box(e.types.stts, e.STTS),
                        e.box(e.types.stsc, e.STSC),
                        e.box(e.types.stsz, e.STSZ),
                        e.box(e.types.stco, e.STCO)
                      );
                    }),
                    (e.avc1 = function a(t) {
                      var r = [],
                        n = [],
                        o,
                        d,
                        s;
                      for (o = 0; o < t.sps.length; o++)
                        (d = t.sps[o]),
                          (s = d.byteLength),
                          r.push(255 & (s >>> 8)),
                          r.push(255 & s),
                          (r = r.concat(Array.prototype.slice.call(d)));
                      for (o = 0; o < t.pps.length; o++)
                        (d = t.pps[o]),
                          (s = d.byteLength),
                          n.push(255 & (s >>> 8)),
                          n.push(255 & s),
                          (n = n.concat(Array.prototype.slice.call(d)));
                      var l = e.box(
                          e.types.avcC,
                          new Uint8Array(
                            [1, r[3], r[4], r[5], 255, 224 | t.sps.length]
                              .concat(r)
                              .concat([t.pps.length])
                              .concat(n)
                          )
                        ),
                        c = t.width,
                        u = t.height,
                        p = t.pixelRatio[0],
                        g = t.pixelRatio[1];
                      return e.box(
                        e.types.avc1,
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          255 & (c >> 8),
                          255 & c,
                          255 & (u >> 8),
                          255 & u,
                          0,
                          72,
                          0,
                          0,
                          0,
                          72,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          18,
                          100,
                          97,
                          105,
                          108,
                          121,
                          109,
                          111,
                          116,
                          105,
                          111,
                          110,
                          47,
                          104,
                          108,
                          115,
                          46,
                          106,
                          115,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          24,
                          17,
                          17
                        ]),
                        l,
                        e.box(
                          e.types.btrt,
                          new Uint8Array([
                            0,
                            28,
                            156,
                            128,
                            0,
                            45,
                            198,
                            192,
                            0,
                            45,
                            198,
                            192
                          ])
                        ),
                        e.box(
                          e.types.pasp,
                          new Uint8Array([
                            p >> 24,
                            255 & (p >> 16),
                            255 & (p >> 8),
                            255 & p,
                            g >> 24,
                            255 & (g >> 16),
                            255 & (g >> 8),
                            255 & g
                          ])
                        )
                      );
                    }),
                    (e.esds = function t(e) {
                      var a = e.config.length;
                      return new Uint8Array(
                        [
                          0,
                          0,
                          0,
                          0,
                          3,
                          23 + a,
                          0,
                          1,
                          0,
                          4,
                          15 + a,
                          64,
                          21,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          5
                        ]
                          .concat([a])
                          .concat(e.config)
                          .concat([6, 1, 2])
                      );
                    }),
                    (e.mp4a = function a(t) {
                      var r = t.samplerate;
                      return e.box(
                        e.types.mp4a,
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          t.channelCount,
                          0,
                          16,
                          0,
                          0,
                          0,
                          0,
                          255 & (r >> 8),
                          255 & r,
                          0,
                          0
                        ]),
                        e.box(e.types.esds, e.esds(t))
                      );
                    }),
                    (e.mp3 = function a(t) {
                      var r = t.samplerate;
                      return e.box(
                        e.types['.mp3'],
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          t.channelCount,
                          0,
                          16,
                          0,
                          0,
                          0,
                          0,
                          255 & (r >> 8),
                          255 & r,
                          0,
                          0
                        ])
                      );
                    }),
                    (e.stsd = function a(t) {
                      return 'audio' === t.type
                        ? t.isAAC || 'mp3' !== t.codec
                          ? e.box(e.types.stsd, e.STSD, e.mp4a(t))
                          : e.box(e.types.stsd, e.STSD, e.mp3(t))
                        : e.box(e.types.stsd, e.STSD, e.avc1(t));
                    }),
                    (e.tkhd = function a(t) {
                      var r = t.id,
                        n = t.duration * t.timescale,
                        o = t.width,
                        i = t.height,
                        d = T(n / 4294967296),
                        s = T(n % 4294967296);
                      return e.box(
                        e.types.tkhd,
                        new Uint8Array([
                          1,
                          0,
                          0,
                          7,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          2,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          3,
                          255 & (r >> 24),
                          255 & (r >> 16),
                          255 & (r >> 8),
                          255 & r,
                          0,
                          0,
                          0,
                          0,
                          d >> 24,
                          255 & (d >> 16),
                          255 & (d >> 8),
                          255 & d,
                          s >> 24,
                          255 & (s >> 16),
                          255 & (s >> 8),
                          255 & s,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          64,
                          0,
                          0,
                          0,
                          255 & (o >> 8),
                          255 & o,
                          0,
                          0,
                          255 & (i >> 8),
                          255 & i,
                          0,
                          0
                        ])
                      );
                    }),
                    (e.traf = function r(t, a) {
                      var n = e.sdtp(t),
                        o = t.id,
                        i = T(a / 4294967296),
                        d = T(a % 4294967296);
                      return e.box(
                        e.types.traf,
                        e.box(
                          e.types.tfhd,
                          new Uint8Array([
                            0,
                            0,
                            0,
                            0,
                            o >> 24,
                            255 & (o >> 16),
                            255 & (o >> 8),
                            255 & o
                          ])
                        ),
                        e.box(
                          e.types.tfdt,
                          new Uint8Array([
                            1,
                            0,
                            0,
                            0,
                            i >> 24,
                            255 & (i >> 16),
                            255 & (i >> 8),
                            255 & i,
                            d >> 24,
                            255 & (d >> 16),
                            255 & (d >> 8),
                            255 & d
                          ])
                        ),
                        e.trun(t, n.length + 16 + 20 + 8 + 16 + 8 + 8),
                        n
                      );
                    }),
                    (e.trak = function a(t) {
                      return (
                        (t.duration = t.duration || 4294967295),
                        e.box(e.types.trak, e.tkhd(t), e.mdia(t))
                      );
                    }),
                    (e.trex = function a(t) {
                      var r = t.id;
                      return e.box(
                        e.types.trex,
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          r >> 24,
                          255 & (r >> 16),
                          255 & (r >> 8),
                          255 & r,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          1
                        ])
                      );
                    }),
                    (e.trun = function r(t, a) {
                      var n = t.samples || [],
                        o = n.length,
                        d = 12 + 16 * o,
                        s = new Uint8Array(d),
                        l,
                        c,
                        u,
                        p,
                        g,
                        f;
                      for (
                        a += 8 + d,
                          s.set(
                            [
                              0,
                              0,
                              15,
                              1,
                              255 & (o >>> 24),
                              255 & (o >>> 16),
                              255 & (o >>> 8),
                              255 & o,
                              255 & (a >>> 24),
                              255 & (a >>> 16),
                              255 & (a >>> 8),
                              255 & a
                            ],
                            0
                          ),
                          l = 0;
                        l < o;
                        l++
                      )
                        (c = n[l]),
                          (u = c.duration),
                          (p = c.size),
                          (g = c.flags),
                          (f = c.cts),
                          s.set(
                            [
                              255 & (u >>> 24),
                              255 & (u >>> 16),
                              255 & (u >>> 8),
                              255 & u,
                              255 & (p >>> 24),
                              255 & (p >>> 16),
                              255 & (p >>> 8),
                              255 & p,
                              (g.isLeading << 2) | g.dependsOn,
                              (g.isDependedOn << 6) |
                                (g.hasRedundancy << 4) |
                                (g.paddingValue << 1) |
                                g.isNonSync,
                              61440 & g.degradPrio,
                              15 & g.degradPrio,
                              255 & (f >>> 24),
                              255 & (f >>> 16),
                              255 & (f >>> 8),
                              255 & f
                            ],
                            12 + 16 * l
                          );
                      return e.box(e.types.trun, s);
                    }),
                    (e.initSegment = function a(t) {
                      e.types || e.init();
                      var r = e.moov(t),
                        n;
                      return (
                        (n = new Uint8Array(e.FTYP.byteLength + r.byteLength)),
                        n.set(e.FTYP),
                        n.set(r, e.FTYP.byteLength),
                        n
                      );
                    }),
                    e
                  );
                })(),
                Q = $,
                Z = 9e4,
                J = R(10),
                ee = R(0.2),
                te = null,
                ae = (function() {
                  function e(e, t, a, r) {
                    if (
                      ((this.observer = e),
                      (this.config = t),
                      (this.typeSupported = a),
                      (this.ISGenerated = !1),
                      null === te)
                    ) {
                      var n = navigator.userAgent.match(/Chrome\/(\d+)/i);
                      te = n ? parseInt(n[1]) : 0;
                    }
                  }
                  var a = e.prototype;
                  return (
                    (a.destroy = function e() {}),
                    (a.resetTimeStamp = function t(e) {
                      this._initPTS = this._initDTS = e;
                    }),
                    (a.resetInitSegment = function e() {
                      this.ISGenerated = !1;
                    }),
                    (a.getVideoStartPts = function t(e) {
                      var a = !1,
                        r = e.reduce(function(e, t) {
                          var r = t.pts - e;
                          return -4294967296 > r
                            ? ((a = !0), A(e, t.pts))
                            : 0 < r
                            ? e
                            : t.pts;
                        }, e[0].pts);
                      return a && P.logger.debug('PTS rollover detected'), r;
                    }),
                    (a.remux = function d(e, t, a, r, n, o, i) {
                      if (
                        (this.ISGenerated || this.generateIS(e, t, n),
                        this.ISGenerated)
                      ) {
                        var l = e.samples.length,
                          c = t.samples.length,
                          u = n,
                          p = n;
                        if (l && c) {
                          var g = this.getVideoStartPts(t.samples),
                            f = A(e.samples[0].pts, g) - g,
                            m = f / t.inputTimeScale;
                          (u += s(0, m)), (p += s(0, -m));
                        }
                        if (l) {
                          e.timescale ||
                            (P.logger.warn(
                              'regenerate InitSegment as audio detected'
                            ),
                            this.generateIS(e, t, n));
                          var y = this.remuxAudio(e, u, o, i);
                          if (c) {
                            var h;
                            y && (h = y.endPTS - y.startPTS),
                              t.timescale ||
                                (P.logger.warn(
                                  'regenerate InitSegment as video detected'
                                ),
                                this.generateIS(e, t, n)),
                              this.remuxVideo(t, p, o, h);
                          }
                        } else if (c) {
                          var E = this.remuxVideo(t, p, o, 0, i);
                          E && e.codec && this.remuxEmptyAudio(e, u, o, E);
                        }
                      }
                      a.samples.length && this.remuxID3(a, n),
                        r.samples.length && this.remuxText(r, n),
                        this.observer.trigger(k['default'].FRAG_PARSED);
                    }),
                    (a.generateIS = function r(e, t, a) {
                      var n = this.observer,
                        o = e.samples,
                        i = t.samples,
                        d = this.typeSupported,
                        s = 'audio/mp4',
                        l = {},
                        c = { tracks: l },
                        p = void 0 === this._initPTS,
                        g,
                        f;
                      if (
                        (p && (g = f = 1 / 0),
                        e.config &&
                          o.length &&
                          ((e.timescale = e.samplerate),
                          P.logger.log('audio sampling rate : ' + e.samplerate),
                          !e.isAAC &&
                            (d.mpeg
                              ? ((s = 'audio/mpeg'), (e.codec = ''))
                              : d.mp3 && (e.codec = 'mp3')),
                          (l.audio = {
                            container: s,
                            codec: e.codec,
                            initSegment:
                              !e.isAAC && d.mpeg
                                ? new Uint8Array()
                                : Q.initSegment([e]),
                            metadata: { channelCount: e.channelCount }
                          }),
                          p && (g = f = o[0].pts - E(e.inputTimeScale * a))),
                        t.sps && t.pps && i.length)
                      ) {
                        var m = t.inputTimeScale;
                        if (
                          ((t.timescale = m),
                          (l.video = {
                            container: 'video/mp4',
                            codec: t.codec,
                            initSegment: Q.initSegment([t]),
                            metadata: { width: t.width, height: t.height }
                          }),
                          p)
                        ) {
                          var y = this.getVideoStartPts(i),
                            h = E(m * a);
                          (f = u(f, A(i[0].dts, y) - h)),
                            (g = u(g, y - h)),
                            this.observer.trigger(k['default'].INIT_PTS_FOUND, {
                              initPTS: g
                            });
                        }
                      } else
                        p &&
                          l.audio &&
                          this.observer.trigger(k['default'].INIT_PTS_FOUND, {
                            initPTS: g
                          });
                      Object.keys(l).length
                        ? (n.trigger(k['default'].FRAG_PARSING_INIT_SEGMENT, c),
                          (this.ISGenerated = !0),
                          p && ((this._initPTS = g), (this._initDTS = f)))
                        : n.trigger(k['default'].ERROR, {
                            type: D.ErrorTypes.MEDIA_ERROR,
                            details: D.ErrorDetails.FRAG_PARSING_ERROR,
                            fatal: !1,
                            reason: 'no audio/video samples found'
                          });
                    }),
                    (a.remuxVideo = function o(e, a, r, n) {
                      var d = Number.NEGATIVE_INFINITY,
                        l = e.timescale,
                        c = e.samples,
                        p = [],
                        g = c.length,
                        f = this._initPTS,
                        m = 8,
                        y = t,
                        h = d,
                        v = 0,
                        S = !1,
                        b = this.nextAvcDts,
                        R,
                        L,
                        C,
                        I,
                        N;
                      if (0 !== g) {
                        if (!r) {
                          var x = a * l,
                            O = c[0].pts - A(c[0].dts, c[0].pts);
                          b = x - O;
                        }
                        for (var F = 0, w; F < g; F++)
                          (w = c[F]),
                            (w.pts = A(w.pts - f, b)),
                            (w.dts = A(w.dts - f, b)),
                            w.dts > w.pts &&
                              (v = s(u(v, w.pts - w.dts), -1 * ee)),
                            w.dts < c[0 < F ? F - 1 : F].dts && (S = !0);
                        S &&
                          c.sort(function(e, t) {
                            var a = e.dts - t.dts,
                              r = e.pts - t.pts;
                            return a || r || e.id - t.id;
                          }),
                          (I = c[0].dts),
                          (N = c[g - 1].dts);
                        var M = E((N - I) / (g - 1));
                        if (0 > v) {
                          if (v < -2 * M) {
                            P.logger.warn(
                              'PTS < DTS detected in video samples, offsetting DTS from PTS by ' +
                                _(-M, !0) +
                                ' ms'
                            );
                            for (var B = v, U = 0; U < g; U++)
                              (c[U].dts = B = s(B, c[U].pts - M)),
                                (c[U].pts = s(B, c[U].pts));
                          } else {
                            P.logger.warn(
                              'PTS < DTS detected in video samples, shifting DTS by ' +
                                _(v, !0) +
                                ' ms to overcome this issue'
                            );
                            for (var G = 0; G < g; G++) c[G].dts += v;
                          }
                          (I = c[0].dts), (N = c[g - 1].dts);
                        }
                        if (r) {
                          var K = I - b,
                            H = K > M,
                            V = -1 > K;
                          if (H || V) {
                            H
                              ? P.logger.warn(
                                  'AVC: ' +
                                    _(K, !0) +
                                    ' ms (' +
                                    K +
                                    'dts) hole between fragments detected, filling it'
                                )
                              : P.logger.warn(
                                  'AVC: ' +
                                    _(-K, !0) +
                                    ' ms (' +
                                    K +
                                    'dts) overlapping between fragments detected'
                                ),
                              (I = b);
                            var W = c[0].pts - K;
                            (c[0].dts = I),
                              (c[0].pts = W),
                              P.logger.log(
                                'Video: First PTS/DTS adjusted: ' +
                                  _(W, !0) +
                                  '/' +
                                  _(I, !0) +
                                  ', delta: ' +
                                  _(K, !0) +
                                  ' ms'
                              );
                          }
                        }
                        te && 75 > te && (I = s(0, I));
                        for (var Y = 0, q = 0, z = 0; z < g; z++) {
                          for (
                            var X = c[z],
                              $ = X.units,
                              Z = $.length,
                              J = 0,
                              ae = 0;
                            ae < Z;
                            ae++
                          )
                            J += $[ae].data.length;
                          (q += J),
                            (Y += Z),
                            (X.length = J),
                            (X.dts = s(X.dts, I)),
                            (X.pts = s(X.pts, X.dts, 0)),
                            (y = u(X.pts, y)),
                            (h = s(X.pts, h));
                        }
                        N = c[g - 1].dts;
                        var re = q + 4 * Y + 8;
                        try {
                          L = new Uint8Array(re);
                        } catch (e) {
                          return void this.observer.trigger(
                            k['default'].ERROR,
                            {
                              type: D.ErrorTypes.MUX_ERROR,
                              details: D.ErrorDetails.REMUX_ALLOC_ERROR,
                              fatal: !1,
                              bytes: re,
                              reason: 'fail allocating video mdat ' + re
                            }
                          );
                        }
                        var ne = new DataView(L.buffer);
                        ne.setUint32(0, re), L.set(Q.types.mdat, 4);
                        for (var oe = 0; oe < g; oe++) {
                          for (
                            var ie = c[oe],
                              de = ie.units,
                              se = 0,
                              le = void 0,
                              ce = 0,
                              ue = de.length;
                            ce < ue;
                            ce++
                          ) {
                            var pe = de[ce],
                              ge = pe.data,
                              fe = pe.data.byteLength;
                            ne.setUint32(m, fe),
                              (m += 4),
                              L.set(ge, m),
                              (m += fe),
                              (se += 4 + fe);
                          }
                          if (oe < g - 1) R = c[oe + 1].dts - ie.dts;
                          else {
                            var me = this.config,
                              ye = ie.dts - c[0 < oe ? oe - 1 : oe].dts;
                            if (me.stretchShortVideoTrack) {
                              var he = me.maxBufferHole,
                                Ee = T(he * l),
                                Te =
                                  (n ? y + n * l : this.nextAudioPts) - ie.pts;
                              Te > Ee
                                ? ((R = Te - ye),
                                  0 > R && (R = ye),
                                  P.logger.log(
                                    'It is approximately ' +
                                      _(Te, !1) +
                                      ' ms to the next segment; using duration ' +
                                      _(R, !1) +
                                      ' ms for the last video frame.'
                                  ))
                                : (R = ye);
                            } else R = ye;
                          }
                          (le = E(ie.pts - ie.dts)),
                            p.push({
                              size: se,
                              duration: R,
                              cts: le,
                              flags: {
                                isLeading: 0,
                                isDependedOn: 0,
                                hasRedundancy: 0,
                                degradPrio: 0,
                                dependsOn: ie.key ? 2 : 1,
                                isNonSync: ie.key ? 0 : 1
                              }
                            });
                        }
                        this.nextAvcDts = N + R;
                        var ve = e.dropped;
                        if (
                          ((e.nbNalu = 0),
                          (e.dropped = 0),
                          p.length &&
                            -1 <
                              navigator.userAgent
                                .toLowerCase()
                                .indexOf('chrome'))
                        ) {
                          var Se = p[0].flags;
                          (Se.dependsOn = 2), (Se.isNonSync = 0);
                        }
                        (e.samples = p),
                          (C = Q.moof(e.sequenceNumber++, I, e)),
                          (e.samples = []);
                        var be = {
                          data1: C,
                          data2: L,
                          startPTS: y / l,
                          endPTS: (h + R) / l,
                          startDTS: I / l,
                          endDTS: this.nextAvcDts / l,
                          type: 'video',
                          hasAudio: !1,
                          hasVideo: !0,
                          nb: p.length,
                          dropped: ve
                        };
                        return (
                          this.observer.trigger(
                            k['default'].FRAG_PARSING_DATA,
                            be
                          ),
                          be
                        );
                      }
                    }),
                    (a.remuxAudio = function o(e, t, a, n) {
                      var d = e.inputTimeScale,
                        l = e.timescale,
                        c = d / l,
                        u = e.isAAC ? 1024 : 1152,
                        p = u * c,
                        g = this._initPTS,
                        f = !e.isAAC && this.typeSupported.mpeg,
                        m = f ? 0 : 8,
                        y = e.samples,
                        h = [],
                        T = this.nextAudioPts,
                        v,
                        S,
                        b,
                        R,
                        L,
                        C;
                      if (
                        ((a |=
                          y.length &&
                          T &&
                          ((n && 0.1 > r(t - T / d)) ||
                            r(y[0].pts - T - g) < 20 * p)),
                        y.forEach(function(e) {
                          e.pts = e.dts = A(e.pts - g, t * d);
                        }),
                        (y = y.filter(function(e) {
                          return 0 <= e.pts;
                        })),
                        0 !== y.length)
                      ) {
                        if (
                          (a || (n ? (T = s(0, t * d)) : (T = y[0].pts)),
                          e.isAAC)
                        )
                          for (
                            var I = this.config.maxAudioFramesDrift,
                              N = 0,
                              x = T;
                            N < y.length;

                          ) {
                            var O = y[N],
                              F = O.pts,
                              w = F - x;
                            if (w <= -I * p)
                              a || 0 < N
                                ? (P.logger.warn(
                                    'Dropping 1 audio frame @ ' +
                                      _(x, !0) / 1e3 +
                                      's due to ' +
                                      _(w, !0) +
                                      ' ms overlap.'
                                  ),
                                  y.splice(N, 1))
                                : (P.logger.warn(
                                    'Audio frame @ ' +
                                      _(F, !0) / 1e3 +
                                      's overlaps nextAudioPts by ' +
                                      _(w, !0) +
                                      ' ms.'
                                  ),
                                  (x = F + p),
                                  N++);
                            else if (w >= I * p && w < J && x) {
                              var M = E(w / p);
                              P.logger.warn(
                                'Injecting ' +
                                  M +
                                  ' audio frames @ ' +
                                  _(x, !0) / 1e3 +
                                  's due to ' +
                                  _(w, !0) +
                                  ' ms gap.'
                              );
                              for (var B = 0, U; B < M; B++)
                                (U = s(x, 0)),
                                  (S = z.getSilentFrame(
                                    e.manifestCodec || e.codec,
                                    e.channelCount
                                  )),
                                  S ||
                                    (P.logger.log(
                                      'Unable to get silent frame for given audio codec; duplicating last frame instead.'
                                    ),
                                    (S = O.unit.subarray())),
                                  y.splice(N, 0, { unit: S, pts: U, dts: U }),
                                  (x += p),
                                  N++;
                              (O.pts = O.dts = x), (x += p), N++;
                            } else (O.pts = O.dts = x), (x += p), N++;
                          }
                        for (var G = y.length, K = 0; G--; )
                          K += y[G].unit.byteLength;
                        for (var H = 0, V = y.length; H < V; H++) {
                          var W = y[H],
                            Y = W.unit,
                            q = W.pts;
                          if (void 0 !== C && v) v.duration = E((q - C) / c);
                          else {
                            var X = q - T,
                              $ = 0;
                            if (a && e.isAAC && X) {
                              if (0 < X && X < J)
                                ($ = E((q - T) / p)),
                                  P.logger.log(
                                    _(X, !0) +
                                      ' ms hole between AAC samples detected,filling it'
                                  ),
                                  0 < $ &&
                                    ((S = z.getSilentFrame(
                                      e.manifestCodec || e.codec,
                                      e.channelCount
                                    )),
                                    !S && (S = Y.subarray()),
                                    (K += $ * S.length));
                              else if (-12 > X) {
                                P.logger.log(
                                  'drop overlapping AAC sample, expected/parsed/delta: ' +
                                    _(T, !0) +
                                    ' ms / ' +
                                    _(q, !0) +
                                    ' ms / ' +
                                    _(-X, !0) +
                                    ' ms'
                                ),
                                  (K -= Y.byteLength);
                                continue;
                              }
                              q = T;
                            }
                            if (((L = q), 0 < K)) {
                              K += m;
                              try {
                                b = new Uint8Array(K);
                              } catch (e) {
                                return void this.observer.trigger(
                                  k['default'].ERROR,
                                  {
                                    type: D.ErrorTypes.MUX_ERROR,
                                    details: D.ErrorDetails.REMUX_ALLOC_ERROR,
                                    fatal: !1,
                                    bytes: K,
                                    reason: 'fail allocating audio mdat ' + K
                                  }
                                );
                              }
                              if (!f) {
                                var Z = new DataView(b.buffer);
                                Z.setUint32(0, K), b.set(Q.types.mdat, 4);
                              }
                            } else return;
                            for (var ee = 0; ee < $; ee++)
                              (S = z.getSilentFrame(
                                e.manifestCodec || e.codec,
                                e.channelCount
                              )),
                                S ||
                                  (P.logger.log(
                                    'Unable to get silent frame for given audio codec; duplicating this frame instead.'
                                  ),
                                  (S = Y.subarray())),
                                b.set(S, m),
                                (m += S.byteLength),
                                (v = {
                                  size: S.byteLength,
                                  cts: 0,
                                  duration: 1024,
                                  flags: {
                                    isLeading: 0,
                                    isDependedOn: 0,
                                    hasRedundancy: 0,
                                    degradPrio: 0,
                                    dependsOn: 1
                                  }
                                }),
                                h.push(v);
                          }
                          b.set(Y, m);
                          var te = Y.byteLength;
                          (m += te),
                            (v = {
                              size: te,
                              cts: 0,
                              duration: 0,
                              flags: {
                                isLeading: 0,
                                isDependedOn: 0,
                                hasRedundancy: 0,
                                degradPrio: 0,
                                dependsOn: 1
                              }
                            }),
                            h.push(v),
                            (C = q);
                        }
                        var ae = 0;
                        if (
                          ((G = h.length),
                          2 <= G &&
                            ((ae = h[G - 2].duration), (v.duration = ae)),
                          G)
                        ) {
                          (this.nextAudioPts = T = C + c * ae),
                            (e.samples = h),
                            (R = f
                              ? new Uint8Array()
                              : Q.moof(e.sequenceNumber++, L / c, e)),
                            (e.samples = []);
                          var re = L / d,
                            ne = T / d,
                            oe = {
                              data1: R,
                              data2: b,
                              startPTS: re,
                              endPTS: ne,
                              startDTS: re,
                              endDTS: ne,
                              type: 'audio',
                              hasAudio: !0,
                              hasVideo: !1,
                              nb: G
                            };
                          return (
                            this.observer.trigger(
                              k['default'].FRAG_PARSING_DATA,
                              oe
                            ),
                            oe
                          );
                        }
                        return null;
                      }
                    }),
                    (a.remuxEmptyAudio = function n(e, t, a, r) {
                      var o = e.inputTimeScale,
                        s = e.samplerate ? e.samplerate : o,
                        l = o / s,
                        c = this.nextAudioPts,
                        u = (void 0 === c ? r.startDTS * o : c) + this._initDTS,
                        p = r.endDTS * o + this._initDTS,
                        g = 1024,
                        f = l * 1024,
                        m = d((p - u) / f),
                        y = z.getSilentFrame(
                          e.manifestCodec || e.codec,
                          e.channelCount
                        );
                      if ((P.logger.warn('remux empty Audio'), !y))
                        return void P.logger.trace(
                          'Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!'
                        );
                      for (var h = [], E = 0, T; E < m; E++)
                        (T = u + E * f), h.push({ unit: y, pts: T, dts: T });
                      (e.samples = h), this.remuxAudio(e, t, a);
                    }),
                    (a.remuxID3 = function a(e, t) {
                      var r = e.samples.length;
                      if (r) {
                        for (
                          var n = e.inputTimeScale,
                            o = this._initPTS,
                            i = this._initDTS,
                            d = 0,
                            s;
                          d < r;
                          d++
                        )
                          (s = e.samples[d]),
                            (s.pts = A(s.pts - o, t * n) / n),
                            (s.dts = A(s.dts - i, t * n) / n);
                        this.observer.trigger(
                          k['default'].FRAG_PARSING_METADATA,
                          { samples: e.samples }
                        ),
                          (e.samples = []);
                      }
                    }),
                    (a.remuxText = function a(e, t) {
                      var r = e.samples.length,
                        n = e.inputTimeScale,
                        o = this._initPTS;
                      if (r) {
                        for (var i = 0, d; i < r; i++)
                          (d = e.samples[i]), (d.pts = A(d.pts - o, t * n) / n);
                        e.samples.sort(function(e, t) {
                          return e.pts - t.pts;
                        }),
                          this.observer.trigger(
                            k['default'].FRAG_PARSING_USERDATA,
                            { samples: e.samples }
                          );
                      }
                      e.samples = [];
                    }),
                    e
                  );
                })(),
                re = ae,
                ne = (function() {
                  function e(e) {
                    this.observer = e;
                  }
                  var t = e.prototype;
                  return (
                    (t.destroy = function e() {}),
                    (t.resetTimeStamp = function e() {}),
                    (t.resetInitSegment = function e() {}),
                    (t.remux = function s(e, t, a, r, n, o, i, d) {
                      var l = this.observer,
                        c = '';
                      e && (c += 'audio'),
                        t && (c += 'video'),
                        l.trigger(k['default'].FRAG_PARSING_DATA, {
                          data1: d,
                          startPTS: n,
                          startDTS: n,
                          type: c,
                          hasAudio: !!e,
                          hasVideo: !!t,
                          nb: 1,
                          dropped: 0
                        }),
                        l.trigger(k['default'].FRAG_PARSED);
                    }),
                    e
                  );
                })(),
                oe = ne,
                ie = Object(I.getSelfScope)(),
                de;
              try {
                de = ie.performance.now.bind(ie.performance);
              } catch (e) {
                P.logger.debug(
                  'Unable to use Performance API on this environment'
                ),
                  (de = ie.Date.now);
              }
              var se = (function() {
                  function e(e, t, a, r) {
                    (this.observer = e),
                      (this.typeSupported = t),
                      (this.config = a),
                      (this.vendor = r);
                  }
                  var t = e.prototype;
                  return (
                    (t.destroy = function e() {
                      var t = this.demuxer;
                      t && t.destroy();
                    }),
                    (t.push = function p(e, t, a, r, n, o, i, d, s, l, c, u) {
                      var g = this;
                      if (
                        0 < e.byteLength &&
                        null != t &&
                        null != t.key &&
                        'AES-128' === t.method
                      ) {
                        var f = this.decrypter;
                        null == f &&
                          (f = this.decrypter = new L['default'](
                            this.observer,
                            this.config
                          ));
                        var m = de();
                        f.decrypt(e, t.key.buffer, t.iv.buffer, function(e) {
                          var p = de();
                          g.observer.trigger(k['default'].FRAG_DECRYPTED, {
                            stats: { tstart: m, tdecrypt: p }
                          }),
                            g.pushDecrypted(
                              new Uint8Array(e),
                              t,
                              new Uint8Array(a),
                              r,
                              n,
                              o,
                              i,
                              d,
                              s,
                              l,
                              c,
                              u
                            );
                        });
                      } else
                        this.pushDecrypted(
                          new Uint8Array(e),
                          t,
                          new Uint8Array(a),
                          r,
                          n,
                          o,
                          i,
                          d,
                          s,
                          l,
                          c,
                          u
                        );
                    }),
                    (t.pushDecrypted = function g(
                      e,
                      t,
                      a,
                      r,
                      n,
                      o,
                      d,
                      s,
                      l,
                      c,
                      u,
                      p
                    ) {
                      var f = this.demuxer,
                        m = this.remuxer;
                      if (!f || d || s) {
                        for (
                          var y = this.observer,
                            h = this.typeSupported,
                            E = this.config,
                            T = [
                              { demux: W, remux: re },
                              { demux: F['default'], remux: oe },
                              { demux: O, remux: re },
                              { demux: Y, remux: re }
                            ],
                            v = 0,
                            S = T.length,
                            b;
                          v < S && ((b = T[v]), !b.demux.probe(e));
                          v++
                        );
                        if (!b)
                          return void y.trigger(k['default'].ERROR, {
                            type: D.ErrorTypes.MEDIA_ERROR,
                            details: D.ErrorDetails.FRAG_PARSING_ERROR,
                            fatal: !0,
                            reason: 'no demux matching with content found'
                          });
                        (m && m instanceof b.remux) ||
                          (m = new b.remux(y, E, h, this.vendor)),
                          (f && f instanceof b.demux) ||
                            ((f = new b.demux(y, m, E, h)),
                            (this.probe = b.demux.probe)),
                          (this.demuxer = f),
                          (this.remuxer = m);
                      }
                      (d || s) &&
                        (f.resetInitSegment(a, r, n, c), m.resetInitSegment()),
                        d && (f.resetTimeStamp(p), m.resetTimeStamp(p)),
                        'function' == typeof f.setDecryptData &&
                          f.setDecryptData(t),
                        f.append(e, o, l, u);
                    }),
                    e
                  );
                })(),
                le = (n['default'] = se);
            },
            './src/demux/demuxer-worker.js': function r(e, t, a) {
              a.r(t);
              var n = a('./src/demux/demuxer-inline.js'),
                o = a('./src/events.js'),
                i = a('./src/utils/logger.js'),
                d = a('./node_modules/eventemitter3/index.js'),
                s = function t(e) {
                  var a = new d.EventEmitter();
                  (a.trigger = function t(e) {
                    for (
                      var r = arguments.length,
                        n = Array(1 < r ? r - 1 : 0),
                        o = 1;
                      o < r;
                      o++
                    )
                      n[o - 1] = arguments[o];
                    a.emit.apply(a, [e, e].concat(n));
                  }),
                    (a.off = function t(e) {
                      for (
                        var r = arguments.length,
                          n = Array(1 < r ? r - 1 : 0),
                          o = 1;
                        o < r;
                        o++
                      )
                        n[o - 1] = arguments[o];
                      a.removeListener.apply(a, [e].concat(n));
                    });
                  var r = function r(t, a) {
                    e.postMessage({ event: t, data: a });
                  };
                  e.addEventListener('message', function(t) {
                    var o = t.data;
                    switch (o.cmd) {
                      case 'init':
                        var d = JSON.parse(o.config);
                        (e.demuxer = new n['default'](
                          a,
                          o.typeSupported,
                          d,
                          o.vendor
                        )),
                          Object(i.enableLogs)(d.debug),
                          r('init', null);
                        break;
                      case 'demux':
                        e.demuxer.push(
                          o.data,
                          o.decryptdata,
                          o.initSegment,
                          o.audioCodec,
                          o.videoCodec,
                          o.timeOffset,
                          o.discontinuity,
                          o.trackSwitch,
                          o.contiguous,
                          o.duration,
                          o.accurateTimeOffset,
                          o.defaultInitPTS
                        );
                    }
                  }),
                    a.on(o['default'].FRAG_DECRYPTED, r),
                    a.on(o['default'].FRAG_PARSING_INIT_SEGMENT, r),
                    a.on(o['default'].FRAG_PARSED, r),
                    a.on(o['default'].ERROR, r),
                    a.on(o['default'].FRAG_PARSING_METADATA, r),
                    a.on(o['default'].FRAG_PARSING_USERDATA, r),
                    a.on(o['default'].INIT_PTS_FOUND, r),
                    a.on(o['default'].FRAG_PARSING_DATA, function(t, a) {
                      var r = [],
                        n = { event: t, data: a };
                      a.data1 &&
                        ((n.data1 = a.data1.buffer),
                        r.push(a.data1.buffer),
                        delete a.data1),
                        a.data2 &&
                          ((n.data2 = a.data2.buffer),
                          r.push(a.data2.buffer),
                          delete a.data2),
                        e.postMessage(n, r);
                    });
                };
              t['default'] = s;
            },
            './src/demux/id3.js': function r(e, t, a) {
              function n() {
                var e = Object(o.getSelfScope)();
                return (
                  s ||
                    'undefined' == typeof e.TextDecoder ||
                    (s = new e.TextDecoder('utf-8')),
                  s
                );
              }
              a.r(t),
                a.d(t, 'utf8ArrayToStr', function() {
                  return d;
                });
              var o = a('./src/utils/get-self-scope.js'),
                i = (function() {
                  function e() {}
                  return (
                    (e.isHeader = function a(e, t) {
                      return !!(
                        t + 10 <= e.length &&
                        73 === e[t] &&
                        68 === e[t + 1] &&
                        51 === e[t + 2] &&
                        255 > e[t + 3] &&
                        255 > e[t + 4] &&
                        128 > e[t + 6] &&
                        128 > e[t + 7] &&
                        128 > e[t + 8] &&
                        128 > e[t + 9]
                      );
                    }),
                    (e.isFooter = function a(e, t) {
                      return !!(
                        t + 10 <= e.length &&
                        51 === e[t] &&
                        68 === e[t + 1] &&
                        73 === e[t + 2] &&
                        255 > e[t + 3] &&
                        255 > e[t + 4] &&
                        128 > e[t + 6] &&
                        128 > e[t + 7] &&
                        128 > e[t + 8] &&
                        128 > e[t + 9]
                      );
                    }),
                    (e.getID3Data = function r(t, a) {
                      for (var n = a, o = 0; e.isHeader(t, a); ) {
                        o += 10;
                        var i = e._readSize(t, a + 6);
                        (o += i), e.isFooter(t, a + 10) && (o += 10), (a += o);
                      }
                      return 0 < o ? t.subarray(n, n + o) : void 0;
                    }),
                    (e._readSize = function a(e, t) {
                      var r = 0;
                      return (
                        (r = (127 & e[t]) << 21),
                        (r |= (127 & e[t + 1]) << 14),
                        (r |= (127 & e[t + 2]) << 7),
                        (r |= 127 & e[t + 3]),
                        r
                      );
                    }),
                    (e.getTimeStamp = function a(t) {
                      for (
                        var r = e.getID3Frames(t), n = 0, o;
                        n < r.length;
                        n++
                      )
                        if (((o = r[n]), e.isTimeStampFrame(o)))
                          return e._readTimeStamp(o);
                    }),
                    (e.isTimeStampFrame = function t(e) {
                      return (
                        e &&
                        'PRIV' === e.key &&
                        'com.apple.streaming.transportStreamTimestamp' ===
                          e.info
                      );
                    }),
                    (e._getFrameData = function a(t) {
                      var r = S(t[0], t[1], t[2], t[3]),
                        n = e._readSize(t, 4),
                        o = 10;
                      return { type: r, size: n, data: t.subarray(10, 10 + n) };
                    }),
                    (e.getID3Frames = function a(t) {
                      for (var r = 0, n = [], o; e.isHeader(t, r); ) {
                        (o = e._readSize(t, r + 6)), (r += 10);
                        for (var i = r + o; r + 8 < i; ) {
                          var d = e._getFrameData(t.subarray(r)),
                            s = e._decodeFrame(d);
                          s && n.push(s), (r += d.size + 10);
                        }
                        e.isFooter(t, r) && (r += 10);
                      }
                      return n;
                    }),
                    (e._decodeFrame = function a(t) {
                      return 'PRIV' === t.type
                        ? e._decodePrivFrame(t)
                        : 'W' === t.type[0]
                        ? e._decodeURLFrame(t)
                        : e._decodeTextFrame(t);
                    }),
                    (e._readTimeStamp = function t(e) {
                      if (8 === e.data.byteLength) {
                        var a = new Uint8Array(e.data),
                          r = 1 & a[3],
                          n = (a[4] << 23) + (a[5] << 15) + (a[6] << 7) + a[7];
                        return (n /= 45), r && (n += 47721858.84), E(n);
                      }
                    }),
                    (e._decodePrivFrame = function a(t) {
                      if (!(2 > t.size)) {
                        var r = e._utf8ArrayToStr(t.data, !0),
                          n = new Uint8Array(t.data.subarray(r.length + 1));
                        return { key: t.type, info: r, data: n.buffer };
                      }
                    }),
                    (e._decodeTextFrame = function a(t) {
                      if (!(2 > t.size)) {
                        if ('TXXX' === t.type) {
                          var r = 1,
                            n = e._utf8ArrayToStr(t.data.subarray(r), !0);
                          r += n.length + 1;
                          var o = e._utf8ArrayToStr(t.data.subarray(r));
                          return { key: t.type, info: n, data: o };
                        }
                        var i = e._utf8ArrayToStr(t.data.subarray(1));
                        return { key: t.type, data: i };
                      }
                    }),
                    (e._decodeURLFrame = function a(t) {
                      if ('WXXX' === t.type) {
                        if (2 > t.size) return;
                        var r = 1,
                          n = e._utf8ArrayToStr(t.data.subarray(r), !0);
                        r += n.length + 1;
                        var o = e._utf8ArrayToStr(t.data.subarray(r));
                        return { key: t.type, info: n, data: o };
                      }
                      var i = e._utf8ArrayToStr(t.data);
                      return { key: t.type, data: i };
                    }),
                    (e._utf8ArrayToStr = function a(e, t) {
                      void 0 === t && (t = !1);
                      var r = n();
                      if (r) {
                        var o = r.decode(e);
                        if (t) {
                          var d = o.indexOf('\0');
                          return -1 === d ? o : o.substring(0, d);
                        }
                        return o.replace(/\0/g, '');
                      }
                      for (var s = e.length, l = '', u = 0, p, g, f; u < s; ) {
                        if (((p = e[u++]), 0 === p && t)) return l;
                        if (0 !== p && 3 !== p)
                          switch (p >> 4) {
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                              l += S(p);
                              break;
                            case 12:
                            case 13:
                              (g = e[u++]),
                                (l += S(((31 & p) << 6) | (63 & g)));
                              break;
                            case 14:
                              (g = e[u++]),
                                (f = e[u++]),
                                (l += S(
                                  ((15 & p) << 12) |
                                    ((63 & g) << 6) |
                                    ((63 & f) << 0)
                                ));
                          }
                      }
                      return l;
                    }),
                    e
                  );
                })(),
                d = i._utf8ArrayToStr,
                s;
              t['default'] = i;
            },
            './src/demux/mp4demuxer.js': function n(e, t, r) {
              r.r(t);
              var o = r('./src/utils/logger.js'),
                i = r('./src/events.js'),
                d = a(2, 32) - 1,
                l = (function() {
                  function e(e, t) {
                    (this.observer = e), (this.remuxer = t);
                  }
                  var t = e.prototype;
                  return (
                    (t.resetTimeStamp = function t(e) {
                      this.initPTS = e;
                    }),
                    (t.resetInitSegment = function o(t, a, r, n) {
                      if (t && t.byteLength) {
                        var d = (this.initData = e.parseInitSegment(t));
                        null == a && (a = 'mp4a.40.5'),
                          null == r && (r = 'avc1.42e01e');
                        var s = {};
                        d.audio && d.video
                          ? (s.audiovideo = {
                              container: 'video/mp4',
                              codec: a + ',' + r,
                              initSegment: n ? t : null
                            })
                          : (d.audio &&
                              (s.audio = {
                                container: 'audio/mp4',
                                codec: a,
                                initSegment: n ? t : null
                              }),
                            d.video &&
                              (s.video = {
                                container: 'video/mp4',
                                codec: r,
                                initSegment: n ? t : null
                              })),
                          this.observer.trigger(
                            i['default'].FRAG_PARSING_INIT_SEGMENT,
                            { tracks: s }
                          );
                      } else
                        a && (this.audioCodec = a), r && (this.videoCodec = r);
                    }),
                    (e.probe = function a(t) {
                      return (
                        0 <
                        e.findBox(
                          { data: t, start: 0, end: u(t.length, 16384) },
                          ['moof']
                        ).length
                      );
                    }),
                    (e.bin2str = function t(e) {
                      return S.apply(null, e);
                    }),
                    (e.readUint16 = function a(e, t) {
                      e.data && ((t += e.start), (e = e.data));
                      var r = (e[t] << 8) | e[t + 1];
                      return 0 > r ? 65536 + r : r;
                    }),
                    (e.readUint32 = function a(e, t) {
                      e.data && ((t += e.start), (e = e.data));
                      var r =
                        (e[t] << 24) |
                        (e[t + 1] << 16) |
                        (e[t + 2] << 8) |
                        e[t + 3];
                      return 0 > r ? 4294967296 + r : r;
                    }),
                    (e.writeUint32 = function r(e, t, a) {
                      e.data && ((t += e.start), (e = e.data)),
                        (e[t] = a >> 24),
                        (e[t + 1] = 255 & (a >> 16)),
                        (e[t + 2] = 255 & (a >> 8)),
                        (e[t + 3] = 255 & a);
                    }),
                    (e.findBox = function r(t, a) {
                      var n = [],
                        o,
                        d,
                        s,
                        l,
                        c,
                        u,
                        p;
                      if (
                        (t.data
                          ? ((u = t.start), (l = t.end), (t = t.data))
                          : ((u = 0), (l = t.byteLength)),
                        !a.length)
                      )
                        return null;
                      for (o = u; o < l; )
                        (d = e.readUint32(t, o)),
                          (s = e.bin2str(t.subarray(o + 4, o + 8))),
                          (p = 1 < d ? o + d : l),
                          s === a[0] &&
                            (1 === a.length
                              ? n.push({ data: t, start: o + 8, end: p })
                              : ((c = e.findBox(
                                  { data: t, start: o + 8, end: p },
                                  a.slice(1)
                                )),
                                c.length && (n = n.concat(c)))),
                          (o = p);
                      return n;
                    }),
                    (e.parseSegmentIndex = function a(t) {
                      var r = e.findBox(t, ['moov'])[0],
                        n = r ? r.end : null,
                        o = 0,
                        d = e.findBox(t, ['sidx']),
                        s;
                      if (!d || !d[0]) return null;
                      (s = []), (d = d[0]);
                      var l = d.data[0];
                      o = 0 === l ? 8 : 16;
                      var c = e.readUint32(d, o);
                      o += 4;
                      var u = 0,
                        p = 0;
                      (o += 0 === l ? 8 : 16), (o += 2);
                      var g = d.end + 0,
                        f = e.readUint16(d, o);
                      o += 2;
                      for (var m = 0; m < f; m++) {
                        var y = o,
                          h = e.readUint32(d, y);
                        y += 4;
                        var E = 2147483647 & h,
                          T = (2147483648 & h) >>> 31;
                        if (1 === T)
                          return void console.warn(
                            'SIDX has hierarchical references (not supported)'
                          );
                        var v = e.readUint32(d, y);
                        (y += 4),
                          s.push({
                            referenceSize: E,
                            subsegmentDuration: v,
                            info: { duration: v / c, start: g, end: g + E - 1 }
                          }),
                          (g += E),
                          (y += 4),
                          (o = y);
                      }
                      return {
                        earliestPresentationTime: 0,
                        timescale: c,
                        version: l,
                        referencesCount: f,
                        references: s,
                        moovEndOffset: n
                      };
                    }),
                    (e.parseInitSegment = function a(t) {
                      var r = [],
                        n = e.findBox(t, ['moov', 'trak']);
                      return (
                        n.forEach(function(t) {
                          var a = e.findBox(t, ['tkhd'])[0];
                          if (a) {
                            var n = a.data[a.start],
                              i = 0 === n ? 12 : 20,
                              d = e.readUint32(a, i),
                              s = e.findBox(t, ['mdia', 'mdhd'])[0];
                            if (s) {
                              (n = s.data[s.start]), (i = 0 === n ? 12 : 20);
                              var l = e.readUint32(s, i),
                                c = e.findBox(t, ['mdia', 'hdlr'])[0];
                              if (c) {
                                var u = e.bin2str(
                                    c.data.subarray(c.start + 8, c.start + 12)
                                  ),
                                  p = { soun: 'audio', vide: 'video' }[u];
                                if (p) {
                                  var g = e.findBox(t, [
                                    'mdia',
                                    'minf',
                                    'stbl',
                                    'stsd'
                                  ]);
                                  if (g.length) {
                                    g = g[0];
                                    var f = e.bin2str(
                                      g.data.subarray(
                                        g.start + 12,
                                        g.start + 16
                                      )
                                    );
                                    o.logger.log(
                                      'MP4Demuxer:' + p + ':' + f + ' found'
                                    );
                                  }
                                  (r[d] = { timescale: l, type: p }),
                                    (r[p] = { timescale: l, id: d });
                                }
                              }
                            }
                          }
                        }),
                        r
                      );
                    }),
                    (e.getStartDTS = function n(t, r) {
                      var o, i, d;
                      return (
                        (o = e.findBox(r, ['moof', 'traf'])),
                        (i = [].concat.apply(
                          [],
                          o.map(function(r) {
                            return e.findBox(r, ['tfhd']).map(function(n) {
                              var o, i, d;
                              return (
                                (o = e.readUint32(n, 4)),
                                (i = t[o].timescale || 9e4),
                                (d = e.findBox(r, ['tfdt']).map(function(t) {
                                  var r, n;
                                  return (
                                    (r = t.data[t.start]),
                                    (n = e.readUint32(t, 4)),
                                    1 === r &&
                                      ((n *= a(2, 32)),
                                      (n += e.readUint32(t, 8))),
                                    n
                                  );
                                })[0]),
                                d / i
                              );
                            });
                          })
                        )),
                        (d = u.apply(null, i)),
                        isFinite(d) ? d : 0
                      );
                    }),
                    (e.offsetStartDTS = function o(t, r, n) {
                      e.findBox(r, ['moof', 'traf']).map(function(r) {
                        return e.findBox(r, ['tfhd']).map(function(o) {
                          var i = e.readUint32(o, 4),
                            d = t[i].timescale || 9e4;
                          e.findBox(r, ['tfdt']).map(function(t) {
                            var r = t.data[t.start],
                              o = e.readUint32(t, 4);
                            if (0 === r) e.writeUint32(t, 4, o - n * d);
                            else {
                              (o *= a(2, 32)),
                                (o += e.readUint32(t, 8)),
                                (o -= n * d),
                                (o = s(o, 0));
                              var i = T(o / 4294967296),
                                l = T(o % 4294967296);
                              e.writeUint32(t, 4, i), e.writeUint32(t, 8, l);
                            }
                          });
                        });
                      });
                    }),
                    (t.append = function o(t, a, r, n) {
                      var d = this.initData;
                      d ||
                        (this.resetInitSegment(
                          t,
                          this.audioCodec,
                          this.videoCodec,
                          !1
                        ),
                        (d = this.initData));
                      var s = this.initPTS,
                        l;
                      if (void 0 === s) {
                        var c = e.getStartDTS(d, t);
                        (this.initPTS = s = c - a),
                          this.observer.trigger(i['default'].INIT_PTS_FOUND, {
                            initPTS: s
                          });
                      }
                      e.offsetStartDTS(d, t, s),
                        (l = e.getStartDTS(d, t)),
                        this.remuxer.remux(
                          d.audio,
                          d.video,
                          null,
                          null,
                          l,
                          r,
                          n,
                          t
                        );
                    }),
                    (t.destroy = function e() {}),
                    e
                  );
                })();
              t['default'] = l;
            },
            './src/errors.ts': function r(e, t, a) {
              a.r(t),
                a.d(t, 'ErrorTypes', function() {
                  return n;
                }),
                a.d(t, 'ErrorDetails', function() {
                  return o;
                });
              var n;
              (function(e) {
                (e.NETWORK_ERROR = 'networkError'),
                  (e.MEDIA_ERROR = 'mediaError'),
                  (e.KEY_SYSTEM_ERROR = 'keySystemError'),
                  (e.MUX_ERROR = 'muxError'),
                  (e.OTHER_ERROR = 'otherError');
              })(n || (n = {}));
              var o;
              (function(e) {
                (e.KEY_SYSTEM_NO_KEYS = 'keySystemNoKeys'),
                  (e.KEY_SYSTEM_NO_ACCESS = 'keySystemNoAccess'),
                  (e.KEY_SYSTEM_NO_SESSION = 'keySystemNoSession'),
                  (e.KEY_SYSTEM_LICENSE_REQUEST_FAILED =
                    'keySystemLicenseRequestFailed'),
                  (e.KEY_SYSTEM_NO_INIT_DATA = 'keySystemNoInitData'),
                  (e.MANIFEST_LOAD_ERROR = 'manifestLoadError'),
                  (e.MANIFEST_LOAD_TIMEOUT = 'manifestLoadTimeOut'),
                  (e.MANIFEST_PARSING_ERROR = 'manifestParsingError'),
                  (e.MANIFEST_INCOMPATIBLE_CODECS_ERROR =
                    'manifestIncompatibleCodecsError'),
                  (e.LEVEL_EMPTY_ERROR = 'levelEmptyError'),
                  (e.LEVEL_LOAD_ERROR = 'levelLoadError'),
                  (e.LEVEL_LOAD_TIMEOUT = 'levelLoadTimeOut'),
                  (e.LEVEL_SWITCH_ERROR = 'levelSwitchError'),
                  (e.AUDIO_TRACK_LOAD_ERROR = 'audioTrackLoadError'),
                  (e.AUDIO_TRACK_LOAD_TIMEOUT = 'audioTrackLoadTimeOut'),
                  (e.FRAG_LOAD_ERROR = 'fragLoadError'),
                  (e.FRAG_LOAD_TIMEOUT = 'fragLoadTimeOut'),
                  (e.FRAG_DECRYPT_ERROR = 'fragDecryptError'),
                  (e.FRAG_PARSING_ERROR = 'fragParsingError'),
                  (e.REMUX_ALLOC_ERROR = 'remuxAllocError'),
                  (e.KEY_LOAD_ERROR = 'keyLoadError'),
                  (e.KEY_LOAD_TIMEOUT = 'keyLoadTimeOut'),
                  (e.BUFFER_ADD_CODEC_ERROR = 'bufferAddCodecError'),
                  (e.BUFFER_APPEND_ERROR = 'bufferAppendError'),
                  (e.BUFFER_APPENDING_ERROR = 'bufferAppendingError'),
                  (e.BUFFER_STALLED_ERROR = 'bufferStalledError'),
                  (e.BUFFER_FULL_ERROR = 'bufferFullError'),
                  (e.BUFFER_SEEK_OVER_HOLE = 'bufferSeekOverHole'),
                  (e.BUFFER_NUDGE_ON_STALL = 'bufferNudgeOnStall'),
                  (e.INTERNAL_EXCEPTION = 'internalException');
              })(o || (o = {}));
            },
            './src/events.js': function r(e, t, a) {
              a.r(t);
              var n = {
                MEDIA_ATTACHING: 'hlsMediaAttaching',
                MEDIA_ATTACHED: 'hlsMediaAttached',
                MEDIA_DETACHING: 'hlsMediaDetaching',
                MEDIA_DETACHED: 'hlsMediaDetached',
                BUFFER_RESET: 'hlsBufferReset',
                BUFFER_CODECS: 'hlsBufferCodecs',
                BUFFER_CREATED: 'hlsBufferCreated',
                BUFFER_APPENDING: 'hlsBufferAppending',
                BUFFER_APPENDED: 'hlsBufferAppended',
                BUFFER_EOS: 'hlsBufferEos',
                BUFFER_FLUSHING: 'hlsBufferFlushing',
                BUFFER_FLUSHED: 'hlsBufferFlushed',
                MANIFEST_LOADING: 'hlsManifestLoading',
                MANIFEST_LOADED: 'hlsManifestLoaded',
                MANIFEST_PARSED: 'hlsManifestParsed',
                LEVEL_SWITCHING: 'hlsLevelSwitching',
                LEVEL_SWITCHED: 'hlsLevelSwitched',
                LEVEL_LOADING: 'hlsLevelLoading',
                LEVEL_LOADED: 'hlsLevelLoaded',
                LEVEL_UPDATED: 'hlsLevelUpdated',
                LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',
                LEVELS_UPDATED: 'hlsLevelsUpdated',
                AUDIO_TRACKS_UPDATED: 'hlsAudioTracksUpdated',
                AUDIO_TRACK_SWITCHING: 'hlsAudioTrackSwitching',
                AUDIO_TRACK_SWITCHED: 'hlsAudioTrackSwitched',
                AUDIO_TRACK_LOADING: 'hlsAudioTrackLoading',
                AUDIO_TRACK_LOADED: 'hlsAudioTrackLoaded',
                SUBTITLE_TRACKS_UPDATED: 'hlsSubtitleTracksUpdated',
                SUBTITLE_TRACK_SWITCH: 'hlsSubtitleTrackSwitch',
                SUBTITLE_TRACK_LOADING: 'hlsSubtitleTrackLoading',
                SUBTITLE_TRACK_LOADED: 'hlsSubtitleTrackLoaded',
                SUBTITLE_FRAG_PROCESSED: 'hlsSubtitleFragProcessed',
                CUES_PARSED: 'hlsCuesParsed',
                NON_NATIVE_TEXT_TRACKS_FOUND: 'hlsNonNativeTextTracksFound',
                INIT_PTS_FOUND: 'hlsInitPtsFound',
                FRAG_LOADING: 'hlsFragLoading',
                FRAG_LOAD_PROGRESS: 'hlsFragLoadProgress',
                FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',
                FRAG_LOADED: 'hlsFragLoaded',
                FRAG_DECRYPTED: 'hlsFragDecrypted',
                FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',
                FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',
                FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',
                FRAG_PARSING_DATA: 'hlsFragParsingData',
                FRAG_PARSED: 'hlsFragParsed',
                FRAG_BUFFERED: 'hlsFragBuffered',
                FRAG_CHANGED: 'hlsFragChanged',
                FPS_DROP: 'hlsFpsDrop',
                FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',
                ERROR: 'hlsError',
                DESTROYING: 'hlsDestroying',
                KEY_LOADING: 'hlsKeyLoading',
                KEY_LOADED: 'hlsKeyLoaded',
                STREAM_STATE_TRANSITION: 'hlsStreamStateTransition',
                LIVE_BACK_BUFFER_REACHED: 'hlsLiveBackBufferReached'
              };
              t['default'] = n;
            },
            './src/hls.ts': function d(n, o, i) {
              function l(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function c(e, t, a) {
                return t && l(e.prototype, t), a && l(e, a), e;
              }
              function p(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function g(e, t, a) {
                return t && p(e.prototype, t), a && p(e, a), e;
              }
              function f(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function m(e, t, a) {
                return t && f(e.prototype, t), a && f(e, a), e;
              }
              function y(e, t) {
                var a = At[t];
                return !!a && !0 === a[e.slice(0, 4)];
              }
              function h(e, t) {
                return MediaSource.isTypeSupported(
                  (t || 'video') + '/mp4;codecs="' + e + '"'
                );
              }
              function v(e, t) {
                for (var a = e[t], r = t - 1, n; 0 <= r; r--)
                  (n = e[r]),
                    (n.programDateTime = a.programDateTime - 1e3 * n.duration),
                    (a = n);
              }
              function b(e, t) {
                e.rawProgramDateTime
                  ? (e.programDateTime = Date.parse(e.rawProgramDateTime))
                  : (null === t || void 0 === t ? void 0 : t.programDateTime) &&
                    (e.programDateTime = t.endProgramDateTime),
                  Object(st.isFiniteNumber)(e.programDateTime) ||
                    ((e.programDateTime = null), (e.rawProgramDateTime = null));
              }
              function _(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function R(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function A(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function k(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function D() {
                return window.MediaSource || window.WebKitMediaSource;
              }
              function L(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function C(e, t, a) {
                'audio' === t
                  ? (e.audioGroupIds || (e.audioGroupIds = []),
                    e.audioGroupIds.push(a))
                  : 'text' === t
                  ? (e.textGroupIds || (e.textGroupIds = []),
                    e.textGroupIds.push(a))
                  : void 0;
              }
              function P(e, t, a) {
                var r = e[t],
                  n = e[a],
                  o = n.startPTS;
                if (Object(st.isFiniteNumber)(o))
                  a > t
                    ? ((r.duration = o - r.start),
                      0 > r.duration &&
                        ct.logger.warn(
                          'negative duration computed for frag ' +
                            r.sn +
                            ',level ' +
                            r.level +
                            ', there should be some duration drift between playlist and fragment!'
                        ))
                    : ((n.duration = r.start - o),
                      0 > n.duration &&
                        ct.logger.warn(
                          'negative duration computed for frag ' +
                            n.sn +
                            ',level ' +
                            n.level +
                            ', there should be some duration drift between playlist and fragment!'
                        ));
                else if (a > t) {
                  var i = r.cc === n.cc;
                  n.start =
                    r.start +
                    (i && r.minEndPTS ? r.minEndPTS - r.start : r.duration);
                } else n.start = s(r.start - n.duration, 0);
              }
              function I(e, t, a, n, o, d) {
                var l = a,
                  c = n;
                if (Object(st.isFiniteNumber)(t.startPTS)) {
                  var p = r(t.startPTS - a);
                  (t.deltaPTS = Object(st.isFiniteNumber)(t.deltaPTS)
                    ? s(p, t.deltaPTS)
                    : p),
                    (l = s(a, t.startPTS)),
                    (a = u(a, t.startPTS)),
                    (c = u(n, t.endPTS)),
                    (n = s(n, t.endPTS)),
                    (o = u(o, t.startDTS)),
                    (d = s(d, t.endDTS));
                }
                var g = a - t.start;
                (t.start = t.startPTS = a),
                  (t.maxStartPTS = l),
                  (t.endPTS = n),
                  (t.minEndPTS = c),
                  (t.startDTS = o),
                  (t.endDTS = d),
                  (t.duration = n - a);
                var f = t.sn;
                if (!e || f < e.startSN || f > e.endSN) return 0;
                var m, y, h;
                for (
                  m = f - e.startSN, y = e.fragments, y[m] = t, h = m;
                  0 < h;
                  h--
                )
                  P(y, h, h - 1);
                for (h = m; h < y.length - 1; h++) P(y, h, h + 1);
                return (e.PTSKnown = !0), g;
              }
              function N(e, t) {
                t.initSegment &&
                  e.initSegment &&
                  (t.initSegment = e.initSegment);
                var a = 0,
                  r;
                if (
                  (O(e, t, function(e, n) {
                    (a = e.cc - n.cc),
                      Object(st.isFiniteNumber)(e.startPTS) &&
                        ((n.start = n.startPTS = e.startPTS),
                        (n.endPTS = e.endPTS),
                        (n.duration = e.duration),
                        (n.backtracked = e.backtracked),
                        (n.dropped = e.dropped),
                        (r = n)),
                      (t.PTSKnown = !0);
                  }),
                  !!t.PTSKnown)
                ) {
                  if (a) {
                    ct.logger.log(
                      'discontinuity sliding from playlist, take drift into account'
                    );
                    for (var n = t.fragments, o = 0; o < n.length; o++)
                      n[o].cc += a;
                  }
                  r
                    ? I(t, r, r.startPTS, r.endPTS, r.startDTS, r.endDTS)
                    : F(e, t),
                    (t.PTSKnown = e.PTSKnown);
                }
              }
              function x(e, t, a) {
                void 0 === a && (a = 0);
                var r = -1;
                O(e, t, function(e, t, a) {
                  (t.start = e.start), (r = a);
                });
                var n = t.fragments;
                if (0 > r)
                  return void n.forEach(function(e) {
                    e.start += a;
                  });
                for (var o = r + 1; o < n.length; o++)
                  n[o].start = n[o - 1].start + n[o - 1].duration;
              }
              function O(e, t, a) {
                if (e && t)
                  for (
                    var r = s(e.startSN, t.startSN) - t.startSN,
                      n = u(e.endSN, t.endSN) - t.startSN,
                      o = t.startSN - e.startSN,
                      d = r;
                    d <= n;
                    d++
                  ) {
                    var l = e.fragments[o + d],
                      c = t.fragments[d];
                    if (!l || !c) break;
                    a(l, c, d);
                  }
              }
              function F(e, t) {
                var a = t.startSN - e.startSN,
                  r = e.fragments,
                  n = t.fragments;
                if (!(0 > a || a > r.length))
                  for (var o = 0; o < n.length; o++) n[o].start += r[a].start;
              }
              function w(e, t, a) {
                var r =
                    1e3 *
                    (t.averagetargetduration
                      ? t.averagetargetduration
                      : t.targetduration),
                  n = r / 2;
                return (
                  e && t.endSN === e.endSN && (r = n),
                  a && (r = s(n, r - (window.performance.now() - a))),
                  E(r)
                );
              }
              function M(e, t) {
                for (var a = null, r = 0, n; r < e.length; r += 1)
                  if (((n = e[r]), n && n.cc === t)) {
                    a = n;
                    break;
                  }
                return a;
              }
              function B(e, t) {
                return Vt.search(e, function(e) {
                  return e.cc < t ? 1 : e.cc > t ? -1 : 0;
                });
              }
              function U(e, t, a) {
                var r = !1;
                return (
                  t &&
                    t.details &&
                    a &&
                    (a.endCC > a.startCC || (e && e.cc < a.startCC)) &&
                    (r = !0),
                  r
                );
              }
              function G(e, t) {
                var a = e.fragments,
                  r = t.fragments;
                if (!r.length || !a.length)
                  return void ct.logger.log('No fragments to align');
                var n = M(a, r[0].cc);
                return n && (!n || n.startPTS)
                  ? n
                  : void ct.logger.log('No frag in previous level to align on');
              }
              function K(e, t) {
                t.fragments.forEach(function(t) {
                  if (t) {
                    var a = t.start + e;
                    (t.start = t.startPTS = a), (t.endPTS = a + t.duration);
                  }
                }),
                  (t.PTSKnown = !0);
              }
              function H(e, t, a) {
                V(e, a, t), !a.PTSKnown && t && W(a, t.details);
              }
              function V(e, t, a) {
                if (U(e, a, t)) {
                  var r = G(a.details, t);
                  r &&
                    (ct.logger.log(
                      'Adjusting PTS using last level due to CC increase within current level'
                    ),
                    K(r.start, t));
                }
              }
              function W(e, t) {
                if (t && t.fragments.length) {
                  if (!e.hasProgramDateTime || !t.hasProgramDateTime) return;
                  var a = t.fragments[0].programDateTime,
                    r = e.fragments[0].programDateTime,
                    n = (r - a) / 1e3 + t.fragments[0].start;
                  Object(st.isFiniteNumber)(n) &&
                    (ct.logger.log(
                      'adjusting PTS using programDateTime delta, sliding:' +
                        n.toFixed(3)
                    ),
                    K(n, e));
                }
              }
              function j(e, t, a) {
                if (
                  null === t ||
                  !Array.isArray(e) ||
                  !e.length ||
                  !Object(st.isFiniteNumber)(t)
                )
                  return null;
                var r = e[0].programDateTime;
                if (t < (r || 0)) return null;
                var n = e[e.length - 1].endProgramDateTime;
                if (t >= (n || 0)) return null;
                a = a || 0;
                for (var o = 0, i; o < e.length; ++o)
                  if (((i = e[o]), z(t, a, i))) return i;
                return null;
              }
              function Y(e, t, a, r) {
                void 0 === a && (a = 0), void 0 === r && (r = 0);
                var n = null;
                if (
                  (e
                    ? (n = t[e.sn - t[0].sn + 1])
                    : 0 === a && 0 === t[0].start && (n = t[0]),
                  n && 0 === q(a, r, n))
                )
                  return n;
                var o = Vt.search(t, q.bind(null, a, r));
                return o ? o : n;
              }
              function q(e, t, a) {
                void 0 === e && (e = 0), void 0 === t && (t = 0);
                var r = u(t, a.duration + (a.deltaPTS ? a.deltaPTS : 0));
                return a.start + a.duration - r <= e
                  ? 1
                  : a.start - r > e && a.start
                  ? -1
                  : 0;
              }
              function z(e, t, a) {
                var r = 1e3 * u(t, a.duration + (a.deltaPTS ? a.deltaPTS : 0)),
                  n = a.endProgramDateTime || 0;
                return n - r > e;
              }
              function X(e) {
                if (void 0 === e)
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                return e;
              }
              function $(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function Q(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function Z(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function J(e, t, a) {
                return t && Z(e.prototype, t), a && Z(e, a), e;
              }
              function ee(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function te(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function ae(e, t, a) {
                return t && te(e.prototype, t), a && te(e, a), e;
              }
              function re(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function ne(e, t) {
                var a;
                try {
                  a = new Event('addtrack');
                } catch (e) {
                  (a = document.createEvent('Event')),
                    a.initEvent('addtrack', !1, !1);
                }
                (a.track = e), t.dispatchEvent(a);
              }
              function oe(e) {
                if (null === e || void 0 === e ? void 0 : e.cues)
                  for (; 0 < e.cues.length; ) e.removeCue(e.cues[0]);
              }
              function ie(e, t) {
                if (t < e[0].endTime) return e[0];
                if (t > e[e.length - 1].endTime) return e[e.length - 1];
                for (var a = 0, r = e.length - 1, n; a <= r; )
                  if (((n = T((r + a) / 2)), t < e[n].endTime)) r = n - 1;
                  else if (t > e[n].endTime) a = n + 1;
                  else return e[n];
                return e[a].endTime - t < t - e[r].endTime ? e[a] : e[r];
              }
              function de(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function se() {
                var e = D();
                if (!e) return !1;
                var t = self.SourceBuffer || self.WebKitSourceBuffer,
                  a =
                    e &&
                    'function' == typeof e.isTypeSupported &&
                    e.isTypeSupported(
                      'video/mp4; codecs="avc1.42E01E,mp4a.40.2"'
                    ),
                  r =
                    !t ||
                    (t.prototype &&
                      'function' == typeof t.prototype.appendBuffer &&
                      'function' == typeof t.prototype.remove);
                return !!a && !!r;
              }
              function le(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function ce(e, t, a) {
                return t && le(e.prototype, t), a && le(e, a), e;
              }
              function ue(e) {
                if (void 0 === e)
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                return e;
              }
              function pe(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function ge(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function fe(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function me(e, t, a) {
                return t && fe(e.prototype, t), a && fe(e, a), e;
              }
              function ye(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function he(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function Ee(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function Te(e, t, a) {
                return t && Ee(e.prototype, t), a && Ee(e, a), e;
              }
              function ve(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function Se(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function be(e, t, a) {
                return t && Se(e.prototype, t), a && Se(e, a), e;
              }
              function _e(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function Re() {
                (this.window = window),
                  (this.state = 'INITIAL'),
                  (this.buffer = ''),
                  (this.decoder = new ja()),
                  (this.regionList = []);
              }
              function Ae(e) {
                function t(e, t, a, r) {
                  return (
                    3600 * (0 | e) + 60 * (0 | t) + (0 | a) + (0 | r) / 1e3
                  );
                }
                var a = e.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
                return a
                  ? a[3]
                    ? t(a[1], a[2], a[3].replace(':', ''), a[4])
                    : 59 < a[1]
                    ? t(a[1], a[2], 0, a[4])
                    : t(0, a[1], a[2], a[4])
                  : null;
              }
              function ke() {
                this.values = Object.create(null);
              }
              function De(e, t, a, r) {
                var n = r ? e.split(r) : [e];
                for (var o in n)
                  if ('string' == typeof n[o]) {
                    var d = n[o].split(a);
                    if (2 === d.length) {
                      var s = d[0],
                        l = d[1];
                      t(s, l);
                    }
                  }
              }
              function Le(e, t, a) {
                function r() {
                  var t = Ae(e);
                  if (null === t) throw new Error('Malformed timestamp: ' + i);
                  return (e = e.replace(/^[^\sa-zA-Z-]+/, '')), t;
                }
                function n(e, t) {
                  var r = new ke();
                  De(
                    e,
                    function(e, t) {
                      switch (e) {
                        case 'region':
                          for (var n = a.length - 1; 0 <= n; n--)
                            if (a[n].id === t) {
                              r.set(e, a[n].region);
                              break;
                            }
                          break;
                        case 'vertical':
                          r.alt(e, t, ['rl', 'lr']);
                          break;
                        case 'line':
                          var o = t.split(','),
                            d = o[0];
                          r.integer(e, d),
                            r.percent(e, d) && r.set('snapToLines', !1),
                            r.alt(e, d, ['auto']),
                            2 === o.length &&
                              r.alt('lineAlign', o[1], ['start', za, 'end']);
                          break;
                        case 'position':
                          (o = t.split(',')),
                            r.percent(e, o[0]),
                            2 === o.length &&
                              r.alt('positionAlign', o[1], [
                                'start',
                                za,
                                'end',
                                'line-left',
                                'line-right',
                                'auto'
                              ]);
                          break;
                        case 'size':
                          r.percent(e, t);
                          break;
                        case 'align':
                          r.alt(e, t, ['start', za, 'end', 'left', 'right']);
                      }
                    },
                    /:/,
                    /\s/
                  ),
                    (t.region = r.get('region', null)),
                    (t.vertical = r.get('vertical', ''));
                  var n = r.get('line', 'auto');
                  'auto' === n && -1 === qa.line && (n = -1),
                    (t.line = n),
                    (t.lineAlign = r.get('lineAlign', 'start')),
                    (t.snapToLines = r.get('snapToLines', !0)),
                    (t.size = r.get('size', 100)),
                    (t.align = r.get('align', za));
                  var o = r.get('position', 'auto');
                  'auto' === o &&
                    50 === qa.position &&
                    (o =
                      'start' === t.align || 'left' === t.align
                        ? 0
                        : 'end' === t.align || 'right' === t.align
                        ? 100
                        : 50),
                    (t.position = o);
                }
                function o() {
                  e = e.replace(/^\s+/, '');
                }
                var i = e;
                if ((o(), (t.startTime = r()), o(), '-->' !== e.substr(0, 3)))
                  throw new Error(
                    "Malformed time stamp (time stamps must be separated by '-->'): " +
                      i
                  );
                (e = e.substr(3)), o(), (t.endTime = r()), o(), n(e, t);
              }
              function Ce(e) {
                return e.replace(/<br(?: \/)?>/gi, '\n');
              }
              function Pe(e, t, a, n) {
                for (
                  var o = [],
                    i = window.VTTCue || TextTrackCue,
                    d = 0,
                    l,
                    p,
                    g,
                    f,
                    m;
                  d < n.rows.length;
                  d++
                )
                  if (
                    ((l = n.rows[d]), (g = !0), (f = 0), (m = ''), !l.isEmpty())
                  ) {
                    for (var y = 0; y < l.chars.length; y++)
                      l.chars[y].uchar.match(/\s/) && g
                        ? f++
                        : ((m += l.chars[y].uchar), (g = !1));
                    (l.cueStartTime = t),
                      t === a && (a += 1e-4),
                      (p = new i(t, a, Ce(m.trim()))),
                      16 <= f ? f-- : f++,
                      (p.line = navigator.userAgent.match(/Firefox\//)
                        ? d + 1
                        : 7 < d
                        ? d - 2
                        : d + 1),
                      (p.align = 'left'),
                      (p.position = s(0, u(100, 100 * (f / 32)))),
                      o.push(p),
                      e && e.addCue(p);
                  }
                return o;
              }
              function Ie(e, t, a) {
                (a.a = e), (a.b = t);
              }
              function Ne(e, t, a) {
                return a.a === e && a.b === t;
              }
              function xe() {
                return { a: null, b: null };
              }
              function Oe(e) {
                if (void 0 === e)
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                return e;
              }
              function Fe(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function we(e, t) {
                return (
                  e && e.label === t.name && !(e.textTrack1 || e.textTrack2)
                );
              }
              function Me(e, t, a, r) {
                return u(t, r) - s(e, a);
              }
              function Be() {
                return {
                  ccOffset: 0,
                  presentationOffset: 0,
                  0: { start: 0, prevCC: -1, new: !1 }
                };
              }
              function Ue(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function Ge(e, t, a) {
                return t && Ue(e.prototype, t), a && Ue(e, a), e;
              }
              function Ke(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function He(e) {
                for (var t = [], a = 0, r; a < e.length; a++)
                  (r = e[a]), 'subtitles' === r.kind && r.label && t.push(e[a]);
                return t;
              }
              function Ve(e) {
                if (void 0 === e)
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                return e;
              }
              function We(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function je(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function Ye(e, t, a) {
                return t && je(e.prototype, t), a && je(e, a), e;
              }
              function qe(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              function ze(e, t) {
                var a = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                  var r = Object.getOwnPropertySymbols(e);
                  t &&
                    (r = r.filter(function(t) {
                      return Object.getOwnPropertyDescriptor(e, t).enumerable;
                    })),
                    a.push.apply(a, r);
                }
                return a;
              }
              function Xe(e) {
                for (var t = 1, a; t < arguments.length; t++)
                  (a = null == arguments[t] ? {} : arguments[t]),
                    t % 2
                      ? ze(Object(a), !0).forEach(function(t) {
                          $e(e, t, a[t]);
                        })
                      : Object.getOwnPropertyDescriptors
                      ? Object.defineProperties(
                          e,
                          Object.getOwnPropertyDescriptors(a)
                        )
                      : ze(Object(a)).forEach(function(t) {
                          Object.defineProperty(
                            e,
                            t,
                            Object.getOwnPropertyDescriptor(a, t)
                          );
                        });
                return e;
              }
              function $e(e, t, a) {
                return (
                  t in e
                    ? Object.defineProperty(e, t, {
                        value: a,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                      })
                    : (e[t] = a),
                  e
                );
              }
              function Qe() {
                return {
                  cueHandler: ot,
                  enableCEA708Captions: !0,
                  enableWebVTT: !0,
                  captionsTextTrack1Label: 'English',
                  captionsTextTrack1LanguageCode: 'en',
                  captionsTextTrack2Label: 'Spanish',
                  captionsTextTrack2LanguageCode: 'es',
                  captionsTextTrack3Label: 'Unknown CC',
                  captionsTextTrack3LanguageCode: '',
                  captionsTextTrack4Label: 'Unknown CC',
                  captionsTextTrack4LanguageCode: '',
                  renderTextTracksNatively: !0
                };
              }
              function Ze(e, t) {
                var a = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                  var r = Object.getOwnPropertySymbols(e);
                  t &&
                    (r = r.filter(function(t) {
                      return Object.getOwnPropertyDescriptor(e, t).enumerable;
                    })),
                    a.push.apply(a, r);
                }
                return a;
              }
              function Je(e) {
                for (var t = 1, a; t < arguments.length; t++)
                  (a = null == arguments[t] ? {} : arguments[t]),
                    t % 2
                      ? Ze(Object(a), !0).forEach(function(t) {
                          et(e, t, a[t]);
                        })
                      : Object.getOwnPropertyDescriptors
                      ? Object.defineProperties(
                          e,
                          Object.getOwnPropertyDescriptors(a)
                        )
                      : Ze(Object(a)).forEach(function(t) {
                          Object.defineProperty(
                            e,
                            t,
                            Object.getOwnPropertyDescriptor(a, t)
                          );
                        });
                return e;
              }
              function et(e, t, a) {
                return (
                  t in e
                    ? Object.defineProperty(e, t, {
                        value: a,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                      })
                    : (e[t] = a),
                  e
                );
              }
              function tt(e) {
                if (void 0 === e)
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                return e;
              }
              function at(e, t) {
                for (var a = 0, r; a < t.length; a++)
                  (r = t[a]),
                    (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    'value' in r && (r.writable = !0),
                    Object.defineProperty(e, r.key, r);
              }
              function rt(e, t, a) {
                return t && at(e.prototype, t), a && at(e, a), e;
              }
              function nt(e, t) {
                (e.prototype = Object.create(t.prototype)),
                  (e.prototype.constructor = e),
                  (e.__proto__ = t);
              }
              i.r(o),
                i.d(o, 'default', function() {
                  return Ur;
                });
              var ot = {};
              i.r(ot),
                i.d(ot, 'newCue', function() {
                  return Pe;
                });
              var it = i('./node_modules/url-toolkit/src/url-toolkit.js'),
                dt = i('./src/errors.ts'),
                st = i('./src/polyfills/number.js'),
                lt = i('./src/events.js'),
                ct = i('./src/utils/logger.js'),
                ut = {
                  hlsEventGeneric: !0,
                  hlsHandlerDestroying: !0,
                  hlsHandlerDestroyed: !0
                },
                pt = (function() {
                  function e(e) {
                    (this.hls = void 0),
                      (this.handledEvents = void 0),
                      (this.useGenericHandler = void 0),
                      (this.hls = e),
                      (this.onEvent = this.onEvent.bind(this));
                    for (
                      var t = arguments.length,
                        a = Array(1 < t ? t - 1 : 0),
                        r = 1;
                      r < t;
                      r++
                    )
                      a[r - 1] = arguments[r];
                    (this.handledEvents = a),
                      (this.useGenericHandler = !0),
                      this.registerListeners();
                  }
                  var t = e.prototype;
                  return (
                    (t.destroy = function e() {
                      this.onHandlerDestroying(),
                        this.unregisterListeners(),
                        this.onHandlerDestroyed();
                    }),
                    (t.onHandlerDestroying = function e() {}),
                    (t.onHandlerDestroyed = function e() {}),
                    (t.isEventHandler = function e() {
                      return (
                        'object' == typeof this.handledEvents &&
                        this.handledEvents.length &&
                        'function' == typeof this.onEvent
                      );
                    }),
                    (t.registerListeners = function e() {
                      this.isEventHandler() &&
                        this.handledEvents.forEach(function(e) {
                          if (ut[e])
                            throw new Error('Forbidden event-name: ' + e);
                          this.hls.on(e, this.onEvent);
                        }, this);
                    }),
                    (t.unregisterListeners = function e() {
                      this.isEventHandler() &&
                        this.handledEvents.forEach(function(e) {
                          this.hls.off(e, this.onEvent);
                        }, this);
                    }),
                    (t.onEvent = function a(e, t) {
                      this.onEventGeneric(e, t);
                    }),
                    (t.onEventGeneric = function a(e, t) {
                      var r = function a(e, t) {
                        var r = 'on' + e.replace('hls', '');
                        if ('function' != typeof this[r])
                          throw new Error(
                            'Event ' +
                              e +
                              ' has no generic handler in this ' +
                              this.constructor.name +
                              ' class (tried ' +
                              r +
                              ')'
                          );
                        return this[r].bind(this, t);
                      };
                      try {
                        r.call(this, e, t).call();
                      } catch (t) {
                        ct.logger.error(
                          'An internal error happened while handling event ' +
                            e +
                            '. Error message: "' +
                            t.message +
                            '". Here is a stacktrace:',
                          t
                        ),
                          this.hls.trigger(lt['default'].ERROR, {
                            type: dt.ErrorTypes.OTHER_ERROR,
                            details: dt.ErrorDetails.INTERNAL_EXCEPTION,
                            fatal: !1,
                            event: e,
                            err: t
                          });
                      }
                    }),
                    e
                  );
                })(),
                gt = pt,
                ft;
              (function(e) {
                (e.MANIFEST = 'manifest'),
                  (e.LEVEL = 'level'),
                  (e.AUDIO_TRACK = 'audioTrack'),
                  (e.SUBTITLE_TRACK = 'subtitleTrack');
              })(ft || (ft = {}));
              var mt;
              (function(e) {
                (e.MAIN = 'main'),
                  (e.AUDIO = 'audio'),
                  (e.SUBTITLE = 'subtitle');
              })(mt || (mt = {}));
              var yt = i('./src/demux/mp4demuxer.js'),
                ht = (function() {
                  function e(e, t) {
                    (this._uri = null),
                      (this.baseuri = void 0),
                      (this.reluri = void 0),
                      (this.method = null),
                      (this.key = null),
                      (this.iv = null),
                      (this.baseuri = e),
                      (this.reluri = t);
                  }
                  return (
                    c(e, [
                      {
                        key: 'uri',
                        get: function e() {
                          return (
                            !this._uri &&
                              this.reluri &&
                              (this._uri = Object(it.buildAbsoluteURL)(
                                this.baseuri,
                                this.reluri,
                                { alwaysNormalize: !0 }
                              )),
                            this._uri
                          );
                        }
                      }
                    ]),
                    e
                  );
                })(),
                Et;
              (function(e) {
                (e.AUDIO = 'audio'), (e.VIDEO = 'video');
              })(Et || (Et = {}));
              var Tt = (function() {
                  function e() {
                    var e;
                    (this._url = null),
                      (this._byteRange = null),
                      (this._decryptdata = null),
                      (this._elementaryStreams =
                        ((e = {}), (e[Et.AUDIO] = !1), (e[Et.VIDEO] = !1), e)),
                      (this.deltaPTS = 0),
                      (this.rawProgramDateTime = null),
                      (this.programDateTime = null),
                      (this.title = null),
                      (this.tagList = []),
                      (this.cc = void 0),
                      (this.type = void 0),
                      (this.relurl = void 0),
                      (this.baseurl = void 0),
                      (this.duration = void 0),
                      (this.start = void 0),
                      (this.sn = 0),
                      (this.urlId = 0),
                      (this.level = 0),
                      (this.levelkey = void 0),
                      (this.loader = void 0);
                  }
                  var t = e.prototype;
                  return (
                    (t.setByteRange = function a(e, t) {
                      var r = e.split('@', 2),
                        n = [];
                      (n[0] =
                        1 === r.length
                          ? t
                            ? t.byteRangeEndOffset
                            : 0
                          : parseInt(r[1])),
                        (n[1] = parseInt(r[0]) + n[0]),
                        (this._byteRange = n);
                    }),
                    (t.addElementaryStream = function t(e) {
                      this._elementaryStreams[e] = !0;
                    }),
                    (t.hasElementaryStream = function t(e) {
                      return !0 === this._elementaryStreams[e];
                    }),
                    (t.createInitializationVector = function t(e) {
                      for (var a = new Uint8Array(16), r = 12; 16 > r; r++)
                        a[r] = 255 & (e >> (8 * (15 - r)));
                      return a;
                    }),
                    (t.setDecryptDataFromLevelKey = function a(e, t) {
                      var r = e;
                      return (
                        (null === e || void 0 === e ? void 0 : e.method) &&
                          e.uri &&
                          !e.iv &&
                          ((r = new ht(e.baseuri, e.reluri)),
                          (r.method = e.method),
                          (r.iv = this.createInitializationVector(t))),
                        r
                      );
                    }),
                    g(e, [
                      {
                        key: 'url',
                        get: function e() {
                          return (
                            !this._url &&
                              this.relurl &&
                              (this._url = Object(it.buildAbsoluteURL)(
                                this.baseurl,
                                this.relurl,
                                { alwaysNormalize: !0 }
                              )),
                            this._url
                          );
                        },
                        set: function t(e) {
                          this._url = e;
                        }
                      },
                      {
                        key: 'byteRange',
                        get: function e() {
                          return this._byteRange ? this._byteRange : [];
                        }
                      },
                      {
                        key: 'byteRangeStartOffset',
                        get: function e() {
                          return this.byteRange[0];
                        }
                      },
                      {
                        key: 'byteRangeEndOffset',
                        get: function e() {
                          return this.byteRange[1];
                        }
                      },
                      {
                        key: 'decryptdata',
                        get: function e() {
                          if (!this.levelkey && !this._decryptdata) return null;
                          if (!this._decryptdata && this.levelkey) {
                            var t = this.sn;
                            'number' != typeof t &&
                              (this.levelkey &&
                                'AES-128' === this.levelkey.method &&
                                !this.levelkey.iv &&
                                ct.logger.warn(
                                  'missing IV for initialization segment with method="' +
                                    this.levelkey.method +
                                    '" - compliance issue'
                                ),
                              (t = 0)),
                              (this._decryptdata = this.setDecryptDataFromLevelKey(
                                this.levelkey,
                                t
                              ));
                          }
                          return this._decryptdata;
                        }
                      },
                      {
                        key: 'endProgramDateTime',
                        get: function e() {
                          if (null === this.programDateTime) return null;
                          if (!Object(st.isFiniteNumber)(this.programDateTime))
                            return null;
                          var t = Object(st.isFiniteNumber)(this.duration)
                            ? this.duration
                            : 0;
                          return this.programDateTime + 1e3 * t;
                        }
                      },
                      {
                        key: 'encrypted',
                        get: function e() {
                          return !!(
                            this.decryptdata &&
                            null !== this.decryptdata.uri &&
                            null === this.decryptdata.key
                          );
                        }
                      }
                    ]),
                    e
                  );
                })(),
                vt = (function() {
                  function e(e) {
                    (this.endCC = 0),
                      (this.endSN = 0),
                      (this.fragments = []),
                      (this.initSegment = null),
                      (this.live = !0),
                      (this.needSidxRanges = !1),
                      (this.startCC = 0),
                      (this.startSN = 0),
                      (this.startTimeOffset = null),
                      (this.targetduration = 0),
                      (this.totalduration = 0),
                      (this.type = null),
                      (this.url = e),
                      (this.version = null);
                  }
                  return (
                    m(e, [
                      {
                        key: 'hasProgramDateTime',
                        get: function e() {
                          return !!(
                            this.fragments[0] &&
                            Object(st.isFiniteNumber)(
                              this.fragments[0].programDateTime
                            )
                          );
                        }
                      }
                    ]),
                    e
                  );
                })(),
                St = /^(\d+)x(\d+)$/,
                bt = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g,
                _t = (function() {
                  function t(e) {
                    for (var a in ('string' == typeof e &&
                      (e = t.parseAttrList(e)),
                    e))
                      e.hasOwnProperty(a) && (this[a] = e[a]);
                  }
                  var a = t.prototype;
                  return (
                    (a.decimalInteger = function a(t) {
                      var r = parseInt(this[t], 10);
                      return r > e ? 1 / 0 : r;
                    }),
                    (a.hexadecimalInteger = function t(e) {
                      if (this[e]) {
                        var a = (this[e] || '0x').slice(2);
                        a = (1 & a.length ? '0' : '') + a;
                        for (
                          var r = new Uint8Array(a.length / 2), n = 0;
                          n < a.length / 2;
                          n++
                        )
                          r[n] = parseInt(a.slice(2 * n, 2 * n + 2), 16);
                        return r;
                      }
                      return null;
                    }),
                    (a.hexadecimalIntegerAsNumber = function a(t) {
                      var r = parseInt(this[t], 16);
                      return r > e ? 1 / 0 : r;
                    }),
                    (a.decimalFloatingPoint = function t(e) {
                      return parseFloat(this[e]);
                    }),
                    (a.enumeratedString = function t(e) {
                      return this[e];
                    }),
                    (a.decimalResolution = function t(e) {
                      var a = St.exec(this[e]);
                      return null === a
                        ? void 0
                        : {
                            width: parseInt(a[1], 10),
                            height: parseInt(a[2], 10)
                          };
                    }),
                    (t.parseAttrList = function t(e) {
                      var a = {},
                        r;
                      for (bt.lastIndex = 0; null !== (r = bt.exec(e)); ) {
                        var n = r[2],
                          o = '"';
                        0 === n.indexOf(o) &&
                          n.lastIndexOf(o) === n.length - 1 &&
                          (n = n.slice(1, -1)),
                          (a[r[1]] = n);
                      }
                      return a;
                    }),
                    t
                  );
                })(),
                Rt = _t,
                At = {
                  audio: {
                    a3ds: !0,
                    'ac-3': !0,
                    'ac-4': !0,
                    alac: !0,
                    alaw: !0,
                    dra1: !0,
                    'dts+': !0,
                    'dts-': !0,
                    dtsc: !0,
                    dtse: !0,
                    dtsh: !0,
                    'ec-3': !0,
                    enca: !0,
                    g719: !0,
                    g726: !0,
                    m4ae: !0,
                    mha1: !0,
                    mha2: !0,
                    mhm1: !0,
                    mhm2: !0,
                    mlpa: !0,
                    mp4a: !0,
                    'raw ': !0,
                    Opus: !0,
                    samr: !0,
                    sawb: !0,
                    sawp: !0,
                    sevc: !0,
                    sqcp: !0,
                    ssmv: !0,
                    twos: !0,
                    ulaw: !0
                  },
                  video: {
                    avc1: !0,
                    avc2: !0,
                    avc3: !0,
                    avc4: !0,
                    avcp: !0,
                    drac: !0,
                    dvav: !0,
                    dvhe: !0,
                    encv: !0,
                    hev1: !0,
                    hvc1: !0,
                    mjp2: !0,
                    mp4v: !0,
                    mvc1: !0,
                    mvc2: !0,
                    mvc3: !0,
                    mvc4: !0,
                    resv: !0,
                    rv60: !0,
                    s263: !0,
                    svc1: !0,
                    svc2: !0,
                    'vc-1': !0,
                    vp08: !0,
                    vp09: !0
                  }
                },
                kt = /(?:#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)|#EXT-X-SESSION-DATA:([^\n\r]*)[\r\n]+)/g,
                Dt = /#EXT-X-MEDIA:(.*)/g,
                Lt = new RegExp(
                  [
                    /#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,
                    /|(?!#)([\S+ ?]+)/.source,
                    /|#EXT-X-BYTERANGE:*(.+)/.source,
                    /|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,
                    /|#.*/.source
                  ].join(''),
                  'g'
                ),
                Ct = /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/,
                Pt = /\.(mp4|m4s|m4v|m4a)$/i,
                It = (function() {
                  function e() {}
                  return (
                    (e.findGroup = function a(e, t) {
                      for (var r = 0, n; r < e.length; r++)
                        if (((n = e[r]), n.id === t)) return n;
                    }),
                    (e.convertAVC1ToAVCOTI = function t(e) {
                      var a = e.split('.'),
                        r;
                      return (
                        2 < a.length
                          ? ((r = a.shift() + '.'),
                            (r += parseInt(a.shift()).toString(16)),
                            (r += (
                              '000' + parseInt(a.shift()).toString(16)
                            ).substr(-4)))
                          : (r = e),
                        r
                      );
                    }),
                    (e.resolve = function a(e, t) {
                      return it.buildAbsoluteURL(t, e, { alwaysNormalize: !0 });
                    }),
                    (e.parseMasterPlaylist = function r(t, a) {
                      function n(e, t) {
                        ['video', 'audio'].forEach(function(a) {
                          var r = e.filter(function(e) {
                            return y(e, a);
                          });
                          if (r.length) {
                            var n = r.filter(function(e) {
                              return (
                                0 === e.lastIndexOf('avc1', 0) ||
                                0 === e.lastIndexOf('mp4a', 0)
                              );
                            });
                            (t[a + 'Codec'] = 0 < n.length ? n[0] : r[0]),
                              (e = e.filter(function(e) {
                                return -1 === r.indexOf(e);
                              }));
                          }
                        }),
                          (t.unknownCodecs = e);
                      }
                      var o = [],
                        i = {},
                        d = !1;
                      kt.lastIndex = 0;
                      for (var s; null != (s = kt.exec(t)); )
                        if (s[1]) {
                          var l = {},
                            c = (l.attrs = new Rt(s[1]));
                          l.url = e.resolve(s[2], a);
                          var u = c.decimalResolution('RESOLUTION');
                          u && ((l.width = u.width), (l.height = u.height)),
                            (l.bitrate =
                              c.decimalInteger('AVERAGE-BANDWIDTH') ||
                              c.decimalInteger('BANDWIDTH')),
                            (l.name = c.NAME),
                            n([].concat((c.CODECS || '').split(/[ ,]+/)), l),
                            l.videoCodec &&
                              -1 !== l.videoCodec.indexOf('avc1') &&
                              (l.videoCodec = e.convertAVC1ToAVCOTI(
                                l.videoCodec
                              )),
                            o.push(l);
                        } else if (s[3]) {
                          var p = new Rt(s[3]);
                          p['DATA-ID'] && ((d = !0), (i[p['DATA-ID']] = p));
                        }
                      return { levels: o, sessionData: d ? i : null };
                    }),
                    (e.parseMasterPlaylistMedia = function o(t, a, r, n) {
                      void 0 === n && (n = []);
                      var i = [],
                        d = 0,
                        s;
                      for (Dt.lastIndex = 0; null !== (s = Dt.exec(t)); ) {
                        var l = new Rt(s[1]);
                        if (l.TYPE === r) {
                          var c = {
                            attrs: l,
                            id: d++,
                            groupId: l['GROUP-ID'],
                            instreamId: l['INSTREAM-ID'],
                            name: l.NAME || l.LANGUAGE,
                            type: r,
                            default: 'YES' === l.DEFAULT,
                            autoselect: 'YES' === l.AUTOSELECT,
                            forced: 'YES' === l.FORCED,
                            lang: l.LANGUAGE
                          };
                          if (
                            (l.URI && (c.url = e.resolve(l.URI, a)), n.length)
                          ) {
                            var u = e.findGroup(n, c.groupId);
                            c.audioCodec = u ? u.codec : n[0].codec;
                          }
                          i.push(c);
                        }
                      }
                      return i;
                    }),
                    (e.parseLevelPlaylist = function o(e, t, a, r, n) {
                      var d = 0,
                        s = 0,
                        l = new vt(t),
                        c = 0,
                        u = null,
                        p = new Tt(),
                        g = null,
                        f,
                        m,
                        y;
                      for (Lt.lastIndex = 0; null !== (f = Lt.exec(e)); ) {
                        var h = f[1];
                        if (h) {
                          p.duration = parseFloat(h);
                          var E = (' ' + f[2]).slice(1);
                          (p.title = E || null),
                            p.tagList.push(E ? ['INF', h, E] : ['INF', h]);
                        } else if (f[3]) {
                          if (Object(st.isFiniteNumber)(p.duration)) {
                            var T = d++;
                            (p.type = r),
                              (p.start = s),
                              y && (p.levelkey = y),
                              (p.sn = T),
                              (p.level = a),
                              (p.cc = c),
                              (p.urlId = n),
                              (p.baseurl = t),
                              (p.relurl = (' ' + f[3]).slice(1)),
                              b(p, u),
                              l.fragments.push(p),
                              (u = p),
                              (s += p.duration),
                              (p = new Tt());
                          }
                        } else if (f[4]) {
                          var S = (' ' + f[4]).slice(1);
                          u ? p.setByteRange(S, u) : p.setByteRange(S);
                        } else if (f[5])
                          (p.rawProgramDateTime = (' ' + f[5]).slice(1)),
                            p.tagList.push([
                              'PROGRAM-DATE-TIME',
                              p.rawProgramDateTime
                            ]),
                            null === g && (g = l.fragments.length);
                        else {
                          if (((f = f[0].match(Ct)), !f)) {
                            ct.logger.warn(
                              'No matches on slow regex match for level playlist!'
                            );
                            continue;
                          }
                          for (
                            m = 1;
                            m < f.length && 'undefined' == typeof f[m];
                            m++
                          );
                          var _ = (' ' + f[m + 1]).slice(1),
                            R = (' ' + f[m + 2]).slice(1);
                          switch (f[m]) {
                            case '#':
                              p.tagList.push(R ? [_, R] : [_]);
                              break;
                            case 'PLAYLIST-TYPE':
                              l.type = _.toUpperCase();
                              break;
                            case 'MEDIA-SEQUENCE':
                              d = l.startSN = parseInt(_);
                              break;
                            case 'TARGETDURATION':
                              l.targetduration = parseFloat(_);
                              break;
                            case 'VERSION':
                              l.version = parseInt(_);
                              break;
                            case 'EXTM3U':
                              break;
                            case 'ENDLIST':
                              l.live = !1;
                              break;
                            case 'DIS':
                              c++, p.tagList.push(['DIS']);
                              break;
                            case 'DISCONTINUITY-SEQ':
                              c = parseInt(_);
                              break;
                            case 'KEY': {
                              var A = _,
                                k = new Rt(A),
                                D = k.enumeratedString('METHOD'),
                                L = k.URI,
                                C = k.hexadecimalInteger('IV'),
                                P = k.KEYFORMAT || 'identity';
                              if ('com.apple.streamingkeydelivery' === P) {
                                ct.logger.warn(
                                  'Keyformat com.apple.streamingkeydelivery is not supported'
                                );
                                continue;
                              }
                              D &&
                                ((y = new ht(t, L)),
                                L &&
                                  0 <=
                                    [
                                      'AES-128',
                                      'SAMPLE-AES',
                                      'SAMPLE-AES-CENC'
                                    ].indexOf(D) &&
                                  ((y.method = D), (y.key = null), (y.iv = C)));
                              break;
                            }
                            case 'START': {
                              var I = new Rt(_),
                                N = I.decimalFloatingPoint('TIME-OFFSET');
                              Object(st.isFiniteNumber)(N) &&
                                (l.startTimeOffset = N);
                              break;
                            }
                            case 'MAP': {
                              var x = new Rt(_);
                              (p.relurl = x.URI),
                                x.BYTERANGE && p.setByteRange(x.BYTERANGE),
                                (p.baseurl = t),
                                (p.level = a),
                                (p.type = r),
                                (p.sn = 'initSegment'),
                                (l.initSegment = p),
                                (p = new Tt()),
                                (p.rawProgramDateTime =
                                  l.initSegment.rawProgramDateTime);
                              break;
                            }
                            default:
                              ct.logger.warn(
                                'line parsed but not handled: ' + f
                              );
                          }
                        }
                      }
                      return (
                        (p = u),
                        p &&
                          !p.relurl &&
                          (l.fragments.pop(), (s -= p.duration)),
                        (l.totalduration = s),
                        (l.averagetargetduration = s / l.fragments.length),
                        (l.endSN = d - 1),
                        (l.startCC = l.fragments[0] ? l.fragments[0].cc : 0),
                        (l.endCC = c),
                        !l.initSegment &&
                          l.fragments.length &&
                          l.fragments.every(function(e) {
                            return Pt.test(e.relurl);
                          }) &&
                          (ct.logger.warn(
                            'MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX'
                          ),
                          (p = new Tt()),
                          (p.relurl = l.fragments[0].relurl),
                          (p.baseurl = t),
                          (p.level = a),
                          (p.type = r),
                          (p.sn = 'initSegment'),
                          (l.initSegment = p),
                          (l.needSidxRanges = !0)),
                        g && v(l.fragments, g),
                        l
                      );
                    }),
                    e
                  );
                })(),
                Nt = window,
                xt = Nt.performance,
                Ot = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a =
                        e.call(
                          this,
                          t,
                          lt['default'].MANIFEST_LOADING,
                          lt['default'].LEVEL_LOADING,
                          lt['default'].AUDIO_TRACK_LOADING,
                          lt['default'].SUBTITLE_TRACK_LOADING
                        ) || this),
                      (a.loaders = {}),
                      a
                    );
                  }
                  _(t, e),
                    (t.canHaveQualityLevels = function t(e) {
                      return e !== ft.AUDIO_TRACK && e !== ft.SUBTITLE_TRACK;
                    }),
                    (t.mapContextToLevelType = function t(e) {
                      var a = e.type;
                      return a === ft.AUDIO_TRACK
                        ? mt.AUDIO
                        : a === ft.SUBTITLE_TRACK
                        ? mt.SUBTITLE
                        : mt.MAIN;
                    }),
                    (t.getResponseUrl = function a(e, t) {
                      var r = e.url;
                      return (
                        (void 0 === r || 0 === r.indexOf('data:')) &&
                          (r = t.url),
                        r
                      );
                    });
                  var a = t.prototype;
                  return (
                    (a.createInternalLoader = function t(e) {
                      var a = this.hls.config,
                        r = a.pLoader,
                        n = a.loader,
                        o = r || n,
                        i = new o(a);
                      return (e.loader = i), (this.loaders[e.type] = i), i;
                    }),
                    (a.getInternalLoader = function t(e) {
                      return this.loaders[e.type];
                    }),
                    (a.resetInternalLoader = function t(e) {
                      this.loaders[e] && delete this.loaders[e];
                    }),
                    (a.destroyInternalLoaders = function e() {
                      for (var t in this.loaders) {
                        var a = this.loaders[t];
                        a && a.destroy(), this.resetInternalLoader(t);
                      }
                    }),
                    (a.destroy = function t() {
                      this.destroyInternalLoaders(),
                        e.prototype.destroy.call(this);
                    }),
                    (a.onManifestLoading = function t(e) {
                      this.load({
                        url: e.url,
                        type: ft.MANIFEST,
                        level: 0,
                        id: null,
                        responseType: 'text'
                      });
                    }),
                    (a.onLevelLoading = function t(e) {
                      this.load({
                        url: e.url,
                        type: ft.LEVEL,
                        level: e.level,
                        id: e.id,
                        responseType: 'text'
                      });
                    }),
                    (a.onAudioTrackLoading = function t(e) {
                      this.load({
                        url: e.url,
                        type: ft.AUDIO_TRACK,
                        level: null,
                        id: e.id,
                        responseType: 'text'
                      });
                    }),
                    (a.onSubtitleTrackLoading = function t(e) {
                      this.load({
                        url: e.url,
                        type: ft.SUBTITLE_TRACK,
                        level: null,
                        id: e.id,
                        responseType: 'text'
                      });
                    }),
                    (a.load = function t(e) {
                      var a = this.hls.config;
                      ct.logger.debug(
                        'Loading playlist of type ' +
                          e.type +
                          ', level: ' +
                          e.level +
                          ', id: ' +
                          e.id
                      );
                      var r = this.getInternalLoader(e);
                      if (r) {
                        var n = r.context;
                        if (n && n.url === e.url)
                          return (
                            ct.logger.trace('playlist request ongoing'), !1
                          );
                        ct.logger.warn(
                          'aborting previous loader for type: ' + e.type
                        ),
                          r.abort();
                      }
                      var o, i, d, s;
                      switch (e.type) {
                        case ft.MANIFEST:
                          (o = a.manifestLoadingMaxRetry),
                            (i = a.manifestLoadingTimeOut),
                            (d = a.manifestLoadingRetryDelay),
                            (s = a.manifestLoadingMaxRetryTimeout);
                          break;
                        case ft.LEVEL:
                          (o = 0),
                            (s = 0),
                            (d = 0),
                            (i = a.levelLoadingTimeOut);
                          break;
                        default:
                          (o = a.levelLoadingMaxRetry),
                            (i = a.levelLoadingTimeOut),
                            (d = a.levelLoadingRetryDelay),
                            (s = a.levelLoadingMaxRetryTimeout);
                      }
                      r = this.createInternalLoader(e);
                      var l = {
                          timeout: i,
                          maxRetry: o,
                          retryDelay: d,
                          maxRetryDelay: s
                        },
                        c = {
                          onSuccess: this.loadsuccess.bind(this),
                          onError: this.loaderror.bind(this),
                          onTimeout: this.loadtimeout.bind(this)
                        };
                      return (
                        ct.logger.debug(
                          'Calling internal loader delegate for URL: ' + e.url
                        ),
                        r.load(e, l, c),
                        !0
                      );
                    }),
                    (a.loadsuccess = function n(e, t, a, r) {
                      if ((void 0 === r && (r = null), a.isSidxRequest))
                        return (
                          this._handleSidxRequest(e, a),
                          void this._handlePlaylistLoaded(e, t, a, r)
                        );
                      if (
                        (this.resetInternalLoader(a.type),
                        'string' != typeof e.data)
                      )
                        throw new Error(
                          'expected responseType of "text" for PlaylistLoader'
                        );
                      var o = e.data;
                      return (
                        (t.tload = xt.now()),
                        0 === o.indexOf('#EXTM3U')
                          ? void (0 < o.indexOf('#EXTINF:') ||
                            0 < o.indexOf('#EXT-X-TARGETDURATION:')
                              ? this._handleTrackOrLevelPlaylist(e, t, a, r)
                              : this._handleMasterPlaylist(e, t, a, r))
                          : void this._handleManifestParsingError(
                              e,
                              a,
                              'no EXTM3U delimiter',
                              r
                            )
                      );
                    }),
                    (a.loaderror = function r(e, t, a) {
                      void 0 === a && (a = null),
                        this._handleNetworkError(t, a, !1, e);
                    }),
                    (a.loadtimeout = function r(e, t, a) {
                      void 0 === a && (a = null),
                        this._handleNetworkError(t, a, !0);
                    }),
                    (a._handleMasterPlaylist = function o(e, a, r, n) {
                      var i = this.hls,
                        d = e.data,
                        s = t.getResponseUrl(e, r),
                        l = It.parseMasterPlaylist(d, s),
                        c = l.levels,
                        u = l.sessionData;
                      if (!c.length)
                        return void this._handleManifestParsingError(
                          e,
                          r,
                          'no level found in manifest',
                          n
                        );
                      var p = c.map(function(e) {
                          return { id: e.attrs.AUDIO, codec: e.audioCodec };
                        }),
                        g = It.parseMasterPlaylistMedia(d, s, 'AUDIO', p),
                        f = It.parseMasterPlaylistMedia(d, s, 'SUBTITLES'),
                        m = It.parseMasterPlaylistMedia(
                          d,
                          s,
                          'CLOSED-CAPTIONS'
                        );
                      if (g.length) {
                        var y = !1;
                        g.forEach(function(e) {
                          e.url || (y = !0);
                        }),
                          !1 == y &&
                            c[0].audioCodec &&
                            !c[0].attrs.AUDIO &&
                            (ct.logger.log(
                              'audio codec signaled in quality level, but no embedded audio track signaled, create one'
                            ),
                            g.unshift({
                              type: 'main',
                              name: 'main',
                              default: !1,
                              autoselect: !1,
                              forced: !1,
                              id: -1,
                              attrs: {},
                              url: ''
                            }));
                      }
                      i.trigger(lt['default'].MANIFEST_LOADED, {
                        levels: c,
                        audioTracks: g,
                        subtitles: f,
                        captions: m,
                        url: s,
                        stats: a,
                        networkDetails: n,
                        sessionData: u
                      });
                    }),
                    (a._handleTrackOrLevelPlaylist = function o(e, a, r, n) {
                      var i = this.hls,
                        d = r.id,
                        s = r.level,
                        l = r.type,
                        c = t.getResponseUrl(e, r),
                        u = Object(st.isFiniteNumber)(d) ? d : 0,
                        p = Object(st.isFiniteNumber)(s) ? s : u,
                        g = t.mapContextToLevelType(r),
                        f = It.parseLevelPlaylist(e.data, c, p, g, u);
                      if (((f.tload = a.tload), !f.fragments.length))
                        return void i.trigger(lt['default'].ERROR, {
                          type: dt.ErrorTypes.NETWORK_ERROR,
                          details: dt.ErrorDetails.LEVEL_EMPTY_ERROR,
                          fatal: !1,
                          url: c,
                          reason: 'no fragments found in level',
                          level: 'number' == typeof r.level ? r.level : void 0
                        });
                      if (l === ft.MANIFEST) {
                        var m = { url: c, details: f };
                        i.trigger(lt['default'].MANIFEST_LOADED, {
                          levels: [m],
                          audioTracks: [],
                          url: c,
                          stats: a,
                          networkDetails: n,
                          sessionData: null
                        });
                      }
                      if (((a.tparsed = xt.now()), f.needSidxRanges)) {
                        var y = f.initSegment.url;
                        return void this.load({
                          url: y,
                          isSidxRequest: !0,
                          type: l,
                          level: s,
                          levelDetails: f,
                          id: d,
                          rangeStart: 0,
                          rangeEnd: 2048,
                          responseType: 'arraybuffer'
                        });
                      }
                      (r.levelDetails = f),
                        this._handlePlaylistLoaded(e, a, r, n);
                    }),
                    (a._handleSidxRequest = function a(e, t) {
                      if ('string' == typeof e.data)
                        throw new Error(
                          'sidx request must be made with responseType of array buffer'
                        );
                      var r = yt['default'].parseSegmentIndex(
                        new Uint8Array(e.data)
                      );
                      if (r) {
                        var n = r.references,
                          o = t.levelDetails;
                        n.forEach(function(e, t) {
                          var a = e.info;
                          if (o) {
                            var r = o.fragments[t];
                            0 === r.byteRange.length &&
                              r.setByteRange(
                                1 + a.end - a.start + '@' + (a.start + '')
                              );
                          }
                        }),
                          o &&
                            o.initSegment.setByteRange(r.moovEndOffset + '@0');
                      }
                    }),
                    (a._handleManifestParsingError = function n(e, t, a, r) {
                      this.hls.trigger(lt['default'].ERROR, {
                        type: dt.ErrorTypes.NETWORK_ERROR,
                        details: dt.ErrorDetails.MANIFEST_PARSING_ERROR,
                        fatal: !0,
                        url: e.url,
                        reason: a,
                        networkDetails: r
                      });
                    }),
                    (a._handleNetworkError = function n(e, t, a, r) {
                      void 0 === a && (a = !1),
                        void 0 === r && (r = null),
                        ct.logger.info(
                          'A network error occured while loading a ' +
                            e.type +
                            '-type playlist'
                        );
                      var o = this.getInternalLoader(e),
                        i,
                        d;
                      switch (e.type) {
                        case ft.MANIFEST:
                          (i = a
                            ? dt.ErrorDetails.MANIFEST_LOAD_TIMEOUT
                            : dt.ErrorDetails.MANIFEST_LOAD_ERROR),
                            (d = !0);
                          break;
                        case ft.LEVEL:
                          (i = a
                            ? dt.ErrorDetails.LEVEL_LOAD_TIMEOUT
                            : dt.ErrorDetails.LEVEL_LOAD_ERROR),
                            (d = !1);
                          break;
                        case ft.AUDIO_TRACK:
                          (i = a
                            ? dt.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT
                            : dt.ErrorDetails.AUDIO_TRACK_LOAD_ERROR),
                            (d = !1);
                          break;
                        default:
                          d = !1;
                      }
                      o && (o.abort(), this.resetInternalLoader(e.type));
                      var s = {
                        type: dt.ErrorTypes.NETWORK_ERROR,
                        details: i,
                        fatal: d,
                        url: e.url,
                        loader: o,
                        context: e,
                        networkDetails: t
                      };
                      r && (s.response = r),
                        this.hls.trigger(lt['default'].ERROR, s);
                    }),
                    (a._handlePlaylistLoaded = function o(e, a, r, n) {
                      var i = r.type,
                        d = r.level,
                        s = r.id,
                        l = r.levelDetails;
                      if (!l || !l.targetduration)
                        return void this._handleManifestParsingError(
                          e,
                          r,
                          'invalid target duration',
                          n
                        );
                      var c = t.canHaveQualityLevels(r.type);
                      c
                        ? this.hls.trigger(lt['default'].LEVEL_LOADED, {
                            details: l,
                            level: d || 0,
                            id: s || 0,
                            stats: a,
                            networkDetails: n
                          })
                        : i === ft.AUDIO_TRACK
                        ? this.hls.trigger(lt['default'].AUDIO_TRACK_LOADED, {
                            details: l,
                            id: s,
                            stats: a,
                            networkDetails: n
                          })
                        : i === ft.SUBTITLE_TRACK
                        ? this.hls.trigger(
                            lt['default'].SUBTITLE_TRACK_LOADED,
                            { details: l, id: s, stats: a, networkDetails: n }
                          )
                        : void 0;
                    }),
                    t
                  );
                })(gt),
                Ft = Ot,
                wt = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a = e.call(this, t, lt['default'].FRAG_LOADING) || this),
                      (a.loaders = {}),
                      a
                    );
                  }
                  R(t, e);
                  var a = t.prototype;
                  return (
                    (a.destroy = function t() {
                      var a = this.loaders;
                      for (var r in a) {
                        var n = a[r];
                        n && n.destroy();
                      }
                      (this.loaders = {}), e.prototype.destroy.call(this);
                    }),
                    (a.onFragLoading = function t(e) {
                      var a = e.frag,
                        r = a.type,
                        n = this.loaders,
                        o = this.hls.config,
                        i = o.fLoader,
                        d = o.loader;
                      a.loaded = 0;
                      var s = n[r];
                      s &&
                        (ct.logger.warn(
                          'abort previous fragment loader for type: ' + r
                        ),
                        s.abort()),
                        (s = n[r] = a.loader = o.fLoader ? new i(o) : new d(o));
                      var l, c, u;
                      l = {
                        url: a.url,
                        frag: a,
                        responseType: 'arraybuffer',
                        progressData: !1
                      };
                      var p = a.byteRangeStartOffset,
                        g = a.byteRangeEndOffset;
                      Object(st.isFiniteNumber)(p) &&
                        Object(st.isFiniteNumber)(g) &&
                        ((l.rangeStart = p), (l.rangeEnd = g)),
                        (c = {
                          timeout: o.fragLoadingTimeOut,
                          maxRetry: 0,
                          retryDelay: 0,
                          maxRetryDelay: o.fragLoadingMaxRetryTimeout
                        }),
                        (u = {
                          onSuccess: this.loadsuccess.bind(this),
                          onError: this.loaderror.bind(this),
                          onTimeout: this.loadtimeout.bind(this),
                          onProgress: this.loadprogress.bind(this)
                        }),
                        s.load(l, c, u);
                    }),
                    (a.loadsuccess = function n(e, t, a, r) {
                      void 0 === r && (r = null);
                      var o = e.data,
                        i = a.frag;
                      (i.loader = void 0),
                        (this.loaders[i.type] = void 0),
                        this.hls.trigger(lt['default'].FRAG_LOADED, {
                          payload: o,
                          frag: i,
                          stats: t,
                          networkDetails: r
                        });
                    }),
                    (a.loaderror = function r(e, t, a) {
                      void 0 === a && (a = null);
                      var n = t.frag,
                        o = n.loader;
                      o && o.abort(),
                        (this.loaders[n.type] = void 0),
                        this.hls.trigger(lt['default'].ERROR, {
                          type: dt.ErrorTypes.NETWORK_ERROR,
                          details: dt.ErrorDetails.FRAG_LOAD_ERROR,
                          fatal: !1,
                          frag: t.frag,
                          response: e,
                          networkDetails: a
                        });
                    }),
                    (a.loadtimeout = function r(e, t, a) {
                      void 0 === a && (a = null);
                      var n = t.frag,
                        o = n.loader;
                      o && o.abort(),
                        (this.loaders[n.type] = void 0),
                        this.hls.trigger(lt['default'].ERROR, {
                          type: dt.ErrorTypes.NETWORK_ERROR,
                          details: dt.ErrorDetails.FRAG_LOAD_TIMEOUT,
                          fatal: !1,
                          frag: t.frag,
                          networkDetails: a
                        });
                    }),
                    (a.loadprogress = function n(e, t, a, r) {
                      void 0 === r && (r = null);
                      var o = t.frag;
                      (o.loaded = e.loaded),
                        this.hls.trigger(lt['default'].FRAG_LOAD_PROGRESS, {
                          frag: o,
                          stats: e,
                          networkDetails: r
                        });
                    }),
                    t
                  );
                })(gt),
                Mt = wt,
                Bt = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a = e.call(this, t, lt['default'].KEY_LOADING) || this),
                      (a.loaders = {}),
                      (a.decryptkey = null),
                      (a.decrypturl = null),
                      a
                    );
                  }
                  A(t, e);
                  var a = t.prototype;
                  return (
                    (a.destroy = function t() {
                      for (var a in this.loaders) {
                        var r = this.loaders[a];
                        r && r.destroy();
                      }
                      (this.loaders = {}), e.prototype.destroy.call(this);
                    }),
                    (a.onKeyLoading = function t(e) {
                      var a = e.frag,
                        r = a.type,
                        n = this.loaders[r];
                      if (!a.decryptdata)
                        return void ct.logger.warn(
                          'Missing decryption data on fragment in onKeyLoading'
                        );
                      var o = a.decryptdata.uri;
                      if (o !== this.decrypturl || null === this.decryptkey) {
                        var i = this.hls.config;
                        if (
                          (n &&
                            (ct.logger.warn(
                              'abort previous key loader for type:' + r
                            ),
                            n.abort()),
                          !o)
                        )
                          return void ct.logger.warn('key uri is falsy');
                        (a.loader = this.loaders[r] = new i.loader(i)),
                          (this.decrypturl = o),
                          (this.decryptkey = null);
                        var d = {
                            url: o,
                            frag: a,
                            responseType: 'arraybuffer'
                          },
                          s = {
                            timeout: i.fragLoadingTimeOut,
                            maxRetry: 0,
                            retryDelay: i.fragLoadingRetryDelay,
                            maxRetryDelay: i.fragLoadingMaxRetryTimeout
                          },
                          l = {
                            onSuccess: this.loadsuccess.bind(this),
                            onError: this.loaderror.bind(this),
                            onTimeout: this.loadtimeout.bind(this)
                          };
                        a.loader.load(d, s, l);
                      } else
                        this.decryptkey &&
                          ((a.decryptdata.key = this.decryptkey),
                          this.hls.trigger(lt['default'].KEY_LOADED, {
                            frag: a
                          }));
                    }),
                    (a.loadsuccess = function r(e, t, a) {
                      var n = a.frag;
                      return n.decryptdata
                        ? void ((this.decryptkey = n.decryptdata.key = new Uint8Array(
                            e.data
                          )),
                          (n.loader = void 0),
                          delete this.loaders[n.type],
                          this.hls.trigger(lt['default'].KEY_LOADED, {
                            frag: n
                          }))
                        : void ct.logger.error(
                            'after key load, decryptdata unset'
                          );
                    }),
                    (a.loaderror = function a(e, t) {
                      var r = t.frag,
                        n = r.loader;
                      n && n.abort(),
                        delete this.loaders[r.type],
                        this.hls.trigger(lt['default'].ERROR, {
                          type: dt.ErrorTypes.NETWORK_ERROR,
                          details: dt.ErrorDetails.KEY_LOAD_ERROR,
                          fatal: !1,
                          frag: r,
                          response: e
                        });
                    }),
                    (a.loadtimeout = function a(e, t) {
                      var r = t.frag,
                        n = r.loader;
                      n && n.abort(),
                        delete this.loaders[r.type],
                        this.hls.trigger(lt['default'].ERROR, {
                          type: dt.ErrorTypes.NETWORK_ERROR,
                          details: dt.ErrorDetails.KEY_LOAD_TIMEOUT,
                          fatal: !1,
                          frag: r
                        });
                    }),
                    t
                  );
                })(gt),
                Ut = Bt,
                Gt = {
                  NOT_LOADED: 'NOT_LOADED',
                  APPENDING: 'APPENDING',
                  PARTIAL: 'PARTIAL',
                  OK: 'OK'
                },
                Kt = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a =
                        e.call(
                          this,
                          t,
                          lt['default'].BUFFER_APPENDED,
                          lt['default'].FRAG_BUFFERED,
                          lt['default'].FRAG_LOADED
                        ) || this),
                      (a.bufferPadding = 0.2),
                      (a.fragments = Object.create(null)),
                      (a.timeRanges = Object.create(null)),
                      (a.config = t.config),
                      a
                    );
                  }
                  k(t, e);
                  var a = t.prototype;
                  return (
                    (a.destroy = function t() {
                      (this.fragments = Object.create(null)),
                        (this.timeRanges = Object.create(null)),
                        (this.config = null),
                        gt.prototype.destroy.call(this),
                        e.prototype.destroy.call(this);
                    }),
                    (a.getBufferedFrag = function a(e, t) {
                      var r = this.fragments,
                        n = Object.keys(r).filter(function(a) {
                          var n = r[a];
                          if (n.body.type !== t) return !1;
                          if (!n.buffered) return !1;
                          var o = n.body;
                          return o.startPTS <= e && e <= o.endPTS;
                        });
                      if (0 === n.length) return null;
                      var o = n.pop();
                      return r[o].body;
                    }),
                    (a.detectEvictedFragments = function a(e, t) {
                      var r = this;
                      Object.keys(this.fragments).forEach(function(a) {
                        var n = r.fragments[a];
                        if (n && n.buffered) {
                          var o = n.range[e];
                          if (o)
                            for (var d = o.time, s = 0, l; s < d.length; s++)
                              if (
                                ((l = d[s]),
                                !r.isTimeBuffered(l.startPTS, l.endPTS, t))
                              ) {
                                r.removeFragment(n.body);
                                break;
                              }
                        }
                      });
                    }),
                    (a.detectPartialFragments = function t(e) {
                      var a = this,
                        r = this.getFragmentKey(e),
                        n = this.fragments[r];
                      n &&
                        ((n.buffered = !0),
                        Object.keys(this.timeRanges).forEach(function(t) {
                          if (e.hasElementaryStream(t)) {
                            var r = a.timeRanges[t];
                            n.range[t] = a.getBufferedTimes(
                              e.startPTS,
                              e.endPTS,
                              r
                            );
                          }
                        }));
                    }),
                    (a.getBufferedTimes = function r(e, t, a) {
                      for (var n = [], o = !1, d = 0, l, c; d < a.length; d++)
                        if (
                          ((l = a.start(d) - this.bufferPadding),
                          (c = a.end(d) + this.bufferPadding),
                          e >= l && t <= c)
                        ) {
                          n.push({
                            startPTS: s(e, a.start(d)),
                            endPTS: u(t, a.end(d))
                          });
                          break;
                        } else if (e < c && t > l)
                          n.push({
                            startPTS: s(e, a.start(d)),
                            endPTS: u(t, a.end(d))
                          }),
                            (o = !0);
                        else if (t <= l) break;
                      return { time: n, partial: o };
                    }),
                    (a.getFragmentKey = function t(e) {
                      return (
                        e.type + '_' + e.level + '_' + e.urlId + '_' + e.sn
                      );
                    }),
                    (a.getPartialFragment = function t(e) {
                      var a = this,
                        r = null,
                        n = 0,
                        o,
                        i,
                        d;
                      return (
                        Object.keys(this.fragments).forEach(function(t) {
                          var s = a.fragments[t];
                          a.isPartial(s) &&
                            ((i = s.body.startPTS - a.bufferPadding),
                            (d = s.body.endPTS + a.bufferPadding),
                            e >= i &&
                              e <= d &&
                              ((o = u(e - i, d - e)),
                              n <= o && ((r = s.body), (n = o))));
                        }),
                        r
                      );
                    }),
                    (a.getState = function t(e) {
                      var a = this.getFragmentKey(e),
                        r = this.fragments[a],
                        n = Gt.NOT_LOADED;
                      return (
                        void 0 !== r &&
                          (r.buffered
                            ? !0 === this.isPartial(r)
                              ? (n = Gt.PARTIAL)
                              : (n = Gt.OK)
                            : (n = Gt.APPENDING)),
                        n
                      );
                    }),
                    (a.isPartial = function t(e) {
                      return (
                        !0 === e.buffered &&
                        ((void 0 !== e.range.video &&
                          !0 === e.range.video.partial) ||
                          (void 0 !== e.range.audio &&
                            !0 === e.range.audio.partial))
                      );
                    }),
                    (a.isTimeBuffered = function r(e, t, a) {
                      for (var n = 0, o, d; n < a.length; n++) {
                        if (
                          ((o = a.start(n) - this.bufferPadding),
                          (d = a.end(n) + this.bufferPadding),
                          e >= o && t <= d)
                        )
                          return !0;
                        if (t <= o) return !1;
                      }
                      return !1;
                    }),
                    (a.onFragLoaded = function e(t) {
                      var a = t.frag;
                      !Object(st.isFiniteNumber)(a.sn) ||
                        a.bitrateTest ||
                        (this.fragments[this.getFragmentKey(a)] = {
                          body: a,
                          range: Object.create(null),
                          buffered: !1
                        });
                    }),
                    (a.onBufferAppended = function e(t) {
                      var a = this;
                      (this.timeRanges = t.timeRanges),
                        Object.keys(this.timeRanges).forEach(function(e) {
                          var t = a.timeRanges[e];
                          a.detectEvictedFragments(e, t);
                        });
                    }),
                    (a.onFragBuffered = function e(t) {
                      this.detectPartialFragments(t.frag);
                    }),
                    (a.hasFragment = function t(e) {
                      var a = this.getFragmentKey(e);
                      return void 0 !== this.fragments[a];
                    }),
                    (a.removeFragment = function t(e) {
                      var a = this.getFragmentKey(e);
                      delete this.fragments[a];
                    }),
                    (a.removeAllFragments = function e() {
                      this.fragments = Object.create(null);
                    }),
                    t
                  );
                })(gt),
                Ht = {
                  search: function a(e, t) {
                    for (
                      var r = 0, n = e.length - 1, o = null, i = null;
                      r <= n;

                    ) {
                      (o = 0 | ((r + n) / 2)), (i = e[o]);
                      var d = t(i);
                      if (0 < d) r = o + 1;
                      else if (0 > d) n = o - 1;
                      else return i;
                    }
                    return null;
                  }
                },
                Vt = Ht,
                Wt = (function() {
                  function e() {}
                  return (
                    (e.isBuffered = function a(e, t) {
                      try {
                        if (e)
                          for (var r = e.buffered, n = 0; n < r.length; n++)
                            if (t >= r.start(n) && t <= r.end(n)) return !0;
                      } catch (e) {}
                      return !1;
                    }),
                    (e.bufferInfo = function r(e, t, a) {
                      try {
                        if (e) {
                          var n = e.buffered,
                            o = [],
                            d;
                          for (d = 0; d < n.length; d++)
                            o.push({ start: n.start(d), end: n.end(d) });
                          return this.bufferedInfo(o, t, a);
                        }
                      } catch (e) {}
                      return { len: 0, start: t, end: t, nextStart: void 0 };
                    }),
                    (e.bufferedInfo = function r(e, t, a) {
                      e.sort(function(e, t) {
                        var a = e.start - t.start;
                        return a ? a : t.end - e.end;
                      });
                      var n = [];
                      if (a) {
                        for (var o = 0, d; o < e.length; o++)
                          if (((d = n.length), d)) {
                            var s = n[d - 1].end;
                            e[o].start - s < a
                              ? e[o].end > s && (n[d - 1].end = e[o].end)
                              : n.push(e[o]);
                          } else n.push(e[o]);
                      } else n = e;
                      for (
                        var l = 0, c = t, u = t, p = 0, g;
                        p < n.length;
                        p++
                      ) {
                        var f = n[p].start,
                          m = n[p].end;
                        if (t + a >= f && t < m) (c = f), (u = m), (l = u - t);
                        else if (t + a < f) {
                          g = f;
                          break;
                        }
                      }
                      return { len: l, start: c, end: u, nextStart: g };
                    }),
                    e
                  );
                })(),
                jt = i('./node_modules/eventemitter3/index.js'),
                Yt = i('./node_modules/webworkify-webpack/index.js'),
                qt = i('./src/demux/demuxer-inline.js'),
                zt = i('./src/utils/get-self-scope.js'),
                Xt = (function(e) {
                  function t() {
                    return e.apply(this, arguments) || this;
                  }
                  L(t, e);
                  var a = t.prototype;
                  return (
                    (a.trigger = function t(e) {
                      for (
                        var a = arguments.length,
                          r = Array(1 < a ? a - 1 : 0),
                          n = 1;
                        n < a;
                        n++
                      )
                        r[n - 1] = arguments[n];
                      this.emit.apply(this, [e, e].concat(r));
                    }),
                    t
                  );
                })(jt.EventEmitter),
                $t = Object(zt.getSelfScope)(),
                Qt = D() || {
                  isTypeSupported: function e() {
                    return !1;
                  }
                },
                Zt = (function() {
                  function e(e, t) {
                    var a = this;
                    (this.hls = e), (this.id = t);
                    var r = (this.observer = new Xt()),
                      n = e.config,
                      o = function n(t, r) {
                        (r = r || {}),
                          (r.frag = a.frag),
                          (r.id = a.id),
                          e.trigger(t, r);
                      };
                    r.on(lt['default'].FRAG_DECRYPTED, o),
                      r.on(lt['default'].FRAG_PARSING_INIT_SEGMENT, o),
                      r.on(lt['default'].FRAG_PARSING_DATA, o),
                      r.on(lt['default'].FRAG_PARSED, o),
                      r.on(lt['default'].ERROR, o),
                      r.on(lt['default'].FRAG_PARSING_METADATA, o),
                      r.on(lt['default'].FRAG_PARSING_USERDATA, o),
                      r.on(lt['default'].INIT_PTS_FOUND, o);
                    var i = {
                        mp4: Qt.isTypeSupported('video/mp4'),
                        mpeg: Qt.isTypeSupported('audio/mpeg'),
                        mp3: Qt.isTypeSupported('audio/mp4; codecs="mp3"')
                      },
                      d = navigator.vendor;
                    if (n.enableWorker && 'undefined' != typeof Worker) {
                      ct.logger.log('demuxing in webworker');
                      var s;
                      try {
                        (s = this.w = Yt('./src/demux/demuxer-worker.js')),
                          (this.onwmsg = this.onWorkerMessage.bind(this)),
                          s.addEventListener('message', this.onwmsg),
                          (s.onerror = function(t) {
                            e.trigger(lt['default'].ERROR, {
                              type: dt.ErrorTypes.OTHER_ERROR,
                              details: dt.ErrorDetails.INTERNAL_EXCEPTION,
                              fatal: !0,
                              event: 'demuxerWorker',
                              err: {
                                message:
                                  t.message +
                                  ' (' +
                                  t.filename +
                                  ':' +
                                  t.lineno +
                                  ')'
                              }
                            });
                          }),
                          s.postMessage({
                            cmd: 'init',
                            typeSupported: i,
                            vendor: d,
                            id: t,
                            config: JSON.stringify(n)
                          });
                      } catch (e) {
                        ct.logger.warn('Error in worker:', e),
                          ct.logger.error(
                            'Error while initializing DemuxerWorker, fallback on DemuxerInline'
                          ),
                          s && $t.URL.revokeObjectURL(s.objectURL),
                          (this.demuxer = new qt['default'](r, i, n, d)),
                          (this.w = void 0);
                      }
                    } else this.demuxer = new qt['default'](r, i, n, d);
                  }
                  var t = e.prototype;
                  return (
                    (t.destroy = function e() {
                      var t = this.w;
                      if (t)
                        t.removeEventListener('message', this.onwmsg),
                          t.terminate(),
                          (this.w = null);
                      else {
                        var a = this.demuxer;
                        a && (a.destroy(), (this.demuxer = null));
                      }
                      var r = this.observer;
                      r && (r.removeAllListeners(), (this.observer = null));
                    }),
                    (t.push = function s(e, t, a, r, n, o, i, d) {
                      var l = this.w,
                        c = Object(st.isFiniteNumber)(n.startPTS)
                          ? n.startPTS
                          : n.start,
                        u = n.decryptdata,
                        p = this.frag,
                        g = !(p && n.cc === p.cc),
                        f = !(p && n.level === p.level),
                        m = p && n.sn === p.sn + 1,
                        y = !f && m;
                      if (
                        (g &&
                          ct.logger.log(this.id + ':discontinuity detected'),
                        f && ct.logger.log(this.id + ':switch detected'),
                        (this.frag = n),
                        l)
                      )
                        l.postMessage(
                          {
                            cmd: 'demux',
                            data: e,
                            decryptdata: u,
                            initSegment: t,
                            audioCodec: a,
                            videoCodec: r,
                            timeOffset: c,
                            discontinuity: g,
                            trackSwitch: f,
                            contiguous: y,
                            duration: o,
                            accurateTimeOffset: i,
                            defaultInitPTS: d
                          },
                          e instanceof ArrayBuffer ? [e] : []
                        );
                      else {
                        var h = this.demuxer;
                        h && h.push(e, u, t, a, r, c, g, f, y, o, i, d);
                      }
                    }),
                    (t.onWorkerMessage = function t(e) {
                      var a = e.data,
                        r = this.hls;
                      switch (a.event) {
                        case 'init':
                          $t.URL.revokeObjectURL(this.w.objectURL);
                          break;
                        case lt['default'].FRAG_PARSING_DATA:
                          (a.data.data1 = new Uint8Array(a.data1)),
                            a.data2 && (a.data.data2 = new Uint8Array(a.data2));
                        default:
                          (a.data = a.data || {}),
                            (a.data.frag = this.frag),
                            (a.data.id = this.id),
                            r.trigger(a.event, a.data);
                      }
                    }),
                    e
                  );
                })(),
                Jt = Zt,
                ea = {
                  toString: function t(e) {
                    for (var a = '', r = e.length, n = 0; n < r; n++)
                      a +=
                        '[' +
                        e.start(n).toFixed(3) +
                        ',' +
                        e.end(n).toFixed(3) +
                        ']';
                    return a;
                  }
                },
                ta = ea,
                aa = 250,
                ra = 2,
                na = 0.1,
                oa = 0.05,
                ia = (function() {
                  function e(e, t, a, r) {
                    (this.config = e),
                      (this.media = t),
                      (this.fragmentTracker = a),
                      (this.hls = r),
                      (this.nudgeRetry = 0),
                      (this.stallReported = !1),
                      (this.stalled = null),
                      (this.moved = !1),
                      (this.seeking = !1);
                  }
                  var t = e.prototype;
                  return (
                    (t.poll = function t(e) {
                      var a = this.config,
                        r = this.media,
                        n = this.stalled,
                        o = r.currentTime,
                        i = r.seeking,
                        d = this.seeking && !i,
                        l = !this.seeking && i;
                      if (((this.seeking = i), o !== e)) {
                        if (((this.moved = !0), null !== n)) {
                          if (this.stallReported) {
                            var c = self.performance.now() - n;
                            ct.logger.warn(
                              'playback not stuck anymore @' +
                                o +
                                ', after ' +
                                E(c) +
                                'ms'
                            ),
                              (this.stallReported = !1);
                          }
                          (this.stalled = null), (this.nudgeRetry = 0);
                        }
                        return;
                      }
                      if (
                        ((l || d) && (this.stalled = null),
                        !(
                          r.paused ||
                          r.ended ||
                          0 === r.playbackRate ||
                          !r.buffered.length
                        ))
                      ) {
                        var u = Wt.bufferInfo(r, o, 0),
                          p = 0 < u.len,
                          g = u.nextStart || 0;
                        if (p || g) {
                          if (i) {
                            var f = 2 < u.len,
                              m =
                                !g ||
                                (2 < g - o &&
                                  !this.fragmentTracker.getPartialFragment(o));
                            if (f || m) return;
                            this.moved = !1;
                          }
                          if (!this.moved && this.stalled) {
                            var y = s(g, u.start || 0) - o;
                            if (0 < y && 2 >= y)
                              return void this._trySkipBufferHole(null);
                          }
                          var h = self.performance.now();
                          if (null === n) return void (this.stalled = h);
                          var T = h - n;
                          !i && 250 <= T && this._reportStall(u.len);
                          var v = Wt.bufferInfo(r, o, a.maxBufferHole);
                          this._tryFixBufferStall(v, T);
                        }
                      }
                    }),
                    (t._tryFixBufferStall = function a(e, t) {
                      var r = this.config,
                        n = this.fragmentTracker,
                        o = this.media,
                        i = o.currentTime,
                        d = n.getPartialFragment(i);
                      if (d) {
                        var s = this._trySkipBufferHole(d);
                        if (s) return;
                      }
                      e.len > r.maxBufferHole &&
                        t > 1e3 * r.highBufferWatchdogPeriod &&
                        (ct.logger.warn(
                          'Trying to nudge playhead over buffer-hole'
                        ),
                        (this.stalled = null),
                        this._tryNudgeBuffer());
                    }),
                    (t._reportStall = function t(e) {
                      var a = this.hls,
                        r = this.media,
                        n = this.stallReported;
                      n ||
                        ((this.stallReported = !0),
                        ct.logger.warn(
                          'Playback stalling at @' +
                            r.currentTime +
                            ' due to low buffer (buffer=' +
                            e +
                            ')'
                        ),
                        a.trigger(lt['default'].ERROR, {
                          type: dt.ErrorTypes.MEDIA_ERROR,
                          details: dt.ErrorDetails.BUFFER_STALLED_ERROR,
                          fatal: !1,
                          buffer: e
                        }));
                    }),
                    (t._trySkipBufferHole = function t(e) {
                      for (
                        var a = this.config,
                          r = this.hls,
                          n = this.media,
                          o = n.currentTime,
                          d = 0,
                          l = 0,
                          c;
                        l < n.buffered.length;
                        l++
                      ) {
                        if (
                          ((c = n.buffered.start(l)),
                          o + a.maxBufferHole >= d && o < c)
                        ) {
                          var u = s(c + oa, n.currentTime + na);
                          return (
                            ct.logger.warn(
                              'skipping hole, adjusting currentTime from ' +
                                o +
                                ' to ' +
                                u
                            ),
                            (this.moved = !0),
                            (this.stalled = null),
                            (n.currentTime = u),
                            e &&
                              r.trigger(lt['default'].ERROR, {
                                type: dt.ErrorTypes.MEDIA_ERROR,
                                details: dt.ErrorDetails.BUFFER_SEEK_OVER_HOLE,
                                fatal: !1,
                                reason:
                                  'fragment loaded with buffer holes, seeking from ' +
                                  o +
                                  ' to ' +
                                  u,
                                frag: e
                              }),
                            u
                          );
                        }
                        d = n.buffered.end(l);
                      }
                      return 0;
                    }),
                    (t._tryNudgeBuffer = function e() {
                      var t = this.config,
                        a = this.hls,
                        r = this.media,
                        n = r.currentTime,
                        o = (this.nudgeRetry || 0) + 1;
                      if (((this.nudgeRetry = o), o < t.nudgeMaxRetry)) {
                        var i = n + o * t.nudgeOffset;
                        ct.logger.warn(
                          "Nudging 'currentTime' from " + n + ' to ' + i
                        ),
                          (r.currentTime = i),
                          a.trigger(lt['default'].ERROR, {
                            type: dt.ErrorTypes.MEDIA_ERROR,
                            details: dt.ErrorDetails.BUFFER_NUDGE_ON_STALL,
                            fatal: !1
                          });
                      } else
                        ct.logger.error(
                          'Playhead still not moving while enough data buffered @' +
                            n +
                            ' after ' +
                            t.nudgeMaxRetry +
                            ' nudges'
                        ),
                          a.trigger(lt['default'].ERROR, {
                            type: dt.ErrorTypes.MEDIA_ERROR,
                            details: dt.ErrorDetails.BUFFER_STALLED_ERROR,
                            fatal: !0
                          });
                    }),
                    e
                  );
                })(),
                da = (function(e) {
                  function t(t) {
                    for (
                      var a = arguments.length,
                        r = Array(1 < a ? a - 1 : 0),
                        n = 1,
                        o;
                      n < a;
                      n++
                    )
                      r[n - 1] = arguments[n];
                    return (
                      (o = e.call.apply(e, [this, t].concat(r)) || this),
                      (o._boundTick = void 0),
                      (o._tickTimer = null),
                      (o._tickInterval = null),
                      (o._tickCallCount = 0),
                      (o._boundTick = o.tick.bind(X(o))),
                      o
                    );
                  }
                  $(t, e);
                  var a = t.prototype;
                  return (
                    (a.onHandlerDestroying = function e() {
                      this.clearNextTick(), this.clearInterval();
                    }),
                    (a.hasInterval = function e() {
                      return !!this._tickInterval;
                    }),
                    (a.hasNextTick = function e() {
                      return !!this._tickTimer;
                    }),
                    (a.setInterval = function t(e) {
                      return (
                        !this._tickInterval &&
                        ((this._tickInterval = self.setInterval(
                          this._boundTick,
                          e
                        )),
                        !0)
                      );
                    }),
                    (a.clearInterval = function e() {
                      return (
                        !!this._tickInterval &&
                        (self.clearInterval(this._tickInterval),
                        (this._tickInterval = null),
                        !0)
                      );
                    }),
                    (a.clearNextTick = function e() {
                      return (
                        !!this._tickTimer &&
                        (self.clearTimeout(this._tickTimer),
                        (this._tickTimer = null),
                        !0)
                      );
                    }),
                    (a.tick = function e() {
                      this._tickCallCount++,
                        1 === this._tickCallCount &&
                          (this.doTick(),
                          1 < this._tickCallCount &&
                            (this.clearNextTick(),
                            (this._tickTimer = self.setTimeout(
                              this._boundTick,
                              0
                            ))),
                          (this._tickCallCount = 0));
                    }),
                    (a.doTick = function e() {}),
                    t
                  );
                })(gt),
                sa = {
                  STOPPED: 'STOPPED',
                  STARTING: 'STARTING',
                  IDLE: 'IDLE',
                  PAUSED: 'PAUSED',
                  KEY_LOADING: 'KEY_LOADING',
                  FRAG_LOADING: 'FRAG_LOADING',
                  FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',
                  WAITING_TRACK: 'WAITING_TRACK',
                  PARSING: 'PARSING',
                  PARSED: 'PARSED',
                  BUFFER_FLUSHING: 'BUFFER_FLUSHING',
                  ENDED: 'ENDED',
                  ERROR: 'ERROR',
                  WAITING_INIT_PTS: 'WAITING_INIT_PTS',
                  WAITING_LEVEL: 'WAITING_LEVEL'
                },
                la = (function(e) {
                  function t() {
                    return e.apply(this, arguments) || this;
                  }
                  Q(t, e);
                  var a = t.prototype;
                  return (
                    (a.doTick = function e() {}),
                    (a.startLoad = function e() {}),
                    (a.stopLoad = function e() {
                      var t = this.fragCurrent;
                      t &&
                        (t.loader && t.loader.abort(),
                        this.fragmentTracker.removeFragment(t)),
                        this.demuxer &&
                          (this.demuxer.destroy(), (this.demuxer = null)),
                        (this.fragCurrent = null),
                        (this.fragPrevious = null),
                        this.clearInterval(),
                        this.clearNextTick(),
                        (this.state = sa.STOPPED);
                    }),
                    (a._streamEnded = function a(e, t) {
                      var r = this.fragCurrent,
                        n = this.fragmentTracker;
                      if (
                        !t.live &&
                        r &&
                        !r.backtracked &&
                        r.sn === t.endSN &&
                        !e.nextStart
                      ) {
                        var o = n.getState(r);
                        return o === Gt.PARTIAL || o === Gt.OK;
                      }
                      return !1;
                    }),
                    (a.onMediaSeeking = function e() {
                      var t = this.config,
                        a = this.media,
                        r = this.mediaBuffer,
                        n = this.state,
                        o = a ? a.currentTime : null,
                        i = Wt.bufferInfo(r || a, o, this.config.maxBufferHole);
                      if (
                        (ct.logger.log(
                          'media seeking to ' +
                            (Object(st.isFiniteNumber)(o) ? o.toFixed(3) : o)
                        ),
                        n === sa.FRAG_LOADING)
                      ) {
                        var d = this.fragCurrent;
                        if (0 === i.len && d) {
                          var s = t.maxFragLookUpTolerance,
                            l = d.start - s,
                            c = d.start + d.duration + s;
                          o < l || o > c
                            ? (d.loader &&
                                (ct.logger.log(
                                  'seeking outside of buffer while fragment load in progress, cancel fragment load'
                                ),
                                d.loader.abort()),
                              (this.fragCurrent = null),
                              (this.fragPrevious = null),
                              (this.state = sa.IDLE))
                            : ct.logger.log(
                                'seeking outside of buffer but within currently loaded fragment range'
                              );
                        }
                      } else
                        n === sa.ENDED &&
                          (0 === i.len &&
                            ((this.fragPrevious = null),
                            (this.fragCurrent = null)),
                          (this.state = sa.IDLE));
                      a && (this.lastCurrentTime = o),
                        this.loadedmetadata ||
                          (this.nextLoadPosition = this.startPosition = o),
                        this.tick();
                    }),
                    (a.onMediaEnded = function e() {
                      this.startPosition = this.lastCurrentTime = 0;
                    }),
                    (a.onHandlerDestroying = function t() {
                      this.stopLoad(),
                        e.prototype.onHandlerDestroying.call(this);
                    }),
                    (a.onHandlerDestroyed = function e() {
                      (this.state = sa.STOPPED), (this.fragmentTracker = null);
                    }),
                    (a.computeLivePosition = function a(e, t) {
                      var r =
                        void 0 === this.config.liveSyncDuration
                          ? this.config.liveSyncDurationCount * t.targetduration
                          : this.config.liveSyncDuration;
                      return e + s(0, t.totalduration - r);
                    }),
                    t
                  );
                })(da),
                ca = 100,
                ua = (function(e) {
                  function r(t, a) {
                    var r;
                    return (
                      (r =
                        e.call(
                          this,
                          t,
                          lt['default'].MEDIA_ATTACHED,
                          lt['default'].MEDIA_DETACHING,
                          lt['default'].MANIFEST_LOADING,
                          lt['default'].MANIFEST_PARSED,
                          lt['default'].LEVEL_LOADED,
                          lt['default'].LEVELS_UPDATED,
                          lt['default'].KEY_LOADED,
                          lt['default'].FRAG_LOADED,
                          lt['default'].FRAG_LOAD_EMERGENCY_ABORTED,
                          lt['default'].FRAG_PARSING_INIT_SEGMENT,
                          lt['default'].FRAG_PARSING_DATA,
                          lt['default'].FRAG_PARSED,
                          lt['default'].ERROR,
                          lt['default'].AUDIO_TRACK_SWITCHING,
                          lt['default'].AUDIO_TRACK_SWITCHED,
                          lt['default'].BUFFER_CREATED,
                          lt['default'].BUFFER_APPENDED,
                          lt['default'].BUFFER_FLUSHED
                        ) || this),
                      (r.fragmentTracker = a),
                      (r.config = t.config),
                      (r.audioCodecSwap = !1),
                      (r._state = sa.STOPPED),
                      (r.stallReported = !1),
                      (r.gapController = null),
                      (r.altAudio = !1),
                      (r.audioOnly = !1),
                      (r.bitrateTest = !1),
                      r
                    );
                  }
                  ee(r, e);
                  var n = r.prototype;
                  return (
                    (n.startLoad = function t(e) {
                      if (this.levels) {
                        var a = this.lastCurrentTime,
                          r = this.hls;
                        if (
                          (this.stopLoad(),
                          this.setInterval(100),
                          (this.level = -1),
                          (this.fragLoadError = 0),
                          !this.startFragRequested)
                        ) {
                          var n = r.startLevel;
                          -1 === n &&
                            (r.config.testBandwidth
                              ? ((n = 0), (this.bitrateTest = !0))
                              : (n = r.nextAutoLevel)),
                            (this.level = r.nextLoadLevel = n),
                            (this.loadedmetadata = !1);
                        }
                        0 < a &&
                          -1 === e &&
                          (ct.logger.log(
                            'override startPosition with lastCurrentTime @' +
                              a.toFixed(3)
                          ),
                          (e = a)),
                          (this.state = sa.IDLE),
                          (this.nextLoadPosition = this.startPosition = this.lastCurrentTime = e),
                          this.tick();
                      } else
                        (this.forceStartLoad = !0), (this.state = sa.STOPPED);
                    }),
                    (n.stopLoad = function t() {
                      (this.forceStartLoad = !1),
                        e.prototype.stopLoad.call(this);
                    }),
                    (n.doTick = function e() {
                      switch (this.state) {
                        case sa.BUFFER_FLUSHING:
                          this.fragLoadError = 0;
                          break;
                        case sa.IDLE:
                          this._doTickIdle();
                          break;
                        case sa.WAITING_LEVEL:
                          var t = this.levels[this.level];
                          t && t.details && (this.state = sa.IDLE);
                          break;
                        case sa.FRAG_LOADING_WAITING_RETRY:
                          var a = window.performance.now(),
                            r = this.retryDate;
                          (!r ||
                            a >= r ||
                            (this.media && this.media.seeking)) &&
                            (ct.logger.log(
                              'mediaController: retryDate reached, switch back to IDLE state'
                            ),
                            (this.state = sa.IDLE));
                      }
                      this._checkBuffer(), this._checkFragmentChanged();
                    }),
                    (n._doTickIdle = function e() {
                      var t = this.hls,
                        a = t.config,
                        r = this.media;
                      if (
                        void 0 !== this.levelLastLoaded &&
                        (r || (!this.startFragRequested && a.startFragPrefetch))
                      ) {
                        if (this.altAudio && this.audioOnly)
                          return void (this.demuxer.frag = null);
                        var n;
                        n = this.loadedmetadata
                          ? r.currentTime
                          : this.nextLoadPosition;
                        var o = t.nextLoadLevel,
                          i = this.levels[o];
                        if (i) {
                          var d = i.bitrate,
                            l;
                          (l = d
                            ? s((8 * a.maxBufferSize) / d, a.maxBufferLength)
                            : a.maxBufferLength),
                            (l = u(l, a.maxMaxBufferLength));
                          var c =
                              n < a.maxBufferHole
                                ? s(2, a.maxBufferHole)
                                : a.maxBufferHole,
                            p = Wt.bufferInfo(
                              this.mediaBuffer ? this.mediaBuffer : r,
                              n,
                              c
                            ),
                            g = p.len;
                          if (!(g >= l)) {
                            ct.logger.trace(
                              'buffer length of ' +
                                g.toFixed(3) +
                                ' is below max of ' +
                                l.toFixed(3) +
                                '. checking for more payload ...'
                            ),
                              (this.level = t.nextLoadLevel = o);
                            var f = i.details;
                            if (!f || (f.live && this.levelLastLoaded !== o))
                              return void (this.state = sa.WAITING_LEVEL);
                            if (this._streamEnded(p, f)) {
                              var m = {};
                              return (
                                this.altAudio && (m.type = 'video'),
                                this.hls.trigger(lt['default'].BUFFER_EOS, m),
                                void (this.state = sa.ENDED)
                              );
                            }
                            this._fetchPayloadOrEos(n, p, f);
                          }
                        }
                      }
                    }),
                    (n._fetchPayloadOrEos = function r(e, t, a) {
                      var n = this.fragPrevious,
                        o = this.level,
                        i = a.fragments,
                        d = i.length;
                      if (0 !== d) {
                        var s = i[0].start,
                          l = i[d - 1].start + i[d - 1].duration,
                          c = t.end,
                          u;
                        if (a.initSegment && !a.initSegment.data)
                          u = a.initSegment;
                        else if (a.live) {
                          var p = this.config.initialLiveManifestSize;
                          if (d < p)
                            return void ct.logger.warn(
                              'Can not start playback of a level, reason: not enough fragments ' +
                                d +
                                ' < ' +
                                p
                            );
                          if (
                            ((u = this._ensureFragmentAtLivePoint(
                              a,
                              c,
                              s,
                              l,
                              n,
                              i
                            )),
                            null === u)
                          )
                            return;
                        } else c < s && (u = i[0]);
                        u || (u = this._findFragment(s, n, d, i, c, l, a)),
                          u &&
                            (u.encrypted
                              ? this._loadKey(u, a)
                              : this._loadFragment(u, a, e, c));
                      }
                    }),
                    (n._ensureFragmentAtLivePoint = function i(
                      e,
                      t,
                      a,
                      r,
                      n,
                      o
                    ) {
                      var d = this.hls.config,
                        l = this.media,
                        c = 1 / 0,
                        u;
                      if (
                        (void 0 === d.liveMaxLatencyDuration
                          ? Object(st.isFiniteNumber)(
                              d.liveMaxLatencyDurationCount
                            ) &&
                            (c =
                              d.liveMaxLatencyDurationCount * e.targetduration)
                          : (c = d.liveMaxLatencyDuration),
                        t < s(a - d.maxFragLookUpTolerance, r - c))
                      ) {
                        var p = (this.liveSyncPosition = this.computeLivePosition(
                          a,
                          e
                        ));
                        (t = p),
                          l &&
                            !l.paused &&
                            l.readyState &&
                            l.duration > p &&
                            p > l.currentTime &&
                            (ct.logger.log(
                              'buffer end: ' +
                                t.toFixed(3) +
                                ' is located too far from the end of live sliding playlist, reset currentTime to : ' +
                                p.toFixed(3)
                            ),
                            (l.currentTime = p)),
                          (this.nextLoadPosition = p);
                      }
                      if (e.PTSKnown && t > r && l && l.readyState) return null;
                      if (this.startFragRequested && !e.PTSKnown && n)
                        if (e.hasProgramDateTime)
                          ct.logger.log(
                            'live playlist, switching playlist, load frag with same PDT: ' +
                              n.programDateTime
                          ),
                            (u = j(
                              o,
                              n.endProgramDateTime,
                              d.maxFragLookUpTolerance
                            ));
                        else {
                          var g = n.sn + 1;
                          if (g >= e.startSN && g <= e.endSN) {
                            var f = o[g - e.startSN];
                            n.cc === f.cc &&
                              ((u = f),
                              ct.logger.log(
                                'live playlist, switching playlist, load frag with next SN: ' +
                                  u.sn
                              ));
                          }
                          u ||
                            ((u = Vt.search(o, function(e) {
                              return n.cc - e.cc;
                            })),
                            u &&
                              ct.logger.log(
                                'live playlist, switching playlist, load frag with same CC: ' +
                                  u.sn
                              ));
                        }
                      return u;
                    }),
                    (n._findFragment = function d(e, t, a, r, n, o, i) {
                      var s = this.hls.config,
                        l;
                      if (n < o) {
                        var c =
                          n > o - s.maxFragLookUpTolerance
                            ? 0
                            : s.maxFragLookUpTolerance;
                        l = Y(t, r, n, c);
                      } else l = r[a - 1];
                      if (l) {
                        var u = l.sn - i.startSN,
                          p = t && l.level === t.level,
                          g = r[u - 1],
                          f = r[u + 1];
                        if (t && l.sn === t.sn)
                          if (!p || l.backtracked)
                            l.backtracked &&
                              (f && f.backtracked
                                ? (ct.logger.warn(
                                    'Already backtracked from fragment ' +
                                      f.sn +
                                      ', will not backtrack to fragment ' +
                                      l.sn +
                                      '. Loading fragment ' +
                                      f.sn
                                  ),
                                  (l = f))
                                : (ct.logger.warn(
                                    'Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe'
                                  ),
                                  (l.dropped = 0),
                                  g
                                    ? ((l = g), (l.backtracked = !0))
                                    : u && (l = null)));
                          else if (l.sn < i.endSN) {
                            var m = t.deltaPTS;
                            m && m > s.maxBufferHole && t.dropped && u
                              ? ((l = g),
                                ct.logger.warn(
                                  'Previous fragment was dropped with large PTS gap between audio and video. Maybe fragment is not starting with a keyframe? Loading previous one to try to overcome this'
                                ))
                              : ((l = f),
                                this.fragmentTracker.getState(l) !== Gt.OK &&
                                  ct.logger.log(
                                    'Re-loading fragment with SN: ' + l.sn
                                  ));
                          } else l = null;
                      }
                      return l;
                    }),
                    (n._loadKey = function a(e, t) {
                      ct.logger.log(
                        'Loading key for ' +
                          e.sn +
                          ' of [' +
                          t.startSN +
                          '-' +
                          t.endSN +
                          '], level ' +
                          this.level
                      ),
                        (this.state = sa.KEY_LOADING),
                        this.hls.trigger(lt['default'].KEY_LOADING, {
                          frag: e
                        });
                    }),
                    (n._loadFragment = function n(e, t, a, r) {
                      var o = this.fragmentTracker.getState(e);
                      (this.fragCurrent = e),
                        'initSegment' !== e.sn &&
                          (this.startFragRequested = !0),
                        Object(st.isFiniteNumber)(e.sn) &&
                          !e.bitrateTest &&
                          (this.nextLoadPosition = e.start + e.duration),
                        e.backtracked || o === Gt.NOT_LOADED || o === Gt.PARTIAL
                          ? ((e.autoLevel = this.hls.autoLevelEnabled),
                            (e.bitrateTest = this.bitrateTest),
                            ct.logger.log(
                              'Loading ' +
                                e.sn +
                                ' of [' +
                                t.startSN +
                                '-' +
                                t.endSN +
                                '], level ' +
                                this.level +
                                ', ' +
                                (this.loadedmetadata
                                  ? 'currentTime'
                                  : 'nextLoadPosition') +
                                ': ' +
                                parseFloat(a.toFixed(3)) +
                                ', bufferEnd: ' +
                                parseFloat(r.toFixed(3))
                            ),
                            this.hls.trigger(lt['default'].FRAG_LOADING, {
                              frag: e
                            }),
                            !this.demuxer &&
                              (this.demuxer = new Jt(this.hls, 'main')),
                            (this.state = sa.FRAG_LOADING))
                          : o === Gt.APPENDING &&
                            this._reduceMaxBufferLength(e.duration) &&
                            this.fragmentTracker.removeFragment(e);
                    }),
                    (n.getBufferedFrag = function t(e) {
                      return this.fragmentTracker.getBufferedFrag(e, mt.MAIN);
                    }),
                    (n.followingBufferedFrag = function t(e) {
                      return e ? this.getBufferedFrag(e.endPTS + 0.5) : null;
                    }),
                    (n._checkFragmentChanged = function e() {
                      var t = this.media,
                        a,
                        r;
                      if (
                        t &&
                        t.readyState &&
                        !1 === t.seeking &&
                        ((r = t.currentTime),
                        r > this.lastCurrentTime && (this.lastCurrentTime = r),
                        Wt.isBuffered(t, r)
                          ? (a = this.getBufferedFrag(r))
                          : Wt.isBuffered(t, r + 0.1) &&
                            (a = this.getBufferedFrag(r + 0.1)),
                        a)
                      ) {
                        var n = a;
                        if (n !== this.fragPlaying) {
                          this.hls.trigger(lt['default'].FRAG_CHANGED, {
                            frag: n
                          });
                          var o = n.level;
                          (this.fragPlaying && this.fragPlaying.level === o) ||
                            this.hls.trigger(lt['default'].LEVEL_SWITCHED, {
                              level: o
                            }),
                            (this.fragPlaying = n);
                        }
                      }
                    }),
                    (n.immediateLevelSwitch = function e() {
                      if (
                        (ct.logger.log('immediateLevelSwitch'),
                        !this.immediateSwitch)
                      ) {
                        this.immediateSwitch = !0;
                        var t = this.media,
                          a;
                        t ? ((a = t.paused), !a && t.pause()) : (a = !0),
                          (this.previouslyPaused = a);
                      }
                      var r = this.fragCurrent;
                      r && r.loader && r.loader.abort(),
                        (this.fragCurrent = null),
                        this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                    }),
                    (n.immediateLevelSwitchEnd = function e() {
                      var t = this.media;
                      t &&
                        t.buffered.length &&
                        ((this.immediateSwitch = !1),
                        0 < t.currentTime &&
                          Wt.isBuffered(t, t.currentTime) &&
                          (t.currentTime -= 1e-4),
                        !this.previouslyPaused && t.play());
                    }),
                    (n.nextLevelSwitch = function e() {
                      var t = this.media;
                      if (t && t.readyState) {
                        var a = this.getBufferedFrag(t.currentTime),
                          r;
                        if (
                          (a &&
                            1 < a.startPTS &&
                            this.flushMainBuffer(0, a.startPTS - 1),
                          !t.paused)
                        ) {
                          var n = this.hls.nextLoadLevel,
                            o = this.levels[n],
                            i = this.fragLastKbps;
                          r =
                            i && this.fragCurrent
                              ? (this.fragCurrent.duration * o.bitrate) /
                                  (1e3 * i) +
                                1
                              : 0;
                        } else r = 0;
                        var d = this.getBufferedFrag(t.currentTime + r);
                        if (d) {
                          var l = this.followingBufferedFrag(d);
                          if (l) {
                            var c = this.fragCurrent;
                            c && c.loader && c.loader.abort(),
                              (this.fragCurrent = null);
                            var p = s(
                              d.endPTS,
                              l.maxStartPTS +
                                u(
                                  this.config.maxFragLookUpTolerance,
                                  l.duration
                                )
                            );
                            this.flushMainBuffer(p, Number.POSITIVE_INFINITY);
                          }
                        }
                      }
                    }),
                    (n.flushMainBuffer = function a(e, t) {
                      this.state = sa.BUFFER_FLUSHING;
                      var r = { startOffset: e, endOffset: t };
                      this.altAudio && (r.type = 'video'),
                        this.hls.trigger(lt['default'].BUFFER_FLUSHING, r);
                    }),
                    (n.onMediaAttached = function t(e) {
                      var a = (this.media = this.mediaBuffer = e.media);
                      (this.onvseeking = this.onMediaSeeking.bind(this)),
                        (this.onvseeked = this.onMediaSeeked.bind(this)),
                        (this.onvended = this.onMediaEnded.bind(this)),
                        a.addEventListener('seeking', this.onvseeking),
                        a.addEventListener('seeked', this.onvseeked),
                        a.addEventListener('ended', this.onvended);
                      var r = this.config;
                      this.levels &&
                        r.autoStartLoad &&
                        this.hls.startLoad(r.startPosition),
                        (this.gapController = new ia(
                          r,
                          a,
                          this.fragmentTracker,
                          this.hls
                        ));
                    }),
                    (n.onMediaDetaching = function e() {
                      var t = this.media;
                      t &&
                        t.ended &&
                        (ct.logger.log(
                          'MSE detaching and video ended, reset startPosition'
                        ),
                        (this.startPosition = this.lastCurrentTime = 0));
                      var a = this.levels;
                      a &&
                        a.forEach(function(e) {
                          e.details &&
                            e.details.fragments.forEach(function(e) {
                              e.backtracked = void 0;
                            });
                        }),
                        t &&
                          (t.removeEventListener('seeking', this.onvseeking),
                          t.removeEventListener('seeked', this.onvseeked),
                          t.removeEventListener('ended', this.onvended),
                          (this.onvseeking = this.onvseeked = this.onvended = null)),
                        this.fragmentTracker.removeAllFragments(),
                        (this.media = this.mediaBuffer = null),
                        (this.loadedmetadata = !1),
                        this.stopLoad();
                    }),
                    (n.onMediaSeeked = function e() {
                      var t = this.media,
                        a = t ? t.currentTime : void 0;
                      Object(st.isFiniteNumber)(a) &&
                        ct.logger.log('media seeked to ' + a.toFixed(3)),
                        this.tick();
                    }),
                    (n.onManifestLoading = function e() {
                      ct.logger.log('trigger BUFFER_RESET'),
                        this.hls.trigger(lt['default'].BUFFER_RESET),
                        this.fragmentTracker.removeAllFragments(),
                        (this.stalled = !1),
                        (this.startPosition = this.lastCurrentTime = 0);
                    }),
                    (n.onManifestParsed = function t(e) {
                      var a = !1,
                        r = !1,
                        n;
                      e.levels.forEach(function(e) {
                        (n = e.audioCodec),
                          n &&
                            (-1 !== n.indexOf('mp4a.40.2') && (a = !0),
                            -1 !== n.indexOf('mp4a.40.5') && (r = !0));
                      }),
                        (this.audioCodecSwitch = a && r),
                        this.audioCodecSwitch &&
                          ct.logger.log(
                            'both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC'
                          ),
                        (this.altAudio = e.altAudio),
                        (this.levels = e.levels),
                        (this.startFragRequested = !1);
                      var o = this.config;
                      (o.autoStartLoad || this.forceStartLoad) &&
                        this.hls.startLoad(o.startPosition);
                    }),
                    (n.onLevelLoaded = function t(e) {
                      var a = e.details,
                        r = e.level,
                        n = this.levels[this.levelLastLoaded],
                        o = this.levels[r],
                        i = a.totalduration,
                        d = 0;
                      if (
                        (ct.logger.log(
                          'level ' +
                            r +
                            ' loaded [' +
                            a.startSN +
                            ',' +
                            a.endSN +
                            '],duration:' +
                            i
                        ),
                        a.live || (o.details && o.details.live))
                      ) {
                        var s = o.details;
                        s && 0 < a.fragments.length
                          ? (N(s, a),
                            (d = a.fragments[0].start),
                            (this.liveSyncPosition = this.computeLivePosition(
                              d,
                              s
                            )),
                            a.PTSKnown && Object(st.isFiniteNumber)(d)
                              ? ct.logger.log(
                                  'live playlist sliding:' + d.toFixed(3)
                                )
                              : (ct.logger.log(
                                  'live playlist - outdated PTS, unknown sliding'
                                ),
                                H(this.fragPrevious, n, a)))
                          : (ct.logger.log(
                              'live playlist - first load, unknown sliding'
                            ),
                            (a.PTSKnown = !1),
                            H(this.fragPrevious, n, a));
                      } else a.PTSKnown = !1;
                      if (
                        ((o.details = a),
                        (this.levelLastLoaded = r),
                        this.hls.trigger(lt['default'].LEVEL_UPDATED, {
                          details: a,
                          level: r
                        }),
                        !1 === this.startFragRequested)
                      ) {
                        if (
                          -1 === this.startPosition ||
                          -1 === this.lastCurrentTime
                        ) {
                          var l = a.startTimeOffset;
                          Object(st.isFiniteNumber)(l)
                            ? (0 > l &&
                                (ct.logger.log(
                                  'negative start time offset ' +
                                    l +
                                    ', count from end of last fragment'
                                ),
                                (l = d + i + l)),
                              ct.logger.log(
                                'start time offset found in playlist, adjust startPosition to ' +
                                  l
                              ),
                              (this.startPosition = l))
                            : a.live
                            ? ((this.startPosition = this.computeLivePosition(
                                d,
                                a
                              )),
                              ct.logger.log(
                                'configure startPosition to ' +
                                  this.startPosition
                              ))
                            : (this.startPosition = 0),
                            (this.lastCurrentTime = this.startPosition);
                        }
                        this.nextLoadPosition = this.startPosition;
                      }
                      this.state === sa.WAITING_LEVEL && (this.state = sa.IDLE),
                        this.tick();
                    }),
                    (n.onKeyLoaded = function e() {
                      this.state === sa.KEY_LOADING &&
                        ((this.state = sa.IDLE), this.tick());
                    }),
                    (n.onFragLoaded = function t(e) {
                      var a = this.fragCurrent,
                        r = this.hls,
                        n = this.levels,
                        o = this.media,
                        i = e.frag;
                      if (
                        this.state === sa.FRAG_LOADING &&
                        a &&
                        'main' === i.type &&
                        i.level === a.level &&
                        i.sn === a.sn
                      ) {
                        var d = e.stats,
                          s = n[a.level],
                          l = s.details;
                        if (
                          ((this.bitrateTest = !1),
                          (this.stats = d),
                          ct.logger.log(
                            'Loaded ' +
                              a.sn +
                              ' of [' +
                              l.startSN +
                              ' ,' +
                              l.endSN +
                              '],level ' +
                              a.level
                          ),
                          i.bitrateTest && r.nextLoadLevel)
                        )
                          (this.state = sa.IDLE),
                            (this.startFragRequested = !1),
                            (d.tparsed = d.tbuffered = window.performance.now()),
                            r.trigger(lt['default'].FRAG_BUFFERED, {
                              stats: d,
                              frag: a,
                              id: 'main'
                            }),
                            this.tick();
                        else if ('initSegment' === i.sn)
                          (this.state = sa.IDLE),
                            (d.tparsed = d.tbuffered = window.performance.now()),
                            (l.initSegment.data = e.payload),
                            r.trigger(lt['default'].FRAG_BUFFERED, {
                              stats: d,
                              frag: a,
                              id: 'main'
                            }),
                            this.tick();
                        else {
                          ct.logger.log(
                            'Parsing ' +
                              a.sn +
                              ' of [' +
                              l.startSN +
                              ' ,' +
                              l.endSN +
                              '],level ' +
                              a.level +
                              ', cc ' +
                              a.cc
                          ),
                            (this.state = sa.PARSING),
                            (this.pendingBuffering = !0),
                            (this.appended = !1),
                            i.bitrateTest &&
                              ((i.bitrateTest = !1),
                              this.fragmentTracker.onFragLoaded({ frag: i }));
                          var c = !(o && o.seeking) && (l.PTSKnown || !l.live),
                            u = l.initSegment ? l.initSegment.data : [],
                            p = this._getAudioCodec(s),
                            g = (this.demuxer =
                              this.demuxer || new Jt(this.hls, 'main'));
                          g.push(
                            e.payload,
                            u,
                            p,
                            s.videoCodec,
                            a,
                            l.totalduration,
                            c
                          );
                        }
                      }
                      this.fragLoadError = 0;
                    }),
                    (n.onFragParsingInitSegment = function t(e) {
                      var a = this.fragCurrent,
                        r = e.frag;
                      if (
                        a &&
                        'main' === e.id &&
                        r.sn === a.sn &&
                        r.level === a.level &&
                        this.state === sa.PARSING
                      ) {
                        var n = e.tracks,
                          o,
                          i;
                        if (
                          ((this.audioOnly = n.audio && !n.video),
                          this.altAudio && !this.audioOnly && delete n.audio,
                          (i = n.audio),
                          i)
                        ) {
                          var d = this.levels[this.level].audioCodec,
                            s = navigator.userAgent.toLowerCase();
                          d &&
                            this.audioCodecSwap &&
                            (ct.logger.log('swapping playlist audio codec'),
                            (d =
                              -1 === d.indexOf('mp4a.40.5')
                                ? 'mp4a.40.5'
                                : 'mp4a.40.2')),
                            this.audioCodecSwitch &&
                              1 !== i.metadata.channelCount &&
                              -1 === s.indexOf('firefox') &&
                              (d = 'mp4a.40.5'),
                            -1 !== s.indexOf('android') &&
                              'audio/mpeg' !== i.container &&
                              ((d = 'mp4a.40.2'),
                              ct.logger.log(
                                'Android: force audio codec to ' + d
                              )),
                            (i.levelCodec = d),
                            (i.id = e.id);
                        }
                        for (o in ((i = n.video),
                        i &&
                          ((i.levelCodec = this.levels[this.level].videoCodec),
                          (i.id = e.id)),
                        this.hls.trigger(lt['default'].BUFFER_CODECS, n),
                        n)) {
                          (i = n[o]),
                            ct.logger.log(
                              'main track:' +
                                o +
                                ',container:' +
                                i.container +
                                ',codecs[level/parsed]=[' +
                                i.levelCodec +
                                '/' +
                                i.codec +
                                ']'
                            );
                          var l = i.initSegment;
                          l &&
                            ((this.appended = !0),
                            (this.pendingBuffering = !0),
                            this.hls.trigger(lt['default'].BUFFER_APPENDING, {
                              type: o,
                              data: l,
                              parent: 'main',
                              content: 'initSegment'
                            }));
                        }
                        this.tick();
                      }
                    }),
                    (n.onFragParsingData = function t(e) {
                      var a = this,
                        r = this.fragCurrent,
                        n = e.frag;
                      if (
                        r &&
                        'main' === e.id &&
                        n.sn === r.sn &&
                        n.level === r.level &&
                        !('audio' === e.type && this.altAudio) &&
                        this.state === sa.PARSING
                      ) {
                        var o = this.levels[this.level],
                          i = r;
                        if (
                          (Object(st.isFiniteNumber)(e.endPTS) ||
                            ((e.endPTS = e.startPTS + r.duration),
                            (e.endDTS = e.startDTS + r.duration)),
                          !0 === e.hasAudio && i.addElementaryStream(Et.AUDIO),
                          !0 === e.hasVideo && i.addElementaryStream(Et.VIDEO),
                          ct.logger.log(
                            'Parsed ' +
                              e.type +
                              ',PTS:[' +
                              e.startPTS.toFixed(3) +
                              ',' +
                              e.endPTS.toFixed(3) +
                              '],DTS:[' +
                              e.startDTS.toFixed(3) +
                              '/' +
                              e.endDTS.toFixed(3) +
                              '],nb:' +
                              e.nb +
                              ',dropped:' +
                              (e.dropped || 0)
                          ),
                          'video' === e.type)
                        )
                          if (((i.dropped = e.dropped), !i.dropped))
                            i.backtracked = !1;
                          else if (!i.backtracked) {
                            var d = o.details;
                            if (d && i.sn === d.startSN)
                              ct.logger.warn(
                                'missing video frame(s) on first frag, appending with gap',
                                i.sn
                              );
                            else
                              return (
                                ct.logger.warn(
                                  'missing video frame(s), backtracking fragment',
                                  i.sn
                                ),
                                this.fragmentTracker.removeFragment(i),
                                (i.backtracked = !0),
                                (this.nextLoadPosition = e.startPTS),
                                (this.state = sa.IDLE),
                                (this.fragPrevious = i),
                                this.demuxer &&
                                  (this.demuxer.destroy(),
                                  (this.demuxer = null)),
                                void this.tick()
                              );
                          } else
                            ct.logger.warn(
                              'Already backtracked on this fragment, appending with the gap',
                              i.sn
                            );
                        var s = I(
                            o.details,
                            i,
                            e.startPTS,
                            e.endPTS,
                            e.startDTS,
                            e.endDTS
                          ),
                          l = this.hls;
                        l.trigger(lt['default'].LEVEL_PTS_UPDATED, {
                          details: o.details,
                          level: this.level,
                          drift: s,
                          type: e.type,
                          start: e.startPTS,
                          end: e.endPTS
                        }),
                          [e.data1, e.data2].forEach(function(t) {
                            t &&
                              t.length &&
                              a.state === sa.PARSING &&
                              ((a.appended = !0),
                              (a.pendingBuffering = !0),
                              l.trigger(lt['default'].BUFFER_APPENDING, {
                                type: e.type,
                                data: t,
                                parent: 'main',
                                content: 'data'
                              }));
                          }),
                          this.tick();
                      }
                    }),
                    (n.onFragParsed = function t(e) {
                      var a = this.fragCurrent,
                        r = e.frag;
                      a &&
                        'main' === e.id &&
                        r.sn === a.sn &&
                        r.level === a.level &&
                        this.state === sa.PARSING &&
                        ((this.stats.tparsed = window.performance.now()),
                        (this.state = sa.PARSED),
                        this._checkAppendedParsed());
                    }),
                    (n.onAudioTrackSwitching = function a(e) {
                      var r = this.altAudio,
                        n = !!e.url,
                        o = e.id;
                      if (!n) {
                        if (this.mediaBuffer !== this.media) {
                          ct.logger.log(
                            'switching on main audio, use media.buffered to schedule main fragment loading'
                          ),
                            (this.mediaBuffer = this.media);
                          var i = this.fragCurrent;
                          i.loader &&
                            (ct.logger.log(
                              'switching to main audio track, cancel main fragment load'
                            ),
                            i.loader.abort()),
                            (this.fragCurrent = null),
                            (this.fragPrevious = null),
                            this.demuxer &&
                              (this.demuxer.destroy(), (this.demuxer = null)),
                            (this.state = sa.IDLE);
                        }
                        var d = this.hls;
                        r &&
                          d.trigger(lt['default'].BUFFER_FLUSHING, {
                            startOffset: 0,
                            endOffset: t,
                            type: 'audio'
                          }),
                          d.trigger(lt['default'].AUDIO_TRACK_SWITCHED, {
                            id: o
                          });
                      }
                    }),
                    (n.onAudioTrackSwitched = function t(e) {
                      var a = e.id,
                        r = !!this.hls.audioTracks[a].url;
                      if (r) {
                        var n = this.videoBuffer;
                        n &&
                          this.mediaBuffer !== n &&
                          (ct.logger.log(
                            'switching on alternate audio, use video.buffered to schedule main fragment loading'
                          ),
                          (this.mediaBuffer = n));
                      }
                      (this.altAudio = r), this.tick();
                    }),
                    (n.onBufferCreated = function t(e) {
                      var a = e.tracks,
                        r = !1,
                        n,
                        o;
                      for (var i in a) {
                        var d = a[i];
                        'main' === d.id
                          ? ((o = i),
                            (n = d),
                            'video' === i && (this.videoBuffer = a[i].buffer))
                          : (r = !0);
                      }
                      r && n
                        ? (ct.logger.log(
                            'alternate track found, use ' +
                              o +
                              '.buffered to schedule main fragment loading'
                          ),
                          (this.mediaBuffer = n.buffer))
                        : (this.mediaBuffer = this.media);
                    }),
                    (n.onBufferAppended = function t(e) {
                      if ('main' === e.parent) {
                        var a = this.state;
                        (a === sa.PARSING || a === sa.PARSED) &&
                          ((this.pendingBuffering = 0 < e.pending),
                          this._checkAppendedParsed());
                      }
                    }),
                    (n._checkAppendedParsed = function e() {
                      if (
                        this.state === sa.PARSED &&
                        (!this.appended || !this.pendingBuffering)
                      ) {
                        var t = this.fragCurrent;
                        if (t) {
                          var a = this.mediaBuffer
                            ? this.mediaBuffer
                            : this.media;
                          ct.logger.log(
                            'main buffered : ' + ta.toString(a.buffered)
                          ),
                            (this.fragPrevious = t);
                          var r = this.stats;
                          (r.tbuffered = window.performance.now()),
                            (this.fragLastKbps = E(
                              (8 * r.total) / (r.tbuffered - r.tfirst)
                            )),
                            this.hls.trigger(lt['default'].FRAG_BUFFERED, {
                              stats: r,
                              frag: t,
                              id: 'main'
                            }),
                            (this.state = sa.IDLE);
                        }
                        (this.loadedmetadata || 0 >= this.startPosition) &&
                          this.tick();
                      }
                    }),
                    (n.onError = function t(e) {
                      var r = e.frag || this.fragCurrent;
                      if (!(r && 'main' !== r.type)) {
                        var n =
                          !!this.media &&
                          Wt.isBuffered(this.media, this.media.currentTime) &&
                          Wt.isBuffered(
                            this.media,
                            this.media.currentTime + 0.5
                          );
                        switch (e.details) {
                          case dt.ErrorDetails.FRAG_LOAD_ERROR:
                          case dt.ErrorDetails.FRAG_LOAD_TIMEOUT:
                          case dt.ErrorDetails.KEY_LOAD_ERROR:
                          case dt.ErrorDetails.KEY_LOAD_TIMEOUT:
                            if (!e.fatal)
                              if (
                                this.fragLoadError + 1 <=
                                this.config.fragLoadingMaxRetry
                              ) {
                                var o = u(
                                  a(2, this.fragLoadError) *
                                    this.config.fragLoadingRetryDelay,
                                  this.config.fragLoadingMaxRetryTimeout
                                );
                                ct.logger.warn(
                                  'mediaController: frag loading failed, retry in ' +
                                    o +
                                    ' ms'
                                ),
                                  (this.retryDate =
                                    window.performance.now() + o),
                                  this.loadedmetadata ||
                                    ((this.startFragRequested = !1),
                                    (this.nextLoadPosition = this.startPosition)),
                                  this.fragLoadError++,
                                  (this.state = sa.FRAG_LOADING_WAITING_RETRY);
                              } else
                                ct.logger.error(
                                  'mediaController: ' +
                                    e.details +
                                    ' reaches max retry, redispatch as fatal ...'
                                ),
                                  (e.fatal = !0),
                                  (this.state = sa.ERROR);
                            break;
                          case dt.ErrorDetails.LEVEL_LOAD_ERROR:
                          case dt.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                            this.state !== sa.ERROR &&
                              (e.fatal
                                ? ((this.state = sa.ERROR),
                                  ct.logger.warn(
                                    'streamController: ' +
                                      e.details +
                                      ',switch to ' +
                                      this.state +
                                      ' state ...'
                                  ))
                                : !e.levelRetry &&
                                  this.state === sa.WAITING_LEVEL &&
                                  (this.state = sa.IDLE));
                            break;
                          case dt.ErrorDetails.BUFFER_FULL_ERROR:
                            'main' === e.parent &&
                              (this.state === sa.PARSING ||
                                this.state === sa.PARSED) &&
                              (n
                                ? (this._reduceMaxBufferLength(
                                    this.config.maxBufferLength
                                  ),
                                  (this.state = sa.IDLE))
                                : (ct.logger.warn(
                                    'buffer full error also media.currentTime is not buffered, flush everything'
                                  ),
                                  (this.fragCurrent = null),
                                  this.flushMainBuffer(
                                    0,
                                    Number.POSITIVE_INFINITY
                                  )));
                        }
                      }
                    }),
                    (n._reduceMaxBufferLength = function t(e) {
                      var a = this.config;
                      return (
                        !!(a.maxMaxBufferLength >= e) &&
                        ((a.maxMaxBufferLength /= 2),
                        ct.logger.warn(
                          'main:reduce max buffer length to ' +
                            a.maxMaxBufferLength +
                            's'
                        ),
                        !0)
                      );
                    }),
                    (n._checkBuffer = function e() {
                      var t = this.media;
                      if (t && 0 !== t.readyState) {
                        var a = this.mediaBuffer ? this.mediaBuffer : t,
                          r = a.buffered;
                        !this.loadedmetadata && r.length
                          ? ((this.loadedmetadata = !0), this._seekToStartPos())
                          : this.immediateSwitch
                          ? this.immediateLevelSwitchEnd()
                          : this.gapController.poll(this.lastCurrentTime, r);
                      }
                    }),
                    (n.onFragLoadEmergencyAborted = function e() {
                      (this.state = sa.IDLE),
                        this.loadedmetadata ||
                          ((this.startFragRequested = !1),
                          (this.nextLoadPosition = this.startPosition)),
                        this.tick();
                    }),
                    (n.onBufferFlushed = function e() {
                      var t = this.mediaBuffer ? this.mediaBuffer : this.media;
                      if (t) {
                        var a = this.audioOnly ? Et.AUDIO : Et.VIDEO;
                        this.fragmentTracker.detectEvictedFragments(
                          a,
                          t.buffered
                        );
                      }
                      (this.state = sa.IDLE), (this.fragPrevious = null);
                    }),
                    (n.onLevelsUpdated = function t(e) {
                      this.levels = e.levels;
                    }),
                    (n.swapAudioCodec = function e() {
                      this.audioCodecSwap = !this.audioCodecSwap;
                    }),
                    (n._seekToStartPos = function e() {
                      var t = this.media,
                        a = t.currentTime,
                        r = this.startPosition;
                      if (a !== r && 0 <= r) {
                        if (t.seeking)
                          return void ct.logger.log(
                            'could not seek to ' +
                              r +
                              ', already seeking at ' +
                              a
                          );
                        var n = t.buffered.length ? t.buffered.start(0) : 0,
                          o = n - r;
                        0 < o &&
                          o < this.config.maxBufferHole &&
                          (ct.logger.log(
                            'adjusting start position by ' +
                              o +
                              ' to match buffer start'
                          ),
                          (r += o),
                          (this.startPosition = r)),
                          ct.logger.log(
                            'seek to target start position ' +
                              r +
                              ' from current time ' +
                              a +
                              '. ready state ' +
                              t.readyState
                          ),
                          (t.currentTime = r);
                      }
                    }),
                    (n._getAudioCodec = function t(e) {
                      var a = this.config.defaultAudioCodec || e.audioCodec;
                      return (
                        this.audioCodecSwap &&
                          (ct.logger.log('swapping playlist audio codec'),
                          a &&
                            (-1 === a.indexOf('mp4a.40.5')
                              ? (a = 'mp4a.40.5')
                              : (a = 'mp4a.40.2'))),
                        a
                      );
                    }),
                    J(r, [
                      {
                        key: 'state',
                        set: function t(e) {
                          if (this.state !== e) {
                            var a = this.state;
                            (this._state = e),
                              ct.logger.log(
                                'main stream-controller: ' + a + '->' + e
                              ),
                              this.hls.trigger(
                                lt['default'].STREAM_STATE_TRANSITION,
                                { previousState: a, nextState: e }
                              );
                          }
                        },
                        get: function e() {
                          return this._state;
                        }
                      },
                      {
                        key: 'currentLevel',
                        get: function e() {
                          var t = this.media;
                          if (t) {
                            var a = this.getBufferedFrag(t.currentTime);
                            if (a) return a.level;
                          }
                          return -1;
                        }
                      },
                      {
                        key: 'nextBufferedFrag',
                        get: function e() {
                          var t = this.media;
                          return t
                            ? this.followingBufferedFrag(
                                this.getBufferedFrag(t.currentTime)
                              )
                            : null;
                        }
                      },
                      {
                        key: 'nextLevel',
                        get: function e() {
                          var t = this.nextBufferedFrag;
                          return t ? t.level : -1;
                        }
                      },
                      {
                        key: 'liveSyncPosition',
                        get: function e() {
                          return this._liveSyncPosition;
                        },
                        set: function t(e) {
                          this._liveSyncPosition = e;
                        }
                      }
                    ]),
                    r
                  );
                })(la),
                pa = ua,
                ga = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a =
                        e.call(
                          this,
                          t,
                          lt['default'].MANIFEST_LOADED,
                          lt['default'].LEVEL_LOADED,
                          lt['default'].AUDIO_TRACK_SWITCHED,
                          lt['default'].FRAG_LOADED,
                          lt['default'].ERROR
                        ) || this),
                      (a.canload = !1),
                      (a.currentLevelIndex = null),
                      (a.manualLevelIndex = -1),
                      (a.timer = null),
                      (Ya = /chrome|firefox/.test(
                        navigator.userAgent.toLowerCase()
                      )),
                      a
                    );
                  }
                  re(t, e);
                  var r = t.prototype;
                  return (
                    (r.onHandlerDestroying = function e() {
                      this.clearTimer(), (this.manualLevelIndex = -1);
                    }),
                    (r.clearTimer = function e() {
                      null !== this.timer &&
                        (clearTimeout(this.timer), (this.timer = null));
                    }),
                    (r.startLoad = function e() {
                      var t = this._levels;
                      (this.canload = !0),
                        (this.levelRetryCount = 0),
                        t &&
                          t.forEach(function(e) {
                            e.loadError = 0;
                            var t = e.details;
                            t && t.live && (e.details = void 0);
                          }),
                        null !== this.timer && this.loadLevel();
                    }),
                    (r.stopLoad = function e() {
                      this.canload = !1;
                    }),
                    (r.onManifestLoaded = function t(e) {
                      var a = [],
                        r = [],
                        n = {},
                        o = null,
                        d = !1,
                        s = !1,
                        l;
                      if (
                        (e.levels.forEach(function(e) {
                          var t = e.attrs;
                          (e.loadError = 0),
                            (e.fragmentError = !1),
                            (d = d || !!e.videoCodec),
                            (s = s || !!e.audioCodec),
                            Ya &&
                              e.audioCodec &&
                              -1 !== e.audioCodec.indexOf('mp4a.40.34') &&
                              (e.audioCodec = void 0),
                            (o = n[e.bitrate]),
                            o
                              ? o.url.push(e.url)
                              : ((e.url = [e.url]),
                                (e.urlId = 0),
                                (n[e.bitrate] = e),
                                a.push(e)),
                            t &&
                              (t.AUDIO && C(o || e, 'audio', t.AUDIO),
                              t.SUBTITLES && C(o || e, 'text', t.SUBTITLES));
                        }),
                        d &&
                          s &&
                          (a = a.filter(function(e) {
                            var t = e.videoCodec;
                            return !!t;
                          })),
                        (a = a.filter(function(e) {
                          var t = e.audioCodec,
                            a = e.videoCodec;
                          return (!t || h(t, 'audio')) && (!a || h(a, 'video'));
                        })),
                        e.audioTracks &&
                          ((r = e.audioTracks.filter(function(e) {
                            return !e.audioCodec || h(e.audioCodec, 'audio');
                          })),
                          r.forEach(function(e, t) {
                            e.id = t;
                          })),
                        0 < a.length)
                      ) {
                        (l = a[0].bitrate),
                          a.sort(function(e, t) {
                            return e.bitrate - t.bitrate;
                          }),
                          (this._levels = a);
                        for (var c = 0; c < a.length; c++)
                          if (a[c].bitrate === l) {
                            (this._firstLevel = c),
                              ct.logger.log(
                                'manifest loaded,' +
                                  a.length +
                                  ' level(s) found, first bitrate:' +
                                  l
                              );
                            break;
                          }
                        var u = s && !d;
                        this.hls.trigger(lt['default'].MANIFEST_PARSED, {
                          levels: a,
                          audioTracks: r,
                          firstLevel: this._firstLevel,
                          stats: e.stats,
                          audio: s,
                          video: d,
                          altAudio:
                            !u &&
                            r.some(function(e) {
                              return !!e.url;
                            })
                        });
                      } else
                        this.hls.trigger(lt['default'].ERROR, {
                          type: dt.ErrorTypes.MEDIA_ERROR,
                          details:
                            dt.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                          fatal: !0,
                          url: this.hls.url,
                          reason:
                            'no level with compatible codecs found in manifest'
                        });
                    }),
                    (r.setLevelInternal = function t(e) {
                      var a = this._levels,
                        r = this.hls;
                      if (0 <= e && e < a.length) {
                        if ((this.clearTimer(), this.currentLevelIndex !== e)) {
                          ct.logger.log('switching to level ' + e),
                            (this.currentLevelIndex = e);
                          var n = a[e];
                          (n.level = e),
                            r.trigger(lt['default'].LEVEL_SWITCHING, n);
                        }
                        var o = a[e],
                          i = o.details;
                        if (!i || i.live) {
                          var d = o.urlId;
                          r.trigger(lt['default'].LEVEL_LOADING, {
                            url: o.url[d],
                            level: e,
                            id: d
                          });
                        }
                      } else
                        r.trigger(lt['default'].ERROR, {
                          type: dt.ErrorTypes.OTHER_ERROR,
                          details: dt.ErrorDetails.LEVEL_SWITCH_ERROR,
                          level: e,
                          fatal: !1,
                          reason: 'invalid level idx'
                        });
                    }),
                    (r.onError = function t(e) {
                      if (e.fatal)
                        return void (
                          e.type === dt.ErrorTypes.NETWORK_ERROR &&
                          this.clearTimer()
                        );
                      var a = !1,
                        r = !1,
                        n;
                      switch (e.details) {
                        case dt.ErrorDetails.FRAG_LOAD_ERROR:
                        case dt.ErrorDetails.FRAG_LOAD_TIMEOUT:
                        case dt.ErrorDetails.KEY_LOAD_ERROR:
                        case dt.ErrorDetails.KEY_LOAD_TIMEOUT:
                          (n = e.frag.level), (r = !0);
                          break;
                        case dt.ErrorDetails.LEVEL_LOAD_ERROR:
                        case dt.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                          (n = e.context.level), (a = !0);
                          break;
                        case dt.ErrorDetails.REMUX_ALLOC_ERROR:
                          (n = e.level), (a = !0);
                      }
                      void 0 !== n && this.recoverLevel(e, n, a, r);
                    }),
                    (r.recoverLevel = function o(e, t, r, n) {
                      var i = this,
                        d = this.hls.config,
                        s = e.details,
                        l = this._levels[t],
                        c,
                        p,
                        g;
                      if ((l.loadError++, (l.fragmentError = n), r))
                        if (this.levelRetryCount + 1 <= d.levelLoadingMaxRetry)
                          (p = u(
                            a(2, this.levelRetryCount) *
                              d.levelLoadingRetryDelay,
                            d.levelLoadingMaxRetryTimeout
                          )),
                            (this.timer = setTimeout(function() {
                              return i.loadLevel();
                            }, p)),
                            (e.levelRetry = !0),
                            this.levelRetryCount++,
                            ct.logger.warn(
                              'level controller, ' +
                                s +
                                ', retry in ' +
                                p +
                                ' ms, current retry count is ' +
                                this.levelRetryCount
                            );
                        else
                          return (
                            ct.logger.error(
                              'level controller, cannot recover from ' +
                                s +
                                ' error'
                            ),
                            (this.currentLevelIndex = null),
                            this.clearTimer(),
                            void (e.fatal = !0)
                          );
                      (r || n) &&
                        ((c = l.url.length),
                        1 < c && l.loadError < c
                          ? ((l.urlId = (l.urlId + 1) % c),
                            (l.details = void 0),
                            ct.logger.warn(
                              'level controller, ' +
                                s +
                                ' for level ' +
                                t +
                                ': switching to redundant URL-id ' +
                                l.urlId
                            ))
                          : -1 === this.manualLevelIndex
                          ? ((g = 0 === t ? this._levels.length - 1 : t - 1),
                            ct.logger.warn(
                              'level controller, ' + s + ': switch to ' + g
                            ),
                            (this.hls.nextAutoLevel = this.currentLevelIndex = g))
                          : n &&
                            (ct.logger.warn(
                              'level controller, ' + s + ': reload a fragment'
                            ),
                            (this.currentLevelIndex = null)));
                    }),
                    (r.onFragLoaded = function t(e) {
                      var a = e.frag;
                      if (void 0 !== a && 'main' === a.type) {
                        var r = this._levels[a.level];
                        void 0 !== r &&
                          ((r.fragmentError = !1),
                          (r.loadError = 0),
                          (this.levelRetryCount = 0));
                      }
                    }),
                    (r.onLevelLoaded = function t(e) {
                      var a = this,
                        r = e.level,
                        n = e.details;
                      if (r === this.currentLevelIndex) {
                        var o = this._levels[r];
                        if (
                          (o.fragmentError ||
                            ((o.loadError = 0), (this.levelRetryCount = 0)),
                          n.live)
                        ) {
                          var i = w(o.details, n, e.stats.trequest);
                          ct.logger.log(
                            'live playlist, reload in ' + E(i) + ' ms'
                          ),
                            (this.timer = setTimeout(function() {
                              return a.loadLevel();
                            }, i));
                        } else this.clearTimer();
                      }
                    }),
                    (r.onAudioTrackSwitched = function t(e) {
                      var a = this.hls.audioTracks[e.id].groupId,
                        r = this.hls.levels[this.currentLevelIndex];
                      if (r && r.audioGroupIds) {
                        for (var n = -1, o = 0; o < r.audioGroupIds.length; o++)
                          if (r.audioGroupIds[o] === a) {
                            n = o;
                            break;
                          }
                        n !== r.urlId && ((r.urlId = n), this.startLoad());
                      }
                    }),
                    (r.loadLevel = function e() {
                      if (
                        (ct.logger.debug('call to loadLevel'),
                        null !== this.currentLevelIndex && this.canload)
                      ) {
                        var t = this._levels[this.currentLevelIndex];
                        if ('object' == typeof t && 0 < t.url.length) {
                          var a = this.currentLevelIndex,
                            r = t.urlId,
                            n = t.url[r];
                          ct.logger.log(
                            'Attempt loading level index ' +
                              a +
                              ' with URL-id ' +
                              r
                          ),
                            this.hls.trigger(lt['default'].LEVEL_LOADING, {
                              url: n,
                              level: a,
                              id: r
                            });
                        }
                      }
                    }),
                    (r.removeLevel = function a(e, t) {
                      var r = this.levels
                        .filter(function(a, r) {
                          return (
                            r !== e ||
                            (!!(1 < a.url.length && void 0 !== t) &&
                              ((a.url = a.url.filter(function(e, a) {
                                return a !== t;
                              })),
                              (a.urlId = 0),
                              !0))
                          );
                        })
                        .map(function(e, t) {
                          var a = e.details;
                          return (
                            a &&
                              a.fragments &&
                              a.fragments.forEach(function(e) {
                                e.level = t;
                              }),
                            e
                          );
                        });
                      (this._levels = r),
                        this.hls.trigger(lt['default'].LEVELS_UPDATED, {
                          levels: r
                        });
                    }),
                    ae(t, [
                      {
                        key: 'levels',
                        get: function e() {
                          return this._levels;
                        }
                      },
                      {
                        key: 'level',
                        get: function e() {
                          return this.currentLevelIndex;
                        },
                        set: function t(e) {
                          var a = this._levels;
                          a &&
                            ((e = u(e, a.length - 1)),
                            (this.currentLevelIndex !== e || !a[e].details) &&
                              this.setLevelInternal(e));
                        }
                      },
                      {
                        key: 'manualLevel',
                        get: function e() {
                          return this.manualLevelIndex;
                        },
                        set: function t(e) {
                          (this.manualLevelIndex = e),
                            void 0 === this._startLevel &&
                              (this._startLevel = e),
                            -1 !== e && (this.level = e);
                        }
                      },
                      {
                        key: 'firstLevel',
                        get: function e() {
                          return this._firstLevel;
                        },
                        set: function t(e) {
                          this._firstLevel = e;
                        }
                      },
                      {
                        key: 'startLevel',
                        get: function e() {
                          if (void 0 === this._startLevel) {
                            var t = this.hls.config.startLevel;
                            return void 0 === t ? this._firstLevel : t;
                          }
                          return this._startLevel;
                        },
                        set: function t(e) {
                          this._startLevel = e;
                        }
                      },
                      {
                        key: 'nextLoadLevel',
                        get: function e() {
                          return -1 === this.manualLevelIndex
                            ? this.hls.nextAutoLevel
                            : this.manualLevelIndex;
                        },
                        set: function t(e) {
                          (this.level = e),
                            -1 === this.manualLevelIndex &&
                              (this.hls.nextAutoLevel = e);
                        }
                      }
                    ]),
                    t
                  );
                })(gt),
                fa = i('./src/demux/id3.js'),
                ma = 0.25,
                ya = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a =
                        e.call(
                          this,
                          t,
                          lt['default'].MEDIA_ATTACHED,
                          lt['default'].MEDIA_DETACHING,
                          lt['default'].FRAG_PARSING_METADATA,
                          lt['default'].LIVE_BACK_BUFFER_REACHED
                        ) || this),
                      (a.id3Track = void 0),
                      (a.media = void 0),
                      a
                    );
                  }
                  de(t, e);
                  var a = t.prototype;
                  return (
                    (a.destroy = function e() {
                      gt.prototype.destroy.call(this);
                    }),
                    (a.onMediaAttached = function t(e) {
                      if (((this.media = e.media), !this.media));
                    }),
                    (a.onMediaDetaching = function e() {
                      oe(this.id3Track),
                        (this.id3Track = void 0),
                        (this.media = void 0);
                    }),
                    (a.getID3Track = function t(e) {
                      for (var a = 0, r; a < e.length; a++)
                        if (
                          ((r = e[a]),
                          'metadata' === r.kind && 'id3' === r.label)
                        )
                          return ne(r, this.media), r;
                      return this.media.addTextTrack('metadata', 'id3');
                    }),
                    (a.onFragParsingMetadata = function t(e) {
                      var a = e.frag,
                        r = e.samples;
                      this.id3Track ||
                        ((this.id3Track = this.getID3Track(
                          this.media.textTracks
                        )),
                        (this.id3Track.mode = 'hidden'));
                      for (
                        var n =
                            window.WebKitDataCue ||
                            window.VTTCue ||
                            window.TextTrackCue,
                          o = 0,
                          d;
                        o < r.length;
                        o++
                      )
                        if (((d = fa['default'].getID3Frames(r[o].data)), d)) {
                          var l = s(r[o].pts, 0),
                            c = o < r.length - 1 ? r[o + 1].pts : a.endPTS;
                          c || (c = a.start + a.duration);
                          var u = c - l;
                          0 >= u && (c = l + ma);
                          for (var p = 0, g; p < d.length; p++)
                            if (
                              ((g = d[p]), !fa['default'].isTimeStampFrame(g))
                            ) {
                              var f = new n(l, c, '');
                              (f.value = g), this.id3Track.addCue(f);
                            }
                        }
                    }),
                    (a.onLiveBackBufferReached = function t(e) {
                      var a = e.bufferEnd,
                        r = this.id3Track;
                      if (r && r.cues && r.cues.length) {
                        var n = ie(r.cues, a);
                        if (n) for (; r.cues[0] !== n; ) r.removeCue(r.cues[0]);
                      }
                    }),
                    t
                  );
                })(gt),
                ha = ya,
                Ea = (function() {
                  function e(e) {
                    var t = Math.exp,
                      a = Math.log;
                    (this.alpha_ = void 0),
                      (this.estimate_ = void 0),
                      (this.totalWeight_ = void 0),
                      (this.alpha_ = e ? t(a(0.5) / e) : 0),
                      (this.estimate_ = 0),
                      (this.totalWeight_ = 0);
                  }
                  var t = e.prototype;
                  return (
                    (t.sample = function r(e, t) {
                      var n = a(this.alpha_, e);
                      (this.estimate_ = t * (1 - n) + n * this.estimate_),
                        (this.totalWeight_ += e);
                    }),
                    (t.getTotalWeight = function e() {
                      return this.totalWeight_;
                    }),
                    (t.getEstimate = function e() {
                      if (this.alpha_) {
                        var t = 1 - a(this.alpha_, this.totalWeight_);
                        return this.estimate_ / t;
                      }
                      return this.estimate_;
                    }),
                    e
                  );
                })(),
                Ta = Ea,
                va = (function() {
                  function e(e, t, a, r) {
                    (this.hls = void 0),
                      (this.defaultEstimate_ = void 0),
                      (this.minWeight_ = void 0),
                      (this.minDelayMs_ = void 0),
                      (this.slow_ = void 0),
                      (this.fast_ = void 0),
                      (this.hls = e),
                      (this.defaultEstimate_ = r),
                      (this.minWeight_ = 0.001),
                      (this.minDelayMs_ = 50),
                      (this.slow_ = new Ta(t)),
                      (this.fast_ = new Ta(a));
                  }
                  var t = e.prototype;
                  return (
                    (t.sample = function a(e, t) {
                      e = s(e, this.minDelayMs_);
                      var r = 8 * t,
                        n = e / 1e3,
                        o = r / n;
                      this.fast_.sample(n, o), this.slow_.sample(n, o);
                    }),
                    (t.canEstimate = function e() {
                      var t = this.fast_;
                      return t && t.getTotalWeight() >= this.minWeight_;
                    }),
                    (t.getEstimate = function e() {
                      return this.canEstimate()
                        ? u(this.fast_.getEstimate(), this.slow_.getEstimate())
                        : this.defaultEstimate_;
                    }),
                    (t.destroy = function e() {}),
                    e
                  );
                })(),
                Sa = va,
                ba = window,
                _a = ba.performance,
                Ra = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a =
                        e.call(
                          this,
                          t,
                          lt['default'].FRAG_LOADING,
                          lt['default'].FRAG_LOADED,
                          lt['default'].FRAG_BUFFERED,
                          lt['default'].ERROR
                        ) || this),
                      (a.lastLoadedFragLevel = 0),
                      (a._nextAutoLevel = -1),
                      (a.hls = t),
                      (a.timer = null),
                      (a._bwEstimator = null),
                      (a.onCheck = a._abandonRulesCheck.bind(ue(a))),
                      a
                    );
                  }
                  pe(t, e);
                  var a = t.prototype;
                  return (
                    (a.destroy = function e() {
                      this.clearTimer(), gt.prototype.destroy.call(this);
                    }),
                    (a.onFragLoading = function t(e) {
                      var a = e.frag;
                      if (
                        'main' === a.type &&
                        (this.timer ||
                          ((this.fragCurrent = a),
                          (this.timer = setInterval(this.onCheck, 100))),
                        !this._bwEstimator)
                      ) {
                        var r = this.hls,
                          n = r.config,
                          o = a.level,
                          i = r.levels[o].details.live,
                          d,
                          s;
                        i
                          ? ((d = n.abrEwmaFastLive), (s = n.abrEwmaSlowLive))
                          : ((d = n.abrEwmaFastVoD), (s = n.abrEwmaSlowVoD)),
                          (this._bwEstimator = new Sa(
                            r,
                            s,
                            d,
                            n.abrEwmaDefaultEstimate
                          ));
                      }
                    }),
                    (a._abandonRulesCheck = function e() {
                      var t = this.hls,
                        a = t.media,
                        n = this.fragCurrent;
                      if (n) {
                        var o = n.loader;
                        if (!o || (o.stats && o.stats.aborted))
                          return (
                            ct.logger.warn(
                              'frag loader destroy or aborted, disarm abandonRules'
                            ),
                            this.clearTimer(),
                            void (this._nextAutoLevel = -1)
                          );
                        var i = o.stats;
                        if (
                          a &&
                          i &&
                          ((!a.paused && 0 !== a.playbackRate) ||
                            !a.readyState) &&
                          n.autoLevel &&
                          n.level
                        ) {
                          var d = _a.now() - i.trequest,
                            l = r(a.playbackRate);
                          if (d > (500 * n.duration) / l) {
                            var c = t.levels,
                              u = s(1, i.bw ? i.bw / 8 : (1e3 * i.loaded) / d),
                              p = c[n.level];
                            if (!p) return;
                            var g = p.realBitrate
                                ? s(p.realBitrate, p.bitrate)
                                : p.bitrate,
                              f = i.total
                                ? i.total
                                : s(i.loaded, E((n.duration * g) / 8)),
                              m = a.currentTime,
                              y = (f - i.loaded) / u,
                              h =
                                (Wt.bufferInfo(a, m, t.config.maxBufferHole)
                                  .end -
                                  m) /
                                l;
                            if (h < (2 * n.duration) / l && y > h) {
                              var T = t.minAutoLevel,
                                v,
                                S;
                              for (S = n.level - 1; S > T; S--) {
                                var b = c[S].realBitrate
                                    ? s(c[S].realBitrate, c[S].bitrate)
                                    : c[S].bitrate,
                                  _ = (n.duration * b) / (0.8 * 8 * u);
                                if (_ < h) break;
                              }
                              v < y &&
                                (ct.logger.warn(
                                  'loading too slow, abort fragment loading and switch to level ' +
                                    S +
                                    ':fragLoadedDelay[' +
                                    S +
                                    ']<fragLoadedDelay[' +
                                    (n.level - 1) +
                                    '];bufferStarvationDelay:' +
                                    v.toFixed(1) +
                                    '<' +
                                    y.toFixed(1) +
                                    ':' +
                                    h.toFixed(1)
                                ),
                                (t.nextLoadLevel = S),
                                this._bwEstimator.sample(d, i.loaded),
                                o.abort(),
                                this.clearTimer(),
                                t.trigger(
                                  lt['default'].FRAG_LOAD_EMERGENCY_ABORTED,
                                  { frag: n, stats: i }
                                ));
                            }
                          }
                        }
                      }
                    }),
                    (a.onFragLoaded = function t(e) {
                      var a = e.frag;
                      if (
                        'main' === a.type &&
                        Object(st.isFiniteNumber)(a.sn)
                      ) {
                        if (
                          (this.clearTimer(),
                          (this.lastLoadedFragLevel = a.level),
                          (this._nextAutoLevel = -1),
                          this.hls.config.abrMaxWithRealBitrate)
                        ) {
                          var r = this.hls.levels[a.level],
                            n =
                              (r.loaded ? r.loaded.bytes : 0) + e.stats.loaded,
                            o =
                              (r.loaded ? r.loaded.duration : 0) +
                              e.frag.duration;
                          (r.loaded = { bytes: n, duration: o }),
                            (r.realBitrate = E((8 * n) / o));
                        }
                        if (e.frag.bitrateTest) {
                          var i = e.stats;
                          (i.tparsed = i.tbuffered = i.tload),
                            this.onFragBuffered(e);
                        }
                      }
                    }),
                    (a.onFragBuffered = function t(e) {
                      var a = e.stats,
                        r = e.frag;
                      if (
                        !0 !== a.aborted &&
                        'main' === r.type &&
                        Object(st.isFiniteNumber)(r.sn) &&
                        (!r.bitrateTest || a.tload === a.tbuffered)
                      ) {
                        var n = a.tparsed - a.trequest;
                        ct.logger.log(
                          'latency/loading/parsing/append/kbps:' +
                            E(a.tfirst - a.trequest) +
                            '/' +
                            E(a.tload - a.tfirst) +
                            '/' +
                            E(a.tparsed - a.tload) +
                            '/' +
                            E(a.tbuffered - a.tparsed) +
                            '/' +
                            E((8 * a.loaded) / (a.tbuffered - a.trequest))
                        ),
                          this._bwEstimator.sample(n, a.loaded),
                          (a.bwEstimate = this._bwEstimator.getEstimate()),
                          (this.bitrateTestDelay = r.bitrateTest ? n / 1e3 : 0);
                      }
                    }),
                    (a.onError = function t(e) {
                      switch (e.details) {
                        case dt.ErrorDetails.FRAG_LOAD_ERROR:
                        case dt.ErrorDetails.FRAG_LOAD_TIMEOUT:
                          this.clearTimer();
                      }
                    }),
                    (a.clearTimer = function e() {
                      clearInterval(this.timer), (this.timer = null);
                    }),
                    (a._findBestLevel = function u(e, t, a, r, n, o, d, l, c) {
                      for (var p = n, g; p >= r; p--)
                        if (((g = c[p]), !!g)) {
                          var f = g.details,
                            m = f ? f.totalduration / f.fragments.length : t,
                            y = !!f && f.live,
                            h = void 0;
                          h = p <= e ? d * a : l * a;
                          var T = c[p].realBitrate
                              ? s(c[p].realBitrate, c[p].bitrate)
                              : c[p].bitrate,
                            v = (T * m) / h;
                          if (
                            (ct.logger.trace(
                              'level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: ' +
                                p +
                                '/' +
                                E(h) +
                                '/' +
                                T +
                                '/' +
                                m +
                                '/' +
                                o +
                                '/' +
                                v
                            ),
                            h > T &&
                              (!v || (y && !this.bitrateTestDelay) || v < o))
                          )
                            return p;
                        }
                      return -1;
                    }),
                    ce(t, [
                      {
                        key: 'nextAutoLevel',
                        get: function e() {
                          var t = this._nextAutoLevel,
                            a = this._bwEstimator;
                          if (-1 !== t && (!a || !a.canEstimate())) return t;
                          var r = this._nextABRAutoLevel;
                          return -1 !== t && (r = u(t, r)), r;
                        },
                        set: function t(e) {
                          this._nextAutoLevel = e;
                        }
                      },
                      {
                        key: '_nextABRAutoLevel',
                        get: function e() {
                          var t = this.hls,
                            a = t.maxAutoLevel,
                            n = t.levels,
                            o = t.config,
                            i = t.minAutoLevel,
                            d = t.media,
                            l = this.lastLoadedFragLevel,
                            c = this.fragCurrent
                              ? this.fragCurrent.duration
                              : 0,
                            p = d ? d.currentTime : 0,
                            g =
                              d && 0 !== d.playbackRate ? r(d.playbackRate) : 1,
                            f = this._bwEstimator
                              ? this._bwEstimator.getEstimate()
                              : o.abrEwmaDefaultEstimate,
                            m =
                              (Wt.bufferInfo(d, p, o.maxBufferHole).end - p) /
                              g,
                            y = this._findBestLevel(
                              l,
                              c,
                              f,
                              i,
                              a,
                              m,
                              o.abrBandWidthFactor,
                              o.abrBandWidthUpFactor,
                              n
                            );
                          if (0 <= y) return y;
                          ct.logger.trace(
                            'rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering'
                          );
                          var h = c
                              ? u(c, o.maxStarvationDelay)
                              : o.maxStarvationDelay,
                            T = o.abrBandWidthFactor,
                            v = o.abrBandWidthUpFactor;
                          if (0 === m) {
                            var S = this.bitrateTestDelay;
                            if (S) {
                              var b = c
                                ? u(c, o.maxLoadingDelay)
                                : o.maxLoadingDelay;
                              (h = b - S),
                                ct.logger.trace(
                                  'bitrate test took ' +
                                    E(1e3 * S) +
                                    'ms, set first fragment max fetchDuration to ' +
                                    E(1e3 * h) +
                                    ' ms'
                                ),
                                (T = v = 1);
                            }
                          }
                          return (
                            (y = this._findBestLevel(
                              l,
                              c,
                              f,
                              i,
                              a,
                              m + h,
                              T,
                              v,
                              n
                            )),
                            s(y, 0)
                          );
                        }
                      }
                    ]),
                    t
                  );
                })(gt),
                Aa = Ra,
                ka = D(),
                Da = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a =
                        e.call(
                          this,
                          t,
                          lt['default'].MEDIA_ATTACHING,
                          lt['default'].MEDIA_DETACHING,
                          lt['default'].MANIFEST_PARSED,
                          lt['default'].BUFFER_RESET,
                          lt['default'].BUFFER_APPENDING,
                          lt['default'].BUFFER_CODECS,
                          lt['default'].BUFFER_EOS,
                          lt['default'].BUFFER_FLUSHING,
                          lt['default'].LEVEL_PTS_UPDATED,
                          lt['default'].LEVEL_UPDATED
                        ) || this),
                      (a._msDuration = null),
                      (a._levelDuration = null),
                      (a._levelTargetDuration = 10),
                      (a._live = null),
                      (a._objectUrl = null),
                      (a._needsFlush = !1),
                      (a._needsEos = !1),
                      (a.config = void 0),
                      (a.audioTimestampOffset = void 0),
                      (a.bufferCodecEventsExpected = 0),
                      (a._bufferCodecEventsTotal = 0),
                      (a.media = null),
                      (a.mediaSource = null),
                      (a.segments = []),
                      (a.parent = void 0),
                      (a.appending = !1),
                      (a.appended = 0),
                      (a.appendError = 0),
                      (a.flushBufferCounter = 0),
                      (a.tracks = {}),
                      (a.pendingTracks = {}),
                      (a.sourceBuffer = {}),
                      (a.flushRange = []),
                      (a._onMediaSourceOpen = function() {
                        ct.logger.log('media source opened'),
                          a.hls.trigger(lt['default'].MEDIA_ATTACHED, {
                            media: a.media
                          });
                        var e = a.mediaSource;
                        e &&
                          e.removeEventListener(
                            'sourceopen',
                            a._onMediaSourceOpen
                          ),
                          a.checkPendingTracks();
                      }),
                      (a._onMediaSourceClose = function() {
                        ct.logger.log('media source closed');
                      }),
                      (a._onMediaSourceEnded = function() {
                        ct.logger.log('media source ended');
                      }),
                      (a._onSBUpdateEnd = function() {
                        if (a.audioTimestampOffset && a.sourceBuffer.audio) {
                          var e = a.sourceBuffer.audio;
                          ct.logger.warn(
                            'change mpeg audio timestamp offset from ' +
                              e.timestampOffset +
                              ' to ' +
                              a.audioTimestampOffset
                          ),
                            (e.timestampOffset = a.audioTimestampOffset),
                            delete a.audioTimestampOffset;
                        }
                        a._needsFlush && a.doFlush(),
                          a._needsEos && a.checkEos(),
                          (a.appending = !1);
                        var t = a.parent,
                          r = a.segments.reduce(function(e, a) {
                            return a.parent === t ? e + 1 : e;
                          }, 0),
                          n = {},
                          o = a.sourceBuffer;
                        for (var i in o) {
                          var d = o[i];
                          if (!d)
                            throw Error(
                              'handling source buffer update end error: source buffer for ' +
                                i +
                                ' uninitilized and unable to update buffered TimeRanges.'
                            );
                          n[i] = d.buffered;
                        }
                        a.hls.trigger(lt['default'].BUFFER_APPENDED, {
                          parent: t,
                          pending: r,
                          timeRanges: n
                        }),
                          a._needsFlush || a.doAppending(),
                          a.updateMediaElementDuration(),
                          0 === r && a.flushLiveBackBuffer();
                      }),
                      (a._onSBUpdateError = function(e) {
                        ct.logger.error('sourceBuffer error:', e),
                          a.hls.trigger(lt['default'].ERROR, {
                            type: dt.ErrorTypes.MEDIA_ERROR,
                            details: dt.ErrorDetails.BUFFER_APPENDING_ERROR,
                            fatal: !1
                          });
                      }),
                      (a.config = t.config),
                      a
                    );
                  }
                  ge(t, e);
                  var a = t.prototype;
                  return (
                    (a.destroy = function e() {
                      gt.prototype.destroy.call(this);
                    }),
                    (a.onLevelPtsUpdated = function t(e) {
                      var a = e.type,
                        n = this.tracks.audio;
                      if ('audio' === a && n && 'audio/mpeg' === n.container) {
                        var o = this.sourceBuffer.audio;
                        if (!o)
                          throw Error(
                            'Level PTS Updated and source buffer for audio uninitalized'
                          );
                        var i = r(o.timestampOffset - e.start);
                        if (0.1 < i) {
                          var d = o.updating;
                          try {
                            o.abort();
                          } catch (e) {
                            ct.logger.warn('can not abort audio buffer: ' + e);
                          }
                          d
                            ? (this.audioTimestampOffset = e.start)
                            : (ct.logger.warn(
                                'change mpeg audio timestamp offset from ' +
                                  o.timestampOffset +
                                  ' to ' +
                                  e.start
                              ),
                              (o.timestampOffset = e.start));
                        }
                      }
                    }),
                    (a.onManifestParsed = function t(e) {
                      var a = 2;
                      ((!e.audio || e.video) && e.altAudio) || (a = 1),
                        (this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = a),
                        ct.logger.log(
                          this.bufferCodecEventsExpected +
                            ' bufferCodec event(s) expected'
                        );
                    }),
                    (a.onMediaAttaching = function t(e) {
                      var a = (this.media = e.media);
                      if (a && ka) {
                        var r = (this.mediaSource = new ka());
                        r.addEventListener(
                          'sourceopen',
                          this._onMediaSourceOpen
                        ),
                          r.addEventListener(
                            'sourceended',
                            this._onMediaSourceEnded
                          ),
                          r.addEventListener(
                            'sourceclose',
                            this._onMediaSourceClose
                          ),
                          (a.src = window.URL.createObjectURL(r)),
                          (this._objectUrl = a.src);
                      }
                    }),
                    (a.onMediaDetaching = function e() {
                      ct.logger.log('media source detaching');
                      var t = this.mediaSource;
                      if (t) {
                        if ('open' === t.readyState)
                          try {
                            t.endOfStream();
                          } catch (e) {
                            ct.logger.warn(
                              'onMediaDetaching:' +
                                e.message +
                                ' while calling endOfStream'
                            );
                          }
                        t.removeEventListener(
                          'sourceopen',
                          this._onMediaSourceOpen
                        ),
                          t.removeEventListener(
                            'sourceended',
                            this._onMediaSourceEnded
                          ),
                          t.removeEventListener(
                            'sourceclose',
                            this._onMediaSourceClose
                          ),
                          this.media &&
                            (this._objectUrl &&
                              window.URL.revokeObjectURL(this._objectUrl),
                            this.media.src === this._objectUrl
                              ? (this.media.removeAttribute('src'),
                                this.media.load())
                              : ct.logger.warn(
                                  'media.src was changed by a third party - skip cleanup'
                                )),
                          (this.mediaSource = null),
                          (this.media = null),
                          (this._objectUrl = null),
                          (this.bufferCodecEventsExpected = this._bufferCodecEventsTotal),
                          (this.pendingTracks = {}),
                          (this.tracks = {}),
                          (this.sourceBuffer = {}),
                          (this.flushRange = []),
                          (this.segments = []),
                          (this.appended = 0);
                      }
                      this.hls.trigger(lt['default'].MEDIA_DETACHED);
                    }),
                    (a.checkPendingTracks = function e() {
                      var t = this.bufferCodecEventsExpected,
                        a = this.pendingTracks,
                        r = Object.keys(a).length;
                      ((r && !t) || 2 === r) &&
                        (this.createSourceBuffers(a),
                        (this.pendingTracks = {}),
                        this.doAppending());
                    }),
                    (a.onBufferReset = function e() {
                      var t = this.sourceBuffer;
                      for (var a in t) {
                        var r = t[a];
                        try {
                          r &&
                            (this.mediaSource &&
                              this.mediaSource.removeSourceBuffer(r),
                            r.removeEventListener(
                              'updateend',
                              this._onSBUpdateEnd
                            ),
                            r.removeEventListener(
                              'error',
                              this._onSBUpdateError
                            ));
                        } catch (e) {}
                      }
                      (this.sourceBuffer = {}),
                        (this.flushRange = []),
                        (this.segments = []),
                        (this.appended = 0);
                    }),
                    (a.onBufferCodecs = function t(e) {
                      var a = this;
                      Object.keys(this.sourceBuffer).length ||
                        (Object.keys(e).forEach(function(t) {
                          a.pendingTracks[t] = e[t];
                        }),
                        (this.bufferCodecEventsExpected = s(
                          this.bufferCodecEventsExpected - 1,
                          0
                        )),
                        this.mediaSource &&
                          'open' === this.mediaSource.readyState &&
                          this.checkPendingTracks());
                    }),
                    (a.createSourceBuffers = function t(e) {
                      var a = this.sourceBuffer,
                        r = this.mediaSource;
                      if (!r)
                        throw Error(
                          'createSourceBuffers called when mediaSource was null'
                        );
                      for (var n in e)
                        if (!a[n]) {
                          var o = e[n];
                          if (!o)
                            throw Error(
                              'source buffer exists for track ' +
                                n +
                                ', however track does not'
                            );
                          var i = o.levelCodec || o.codec,
                            d = o.container + ';codecs=' + i;
                          ct.logger.log('creating sourceBuffer(' + d + ')');
                          try {
                            var s = (a[n] = r.addSourceBuffer(d));
                            s.addEventListener(
                              'updateend',
                              this._onSBUpdateEnd
                            ),
                              s.addEventListener(
                                'error',
                                this._onSBUpdateError
                              ),
                              (this.tracks[n] = {
                                buffer: s,
                                codec: i,
                                id: o.id,
                                container: o.container,
                                levelCodec: o.levelCodec
                              });
                          } catch (e) {
                            ct.logger.error(
                              'error while trying to add sourceBuffer:' +
                                e.message
                            ),
                              this.hls.trigger(lt['default'].ERROR, {
                                type: dt.ErrorTypes.MEDIA_ERROR,
                                details: dt.ErrorDetails.BUFFER_ADD_CODEC_ERROR,
                                fatal: !1,
                                err: e,
                                mimeType: d
                              });
                          }
                        }
                      this.hls.trigger(lt['default'].BUFFER_CREATED, {
                        tracks: this.tracks
                      });
                    }),
                    (a.onBufferAppending = function t(e) {
                      this._needsFlush ||
                        (this.segments
                          ? this.segments.push(e)
                          : (this.segments = [e]),
                        this.doAppending());
                    }),
                    (a.onBufferEos = function t(e) {
                      for (var a in this.sourceBuffer)
                        if (!e.type || e.type === a) {
                          var r = this.sourceBuffer[a];
                          r &&
                            !r.ended &&
                            ((r.ended = !0),
                            ct.logger.log(a + ' sourceBuffer now EOS'));
                        }
                      this.checkEos();
                    }),
                    (a.checkEos = function e() {
                      var t = this.sourceBuffer,
                        a = this.mediaSource;
                      if (!a || 'open' !== a.readyState)
                        return void (this._needsEos = !1);
                      for (var r in t) {
                        var n = t[r];
                        if (n) {
                          if (!n.ended) return;
                          if (n.updating) return void (this._needsEos = !0);
                        }
                      }
                      ct.logger.log(
                        'all media data are available, signal endOfStream() to MediaSource and stop loading fragment'
                      );
                      try {
                        a.endOfStream();
                      } catch (t) {
                        ct.logger.warn(
                          'exception while calling mediaSource.endOfStream()'
                        );
                      }
                      this._needsEos = !1;
                    }),
                    (a.onBufferFlushing = function t(e) {
                      e.type
                        ? this.flushRange.push({
                            start: e.startOffset,
                            end: e.endOffset,
                            type: e.type
                          })
                        : (this.flushRange.push({
                            start: e.startOffset,
                            end: e.endOffset,
                            type: 'video'
                          }),
                          this.flushRange.push({
                            start: e.startOffset,
                            end: e.endOffset,
                            type: 'audio'
                          })),
                        (this.flushBufferCounter = 0),
                        this.doFlush();
                    }),
                    (a.flushLiveBackBuffer = function e() {
                      if (this._live) {
                        var t = this.config.liveBackBufferLength;
                        if (isFinite(t) && !(0 > t)) {
                          if (!this.media)
                            return void ct.logger.error(
                              'flushLiveBackBuffer called without attaching media'
                            );
                          for (
                            var a = this.media.currentTime,
                              r = this.sourceBuffer,
                              n = Object.keys(r),
                              o = a - s(t, this._levelTargetDuration),
                              i = n.length - 1;
                            0 <= i;
                            i--
                          ) {
                            var d = n[i],
                              l = r[d];
                            if (l) {
                              var c = l.buffered;
                              0 < c.length &&
                                o > c.start(0) &&
                                this.removeBufferRange(d, l, 0, o) &&
                                this.hls.trigger(
                                  lt['default'].LIVE_BACK_BUFFER_REACHED,
                                  { bufferEnd: o }
                                );
                            }
                          }
                        }
                      }
                    }),
                    (a.onLevelUpdated = function t(e) {
                      var a = e.details;
                      0 < a.fragments.length &&
                        ((this._levelDuration =
                          a.totalduration + a.fragments[0].start),
                        (this._levelTargetDuration =
                          a.averagetargetduration || a.targetduration || 10),
                        (this._live = a.live),
                        this.updateMediaElementDuration());
                    }),
                    (a.updateMediaElementDuration = function e() {
                      var t = this.config,
                        a;
                      if (
                        null !== this._levelDuration &&
                        this.media &&
                        this.mediaSource &&
                        this.sourceBuffer &&
                        0 !== this.media.readyState &&
                        'open' === this.mediaSource.readyState
                      ) {
                        for (var r in this.sourceBuffer) {
                          var n = this.sourceBuffer[r];
                          if (n && !0 === n.updating) return;
                        }
                        (a = this.media.duration),
                          null === this._msDuration &&
                            (this._msDuration = this.mediaSource.duration),
                          !0 === this._live && !0 === t.liveDurationInfinity
                            ? (ct.logger.log(
                                'Media Source duration is set to Infinity'
                              ),
                              (this._msDuration = this.mediaSource.duration =
                                1 / 0))
                            : ((this._levelDuration > this._msDuration &&
                                this._levelDuration > a) ||
                                !Object(st.isFiniteNumber)(a)) &&
                              (ct.logger.log(
                                'Updating Media Source duration to ' +
                                  this._levelDuration.toFixed(3)
                              ),
                              (this._msDuration = this.mediaSource.duration = this._levelDuration));
                      }
                    }),
                    (a.doFlush = function e() {
                      for (; this.flushRange.length; ) {
                        var t = this.flushRange[0];
                        if (this.flushBuffer(t.start, t.end, t.type))
                          this.flushRange.shift(),
                            (this.flushBufferCounter = 0);
                        else return void (this._needsFlush = !0);
                      }
                      if (0 === this.flushRange.length) {
                        this._needsFlush = !1;
                        var a = 0,
                          r = this.sourceBuffer;
                        try {
                          for (var n in r) {
                            var o = r[n];
                            o && (a += o.buffered.length);
                          }
                        } catch (e) {
                          ct.logger.error(
                            'error while accessing sourceBuffer.buffered'
                          );
                        }
                        (this.appended = a),
                          this.hls.trigger(lt['default'].BUFFER_FLUSHED);
                      }
                    }),
                    (a.doAppending = function e() {
                      var t = this.config,
                        a = this.hls,
                        r = this.segments,
                        n = this.sourceBuffer;
                      if (Object.keys(n).length) {
                        if (!this.media || this.media.error)
                          return (
                            (this.segments = []),
                            void ct.logger.error(
                              'trying to append although a media error occured, flush segment and abort'
                            )
                          );
                        if (!this.appending) {
                          var o = r.shift();
                          if (o)
                            try {
                              var i = n[o.type];
                              if (!i) return void this._onSBUpdateEnd();
                              if (i.updating) return void r.unshift(o);
                              (i.ended = !1),
                                (this.parent = o.parent),
                                i.appendBuffer(o.data),
                                (this.appendError = 0),
                                this.appended++,
                                (this.appending = !0);
                            } catch (e) {
                              ct.logger.error(
                                'error while trying to append buffer:' +
                                  e.message
                              ),
                                r.unshift(o);
                              var d = {
                                type: dt.ErrorTypes.MEDIA_ERROR,
                                parent: o.parent,
                                details: '',
                                fatal: !1
                              };
                              22 === e.code
                                ? ((this.segments = []),
                                  (d.details =
                                    dt.ErrorDetails.BUFFER_FULL_ERROR))
                                : (this.appendError++,
                                  (d.details =
                                    dt.ErrorDetails.BUFFER_APPEND_ERROR),
                                  this.appendError > t.appendErrorMaxRetry &&
                                    (ct.logger.log(
                                      'fail ' +
                                        t.appendErrorMaxRetry +
                                        ' times to append segment in sourceBuffer'
                                    ),
                                    (this.segments = []),
                                    (d.fatal = !0))),
                                a.trigger(lt['default'].ERROR, d);
                            }
                        }
                      }
                    }),
                    (a.flushBuffer = function r(e, t, a) {
                      var n = this.sourceBuffer;
                      if (!Object.keys(n).length) return !0;
                      var o = 'null';
                      if (
                        (this.media && (o = this.media.currentTime.toFixed(3)),
                        ct.logger.log(
                          'flushBuffer,pos/start/end: ' + o + '/' + e + '/' + t
                        ),
                        this.flushBufferCounter >= this.appended)
                      )
                        return (
                          ct.logger.warn('abort flushing too many retries'), !0
                        );
                      var i = n[a];
                      if (i) {
                        if (((i.ended = !1), !!i.updating))
                          return (
                            ct.logger.warn(
                              'cannot flush, sb updating in progress'
                            ),
                            !1
                          );
                        if (this.removeBufferRange(a, i, e, t))
                          return this.flushBufferCounter++, !1;
                      }
                      return ct.logger.log('buffer flushed'), !0;
                    }),
                    (a.removeBufferRange = function n(e, t, a, r) {
                      try {
                        for (var o = 0; o < t.buffered.length; o++) {
                          var d = t.buffered.start(o),
                            l = t.buffered.end(o),
                            c = s(d, a),
                            p = u(l, r);
                          if (0.5 < u(p, l) - c) {
                            var g = 'null';
                            return (
                              this.media &&
                                (g = this.media.currentTime.toString()),
                              ct.logger.log(
                                'sb remove ' +
                                  e +
                                  ' [' +
                                  c +
                                  ',' +
                                  p +
                                  '], of [' +
                                  d +
                                  ',' +
                                  l +
                                  '], pos:' +
                                  g
                              ),
                              t.remove(c, p),
                              !0
                            );
                          }
                        }
                      } catch (e) {
                        ct.logger.warn('removeBufferRange failed', e);
                      }
                      return !1;
                    }),
                    t
                  );
                })(gt),
                La = Da,
                Ca = (function(e) {
                  function a(a) {
                    var r;
                    return (
                      (r =
                        e.call(
                          this,
                          a,
                          lt['default'].FPS_DROP_LEVEL_CAPPING,
                          lt['default'].MEDIA_ATTACHING,
                          lt['default'].MANIFEST_PARSED,
                          lt['default'].LEVELS_UPDATED,
                          lt['default'].BUFFER_CODECS,
                          lt['default'].MEDIA_DETACHING
                        ) || this),
                      (r.autoLevelCapping = t),
                      (r.firstLevel = null),
                      (r.levels = []),
                      (r.media = null),
                      (r.restrictedLevels = []),
                      (r.timer = null),
                      (r.clientRect = null),
                      r
                    );
                  }
                  ye(a, e);
                  var r = a.prototype;
                  return (
                    (r.destroy = function e() {
                      this.hls.config.capLevelToPlayerSize &&
                        ((this.media = null),
                        (this.clientRect = null),
                        this.stopCapping());
                    }),
                    (r.onFpsDropLevelCapping = function t(e) {
                      a.isLevelAllowed(e.droppedLevel, this.restrictedLevels) &&
                        this.restrictedLevels.push(e.droppedLevel);
                    }),
                    (r.onMediaAttaching = function t(e) {
                      this.media =
                        e.media instanceof window.HTMLVideoElement
                          ? e.media
                          : null;
                    }),
                    (r.onManifestParsed = function t(e) {
                      var a = this.hls;
                      (this.restrictedLevels = []),
                        (this.levels = e.levels),
                        (this.firstLevel = e.firstLevel),
                        a.config.capLevelToPlayerSize &&
                          e.video &&
                          this.startCapping();
                    }),
                    (r.onBufferCodecs = function t(e) {
                      var a = this.hls;
                      a.config.capLevelToPlayerSize &&
                        e.video &&
                        this.startCapping();
                    }),
                    (r.onLevelsUpdated = function t(e) {
                      this.levels = e.levels;
                    }),
                    (r.onMediaDetaching = function e() {
                      this.stopCapping();
                    }),
                    (r.detectPlayerSize = function e() {
                      if (this.media) {
                        var t = this.levels ? this.levels.length : 0;
                        if (t) {
                          var a = this.hls;
                          (a.autoLevelCapping = this.getMaxLevel(t - 1)),
                            a.autoLevelCapping > this.autoLevelCapping &&
                              a.streamController.nextLevelSwitch(),
                            (this.autoLevelCapping = a.autoLevelCapping);
                        }
                      }
                    }),
                    (r.getMaxLevel = function t(e) {
                      var r = this;
                      if (!this.levels) return -1;
                      var n = this.levels.filter(function(t, n) {
                        return (
                          a.isLevelAllowed(n, r.restrictedLevels) && n <= e
                        );
                      });
                      return (
                        (this.clientRect = null),
                        a.getMaxLevelByMediaSize(
                          n,
                          this.mediaWidth,
                          this.mediaHeight
                        )
                      );
                    }),
                    (r.startCapping = function e() {
                      this.timer ||
                        ((this.autoLevelCapping = t),
                        (this.hls.firstLevel = this.getMaxLevel(
                          this.firstLevel
                        )),
                        clearInterval(this.timer),
                        (this.timer = setInterval(
                          this.detectPlayerSize.bind(this),
                          1e3
                        )),
                        this.detectPlayerSize());
                    }),
                    (r.stopCapping = function e() {
                      (this.restrictedLevels = []),
                        (this.firstLevel = null),
                        (this.autoLevelCapping = t),
                        this.timer &&
                          ((this.timer = clearInterval(this.timer)),
                          (this.timer = null));
                    }),
                    (r.getDimensions = function e() {
                      if (this.clientRect) return this.clientRect;
                      var t = this.media,
                        a = { width: 0, height: 0 };
                      if (t) {
                        var r = t.getBoundingClientRect();
                        (a.width = r.width),
                          (a.height = r.height),
                          a.width ||
                            a.height ||
                            ((a.width = r.right - r.left || t.width || 0),
                            (a.height = r.bottom - r.top || t.height || 0));
                      }
                      return (this.clientRect = a), a;
                    }),
                    (a.isLevelAllowed = function a(e, t) {
                      return void 0 === t && (t = []), -1 === t.indexOf(e);
                    }),
                    (a.getMaxLevelByMediaSize = function r(e, t, a) {
                      if (!e || (e && !e.length)) return -1;
                      for (
                        var n = function a(e, t) {
                            return (
                              !t || e.width !== t.width || e.height !== t.height
                            );
                          },
                          o = e.length - 1,
                          d = 0,
                          s;
                        d < e.length;
                        d += 1
                      )
                        if (
                          ((s = e[d]),
                          (s.width >= t || s.height >= a) && n(s, e[d + 1]))
                        ) {
                          o = d;
                          break;
                        }
                      return o;
                    }),
                    me(
                      a,
                      [
                        {
                          key: 'mediaWidth',
                          get: function e() {
                            return (
                              this.getDimensions().width * a.contentScaleFactor
                            );
                          }
                        },
                        {
                          key: 'mediaHeight',
                          get: function e() {
                            return (
                              this.getDimensions().height * a.contentScaleFactor
                            );
                          }
                        }
                      ],
                      [
                        {
                          key: 'contentScaleFactor',
                          get: function e() {
                            var t = 1;
                            try {
                              t = window.devicePixelRatio;
                            } catch (t) {}
                            return t;
                          }
                        }
                      ]
                    ),
                    a
                  );
                })(gt),
                Pa = Ca,
                Ia = window,
                Na = Ia.performance,
                xa = (function(e) {
                  function t(t) {
                    return (
                      e.call(this, t, lt['default'].MEDIA_ATTACHING) || this
                    );
                  }
                  he(t, e);
                  var a = t.prototype;
                  return (
                    (a.destroy = function e() {
                      this.timer && clearInterval(this.timer),
                        (this.isVideoPlaybackQualityAvailable = !1);
                    }),
                    (a.onMediaAttaching = function t(e) {
                      var a = this.hls.config;
                      if (a.capLevelOnFPSDrop) {
                        var r = (this.video =
                          e.media instanceof window.HTMLVideoElement
                            ? e.media
                            : null);
                        'function' == typeof r.getVideoPlaybackQuality &&
                          (this.isVideoPlaybackQualityAvailable = !0),
                          clearInterval(this.timer),
                          (this.timer = setInterval(
                            this.checkFPSInterval.bind(this),
                            a.fpsDroppedMonitoringPeriod
                          ));
                      }
                    }),
                    (a.checkFPS = function r(e, t, a) {
                      var n = Na.now();
                      if (t) {
                        if (this.lastTime) {
                          var o = n - this.lastTime,
                            i = a - this.lastDroppedFrames,
                            d = t - this.lastDecodedFrames,
                            s = (1e3 * i) / o,
                            l = this.hls;
                          if (
                            (l.trigger(lt['default'].FPS_DROP, {
                              currentDropped: i,
                              currentDecoded: d,
                              totalDroppedFrames: a
                            }),
                            0 < s &&
                              i > l.config.fpsDroppedMonitoringThreshold * d)
                          ) {
                            var c = l.currentLevel;
                            ct.logger.warn(
                              'drop FPS ratio greater than max allowed value for currentLevel: ' +
                                c
                            ),
                              0 < c &&
                                (-1 === l.autoLevelCapping ||
                                  l.autoLevelCapping >= c) &&
                                (--c,
                                l.trigger(
                                  lt['default'].FPS_DROP_LEVEL_CAPPING,
                                  { level: c, droppedLevel: l.currentLevel }
                                ),
                                (l.autoLevelCapping = c),
                                l.streamController.nextLevelSwitch());
                          }
                        }
                        (this.lastTime = n),
                          (this.lastDroppedFrames = a),
                          (this.lastDecodedFrames = t);
                      }
                    }),
                    (a.checkFPSInterval = function e() {
                      var t = this.video;
                      if (t)
                        if (this.isVideoPlaybackQualityAvailable) {
                          var a = t.getVideoPlaybackQuality();
                          this.checkFPS(
                            t,
                            a.totalVideoFrames,
                            a.droppedVideoFrames
                          );
                        } else
                          this.checkFPS(
                            t,
                            t.webkitDecodedFrameCount,
                            t.webkitDroppedFrameCount
                          );
                    }),
                    t
                  );
                })(gt),
                Oa = xa,
                Fa = (function() {
                  function e(e) {
                    e && e.xhrSetup && (this.xhrSetup = e.xhrSetup);
                  }
                  var t = e.prototype;
                  return (
                    (t.destroy = function e() {
                      this.abort(), (this.loader = null);
                    }),
                    (t.abort = function e() {
                      var t = this.loader;
                      t &&
                        4 !== t.readyState &&
                        ((this.stats.aborted = !0), t.abort()),
                        window.clearTimeout(this.requestTimeout),
                        (this.requestTimeout = null),
                        window.clearTimeout(this.retryTimeout),
                        (this.retryTimeout = null);
                    }),
                    (t.load = function r(e, t, a) {
                      (this.context = e),
                        (this.config = t),
                        (this.callbacks = a),
                        (this.stats = {
                          trequest: window.performance.now(),
                          retry: 0
                        }),
                        (this.retryDelay = t.retryDelay),
                        this.loadInternal();
                    }),
                    (t.loadInternal = function e() {
                      var t = this.context,
                        a;
                      a = this.loader = new window.XMLHttpRequest();
                      var r = this.stats;
                      (r.tfirst = 0), (r.loaded = 0);
                      var n = this.xhrSetup;
                      try {
                        if (n)
                          try {
                            n(a, t.url);
                          } catch (r) {
                            a.open('GET', t.url, !0), n(a, t.url);
                          }
                        a.readyState || a.open('GET', t.url, !0);
                      } catch (r) {
                        return void this.callbacks.onError(
                          { code: a.status, text: r.message },
                          t,
                          a
                        );
                      }
                      t.rangeEnd &&
                        a.setRequestHeader(
                          'Range',
                          'bytes=' + t.rangeStart + '-' + (t.rangeEnd - 1)
                        ),
                        (a.onreadystatechange = this.readystatechange.bind(
                          this
                        )),
                        (a.onprogress = this.loadprogress.bind(this)),
                        (a.responseType = t.responseType),
                        (this.requestTimeout = window.setTimeout(
                          this.loadtimeout.bind(this),
                          this.config.timeout
                        )),
                        a.send();
                    }),
                    (t.readystatechange = function t(e) {
                      var a = e.currentTarget,
                        r = a.readyState,
                        n = this.stats,
                        o = this.context,
                        i = this.config;
                      if (!n.aborted && 2 <= r)
                        if (
                          (window.clearTimeout(this.requestTimeout),
                          0 === n.tfirst &&
                            (n.tfirst = s(
                              window.performance.now(),
                              n.trequest
                            )),
                          4 === r)
                        ) {
                          var d = a.status;
                          if (200 <= d && 300 > d) {
                            n.tload = s(n.tfirst, window.performance.now());
                            var l, c;
                            'arraybuffer' === o.responseType
                              ? ((l = a.response), (c = l.byteLength))
                              : ((l = a.responseText), (c = l.length)),
                              (n.loaded = n.total = c);
                            var p = { url: a.responseURL, data: l };
                            this.callbacks.onSuccess(p, n, o, a);
                          } else
                            n.retry >= i.maxRetry || (400 <= d && 499 > d)
                              ? (ct.logger.error(d + ' while loading ' + o.url),
                                this.callbacks.onError(
                                  { code: d, text: a.statusText },
                                  o,
                                  a
                                ))
                              : (ct.logger.warn(
                                  d +
                                    ' while loading ' +
                                    o.url +
                                    ', retrying in ' +
                                    this.retryDelay +
                                    '...'
                                ),
                                this.destroy(),
                                (this.retryTimeout = window.setTimeout(
                                  this.loadInternal.bind(this),
                                  this.retryDelay
                                )),
                                (this.retryDelay = u(
                                  2 * this.retryDelay,
                                  i.maxRetryDelay
                                )),
                                n.retry++);
                        } else
                          this.requestTimeout = window.setTimeout(
                            this.loadtimeout.bind(this),
                            i.timeout
                          );
                    }),
                    (t.loadtimeout = function e() {
                      ct.logger.warn(
                        'timeout while loading ' + this.context.url
                      ),
                        this.callbacks.onTimeout(
                          this.stats,
                          this.context,
                          null
                        );
                    }),
                    (t.loadprogress = function t(e) {
                      var a = e.currentTarget,
                        r = this.stats;
                      (r.loaded = e.loaded),
                        e.lengthComputable && (r.total = e.total);
                      var n = this.callbacks.onProgress;
                      n && n(r, this.context, null, a);
                    }),
                    e
                  );
                })(),
                wa = Fa,
                Ma = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a =
                        e.call(
                          this,
                          t,
                          lt['default'].MANIFEST_LOADING,
                          lt['default'].MANIFEST_PARSED,
                          lt['default'].AUDIO_TRACK_LOADED,
                          lt['default'].AUDIO_TRACK_SWITCHED,
                          lt['default'].LEVEL_LOADED,
                          lt['default'].ERROR
                        ) || this),
                      (a._trackId = -1),
                      (a._selectDefaultTrack = !0),
                      (a.tracks = []),
                      (a.trackIdBlacklist = Object.create(null)),
                      (a.audioGroupId = null),
                      a
                    );
                  }
                  ve(t, e);
                  var a = t.prototype;
                  return (
                    (a.onManifestLoading = function e() {
                      (this.tracks = []),
                        (this._trackId = -1),
                        (this._selectDefaultTrack = !0);
                    }),
                    (a.onManifestParsed = function t(e) {
                      var a = (this.tracks = e.audioTracks || []);
                      this.hls.trigger(lt['default'].AUDIO_TRACKS_UPDATED, {
                        audioTracks: a
                      }),
                        this._selectAudioGroup(this.hls.nextLoadLevel);
                    }),
                    (a.onAudioTrackLoaded = function t(e) {
                      if (e.id >= this.tracks.length)
                        return void ct.logger.warn(
                          'Invalid audio track id:',
                          e.id
                        );
                      if (
                        (ct.logger.log('audioTrack ' + e.id + ' loaded'),
                        (this.tracks[e.id].details = e.details),
                        e.details.live && !this.hasInterval())
                      ) {
                        var a = 1e3 * e.details.targetduration;
                        this.setInterval(a);
                      }
                      !e.details.live &&
                        this.hasInterval() &&
                        this.clearInterval();
                    }),
                    (a.onAudioTrackSwitched = function t(e) {
                      var a = this.tracks[e.id].groupId;
                      a && this.audioGroupId !== a && (this.audioGroupId = a);
                    }),
                    (a.onLevelLoaded = function t(e) {
                      this._selectAudioGroup(e.level);
                    }),
                    (a.onError = function t(e) {
                      e.type === dt.ErrorTypes.NETWORK_ERROR &&
                        (e.fatal && this.clearInterval(),
                        e.details !== dt.ErrorDetails.AUDIO_TRACK_LOAD_ERROR ||
                          (ct.logger.warn(
                            'Network failure on audio-track id:',
                            e.context.id
                          ),
                          this._handleLoadError()));
                    }),
                    (a._setAudioTrack = function t(e) {
                      if (
                        this._trackId === e &&
                        this.tracks[this._trackId].details
                      )
                        return void ct.logger.debug(
                          'Same id as current audio-track passed, and track details available -> no-op'
                        );
                      if (0 > e || e >= this.tracks.length)
                        return void ct.logger.warn(
                          'Invalid id passed to audio-track controller'
                        );
                      var a = this.tracks[e];
                      ct.logger.log('Now switching to audio-track index ' + e),
                        this.clearInterval(),
                        (this._trackId = e);
                      var r = a.url,
                        n = a.type,
                        o = a.id;
                      this.hls.trigger(lt['default'].AUDIO_TRACK_SWITCHING, {
                        id: o,
                        type: n,
                        url: r
                      }),
                        this._loadTrackDetailsIfNeeded(a);
                    }),
                    (a.doTick = function e() {
                      this._updateTrack(this._trackId);
                    }),
                    (a._selectAudioGroup = function t(e) {
                      var a = this.hls.levels[e];
                      if (a && a.audioGroupIds) {
                        var r = a.audioGroupIds[a.urlId];
                        this.audioGroupId !== r &&
                          ((this.audioGroupId = r),
                          this._selectInitialAudioTrack());
                      }
                    }),
                    (a._selectInitialAudioTrack = function e() {
                      var t = this,
                        a = this.tracks;
                      if (a.length) {
                        var r = this.tracks[this._trackId],
                          n = null;
                        if ((r && (n = r.name), this._selectDefaultTrack)) {
                          var o = a.filter(function(e) {
                            return e.default;
                          });
                          o.length
                            ? (a = o)
                            : ct.logger.warn('No default audio tracks defined');
                        }
                        var i = !1,
                          d = function e() {
                            a.forEach(function(e) {
                              !i &&
                                ((t.audioGroupId &&
                                  e.groupId !== t.audioGroupId) ||
                                  (n && n !== e.name) ||
                                  (t._setAudioTrack(e.id), (i = !0)));
                            });
                          };
                        d(),
                          i || ((n = null), d()),
                          i ||
                            (ct.logger.error(
                              'No track found for running audio group-ID: ' +
                                this.audioGroupId
                            ),
                            this.hls.trigger(lt['default'].ERROR, {
                              type: dt.ErrorTypes.MEDIA_ERROR,
                              details: dt.ErrorDetails.AUDIO_TRACK_LOAD_ERROR,
                              fatal: !0
                            }));
                      }
                    }),
                    (a._needsTrackLoading = function t(e) {
                      var a = e.details,
                        r = e.url;
                      return (!a || a.live) && !!r;
                    }),
                    (a._loadTrackDetailsIfNeeded = function t(e) {
                      if (this._needsTrackLoading(e)) {
                        var a = e.url,
                          r = e.id;
                        ct.logger.log(
                          'loading audio-track playlist for id: ' + r
                        ),
                          this.hls.trigger(lt['default'].AUDIO_TRACK_LOADING, {
                            url: a,
                            id: r
                          });
                      }
                    }),
                    (a._updateTrack = function t(e) {
                      if (!(0 > e || e >= this.tracks.length)) {
                        this.clearInterval(),
                          (this._trackId = e),
                          ct.logger.log('trying to update audio-track ' + e);
                        var a = this.tracks[e];
                        this._loadTrackDetailsIfNeeded(a);
                      }
                    }),
                    (a._handleLoadError = function e() {
                      this.trackIdBlacklist[this._trackId] = !0;
                      var t = this._trackId,
                        a = this.tracks[t],
                        r = a.name,
                        n = a.language,
                        o = a.groupId;
                      ct.logger.warn(
                        'Loading failed on audio track id: ' +
                          t +
                          ', group-id: ' +
                          o +
                          ', name/language: "' +
                          r +
                          '" / "' +
                          n +
                          '"'
                      );
                      for (var d = t, s = 0; s < this.tracks.length; s++)
                        if (!this.trackIdBlacklist[s]) {
                          var l = this.tracks[s];
                          if (l.name === r) {
                            d = s;
                            break;
                          }
                        }
                      return d === t
                        ? void ct.logger.warn(
                            'No fallback audio-track found for name/language: "' +
                              r +
                              '" / "' +
                              n +
                              '"'
                          )
                        : void (ct.logger.log(
                            'Attempting audio-track fallback id:',
                            d,
                            'group-id:',
                            this.tracks[d].groupId
                          ),
                          this._setAudioTrack(d));
                    }),
                    Te(t, [
                      {
                        key: 'audioTracks',
                        get: function e() {
                          return this.tracks;
                        }
                      },
                      {
                        key: 'audioTrack',
                        get: function e() {
                          return this._trackId;
                        },
                        set: function t(e) {
                          this._setAudioTrack(e),
                            (this._selectDefaultTrack = !1);
                        }
                      }
                    ]),
                    t
                  );
                })(da),
                Ba = Ma,
                Ua = window,
                Ga = Ua.performance,
                Ka = 100,
                Ha = (function(e) {
                  function r(t, a) {
                    var r;
                    return (
                      (r =
                        e.call(
                          this,
                          t,
                          lt['default'].MEDIA_ATTACHED,
                          lt['default'].MEDIA_DETACHING,
                          lt['default'].AUDIO_TRACKS_UPDATED,
                          lt['default'].AUDIO_TRACK_SWITCHING,
                          lt['default'].AUDIO_TRACK_LOADED,
                          lt['default'].KEY_LOADED,
                          lt['default'].FRAG_LOADED,
                          lt['default'].FRAG_PARSING_INIT_SEGMENT,
                          lt['default'].FRAG_PARSING_DATA,
                          lt['default'].FRAG_PARSED,
                          lt['default'].ERROR,
                          lt['default'].BUFFER_RESET,
                          lt['default'].BUFFER_CREATED,
                          lt['default'].BUFFER_APPENDED,
                          lt['default'].BUFFER_FLUSHED,
                          lt['default'].INIT_PTS_FOUND
                        ) || this),
                      (r.fragmentTracker = a),
                      (r.config = t.config),
                      (r.audioCodecSwap = !1),
                      (r._state = sa.STOPPED),
                      (r.initPTS = []),
                      (r.waitingFragment = null),
                      (r.videoTrackCC = null),
                      (r.waitingVideoCC = null),
                      r
                    );
                  }
                  _e(r, e);
                  var n = r.prototype;
                  return (
                    (n.onInitPtsFound = function t(e) {
                      var a = e.id,
                        r = e.frag.cc,
                        n = e.initPTS;
                      'main' === a &&
                        ((this.initPTS[r] = n),
                        (this.videoTrackCC = r),
                        ct.logger.log(
                          'InitPTS for cc: ' + r + ' found from main: ' + n
                        ),
                        this.state === sa.WAITING_INIT_PTS && this.tick());
                    }),
                    (n.startLoad = function t(e) {
                      if (this.tracks) {
                        var a = this.lastCurrentTime;
                        this.stopLoad(),
                          this.setInterval(100),
                          (this.fragLoadError = 0),
                          0 < a && -1 === e
                            ? (ct.logger.log(
                                'audio:override startPosition with lastCurrentTime @' +
                                  a.toFixed(3)
                              ),
                              (this.state = sa.IDLE))
                            : ((this.lastCurrentTime = this.startPosition
                                ? this.startPosition
                                : e),
                              (this.state = sa.STARTING)),
                          (this.nextLoadPosition = this.startPosition = this.lastCurrentTime),
                          this.tick();
                      } else
                        (this.startPosition = e), (this.state = sa.STOPPED);
                    }),
                    (n.doTick = function e() {
                      var t = this.hls,
                        a = t.config,
                        r,
                        n,
                        o;
                      switch (this.state) {
                        case sa.ERROR:
                        case sa.PAUSED:
                        case sa.BUFFER_FLUSHING:
                          break;
                        case sa.STARTING:
                          (this.state = sa.WAITING_TRACK),
                            (this.loadedmetadata = !1);
                          break;
                        case sa.IDLE:
                          var i = this.tracks;
                          if (!i) break;
                          if (
                            !this.media &&
                            (this.startFragRequested || !a.startFragPrefetch)
                          )
                            break;
                          if (this.loadedmetadata) r = this.media.currentTime;
                          else if (((r = this.nextLoadPosition), void 0 === r))
                            break;
                          var d = this.mediaBuffer
                              ? this.mediaBuffer
                              : this.media,
                            l = this.videoBuffer
                              ? this.videoBuffer
                              : this.media,
                            c =
                              r < a.maxBufferHole
                                ? s(2, a.maxBufferHole)
                                : a.maxBufferHole,
                            p = Wt.bufferInfo(d, r, c),
                            g = Wt.bufferInfo(l, r, c),
                            f = p.len,
                            m = p.end,
                            y = this.fragPrevious,
                            h = u(a.maxBufferLength, a.maxMaxBufferLength),
                            E = s(h, g.len),
                            T = this.audioSwitch,
                            v = this.trackId;
                          if ((f < E || T) && v < i.length) {
                            if (((o = i[v].details), 'undefined' == typeof o)) {
                              this.state = sa.WAITING_TRACK;
                              break;
                            }
                            if (!T && this._streamEnded(p, o))
                              return (
                                this.hls.trigger(lt['default'].BUFFER_EOS, {
                                  type: 'audio'
                                }),
                                void (this.state = sa.ENDED)
                              );
                            var S = o.fragments,
                              b = S.length,
                              _ = S[0].start,
                              R = S[b - 1].start + S[b - 1].duration,
                              A;
                            if (T)
                              if (o.live && !o.PTSKnown)
                                ct.logger.log(
                                  'switching audiotrack, live stream, unknown PTS,load first fragment'
                                ),
                                  (m = 0);
                              else if (((m = r), o.PTSKnown && r < _))
                                if (p.end > _ || p.nextStart)
                                  ct.logger.log(
                                    'alt audio track ahead of main track, seek to start of alt audio track'
                                  ),
                                    (this.media.currentTime = _ + 0.05);
                                else return;
                            if (o.initSegment && !o.initSegment.data)
                              A = o.initSegment;
                            else if (!(m <= _)) {
                              var k = a.maxFragLookUpTolerance,
                                D = y ? S[y.sn - S[0].sn + 1] : void 0,
                                L;
                              m < R
                                ? (m > R - k && (k = 0),
                                  (L =
                                    D && !q(m, k, D)
                                      ? D
                                      : Vt.search(S, function(e) {
                                          return q(m, k, e);
                                        })))
                                : (L = S[b - 1]),
                                L &&
                                  ((A = L),
                                  (_ = L.start),
                                  y &&
                                    A.level === y.level &&
                                    A.sn === y.sn &&
                                    (A.sn < o.endSN
                                      ? ((A = S[A.sn + 1 - o.startSN]),
                                        this.fragmentTracker.getState(A) !==
                                          Gt.OK &&
                                          ct.logger.log(
                                            'SN just loaded, load next one: ' +
                                              A.sn
                                          ))
                                      : (A = null)));
                            } else if (
                              ((A = S[0]),
                              null !== this.videoTrackCC &&
                                A.cc !== this.videoTrackCC &&
                                (A = B(S, this.videoTrackCC)),
                              o.live &&
                                A.loadIdx &&
                                A.loadIdx === this.fragLoadIdx)
                            ) {
                              var C = p.nextStart ? p.nextStart : _;
                              return (
                                ct.logger.log(
                                  'no alt audio available @currentTime:' +
                                    this.media.currentTime +
                                    ', seeking @' +
                                    (C + 0.05)
                                ),
                                void (this.media.currentTime = C + 0.05)
                              );
                            }
                            A &&
                              (A.encrypted
                                ? (ct.logger.log(
                                    'Loading key for ' +
                                      A.sn +
                                      ' of [' +
                                      o.startSN +
                                      ' ,' +
                                      o.endSN +
                                      '],track ' +
                                      v
                                  ),
                                  (this.state = sa.KEY_LOADING),
                                  t.trigger(lt['default'].KEY_LOADING, {
                                    frag: A
                                  }))
                                : ((this.fragCurrent = A),
                                  (T ||
                                    this.fragmentTracker.getState(A) ===
                                      Gt.NOT_LOADED) &&
                                    (ct.logger.log(
                                      'Loading ' +
                                        A.sn +
                                        ', cc: ' +
                                        A.cc +
                                        ' of [' +
                                        o.startSN +
                                        ' ,' +
                                        o.endSN +
                                        '],track ' +
                                        v +
                                        ', ' +
                                        (this.loadedmetadata
                                          ? 'currentTime'
                                          : 'nextLoadPosition') +
                                        ': ' +
                                        r +
                                        ', bufferEnd: ' +
                                        m.toFixed(3)
                                    ),
                                    'initSegment' !== A.sn &&
                                      (this.startFragRequested = !0),
                                    Object(st.isFiniteNumber)(A.sn) &&
                                      (this.nextLoadPosition =
                                        A.start + A.duration),
                                    t.trigger(lt['default'].FRAG_LOADING, {
                                      frag: A
                                    }),
                                    (this.state = sa.FRAG_LOADING))));
                          }
                          break;
                        case sa.WAITING_TRACK:
                          (n = this.tracks[this.trackId]),
                            n && n.details && (this.state = sa.IDLE);
                          break;
                        case sa.FRAG_LOADING_WAITING_RETRY:
                          var P = Ga.now(),
                            I = this.retryDate;
                          d = this.media;
                          var N = d && d.seeking;
                          (!I || P >= I || N) &&
                            (ct.logger.log(
                              'audioStreamController: retryDate reached, switch back to IDLE state'
                            ),
                            (this.state = sa.IDLE));
                          break;
                        case sa.WAITING_INIT_PTS:
                          var x = this.waitingFragment;
                          if (x) {
                            var O = x.frag.cc;
                            if (void 0 !== this.initPTS[O])
                              (this.waitingFragment = null),
                                (this.state = sa.FRAG_LOADING),
                                this.onFragLoaded(x);
                            else if (this.videoTrackCC !== this.waitingVideoCC)
                              ct.logger.log(
                                'Waiting fragment cc (' +
                                  O +
                                  ') cancelled because video is at cc ' +
                                  this.videoTrackCC
                              ),
                                this.clearWaitingFragment();
                            else {
                              var F = Wt.bufferInfo(
                                  this.mediaBuffer,
                                  this.media.currentTime,
                                  a.maxBufferHole
                                ),
                                w = q(F.end, a.maxFragLookUpTolerance, x.frag);
                              0 > w &&
                                (ct.logger.log(
                                  'Waiting fragment cc (' +
                                    O +
                                    ') @ ' +
                                    x.frag.start +
                                    ' cancelled because another fragment at ' +
                                    F.end +
                                    ' is needed'
                                ),
                                this.clearWaitingFragment());
                            }
                          } else this.state = sa.IDLE;
                      }
                    }),
                    (n.clearWaitingFragment = function e() {
                      var t = this.waitingFragment;
                      t &&
                        (this.fragmentTracker.removeFragment(t.frag),
                        (this.waitingFragment = null),
                        (this.waitingVideoCC = null),
                        (this.state = sa.IDLE));
                    }),
                    (n.onMediaAttached = function t(e) {
                      var a = (this.media = this.mediaBuffer = e.media);
                      (this.onvseeking = this.onMediaSeeking.bind(this)),
                        (this.onvended = this.onMediaEnded.bind(this)),
                        a.addEventListener('seeking', this.onvseeking),
                        a.addEventListener('ended', this.onvended);
                      var r = this.config;
                      this.tracks &&
                        r.autoStartLoad &&
                        this.startLoad(r.startPosition);
                    }),
                    (n.onMediaDetaching = function e() {
                      var t = this.media;
                      t &&
                        t.ended &&
                        (ct.logger.log(
                          'MSE detaching and video ended, reset startPosition'
                        ),
                        (this.startPosition = this.lastCurrentTime = 0)),
                        t &&
                          (t.removeEventListener('seeking', this.onvseeking),
                          t.removeEventListener('ended', this.onvended),
                          (this.onvseeking = this.onvseeked = this.onvended = null)),
                        (this.media = this.mediaBuffer = this.videoBuffer = null),
                        (this.loadedmetadata = !1),
                        this.fragmentTracker.removeAllFragments(),
                        this.stopLoad();
                    }),
                    (n.onAudioTracksUpdated = function t(e) {
                      ct.logger.log('audio tracks updated'),
                        (this.tracks = e.audioTracks);
                    }),
                    (n.onAudioTrackSwitching = function t(e) {
                      var a = !!e.url;
                      (this.trackId = e.id),
                        (this.fragCurrent = null),
                        this.clearWaitingFragment(),
                        (this.state = sa.PAUSED),
                        a
                          ? this.setInterval(100)
                          : this.demuxer &&
                            (this.demuxer.destroy(), (this.demuxer = null)),
                        a && ((this.audioSwitch = !0), (this.state = sa.IDLE)),
                        this.tick();
                    }),
                    (n.onAudioTrackLoaded = function t(e) {
                      var a = e.details,
                        r = e.id,
                        n = this.tracks[r],
                        o = n.details,
                        i = a.totalduration,
                        d = 0;
                      if (
                        (ct.logger.log(
                          'track ' +
                            r +
                            ' loaded [' +
                            a.startSN +
                            ',' +
                            a.endSN +
                            '],duration:' +
                            i
                        ),
                        a.live || (o && o.live)
                          ? o && 0 < a.fragments.length
                            ? (N(o, a),
                              (d = a.fragments[0].start),
                              a.PTSKnown
                                ? ct.logger.log(
                                    'live audio playlist sliding:' +
                                      d.toFixed(3)
                                  )
                                : ct.logger.log(
                                    'live audio playlist - outdated PTS, unknown sliding'
                                  ))
                            : ((a.PTSKnown = !1),
                              ct.logger.log(
                                'live audio playlist - first load, unknown sliding'
                              ))
                          : (a.PTSKnown = !1),
                        (n.details = a),
                        !this.startFragRequested)
                      ) {
                        if (-1 === this.startPosition) {
                          var s = a.startTimeOffset;
                          Object(st.isFiniteNumber)(s)
                            ? (ct.logger.log(
                                'start time offset found in playlist, adjust startPosition to ' +
                                  s
                              ),
                              (this.startPosition = s))
                            : a.live
                            ? ((this.startPosition = this.computeLivePosition(
                                d,
                                a
                              )),
                              ct.logger.log(
                                'compute startPosition for audio-track to ' +
                                  this.startPosition
                              ))
                            : (this.startPosition = 0);
                        }
                        this.nextLoadPosition = this.startPosition;
                      }
                      this.state === sa.WAITING_TRACK && (this.state = sa.IDLE),
                        this.tick();
                    }),
                    (n.onKeyLoaded = function e() {
                      this.state === sa.KEY_LOADING &&
                        ((this.state = sa.IDLE), this.tick());
                    }),
                    (n.onFragLoaded = function t(e) {
                      var a = this.fragCurrent,
                        r = e.frag;
                      if (
                        this.state === sa.FRAG_LOADING &&
                        a &&
                        'audio' === r.type &&
                        r.level === a.level &&
                        r.sn === a.sn
                      ) {
                        var n = this.tracks[this.trackId],
                          o = n.details,
                          i = o.totalduration,
                          d = a.level,
                          s = a.sn,
                          l = a.cc,
                          c =
                            this.config.defaultAudioCodec ||
                            n.audioCodec ||
                            'mp4a.40.2',
                          u = (this.stats = e.stats);
                        if ('initSegment' === s)
                          (this.state = sa.IDLE),
                            (u.tparsed = u.tbuffered = Ga.now()),
                            (o.initSegment.data = e.payload),
                            this.hls.trigger(lt['default'].FRAG_BUFFERED, {
                              stats: u,
                              frag: a,
                              id: 'audio'
                            }),
                            this.tick();
                        else {
                          (this.state = sa.PARSING),
                            (this.appended = !1),
                            this.demuxer ||
                              (this.demuxer = new Jt(this.hls, 'audio'));
                          var p = this.initPTS[l],
                            g = o.initSegment ? o.initSegment.data : [];
                          if (void 0 !== p) {
                            (this.pendingBuffering = !0),
                              ct.logger.log(
                                'Demuxing ' +
                                  s +
                                  ' of [' +
                                  o.startSN +
                                  ' ,' +
                                  o.endSN +
                                  '],track ' +
                                  d
                              );
                            var f = !1;
                            this.demuxer.push(
                              e.payload,
                              g,
                              c,
                              null,
                              a,
                              i,
                              !1,
                              p
                            );
                          } else
                            ct.logger.log(
                              'Unknown video PTS for cc ' +
                                l +
                                ', waiting for video PTS before demuxing audio frag ' +
                                s +
                                ' of [' +
                                o.startSN +
                                ' ,' +
                                o.endSN +
                                '],track ' +
                                d
                            ),
                              (this.waitingFragment = e),
                              (this.waitingVideoCC = this.videoTrackCC),
                              (this.state = sa.WAITING_INIT_PTS);
                        }
                      }
                      this.fragLoadError = 0;
                    }),
                    (n.onFragParsingInitSegment = function t(e) {
                      var a = this.fragCurrent,
                        r = e.frag;
                      if (
                        a &&
                        'audio' === e.id &&
                        r.sn === a.sn &&
                        r.level === a.level &&
                        this.state === sa.PARSING
                      ) {
                        var n = e.tracks,
                          o;
                        if ((n.video && delete n.video, (o = n.audio), o)) {
                          (o.levelCodec = o.codec),
                            (o.id = e.id),
                            this.hls.trigger(lt['default'].BUFFER_CODECS, n),
                            ct.logger.log(
                              'audio track:audio,container:' +
                                o.container +
                                ',codecs[level/parsed]=[' +
                                o.levelCodec +
                                '/' +
                                o.codec +
                                ']'
                            );
                          var i = o.initSegment;
                          if (i) {
                            var d = {
                              type: 'audio',
                              data: i,
                              parent: 'audio',
                              content: 'initSegment'
                            };
                            this.audioSwitch
                              ? (this.pendingData = [d])
                              : ((this.appended = !0),
                                (this.pendingBuffering = !0),
                                this.hls.trigger(
                                  lt['default'].BUFFER_APPENDING,
                                  d
                                ));
                          }
                          this.tick();
                        }
                      }
                    }),
                    (n.onFragParsingData = function a(e) {
                      var r = this,
                        n = this.fragCurrent,
                        o = e.frag;
                      if (
                        n &&
                        'audio' === e.id &&
                        'audio' === e.type &&
                        o.sn === n.sn &&
                        o.level === n.level &&
                        this.state === sa.PARSING
                      ) {
                        var i = this.trackId,
                          d = this.tracks[i],
                          s = this.hls;
                        Object(st.isFiniteNumber)(e.endPTS) ||
                          ((e.endPTS = e.startPTS + n.duration),
                          (e.endDTS = e.startDTS + n.duration)),
                          n.addElementaryStream(Et.AUDIO),
                          ct.logger.log(
                            'parsed ' +
                              e.type +
                              ',PTS:[' +
                              e.startPTS.toFixed(3) +
                              ',' +
                              e.endPTS.toFixed(3) +
                              '],DTS:[' +
                              e.startDTS.toFixed(3) +
                              '/' +
                              e.endDTS.toFixed(3) +
                              '],nb:' +
                              e.nb
                          ),
                          I(d.details, n, e.startPTS, e.endPTS);
                        var l = this.media,
                          c = !1;
                        if (this.audioSwitch)
                          if (l && l.readyState) {
                            var u = l.currentTime;
                            ct.logger.log(
                              'switching audio track : currentTime:' + u
                            ),
                              u >= e.startPTS &&
                                (ct.logger.log(
                                  'switching audio track : flushing all audio'
                                ),
                                (this.state = sa.BUFFER_FLUSHING),
                                s.trigger(lt['default'].BUFFER_FLUSHING, {
                                  startOffset: 0,
                                  endOffset: t,
                                  type: 'audio'
                                }),
                                (c = !0),
                                (this.audioSwitch = !1),
                                s.trigger(lt['default'].AUDIO_TRACK_SWITCHED, {
                                  id: i
                                }));
                          } else
                            (this.audioSwitch = !1),
                              s.trigger(lt['default'].AUDIO_TRACK_SWITCHED, {
                                id: i
                              });
                        var p = this.pendingData;
                        if (!p)
                          return (
                            ct.logger.warn(
                              'Apparently attempt to enqueue media payload without codec initialization data upfront'
                            ),
                            void s.trigger(lt['default'].ERROR, {
                              type: dt.ErrorTypes.MEDIA_ERROR,
                              details: null,
                              fatal: !0
                            })
                          );
                        this.audioSwitch ||
                          ([e.data1, e.data2].forEach(function(t) {
                            t &&
                              t.length &&
                              p.push({
                                type: e.type,
                                data: t,
                                parent: 'audio',
                                content: 'data'
                              });
                          }),
                          !c &&
                            p.length &&
                            (p.forEach(function(e) {
                              r.state === sa.PARSING &&
                                ((r.pendingBuffering = !0),
                                r.hls.trigger(
                                  lt['default'].BUFFER_APPENDING,
                                  e
                                ));
                            }),
                            (this.pendingData = []),
                            (this.appended = !0))),
                          this.tick();
                      }
                    }),
                    (n.onFragParsed = function t(e) {
                      var a = this.fragCurrent,
                        r = e.frag;
                      a &&
                        'audio' === e.id &&
                        r.sn === a.sn &&
                        r.level === a.level &&
                        this.state === sa.PARSING &&
                        ((this.stats.tparsed = Ga.now()),
                        (this.state = sa.PARSED),
                        this._checkAppendedParsed());
                    }),
                    (n.onBufferReset = function e() {
                      (this.mediaBuffer = this.videoBuffer = null),
                        (this.loadedmetadata = !1);
                    }),
                    (n.onBufferCreated = function t(e) {
                      var a = e.tracks.audio;
                      a &&
                        ((this.mediaBuffer = a.buffer),
                        (this.loadedmetadata = !0)),
                        e.tracks.video &&
                          (this.videoBuffer = e.tracks.video.buffer);
                    }),
                    (n.onBufferAppended = function t(e) {
                      if ('audio' === e.parent) {
                        var a = this.state;
                        (a === sa.PARSING || a === sa.PARSED) &&
                          ((this.pendingBuffering = 0 < e.pending),
                          this._checkAppendedParsed());
                      }
                    }),
                    (n._checkAppendedParsed = function e() {
                      if (
                        this.state === sa.PARSED &&
                        (!this.appended || !this.pendingBuffering)
                      ) {
                        var t = this.fragCurrent,
                          a = this.stats,
                          r = this.hls;
                        if (t) {
                          (this.fragPrevious = t),
                            (a.tbuffered = Ga.now()),
                            r.trigger(lt['default'].FRAG_BUFFERED, {
                              stats: a,
                              frag: t,
                              id: 'audio'
                            });
                          var n = this.mediaBuffer
                            ? this.mediaBuffer
                            : this.media;
                          n &&
                            ct.logger.log(
                              'audio buffered : ' + ta.toString(n.buffered)
                            ),
                            this.audioSwitch &&
                              this.appended &&
                              ((this.audioSwitch = !1),
                              r.trigger(lt['default'].AUDIO_TRACK_SWITCHED, {
                                id: this.trackId
                              })),
                            (this.state = sa.IDLE);
                        }
                        this.tick();
                      }
                    }),
                    (n.onError = function r(e) {
                      var n = e.frag;
                      if (!(n && 'audio' !== n.type))
                        switch (e.details) {
                          case dt.ErrorDetails.FRAG_LOAD_ERROR:
                          case dt.ErrorDetails.FRAG_LOAD_TIMEOUT:
                            var o = e.frag;
                            if (o && 'audio' !== o.type) break;
                            if (!e.fatal) {
                              var i = this.fragLoadError;
                              i ? i++ : (i = 1);
                              var d = this.config;
                              if (i <= d.fragLoadingMaxRetry) {
                                this.fragLoadError = i;
                                var s = u(
                                  a(2, i - 1) * d.fragLoadingRetryDelay,
                                  d.fragLoadingMaxRetryTimeout
                                );
                                ct.logger.warn(
                                  'AudioStreamController: frag loading failed, retry in ' +
                                    s +
                                    ' ms'
                                ),
                                  (this.retryDate = Ga.now() + s),
                                  (this.state = sa.FRAG_LOADING_WAITING_RETRY);
                              } else
                                ct.logger.error(
                                  'AudioStreamController: ' +
                                    e.details +
                                    ' reaches max retry, redispatch as fatal ...'
                                ),
                                  (e.fatal = !0),
                                  (this.state = sa.ERROR);
                            }
                            break;
                          case dt.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
                          case dt.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
                          case dt.ErrorDetails.KEY_LOAD_ERROR:
                          case dt.ErrorDetails.KEY_LOAD_TIMEOUT:
                            this.state !== sa.ERROR &&
                              ((this.state = e.fatal ? sa.ERROR : sa.IDLE),
                              ct.logger.warn(
                                'AudioStreamController: ' +
                                  e.details +
                                  ' while loading frag, now switching to ' +
                                  this.state +
                                  ' state ...'
                              ));
                            break;
                          case dt.ErrorDetails.BUFFER_FULL_ERROR:
                            if (
                              'audio' === e.parent &&
                              (this.state === sa.PARSING ||
                                this.state === sa.PARSED)
                            ) {
                              var l = this.mediaBuffer,
                                c = this.media.currentTime,
                                p =
                                  l &&
                                  Wt.isBuffered(l, c) &&
                                  Wt.isBuffered(l, c + 0.5);
                              if (p) {
                                var g = this.config;
                                g.maxMaxBufferLength >= g.maxBufferLength &&
                                  ((g.maxMaxBufferLength /= 2),
                                  ct.logger.warn(
                                    'AudioStreamController: reduce max buffer length to ' +
                                      g.maxMaxBufferLength +
                                      's'
                                  )),
                                  (this.state = sa.IDLE);
                              } else
                                ct.logger.warn(
                                  'AudioStreamController: buffer full error also media.currentTime is not buffered, flush audio buffer'
                                ),
                                  (this.fragCurrent = null),
                                  (this.state = sa.BUFFER_FLUSHING),
                                  this.hls.trigger(
                                    lt['default'].BUFFER_FLUSHING,
                                    {
                                      startOffset: 0,
                                      endOffset: t,
                                      type: 'audio'
                                    }
                                  );
                            }
                        }
                    }),
                    (n.onBufferFlushed = function e() {
                      var t = this,
                        a = this.pendingData;
                      a && a.length
                        ? (ct.logger.log(
                            'AudioStreamController: appending pending audio data after buffer flushed'
                          ),
                          a.forEach(function(e) {
                            t.hls.trigger(lt['default'].BUFFER_APPENDING, e);
                          }),
                          (this.appended = !0),
                          (this.pendingData = []),
                          (this.state = sa.PARSED))
                        : ((this.state = sa.IDLE),
                          (this.fragPrevious = null),
                          this.tick());
                    }),
                    be(r, [
                      {
                        key: 'state',
                        set: function t(e) {
                          if (this.state !== e) {
                            var a = this.state;
                            (this._state = e),
                              ct.logger.log('audio stream:' + a + '->' + e);
                          }
                        },
                        get: function e() {
                          return this._state;
                        }
                      }
                    ]),
                    r
                  );
                })(la),
                Va = Ha,
                Wa = (function() {
                  function e(e) {
                    if ('string' != typeof e) return !1;
                    var t = o[e.toLowerCase()];
                    return !!t && e.toLowerCase();
                  }
                  function t(e) {
                    if ('string' != typeof e) return !1;
                    var t = i[e.toLowerCase()];
                    return !!t && e.toLowerCase();
                  }
                  function a(e) {
                    for (var t = 1, a; t < arguments.length; t++)
                      for (var r in ((a = arguments[t]), a)) e[r] = a[r];
                    return e;
                  }
                  function r(r, n, o) {
                    var i = this,
                      d = {};
                    (d.enumerable = !0), (i.hasBeenReset = !1);
                    var s = '',
                      l = !1,
                      c = r,
                      u = n,
                      p = o,
                      g = null,
                      f = '',
                      m = !0,
                      y = 'auto',
                      h = 'start',
                      E = 50,
                      T = 'middle',
                      v = 50,
                      S = 'middle';
                    Object.defineProperty(
                      i,
                      'id',
                      a({}, d, {
                        get: function e() {
                          return s;
                        },
                        set: function t(e) {
                          s = '' + e;
                        }
                      })
                    ),
                      Object.defineProperty(
                        i,
                        'pauseOnExit',
                        a({}, d, {
                          get: function e() {
                            return l;
                          },
                          set: function t(e) {
                            l = !!e;
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'startTime',
                        a({}, d, {
                          get: function e() {
                            return c;
                          },
                          set: function t(e) {
                            if ('number' != typeof e)
                              throw new TypeError(
                                'Start time must be set to a number.'
                              );
                            (c = e), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'endTime',
                        a({}, d, {
                          get: function e() {
                            return u;
                          },
                          set: function t(e) {
                            if ('number' != typeof e)
                              throw new TypeError(
                                'End time must be set to a number.'
                              );
                            (u = e), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'text',
                        a({}, d, {
                          get: function e() {
                            return p;
                          },
                          set: function t(e) {
                            (p = '' + e), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'region',
                        a({}, d, {
                          get: function e() {
                            return g;
                          },
                          set: function t(e) {
                            (g = e), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'vertical',
                        a({}, d, {
                          get: function e() {
                            return f;
                          },
                          set: function a(t) {
                            var r = e(t);
                            if (!1 === r)
                              throw new SyntaxError(
                                'An invalid or illegal string was specified.'
                              );
                            (f = r), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'snapToLines',
                        a({}, d, {
                          get: function e() {
                            return m;
                          },
                          set: function t(e) {
                            (m = !!e), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'line',
                        a({}, d, {
                          get: function e() {
                            return y;
                          },
                          set: function t(e) {
                            if ('number' != typeof e && 'auto' !== e)
                              throw new SyntaxError(
                                'An invalid number or illegal string was specified.'
                              );
                            (y = e), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'lineAlign',
                        a({}, d, {
                          get: function e() {
                            return h;
                          },
                          set: function a(e) {
                            var r = t(e);
                            if (!r)
                              throw new SyntaxError(
                                'An invalid or illegal string was specified.'
                              );
                            (h = r), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'position',
                        a({}, d, {
                          get: function e() {
                            return E;
                          },
                          set: function t(e) {
                            if (0 > e || 100 < e)
                              throw new Error(
                                'Position must be between 0 and 100.'
                              );
                            (E = e), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'positionAlign',
                        a({}, d, {
                          get: function e() {
                            return T;
                          },
                          set: function a(e) {
                            var r = t(e);
                            if (!r)
                              throw new SyntaxError(
                                'An invalid or illegal string was specified.'
                              );
                            (T = r), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'size',
                        a({}, d, {
                          get: function e() {
                            return v;
                          },
                          set: function t(e) {
                            if (0 > e || 100 < e)
                              throw new Error(
                                'Size must be between 0 and 100.'
                              );
                            (v = e), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      Object.defineProperty(
                        i,
                        'align',
                        a({}, d, {
                          get: function e() {
                            return S;
                          },
                          set: function a(e) {
                            var r = t(e);
                            if (!r)
                              throw new SyntaxError(
                                'An invalid or illegal string was specified.'
                              );
                            (S = r), (this.hasBeenReset = !0);
                          }
                        })
                      ),
                      (i.displayState = void 0);
                  }
                  if ('undefined' != typeof window && window.VTTCue)
                    return window.VTTCue;
                  var n = 'auto',
                    o = { '': !0, lr: !0, rl: !0 },
                    i = { start: !0, middle: !0, end: !0, left: !0, right: !0 };
                  return (
                    (r.prototype.getCueAsHTML = function() {
                      var e = window.WebVTT;
                      return e.convertCueToDOMTree(window, this.text);
                    }),
                    r
                  );
                })(),
                ja = function e() {
                  return {
                    decode: function t(e) {
                      if (!e) return '';
                      if ('string' != typeof e)
                        throw new Error('Error - expected string data.');
                      return decodeURIComponent(encodeURIComponent(e));
                    }
                  };
                },
                Ya;
              ke.prototype = {
                set: function a(e, t) {
                  this.get(e) || '' === t || (this.values[e] = t);
                },
                get: function r(e, t, a) {
                  return a
                    ? this.has(e)
                      ? this.values[e]
                      : t[a]
                    : this.has(e)
                    ? this.values[e]
                    : t;
                },
                has: function t(e) {
                  return e in this.values;
                },
                alt: function a(e, t, r) {
                  for (var o = 0; o < r.length; ++o)
                    if (t === r[o]) {
                      this.set(e, t);
                      break;
                    }
                },
                integer: function a(e, t) {
                  /^-?\d+$/.test(t) && this.set(e, parseInt(t, 10));
                },
                percent: function a(e, t) {
                  var r;
                  return (
                    !!(
                      (r = t.match(/^([\d]{1,3})(\.[\d]*)?%$/)) &&
                      ((t = parseFloat(t)), 0 <= t && 100 >= t)
                    ) && (this.set(e, t), !0)
                  );
                }
              };
              var qa = new Wa(0, 0, 0),
                za = 'middle' === qa.align ? 'middle' : 'center';
              Re.prototype = {
                parse: function t(e) {
                  function a() {
                    var e = n.buffer,
                      t = 0;
                    for (
                      e = Ce(e);
                      t < e.length && '\r' !== e[t] && '\n' !== e[t];

                    )
                      ++t;
                    var a = e.substr(0, t);
                    return (
                      '\r' === e[t] && ++t,
                      '\n' === e[t] && ++t,
                      (n.buffer = e.substr(t)),
                      a
                    );
                  }
                  function r(e) {
                    De(e, function(e, t) {}, /:/);
                  }
                  var n = this;
                  e && (n.buffer += n.decoder.decode(e, { stream: !0 }));
                  try {
                    var o;
                    if ('INITIAL' === n.state) {
                      if (!/\r\n|\n/.test(n.buffer)) return this;
                      o = a();
                      var i = o.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                      if (!i || !i[0])
                        throw new Error('Malformed WebVTT signature.');
                      n.state = 'HEADER';
                    }
                    for (var d = !1; n.buffer; ) {
                      if (!/\r\n|\n/.test(n.buffer)) return this;
                      switch ((d ? (d = !1) : (o = a()), n.state)) {
                        case 'HEADER':
                          /:/.test(o) ? r(o) : !o && (n.state = 'ID');
                          continue;
                        case 'NOTE':
                          o || (n.state = 'ID');
                          continue;
                        case 'ID':
                          if (/^NOTE($|[ \t])/.test(o)) {
                            n.state = 'NOTE';
                            break;
                          }
                          if (!o) continue;
                          if (
                            ((n.cue = new Wa(0, 0, '')),
                            (n.state = 'CUE'),
                            -1 === o.indexOf('-->'))
                          ) {
                            n.cue.id = o;
                            continue;
                          }
                        case 'CUE':
                          try {
                            Le(o, n.cue, n.regionList);
                          } catch (t) {
                            (n.cue = null), (n.state = 'BADCUE');
                            continue;
                          }
                          n.state = 'CUETEXT';
                          continue;
                        case 'CUETEXT':
                          var s = -1 !== o.indexOf('-->');
                          if (!o || (s && (d = !0))) {
                            n.oncue && n.oncue(n.cue),
                              (n.cue = null),
                              (n.state = 'ID');
                            continue;
                          }
                          n.cue.text && (n.cue.text += '\n'), (n.cue.text += o);
                          continue;
                        case 'BADCUE':
                          o || (n.state = 'ID');
                          continue;
                      }
                    }
                  } catch (t) {
                    'CUETEXT' === n.state && n.cue && n.oncue && n.oncue(n.cue),
                      (n.cue = null),
                      (n.state =
                        'INITIAL' === n.state ? 'BADWEBVTT' : 'BADCUE');
                  }
                  return this;
                },
                flush: function e() {
                  var t = this;
                  try {
                    if (
                      ((t.buffer += t.decoder.decode()),
                      (t.cue || 'HEADER' === t.state) &&
                        ((t.buffer += '\n\n'), t.parse()),
                      'INITIAL' === t.state)
                    )
                      throw new Error('Malformed WebVTT signature.');
                  } catch (t) {
                    throw t;
                  }
                  return t.onflush && t.onflush(), this;
                }
              };
              var Xa = Re,
                $a = {
                  42: 225,
                  92: 233,
                  94: 237,
                  95: 243,
                  96: 250,
                  123: 231,
                  124: 247,
                  125: 209,
                  126: 241,
                  127: 9608,
                  128: 174,
                  129: 176,
                  130: 189,
                  131: 191,
                  132: 8482,
                  133: 162,
                  134: 163,
                  135: 9834,
                  136: 224,
                  137: 32,
                  138: 232,
                  139: 226,
                  140: 234,
                  141: 238,
                  142: 244,
                  143: 251,
                  144: 193,
                  145: 201,
                  146: 211,
                  147: 218,
                  148: 220,
                  149: 252,
                  150: 8216,
                  151: 161,
                  152: 42,
                  153: 8217,
                  154: 9473,
                  155: 169,
                  156: 8480,
                  157: 8226,
                  158: 8220,
                  159: 8221,
                  160: 192,
                  161: 194,
                  162: 199,
                  163: 200,
                  164: 202,
                  165: 203,
                  166: 235,
                  167: 206,
                  168: 207,
                  169: 239,
                  170: 212,
                  171: 217,
                  172: 249,
                  173: 219,
                  174: 171,
                  175: 187,
                  176: 195,
                  177: 227,
                  178: 205,
                  179: 204,
                  180: 236,
                  181: 210,
                  182: 242,
                  183: 213,
                  184: 245,
                  185: 123,
                  186: 125,
                  187: 92,
                  188: 94,
                  189: 95,
                  190: 124,
                  191: 8764,
                  192: 196,
                  193: 228,
                  194: 214,
                  195: 246,
                  196: 223,
                  197: 165,
                  198: 164,
                  199: 9475,
                  200: 197,
                  201: 229,
                  202: 216,
                  203: 248,
                  204: 9487,
                  205: 9491,
                  206: 9495,
                  207: 9499
                },
                Qa = function t(e) {
                  var a = e;
                  return $a.hasOwnProperty(e) && (a = $a[e]), S(a);
                },
                Za = 15,
                Ja = 100,
                er = {
                  17: 1,
                  18: 3,
                  21: 5,
                  22: 7,
                  23: 9,
                  16: 11,
                  19: 12,
                  20: 14
                },
                tr = { 17: 2, 18: 4, 21: 6, 22: 8, 23: 10, 19: 13, 20: 15 },
                ar = {
                  25: 1,
                  26: 3,
                  29: 5,
                  30: 7,
                  31: 9,
                  24: 11,
                  27: 12,
                  28: 14
                },
                rr = { 25: 2, 26: 4, 29: 6, 30: 8, 31: 10, 27: 13, 28: 15 },
                nr = [
                  'white',
                  'green',
                  'blue',
                  'cyan',
                  'red',
                  'yellow',
                  'magenta',
                  'black',
                  'transparent'
                ],
                or;
              (function(e) {
                (e[(e.ERROR = 0)] = 'ERROR'),
                  (e[(e.TEXT = 1)] = 'TEXT'),
                  (e[(e.WARNING = 2)] = 'WARNING'),
                  (e[(e.INFO = 2)] = 'INFO'),
                  (e[(e.DEBUG = 3)] = 'DEBUG'),
                  (e[(e.DATA = 3)] = 'DATA');
              })(or || (or = {}));
              var ir = (function() {
                  function e() {
                    (this.time = null), (this.verboseLevel = or.ERROR);
                  }
                  var t = e.prototype;
                  return (
                    (t.log = function a(e, t) {
                      this.verboseLevel >= e &&
                        ct.logger.log(this.time + ' [' + e + '] ' + t);
                    }),
                    e
                  );
                })(),
                dr = function t(e) {
                  for (var a = [], r = 0; r < e.length; r++)
                    a.push(e[r].toString(16));
                  return a;
                },
                sr = (function() {
                  function e(e, t, a, r, n) {
                    (this.foreground = void 0),
                      (this.underline = void 0),
                      (this.italics = void 0),
                      (this.background = void 0),
                      (this.flash = void 0),
                      (this.foreground = e || 'white'),
                      (this.underline = t || !1),
                      (this.italics = a || !1),
                      (this.background = r || 'black'),
                      (this.flash = n || !1);
                  }
                  var t = e.prototype;
                  return (
                    (t.reset = function e() {
                      (this.foreground = 'white'),
                        (this.underline = !1),
                        (this.italics = !1),
                        (this.background = 'black'),
                        (this.flash = !1);
                    }),
                    (t.setStyles = function t(e) {
                      for (
                        var a = [
                            'foreground',
                            'underline',
                            'italics',
                            'background',
                            'flash'
                          ],
                          r = 0,
                          n;
                        r < a.length;
                        r++
                      )
                        (n = a[r]), e.hasOwnProperty(n) && (this[n] = e[n]);
                    }),
                    (t.isDefault = function e() {
                      return (
                        'white' === this.foreground &&
                        !this.underline &&
                        !this.italics &&
                        'black' === this.background &&
                        !this.flash
                      );
                    }),
                    (t.equals = function t(e) {
                      return (
                        this.foreground === e.foreground &&
                        this.underline === e.underline &&
                        this.italics === e.italics &&
                        this.background === e.background &&
                        this.flash === e.flash
                      );
                    }),
                    (t.copy = function t(e) {
                      (this.foreground = e.foreground),
                        (this.underline = e.underline),
                        (this.italics = e.italics),
                        (this.background = e.background),
                        (this.flash = e.flash);
                    }),
                    (t.toString = function e() {
                      return (
                        'color=' +
                        this.foreground +
                        ', underline=' +
                        this.underline +
                        ', italics=' +
                        this.italics +
                        ', background=' +
                        this.background +
                        ', flash=' +
                        this.flash
                      );
                    }),
                    e
                  );
                })(),
                lr = (function() {
                  function e(e, t, a, r, n, o) {
                    (this.uchar = void 0),
                      (this.penState = void 0),
                      (this.uchar = e || ' '),
                      (this.penState = new sr(t, a, r, n, o));
                  }
                  var t = e.prototype;
                  return (
                    (t.reset = function e() {
                      (this.uchar = ' '), this.penState.reset();
                    }),
                    (t.setChar = function a(e, t) {
                      (this.uchar = e), this.penState.copy(t);
                    }),
                    (t.setPenState = function t(e) {
                      this.penState.copy(e);
                    }),
                    (t.equals = function t(e) {
                      return (
                        this.uchar === e.uchar &&
                        this.penState.equals(e.penState)
                      );
                    }),
                    (t.copy = function t(e) {
                      (this.uchar = e.uchar), this.penState.copy(e.penState);
                    }),
                    (t.isEmpty = function e() {
                      return ' ' === this.uchar && this.penState.isDefault();
                    }),
                    e
                  );
                })(),
                cr = (function() {
                  function e(e) {
                    (this.chars = void 0),
                      (this.pos = void 0),
                      (this.currPenState = void 0),
                      (this.cueStartTime = void 0),
                      (this.logger = void 0),
                      (this.chars = []);
                    for (var t = 0; t < 100; t++) this.chars.push(new lr());
                    (this.logger = e),
                      (this.pos = 0),
                      (this.currPenState = new sr());
                  }
                  var t = e.prototype;
                  return (
                    (t.equals = function t(e) {
                      for (var a = !0, r = 0; r < 100; r++)
                        if (!this.chars[r].equals(e.chars[r])) {
                          a = !1;
                          break;
                        }
                      return a;
                    }),
                    (t.copy = function t(e) {
                      for (var a = 0; a < 100; a++)
                        this.chars[a].copy(e.chars[a]);
                    }),
                    (t.isEmpty = function e() {
                      for (var t = !0, a = 0; a < 100; a++)
                        if (!this.chars[a].isEmpty()) {
                          t = !1;
                          break;
                        }
                      return t;
                    }),
                    (t.setCursor = function t(e) {
                      this.pos !== e && (this.pos = e),
                        0 > this.pos
                          ? (this.logger.log(
                              or.DEBUG,
                              'Negative cursor position ' + this.pos
                            ),
                            (this.pos = 0))
                          : this.pos > 100 &&
                            (this.logger.log(
                              or.DEBUG,
                              'Too large cursor position ' + this.pos
                            ),
                            (this.pos = 100));
                    }),
                    (t.moveCursor = function t(e) {
                      var a = this.pos + e;
                      if (1 < e)
                        for (var r = this.pos + 1; r < a + 1; r++)
                          this.chars[r].setPenState(this.currPenState);
                      this.setCursor(a);
                    }),
                    (t.backSpace = function e() {
                      this.moveCursor(-1),
                        this.chars[this.pos].setChar(' ', this.currPenState);
                    }),
                    (t.insertChar = function t(e) {
                      144 <= e && this.backSpace();
                      var a = Qa(e);
                      return this.pos >= 100
                        ? void this.logger.log(
                            or.ERROR,
                            'Cannot insert ' +
                              e.toString(16) +
                              ' (' +
                              a +
                              ') at position ' +
                              this.pos +
                              '. Skipping it!'
                          )
                        : void (this.chars[this.pos].setChar(
                            a,
                            this.currPenState
                          ),
                          this.moveCursor(1));
                    }),
                    (t.clearFromPos = function t(e) {
                      var a;
                      for (a = e; a < 100; a++) this.chars[a].reset();
                    }),
                    (t.clear = function e() {
                      this.clearFromPos(0),
                        (this.pos = 0),
                        this.currPenState.reset();
                    }),
                    (t.clearToEndOfRow = function e() {
                      this.clearFromPos(this.pos);
                    }),
                    (t.getTextString = function e() {
                      for (var t = [], a = !0, r = 0, n; r < 100; r++)
                        (n = this.chars[r].uchar),
                          ' ' !== n && (a = !1),
                          t.push(n);
                      return a ? '' : t.join('');
                    }),
                    (t.setPenStyles = function t(e) {
                      this.currPenState.setStyles(e);
                      var a = this.chars[this.pos];
                      a.setPenState(this.currPenState);
                    }),
                    e
                  );
                })(),
                ur = (function() {
                  function e(e) {
                    (this.rows = void 0),
                      (this.currRow = void 0),
                      (this.nrRollUpRows = void 0),
                      (this.lastOutputScreen = void 0),
                      (this.logger = void 0),
                      (this.rows = []);
                    for (var t = 0; t < 15; t++) this.rows.push(new cr(e));
                    (this.logger = e),
                      (this.currRow = 14),
                      (this.nrRollUpRows = null),
                      (this.lastOutputScreen = null),
                      this.reset();
                  }
                  var t = e.prototype;
                  return (
                    (t.reset = function e() {
                      for (var t = 0; t < 15; t++) this.rows[t].clear();
                      this.currRow = 14;
                    }),
                    (t.equals = function t(e) {
                      for (var a = !0, r = 0; r < 15; r++)
                        if (!this.rows[r].equals(e.rows[r])) {
                          a = !1;
                          break;
                        }
                      return a;
                    }),
                    (t.copy = function t(e) {
                      for (var a = 0; a < 15; a++) this.rows[a].copy(e.rows[a]);
                    }),
                    (t.isEmpty = function e() {
                      for (var t = !0, a = 0; a < 15; a++)
                        if (!this.rows[a].isEmpty()) {
                          t = !1;
                          break;
                        }
                      return t;
                    }),
                    (t.backSpace = function e() {
                      var t = this.rows[this.currRow];
                      t.backSpace();
                    }),
                    (t.clearToEndOfRow = function e() {
                      var t = this.rows[this.currRow];
                      t.clearToEndOfRow();
                    }),
                    (t.insertChar = function t(e) {
                      var a = this.rows[this.currRow];
                      a.insertChar(e);
                    }),
                    (t.setPen = function t(e) {
                      var a = this.rows[this.currRow];
                      a.setPenStyles(e);
                    }),
                    (t.moveCursor = function t(e) {
                      var a = this.rows[this.currRow];
                      a.moveCursor(e);
                    }),
                    (t.setCursor = function t(e) {
                      this.logger.log(or.INFO, 'setCursor: ' + e);
                      var a = this.rows[this.currRow];
                      a.setCursor(e);
                    }),
                    (t.setPAC = function t(e) {
                      this.logger.log(
                        or.INFO,
                        'pacData = ' + JSON.stringify(e)
                      );
                      var a = e.row - 1;
                      if (
                        (this.nrRollUpRows &&
                          a < this.nrRollUpRows - 1 &&
                          (a = this.nrRollUpRows - 1),
                        this.nrRollUpRows && this.currRow !== a)
                      ) {
                        for (var r = 0; r < 15; r++) this.rows[r].clear();
                        var n = this.currRow + 1 - this.nrRollUpRows,
                          o = this.lastOutputScreen;
                        if (o) {
                          var d = o.rows[n].cueStartTime,
                            l = this.logger.time;
                          if (d && null !== l && d < l)
                            for (var c = 0; c < this.nrRollUpRows; c++)
                              this.rows[a - this.nrRollUpRows + c + 1].copy(
                                o.rows[n + c]
                              );
                        }
                      }
                      this.currRow = a;
                      var u = this.rows[this.currRow];
                      if (null !== e.indent) {
                        var p = e.indent,
                          g = s(p - 1, 0);
                        u.setCursor(e.indent),
                          (e.color = u.chars[g].penState.foreground);
                      }
                      var f = {
                        foreground: e.color,
                        underline: e.underline,
                        italics: e.italics,
                        background: 'black',
                        flash: !1
                      };
                      this.setPen(f);
                    }),
                    (t.setBkgData = function t(e) {
                      this.logger.log(
                        or.INFO,
                        'bkgData = ' + JSON.stringify(e)
                      ),
                        this.backSpace(),
                        this.setPen(e),
                        this.insertChar(32);
                    }),
                    (t.setRollUpRows = function t(e) {
                      this.nrRollUpRows = e;
                    }),
                    (t.rollUp = function e() {
                      if (null === this.nrRollUpRows)
                        return void this.logger.log(
                          or.DEBUG,
                          'roll_up but nrRollUpRows not set yet'
                        );
                      this.logger.log(or.TEXT, this.getDisplayText());
                      var t = this.currRow + 1 - this.nrRollUpRows,
                        a = this.rows.splice(t, 1)[0];
                      a.clear(),
                        this.rows.splice(this.currRow, 0, a),
                        this.logger.log(or.INFO, 'Rolling up');
                    }),
                    (t.getDisplayText = function t(e) {
                      e = e || !1;
                      for (var a = [], r = '', n = -1, o = 0, d; o < 15; o++)
                        (d = this.rows[o].getTextString()),
                          d &&
                            ((n = o + 1),
                            e
                              ? a.push('Row ' + n + ": '" + d + "'")
                              : a.push(d.trim()));
                      return (
                        0 < a.length &&
                          (e
                            ? (r = '[' + a.join(' | ') + ']')
                            : (r = a.join('\n'))),
                        r
                      );
                    }),
                    (t.getTextAndFormat = function e() {
                      return this.rows;
                    }),
                    e
                  );
                })(),
                pr = (function() {
                  function e(e, t, a) {
                    (this.chNr = void 0),
                      (this.outputFilter = void 0),
                      (this.mode = void 0),
                      (this.verbose = void 0),
                      (this.displayedMemory = void 0),
                      (this.nonDisplayedMemory = void 0),
                      (this.lastOutputScreen = void 0),
                      (this.currRollUpRow = void 0),
                      (this.writeScreen = void 0),
                      (this.cueStartTime = void 0),
                      (this.logger = void 0),
                      (this.chNr = e),
                      (this.outputFilter = t),
                      (this.mode = null),
                      (this.verbose = 0),
                      (this.displayedMemory = new ur(a)),
                      (this.nonDisplayedMemory = new ur(a)),
                      (this.lastOutputScreen = new ur(a)),
                      (this.currRollUpRow = this.displayedMemory.rows[14]),
                      (this.writeScreen = this.displayedMemory),
                      (this.mode = null),
                      (this.cueStartTime = null),
                      (this.logger = a);
                  }
                  var t = e.prototype;
                  return (
                    (t.reset = function e() {
                      (this.mode = null),
                        this.displayedMemory.reset(),
                        this.nonDisplayedMemory.reset(),
                        this.lastOutputScreen.reset(),
                        this.outputFilter.reset(),
                        (this.currRollUpRow = this.displayedMemory.rows[14]),
                        (this.writeScreen = this.displayedMemory),
                        (this.mode = null),
                        (this.cueStartTime = null);
                    }),
                    (t.getHandler = function e() {
                      return this.outputFilter;
                    }),
                    (t.setHandler = function t(e) {
                      this.outputFilter = e;
                    }),
                    (t.setPAC = function t(e) {
                      this.writeScreen.setPAC(e);
                    }),
                    (t.setBkgData = function t(e) {
                      this.writeScreen.setBkgData(e);
                    }),
                    (t.setMode = function t(e) {
                      e === this.mode ||
                        ((this.mode = e),
                        this.logger.log(or.INFO, 'MODE=' + e),
                        'MODE_POP-ON' === this.mode
                          ? (this.writeScreen = this.nonDisplayedMemory)
                          : ((this.writeScreen = this.displayedMemory),
                            this.writeScreen.reset()),
                        'MODE_ROLL-UP' !== this.mode &&
                          ((this.displayedMemory.nrRollUpRows = null),
                          (this.nonDisplayedMemory.nrRollUpRows = null)),
                        (this.mode = e));
                    }),
                    (t.insertChars = function t(e) {
                      for (var a = 0; a < e.length; a++)
                        this.writeScreen.insertChar(e[a]);
                      var r =
                        this.writeScreen === this.displayedMemory
                          ? 'DISP'
                          : 'NON_DISP';
                      this.logger.log(
                        or.INFO,
                        r + ': ' + this.writeScreen.getDisplayText(!0)
                      ),
                        ('MODE_PAINT-ON' === this.mode ||
                          'MODE_ROLL-UP' === this.mode) &&
                          (this.logger.log(
                            or.TEXT,
                            'DISPLAYED: ' +
                              this.displayedMemory.getDisplayText(!0)
                          ),
                          this.outputDataUpdate());
                    }),
                    (t.ccRCL = function e() {
                      this.logger.log(or.INFO, 'RCL - Resume Caption Loading'),
                        this.setMode('MODE_POP-ON');
                    }),
                    (t.ccBS = function e() {
                      this.logger.log(or.INFO, 'BS - BackSpace'),
                        'MODE_TEXT' === this.mode ||
                          (this.writeScreen.backSpace(),
                          this.writeScreen === this.displayedMemory &&
                            this.outputDataUpdate());
                    }),
                    (t.ccAOF = function e() {}),
                    (t.ccAON = function e() {}),
                    (t.ccDER = function e() {
                      this.logger.log(or.INFO, 'DER- Delete to End of Row'),
                        this.writeScreen.clearToEndOfRow(),
                        this.outputDataUpdate();
                    }),
                    (t.ccRU = function t(e) {
                      this.logger.log(or.INFO, 'RU(' + e + ') - Roll Up'),
                        (this.writeScreen = this.displayedMemory),
                        this.setMode('MODE_ROLL-UP'),
                        this.writeScreen.setRollUpRows(e);
                    }),
                    (t.ccFON = function e() {
                      this.logger.log(or.INFO, 'FON - Flash On'),
                        this.writeScreen.setPen({ flash: !0 });
                    }),
                    (t.ccRDC = function e() {
                      this.logger.log(
                        or.INFO,
                        'RDC - Resume Direct Captioning'
                      ),
                        this.setMode('MODE_PAINT-ON');
                    }),
                    (t.ccTR = function e() {
                      this.logger.log(or.INFO, 'TR'), this.setMode('MODE_TEXT');
                    }),
                    (t.ccRTD = function e() {
                      this.logger.log(or.INFO, 'RTD'),
                        this.setMode('MODE_TEXT');
                    }),
                    (t.ccEDM = function e() {
                      this.logger.log(or.INFO, 'EDM - Erase Displayed Memory'),
                        this.displayedMemory.reset(),
                        this.outputDataUpdate(!0);
                    }),
                    (t.ccCR = function e() {
                      this.logger.log(or.INFO, 'CR - Carriage Return'),
                        this.writeScreen.rollUp(),
                        this.outputDataUpdate(!0);
                    }),
                    (t.ccENM = function e() {
                      this.logger.log(
                        or.INFO,
                        'ENM - Erase Non-displayed Memory'
                      ),
                        this.nonDisplayedMemory.reset();
                    }),
                    (t.ccEOC = function e() {
                      if (
                        (this.logger.log(or.INFO, 'EOC - End Of Caption'),
                        'MODE_POP-ON' === this.mode)
                      ) {
                        var t = this.displayedMemory;
                        (this.displayedMemory = this.nonDisplayedMemory),
                          (this.nonDisplayedMemory = t),
                          (this.writeScreen = this.nonDisplayedMemory),
                          this.logger.log(
                            or.TEXT,
                            'DISP: ' + this.displayedMemory.getDisplayText()
                          );
                      }
                      this.outputDataUpdate(!0);
                    }),
                    (t.ccTO = function t(e) {
                      this.logger.log(or.INFO, 'TO(' + e + ') - Tab Offset'),
                        this.writeScreen.moveCursor(e);
                    }),
                    (t.ccMIDROW = function t(e) {
                      var a = {
                        flash: !1,
                        underline: 1 == e % 2,
                        italics: 46 <= e
                      };
                      if (!a.italics) {
                        var r = T(e / 2) - 16,
                          n = [
                            'white',
                            'green',
                            'blue',
                            'cyan',
                            'red',
                            'yellow',
                            'magenta'
                          ];
                        a.foreground = n[r];
                      } else a.foreground = 'white';
                      this.logger.log(or.INFO, 'MIDROW: ' + JSON.stringify(a)),
                        this.writeScreen.setPen(a);
                    }),
                    (t.outputDataUpdate = function t(e) {
                      void 0 === e && (e = !1);
                      var a = this.logger.time;
                      null === a ||
                        (this.outputFilter &&
                          (null !== this.cueStartTime ||
                          this.displayedMemory.isEmpty()
                            ? !this.displayedMemory.equals(
                                this.lastOutputScreen
                              ) &&
                              (this.outputFilter.newCue(
                                this.cueStartTime,
                                a,
                                this.lastOutputScreen
                              ),
                              e &&
                                this.outputFilter.dispatchCue &&
                                this.outputFilter.dispatchCue(),
                              (this.cueStartTime = this.displayedMemory.isEmpty()
                                ? null
                                : a))
                            : (this.cueStartTime = a),
                          this.lastOutputScreen.copy(this.displayedMemory)));
                    }),
                    (t.cueSplitAtTime = function t(e) {
                      this.outputFilter &&
                        !this.displayedMemory.isEmpty() &&
                        (this.outputFilter.newCue &&
                          this.outputFilter.newCue(
                            this.cueStartTime,
                            e,
                            this.displayedMemory
                          ),
                        (this.cueStartTime = e));
                    }),
                    e
                  );
                })(),
                gr = (function() {
                  function e(e, t, a) {
                    (this.channels = void 0),
                      (this.currentChannel = 0),
                      (this.cmdHistory = void 0),
                      (this.logger = void 0);
                    var r = new ir();
                    (this.channels = [
                      null,
                      new pr(e, t, r),
                      new pr(e + 1, a, r)
                    ]),
                      (this.cmdHistory = xe()),
                      (this.logger = r);
                  }
                  var t = e.prototype;
                  return (
                    (t.getHandler = function t(e) {
                      return this.channels[e].getHandler();
                    }),
                    (t.setHandler = function a(e, t) {
                      this.channels[e].setHandler(t);
                    }),
                    (t.addData = function r(e, t) {
                      var n = !1,
                        o,
                        d,
                        s;
                      this.logger.time = e;
                      for (var l = 0; l < t.length; l += 2) {
                        if (
                          ((d = 127 & t[l]),
                          (s = 127 & t[l + 1]),
                          0 === d && 0 === s)
                        )
                          continue;
                        else
                          this.logger.log(
                            or.DATA,
                            '[' +
                              dr([t[l], t[l + 1]]) +
                              '] -> (' +
                              dr([d, s]) +
                              ')'
                          );
                        if (
                          ((o = this.parseCmd(d, s)),
                          o || (o = this.parseMidrow(d, s)),
                          o || (o = this.parsePAC(d, s)),
                          o || (o = this.parseBackgroundAttributes(d, s)),
                          !o && ((n = this.parseChars(d, s)), n))
                        ) {
                          var c = this.currentChannel;
                          if (c && 0 < c) {
                            var u = this.channels[c];
                            u.insertChars(n);
                          } else
                            this.logger.log(
                              or.WARNING,
                              'No channel found yet. TEXT-MODE?'
                            );
                        }
                        o ||
                          n ||
                          this.logger.log(
                            or.WARNING,
                            "Couldn't parse cleaned data " +
                              dr([d, s]) +
                              ' orig: ' +
                              dr([t[l], t[l + 1]])
                          );
                      }
                    }),
                    (t.parseCmd = function a(e, t) {
                      var r = this.cmdHistory,
                        n =
                          (20 === e || 28 === e || 21 === e || 29 === e) &&
                          32 <= t &&
                          47 >= t,
                        o = (23 === e || 31 === e) && 33 <= t && 35 >= t;
                      if (!(n || o)) return !1;
                      if (Ne(e, t, r))
                        return (
                          Ie(null, null, r),
                          this.logger.log(
                            or.DEBUG,
                            'Repeated command (' + dr([e, t]) + ') is dropped'
                          ),
                          !0
                        );
                      var i = 20 === e || 21 === e || 23 === e ? 1 : 2,
                        d = this.channels[i];
                      return (
                        20 === e || 21 === e || 28 === e || 29 === e
                          ? 32 === t
                            ? d.ccRCL()
                            : 33 === t
                            ? d.ccBS()
                            : 34 === t
                            ? d.ccAOF()
                            : 35 === t
                            ? d.ccAON()
                            : 36 === t
                            ? d.ccDER()
                            : 37 === t
                            ? d.ccRU(2)
                            : 38 === t
                            ? d.ccRU(3)
                            : 39 === t
                            ? d.ccRU(4)
                            : 40 === t
                            ? d.ccFON()
                            : 41 === t
                            ? d.ccRDC()
                            : 42 === t
                            ? d.ccTR()
                            : 43 === t
                            ? d.ccRTD()
                            : 44 === t
                            ? d.ccEDM()
                            : 45 === t
                            ? d.ccCR()
                            : 46 === t
                            ? d.ccENM()
                            : 47 == t && d.ccEOC()
                          : d.ccTO(t - 32),
                        Ie(e, t, r),
                        (this.currentChannel = i),
                        !0
                      );
                    }),
                    (t.parseMidrow = function a(e, t) {
                      var r = 0;
                      if ((17 === e || 25 === e) && 32 <= t && 47 >= t) {
                        if (((r = 17 === e ? 1 : 2), r !== this.currentChannel))
                          return (
                            this.logger.log(
                              or.ERROR,
                              'Mismatch channel in midrow parsing'
                            ),
                            !1
                          );
                        var n = this.channels[r];
                        return (
                          !!n &&
                          (n.ccMIDROW(t),
                          this.logger.log(
                            or.DEBUG,
                            'MIDROW (' + dr([e, t]) + ')'
                          ),
                          !0)
                        );
                      }
                      return !1;
                    }),
                    (t.parsePAC = function a(e, t) {
                      var r = this.cmdHistory,
                        n =
                          ((17 <= e && 23 >= e) || (25 <= e && 31 >= e)) &&
                          64 <= t &&
                          127 >= t,
                        o = (16 === e || 24 === e) && 64 <= t && 95 >= t,
                        i;
                      if (!(n || o)) return !1;
                      if (Ne(e, t, r)) return Ie(null, null, r), !0;
                      var d = 23 >= e ? 1 : 2;
                      i =
                        64 <= t && 95 >= t
                          ? 1 === d
                            ? er[e]
                            : ar[e]
                          : 1 === d
                          ? tr[e]
                          : rr[e];
                      var s = this.channels[d];
                      return (
                        !!s &&
                        (s.setPAC(this.interpretPAC(i, t)),
                        Ie(e, t, r),
                        (this.currentChannel = d),
                        !0)
                      );
                    }),
                    (t.interpretPAC = function a(e, t) {
                      var r = t,
                        n = {
                          color: null,
                          italics: !1,
                          indent: null,
                          underline: !1,
                          row: e
                        };
                      return (
                        (r = 95 < t ? t - 96 : t - 64),
                        (n.underline = 1 == (1 & r)),
                        13 >= r
                          ? (n.color = [
                              'white',
                              'green',
                              'blue',
                              'cyan',
                              'red',
                              'yellow',
                              'magenta',
                              'white'
                            ][T(r / 2)])
                          : 15 >= r
                          ? ((n.italics = !0), (n.color = 'white'))
                          : (n.indent = 4 * T((r - 16) / 2)),
                        n
                      );
                    }),
                    (t.parseChars = function a(e, t) {
                      var r = null,
                        n = null,
                        o;
                      if (
                        (25 <= e ? ((o = 2), (n = e - 8)) : ((o = 1), (n = e)),
                        17 <= n && 19 >= n)
                      ) {
                        var i = t;
                        (i = 17 === n ? t + 80 : 18 === n ? t + 112 : t + 144),
                          this.logger.log(
                            or.INFO,
                            "Special char '" + Qa(i) + "' in channel " + o
                          ),
                          (r = [i]);
                      } else
                        32 <= e && 127 >= e && (r = 0 === t ? [e] : [e, t]);
                      if (r) {
                        var d = dr(r);
                        this.logger.log(
                          or.DEBUG,
                          'Char codes =  ' + d.join(',')
                        ),
                          Ie(e, t, this.cmdHistory);
                      }
                      return r;
                    }),
                    (t.parseBackgroundAttributes = function a(e, t) {
                      var r = (16 === e || 24 === e) && 32 <= t && 47 >= t,
                        n = (23 === e || 31 === e) && 45 <= t && 47 >= t;
                      if (!(r || n)) return !1;
                      var o = {},
                        i;
                      16 === e || 24 === e
                        ? ((i = T((t - 32) / 2)),
                          (o.background = nr[i]),
                          1 == t % 2 && (o.background += '_semi'))
                        : 45 === t
                        ? (o.background = 'transparent')
                        : ((o.foreground = 'black'),
                          47 == t && (o.underline = !0));
                      var d = 23 >= e ? 1 : 2,
                        s = this.channels[d];
                      return s.setBkgData(o), Ie(e, t, this.cmdHistory), !0;
                    }),
                    (t.reset = function e() {
                      for (
                        var t = 0, a;
                        t < Object.keys(this.channels).length;
                        t++
                      )
                        (a = this.channels[t]), a && a.reset();
                      this.cmdHistory = xe();
                    }),
                    (t.cueSplitAtTime = function t(e) {
                      for (var a = 0, r; a < this.channels.length; a++)
                        (r = this.channels[a]), r && r.cueSplitAtTime(e);
                    }),
                    e
                  );
                })(),
                fr = gr,
                mr = (function() {
                  function e(e, t) {
                    (this.timelineController = void 0),
                      (this.cueRanges = []),
                      (this.trackName = void 0),
                      (this.startTime = null),
                      (this.endTime = null),
                      (this.screen = null),
                      (this.timelineController = e),
                      (this.trackName = t);
                  }
                  var t = e.prototype;
                  return (
                    (t.dispatchCue = function e() {
                      null === this.startTime ||
                        (this.timelineController.addCues(
                          this.trackName,
                          this.startTime,
                          this.endTime,
                          this.screen,
                          this.cueRanges
                        ),
                        (this.startTime = null));
                    }),
                    (t.newCue = function r(e, t, a) {
                      (null === this.startTime || this.startTime > e) &&
                        (this.startTime = e),
                        (this.endTime = t),
                        (this.screen = a),
                        this.timelineController.createCaptionsTrack(
                          this.trackName
                        );
                    }),
                    (t.reset = function e() {
                      this.cueRanges = [];
                    }),
                    e
                  );
                })(),
                yr = function r(e, t, a) {
                  return e.substr(a || 0, t.length) === t;
                },
                hr = function t(e) {
                  var a = parseInt(e.substr(-3)),
                    r = parseInt(e.substr(-6, 2)),
                    n = parseInt(e.substr(-9, 2)),
                    o =
                      9 < e.length ? parseInt(e.substr(0, e.indexOf(':'))) : 0;
                  if (
                    !Object(st.isFiniteNumber)(a) ||
                    !Object(st.isFiniteNumber)(r) ||
                    !Object(st.isFiniteNumber)(n) ||
                    !Object(st.isFiniteNumber)(o)
                  )
                    throw Error('Malformed X-TIMESTAMP-MAP: Local:' + e);
                  return (
                    (a += 1e3 * r), (a += 60000 * n), (a += 3600000 * o), a
                  );
                },
                Er = function t(e) {
                  for (var t = 5381, a = e.length; a; )
                    t = (33 * t) ^ e.charCodeAt(--a);
                  return (t >>> 0).toString();
                },
                Tr = function r(e, t, a) {
                  var n = e[t],
                    o = e[n.prevCC];
                  if (!o || (!o.new && n.new))
                    return (
                      (e.ccOffset = e.presentationOffset = n.start),
                      void (n.new = !1)
                    );
                  for (; o && o.new; )
                    (e.ccOffset += n.start - o.start),
                      (n.new = !1),
                      (n = o),
                      (o = e[n.prevCC]);
                  e.presentationOffset = a;
                },
                vr = {
                  parse: function i(e, t, a, r, n, o) {
                    var d = /\r\n|\n\r|\n|\r/g,
                      s = Object(fa.utf8ArrayToStr)(new Uint8Array(e))
                        .trim()
                        .replace(d, '\n')
                        .split('\n'),
                      l = '00:00.000',
                      c = 0,
                      u = 0,
                      p = 0,
                      g = [],
                      f = !0,
                      m = !1,
                      y = new Xa(),
                      h;
                    (y.oncue = function(e) {
                      var t = a[r],
                        n = a.ccOffset;
                      t &&
                        t.new &&
                        (void 0 === u
                          ? Tr(a, r, p)
                          : (n = a.ccOffset = t.start)),
                        p && (n = p - a.presentationOffset),
                        m && ((e.startTime += n - u), (e.endTime += n - u)),
                        (e.id =
                          Er(e.startTime.toString()) +
                          Er(e.endTime.toString()) +
                          Er(e.text)),
                        (e.text = decodeURIComponent(
                          encodeURIComponent(e.text)
                        )),
                        0 < e.endTime && g.push(e);
                    }),
                      (y.onparsingerror = function(t) {
                        h = t;
                      }),
                      (y.onflush = function() {
                        return h && o ? void o(h) : void n(g);
                      }),
                      s.forEach(function(e) {
                        if (f) {
                          if (yr(e, 'X-TIMESTAMP-MAP=')) {
                            (f = !1),
                              (m = !0),
                              e
                                .substr(16)
                                .split(',')
                                .forEach(function(e) {
                                  yr(e, 'LOCAL:')
                                    ? (l = e.substr(6))
                                    : yr(e, 'MPEGTS:') &&
                                      (c = parseInt(e.substr(7)));
                                });
                            try {
                              0 > t + (9e4 * a[r].start || 0) &&
                                (t += 8589934592),
                                (c -= t),
                                (u = hr(l) / 1e3),
                                (p = c / 9e4);
                            } catch (t) {
                              (m = !1), (h = t);
                            }
                            return;
                          }
                          '' === e && (f = !1);
                        }
                        y.parse(e + '\n');
                      }),
                      y.flush();
                  }
                },
                Sr = vr,
                br = (function(e) {
                  function t(t) {
                    var a;
                    if (
                      ((a =
                        e.call(
                          this,
                          t,
                          lt['default'].MEDIA_ATTACHING,
                          lt['default'].MEDIA_DETACHING,
                          lt['default'].FRAG_PARSING_USERDATA,
                          lt['default'].FRAG_DECRYPTED,
                          lt['default'].MANIFEST_LOADING,
                          lt['default'].MANIFEST_LOADED,
                          lt['default'].FRAG_LOADED,
                          lt['default'].INIT_PTS_FOUND
                        ) || this),
                      (a.media = null),
                      (a.config = void 0),
                      (a.enabled = !0),
                      (a.Cues = void 0),
                      (a.textTracks = []),
                      (a.tracks = []),
                      (a.initPTS = []),
                      (a.unparsedVttFrags = []),
                      (a.captionsTracks = {}),
                      (a.nonNativeCaptionsTracks = {}),
                      (a.captionsProperties = void 0),
                      (a.cea608Parser1 = void 0),
                      (a.cea608Parser2 = void 0),
                      (a.lastSn = -1),
                      (a.prevCC = -1),
                      (a.vttCCs = Be()),
                      (a.hls = t),
                      (a.config = t.config),
                      (a.Cues = t.config.cueHandler),
                      (a.captionsProperties = {
                        textTrack1: {
                          label: a.config.captionsTextTrack1Label,
                          languageCode: a.config.captionsTextTrack1LanguageCode
                        },
                        textTrack2: {
                          label: a.config.captionsTextTrack2Label,
                          languageCode: a.config.captionsTextTrack2LanguageCode
                        },
                        textTrack3: {
                          label: a.config.captionsTextTrack3Label,
                          languageCode: a.config.captionsTextTrack3LanguageCode
                        },
                        textTrack4: {
                          label: a.config.captionsTextTrack4Label,
                          languageCode: a.config.captionsTextTrack4LanguageCode
                        }
                      }),
                      a.config.enableCEA708Captions)
                    ) {
                      var r = new mr(Oe(a), 'textTrack1'),
                        n = new mr(Oe(a), 'textTrack2'),
                        o = new mr(Oe(a), 'textTrack3'),
                        i = new mr(Oe(a), 'textTrack4');
                      (a.cea608Parser1 = new fr(1, r, n)),
                        (a.cea608Parser2 = new fr(3, o, i));
                    }
                    return a;
                  }
                  Fe(t, e);
                  var a = t.prototype;
                  return (
                    (a.addCues = function o(e, t, a, r, n) {
                      for (var d = !1, l = n.length; l--; ) {
                        var c = n[l],
                          p = Me(c[0], c[1], t, a);
                        if (
                          0 <= p &&
                          ((c[0] = u(c[0], t)),
                          (c[1] = s(c[1], a)),
                          (d = !0),
                          0.5 < p / (a - t))
                        )
                          return;
                      }
                      if (
                        (d || n.push([t, a]),
                        this.config.renderTextTracksNatively)
                      )
                        this.Cues.newCue(this.captionsTracks[e], t, a, r);
                      else {
                        var g = this.Cues.newCue(null, t, a, r);
                        this.hls.trigger(lt['default'].CUES_PARSED, {
                          type: 'captions',
                          cues: g,
                          track: e
                        });
                      }
                    }),
                    (a.onInitPtsFound = function t(e) {
                      var a = this,
                        r = e.frag,
                        n = e.id,
                        o = e.initPTS,
                        i = this.unparsedVttFrags;
                      'main' === n && (this.initPTS[r.cc] = o),
                        i.length &&
                          ((this.unparsedVttFrags = []),
                          i.forEach(function(e) {
                            a.onFragLoaded(e);
                          }));
                    }),
                    (a.getExistingTrack = function t(e) {
                      var a = this.media;
                      if (a)
                        for (var r = 0, n; r < a.textTracks.length; r++)
                          if (((n = a.textTracks[r]), n[e])) return n;
                      return null;
                    }),
                    (a.createCaptionsTrack = function t(e) {
                      this.config.renderTextTracksNatively
                        ? this.createNativeTrack(e)
                        : this.createNonNativeTrack(e);
                    }),
                    (a.createNativeTrack = function t(e) {
                      if (!this.captionsTracks[e]) {
                        var a = this.captionsProperties,
                          r = this.captionsTracks,
                          n = this.media,
                          o = a[e],
                          i = o.label,
                          d = o.languageCode,
                          s = this.getExistingTrack(e);
                        if (!s) {
                          var l = this.createTextTrack('captions', i, d);
                          l && ((l[e] = !0), (r[e] = l));
                        } else (r[e] = s), oe(r[e]), ne(r[e], n);
                      }
                    }),
                    (a.createNonNativeTrack = function t(e) {
                      if (!this.nonNativeCaptionsTracks[e]) {
                        var a = this.captionsProperties[e];
                        if (a) {
                          var r = a.label,
                            n = {
                              _id: e,
                              label: r,
                              kind: 'captions',
                              default: !!a.media && !!a.media.default,
                              closedCaptions: a.media
                            };
                          (this.nonNativeCaptionsTracks[e] = n),
                            this.hls.trigger(
                              lt['default'].NON_NATIVE_TEXT_TRACKS_FOUND,
                              { tracks: [n] }
                            );
                        }
                      }
                    }),
                    (a.createTextTrack = function r(e, t, a) {
                      var n = this.media;
                      return n ? n.addTextTrack(e, t, a) : void 0;
                    }),
                    (a.destroy = function t() {
                      e.prototype.destroy.call(this);
                    }),
                    (a.onMediaAttaching = function t(e) {
                      (this.media = e.media), this._cleanTracks();
                    }),
                    (a.onMediaDetaching = function e() {
                      var t = this.captionsTracks;
                      Object.keys(t).forEach(function(e) {
                        oe(t[e]), delete t[e];
                      }),
                        (this.nonNativeCaptionsTracks = {});
                    }),
                    (a.onManifestLoading = function e() {
                      (this.lastSn = -1),
                        (this.prevCC = -1),
                        (this.vttCCs = Be()),
                        this._cleanTracks(),
                        (this.tracks = []),
                        (this.captionsTracks = {}),
                        (this.nonNativeCaptionsTracks = {});
                    }),
                    (a._cleanTracks = function e() {
                      var t = this.media;
                      if (t) {
                        var a = t.textTracks;
                        if (a) for (var r = 0; r < a.length; r++) oe(a[r]);
                      }
                    }),
                    (a.onManifestLoaded = function t(e) {
                      var a = this;
                      if (
                        ((this.textTracks = []),
                        (this.unparsedVttFrags = this.unparsedVttFrags || []),
                        (this.initPTS = []),
                        this.cea608Parser1 &&
                          this.cea608Parser2 &&
                          (this.cea608Parser1.reset(),
                          this.cea608Parser2.reset()),
                        this.config.enableWebVTT)
                      ) {
                        var r = e.subtitles || [],
                          n =
                            this.tracks && r && this.tracks.length === r.length;
                        if (
                          ((this.tracks = e.subtitles || []),
                          this.config.renderTextTracksNatively)
                        ) {
                          var o = this.media ? this.media.textTracks : [];
                          this.tracks.forEach(function(e, t) {
                            var r;
                            if (t < o.length) {
                              for (var n = null, d = 0; d < o.length; d++)
                                if (we(o[d], e)) {
                                  n = o[d];
                                  break;
                                }
                              n && (r = n);
                            }
                            r ||
                              (r = a.createTextTrack(
                                'subtitles',
                                e.name,
                                e.lang
                              )),
                              (r.mode = e.default
                                ? a.hls.subtitleDisplay
                                  ? 'showing'
                                  : 'hidden'
                                : 'disabled'),
                              a.textTracks.push(r);
                          });
                        } else if (!n && this.tracks && this.tracks.length) {
                          var i = this.tracks.map(function(e) {
                            return {
                              label: e.name,
                              kind: e.type.toLowerCase(),
                              default: e.default,
                              subtitleTrack: e
                            };
                          });
                          this.hls.trigger(
                            lt['default'].NON_NATIVE_TEXT_TRACKS_FOUND,
                            { tracks: i }
                          );
                        }
                      }
                      this.config.enableCEA708Captions &&
                        e.captions &&
                        e.captions.forEach(function(e) {
                          var t = /(?:CC|SERVICE)([1-4])/.exec(e.instreamId);
                          if (t) {
                            var r = 'textTrack' + t[1],
                              n = a.captionsProperties[r];
                            n &&
                              ((n.label = e.name),
                              e.lang && (n.languageCode = e.lang),
                              (n.media = e));
                          }
                        });
                    }),
                    (a.onFragLoaded = function t(e) {
                      var a = e.frag,
                        r = e.payload,
                        n = this.cea608Parser1,
                        o = this.cea608Parser2,
                        i = this.initPTS,
                        d = this.lastSn,
                        s = this.unparsedVttFrags;
                      if ('main' === a.type) {
                        var l = a.sn;
                        a.sn !== d + 1 && n && o && (n.reset(), o.reset()),
                          (this.lastSn = l);
                      } else if ('subtitle' === a.type)
                        if (r.byteLength) {
                          if (!Object(st.isFiniteNumber)(i[a.cc]))
                            return (
                              s.push(e),
                              void (
                                i.length &&
                                this.hls.trigger(
                                  lt['default'].SUBTITLE_FRAG_PROCESSED,
                                  { success: !1, frag: a }
                                )
                              )
                            );
                          var c = a.decryptdata;
                          (null == c ||
                            null == c.key ||
                            'AES-128' !== c.method) &&
                            this._parseVTTs(a, r);
                        } else
                          this.hls.trigger(
                            lt['default'].SUBTITLE_FRAG_PROCESSED,
                            { success: !1, frag: a }
                          );
                    }),
                    (a._parseVTTs = function r(t, a) {
                      var n = this,
                        o = this.hls,
                        i = this.prevCC,
                        d = this.textTracks,
                        s = this.vttCCs;
                      s[t.cc] ||
                        ((s[t.cc] = { start: t.start, prevCC: i, new: !0 }),
                        (this.prevCC = t.cc)),
                        Sr.parse(
                          a,
                          this.initPTS[t.cc],
                          s,
                          t.cc,
                          function(e) {
                            if (n.config.renderTextTracksNatively) {
                              var a = d[t.level];
                              if ('disabled' === a.mode)
                                return void o.trigger(
                                  lt['default'].SUBTITLE_FRAG_PROCESSED,
                                  { success: !1, frag: t }
                                );
                              e.forEach(function(e) {
                                if (!a.cues.getCueById(e.id))
                                  try {
                                    if ((a.addCue(e), !a.cues.getCueById(e.id)))
                                      throw new Error(
                                        'addCue is failed for: ' + e
                                      );
                                  } catch (r) {
                                    ct.logger.debug(
                                      'Failed occurred on adding cues: ' + r
                                    );
                                    var t = new window.TextTrackCue(
                                      e.startTime,
                                      e.endTime,
                                      e.text
                                    );
                                    (t.id = e.id), a.addCue(t);
                                  }
                              });
                            } else {
                              var r = n.tracks[t.level].default
                                ? 'default'
                                : 'subtitles' + t.level;
                              o.trigger(lt['default'].CUES_PARSED, {
                                type: 'subtitles',
                                cues: e,
                                track: r
                              });
                            }
                            o.trigger(lt['default'].SUBTITLE_FRAG_PROCESSED, {
                              success: !0,
                              frag: t
                            });
                          },
                          function(a) {
                            ct.logger.log('Failed to parse VTT cue: ' + a),
                              o.trigger(lt['default'].SUBTITLE_FRAG_PROCESSED, {
                                success: !1,
                                frag: t
                              });
                          }
                        );
                    }),
                    (a.onFragDecrypted = function t(e) {
                      var a = e.frag,
                        r = e.payload;
                      if ('subtitle' === a.type) {
                        if (!Object(st.isFiniteNumber)(this.initPTS[a.cc]))
                          return void this.unparsedVttFrags.push(e);
                        this._parseVTTs(a, r);
                      }
                    }),
                    (a.onFragParsingUserdata = function t(e) {
                      var a = this.cea608Parser1,
                        r = this.cea608Parser2;
                      if (this.enabled && a && r)
                        for (var n = 0, o; n < e.samples.length; n++)
                          if (((o = e.samples[n].bytes), o)) {
                            var d = this.extractCea608Data(o);
                            a.addData(e.samples[n].pts, d[0]),
                              r.addData(e.samples[n].pts, d[1]);
                          }
                    }),
                    (a.extractCea608Data = function t(e) {
                      for (
                        var a = 31 & e[0], r = 2, n = [[], []], o = 0;
                        o < a;
                        o++
                      ) {
                        var i = e[r++],
                          d = 127 & e[r++],
                          s = 127 & e[r++],
                          l = 0 != (4 & i),
                          c = 3 & i;
                        (0 !== d || 0 !== s) &&
                          l &&
                          (0 === c || 1 === c) &&
                          (n[c].push(d), n[c].push(s));
                      }
                      return n;
                    }),
                    t
                  );
                })(gt),
                _r = br,
                Rr = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a =
                        e.call(
                          this,
                          t,
                          lt['default'].MEDIA_ATTACHED,
                          lt['default'].MEDIA_DETACHING,
                          lt['default'].MANIFEST_LOADED,
                          lt['default'].SUBTITLE_TRACK_LOADED
                        ) || this),
                      (a.tracks = []),
                      (a.trackId = -1),
                      (a.media = null),
                      (a.stopped = !0),
                      (a.subtitleDisplay = !0),
                      (a.queuedDefaultTrack = null),
                      a
                    );
                  }
                  Ke(t, e);
                  var a = t.prototype;
                  return (
                    (a.destroy = function e() {
                      gt.prototype.destroy.call(this);
                    }),
                    (a.onMediaAttached = function t(e) {
                      var a = this;
                      (this.media = e.media),
                        this.media &&
                          (Object(st.isFiniteNumber)(this.queuedDefaultTrack) &&
                            ((this.subtitleTrack = this.queuedDefaultTrack),
                            (this.queuedDefaultTrack = null)),
                          (this.trackChangeListener = this._onTextTracksChanged.bind(
                            this
                          )),
                          (this.useTextTrackPolling = !(
                            this.media.textTracks &&
                            'onchange' in this.media.textTracks
                          )),
                          this.useTextTrackPolling
                            ? (this.subtitlePollingInterval = setInterval(
                                function() {
                                  a.trackChangeListener();
                                },
                                500
                              ))
                            : this.media.textTracks.addEventListener(
                                'change',
                                this.trackChangeListener
                              ));
                    }),
                    (a.onMediaDetaching = function e() {
                      if (this.media) {
                        this.useTextTrackPolling
                          ? clearInterval(this.subtitlePollingInterval)
                          : this.media.textTracks.removeEventListener(
                              'change',
                              this.trackChangeListener
                            ),
                          Object(st.isFiniteNumber)(this.subtitleTrack) &&
                            (this.queuedDefaultTrack = this.subtitleTrack);
                        var t = He(this.media.textTracks);
                        t.forEach(function(e) {
                          oe(e);
                        }),
                          (this.subtitleTrack = -1),
                          (this.media = null);
                      }
                    }),
                    (a.onManifestLoaded = function t(e) {
                      var a = this,
                        r = e.subtitles || [];
                      (this.tracks = r),
                        this.hls.trigger(
                          lt['default'].SUBTITLE_TRACKS_UPDATED,
                          { subtitleTracks: r }
                        ),
                        r.forEach(function(e) {
                          e.default &&
                            (a.media
                              ? (a.subtitleTrack = e.id)
                              : (a.queuedDefaultTrack = e.id));
                        });
                    }),
                    (a.onSubtitleTrackLoaded = function t(e) {
                      var a = this,
                        r = e.id,
                        n = e.details,
                        o = this.trackId,
                        i = this.tracks,
                        d = i[o];
                      if (r >= i.length || r !== o || !d || this.stopped)
                        return void this._clearReloadTimer();
                      if (
                        (ct.logger.log('subtitle track ' + r + ' loaded'),
                        n.live)
                      ) {
                        var s = w(d.details, n, e.stats.trequest);
                        ct.logger.log(
                          'Reloading live subtitle playlist in ' + s + 'ms'
                        ),
                          (this.timer = setTimeout(function() {
                            a._loadCurrentTrack();
                          }, s));
                      } else this._clearReloadTimer();
                    }),
                    (a.startLoad = function e() {
                      (this.stopped = !1), this._loadCurrentTrack();
                    }),
                    (a.stopLoad = function e() {
                      (this.stopped = !0), this._clearReloadTimer();
                    }),
                    (a._clearReloadTimer = function e() {
                      this.timer &&
                        (clearTimeout(this.timer), (this.timer = null));
                    }),
                    (a._loadCurrentTrack = function e() {
                      var t = this.trackId,
                        a = this.tracks,
                        r = this.hls,
                        n = a[t];
                      0 > t ||
                        !n ||
                        (n.details && !n.details.live) ||
                        (ct.logger.log('Loading subtitle track ' + t),
                        r.trigger(lt['default'].SUBTITLE_TRACK_LOADING, {
                          url: n.url,
                          id: t
                        }));
                    }),
                    (a._toggleTrackModes = function t(e) {
                      var a = this.media,
                        r = this.subtitleDisplay,
                        n = this.trackId;
                      if (a) {
                        var o = He(a.textTracks);
                        if (-1 === e)
                          [].slice.call(o).forEach(function(e) {
                            e.mode = 'disabled';
                          });
                        else {
                          var i = o[n];
                          i && (i.mode = 'disabled');
                        }
                        var d = o[e];
                        d && (d.mode = r ? 'showing' : 'hidden');
                      }
                    }),
                    (a._setSubtitleTrackInternal = function t(e) {
                      var a = this.hls,
                        r = this.tracks;
                      !Object(st.isFiniteNumber)(e) ||
                        -1 > e ||
                        e >= r.length ||
                        ((this.trackId = e),
                        ct.logger.log('Switching to subtitle track ' + e),
                        a.trigger(lt['default'].SUBTITLE_TRACK_SWITCH, {
                          id: e
                        }),
                        this._loadCurrentTrack());
                    }),
                    (a._onTextTracksChanged = function e() {
                      if (
                        this.media &&
                        this.hls.config.renderTextTracksNatively
                      ) {
                        for (
                          var t = -1, a = He(this.media.textTracks), r = 0;
                          r < a.length;
                          r++
                        )
                          if ('hidden' === a[r].mode) t = r;
                          else if ('showing' === a[r].mode) {
                            t = r;
                            break;
                          }
                        this.subtitleTrack = t;
                      }
                    }),
                    Ge(t, [
                      {
                        key: 'subtitleTracks',
                        get: function e() {
                          return this.tracks;
                        }
                      },
                      {
                        key: 'subtitleTrack',
                        get: function e() {
                          return this.trackId;
                        },
                        set: function t(e) {
                          this.trackId !== e &&
                            (this._toggleTrackModes(e),
                            this._setSubtitleTrackInternal(e));
                        }
                      }
                    ]),
                    t
                  );
                })(gt),
                Ar = Rr,
                kr = i('./src/crypt/decrypter.js'),
                Dr = window,
                Lr = Dr.performance,
                Cr = 500,
                Pr = (function(e) {
                  function t(t, a) {
                    var r;
                    return (
                      (r =
                        e.call(
                          this,
                          t,
                          lt['default'].MEDIA_ATTACHED,
                          lt['default'].MEDIA_DETACHING,
                          lt['default'].ERROR,
                          lt['default'].KEY_LOADED,
                          lt['default'].FRAG_LOADED,
                          lt['default'].SUBTITLE_TRACKS_UPDATED,
                          lt['default'].SUBTITLE_TRACK_SWITCH,
                          lt['default'].SUBTITLE_TRACK_LOADED,
                          lt['default'].SUBTITLE_FRAG_PROCESSED,
                          lt['default'].LEVEL_UPDATED
                        ) || this),
                      (r.fragmentTracker = a),
                      (r.config = t.config),
                      (r.state = sa.STOPPED),
                      (r.tracks = []),
                      (r.tracksBuffered = []),
                      (r.currentTrackId = -1),
                      (r.decrypter = new kr['default'](t, t.config)),
                      (r.lastAVStart = 0),
                      (r._onMediaSeeking = r.onMediaSeeking.bind(Ve(r))),
                      r
                    );
                  }
                  We(t, e);
                  var a = t.prototype;
                  return (
                    (a.startLoad = function e() {
                      this.stopLoad(), (this.state = sa.IDLE);
                      var t = this.tracks[this.currentTrackId];
                      t && t.details && (this.setInterval(500), this.tick());
                    }),
                    (a.onSubtitleFragProcessed = function t(e) {
                      var a = e.frag,
                        r = e.success;
                      if (
                        ((this.fragPrevious = a), (this.state = sa.IDLE), !!r)
                      ) {
                        var n = this.tracksBuffered[this.currentTrackId];
                        if (n) {
                          for (var o = a.start, d = 0, s; d < n.length; d++)
                            if (o >= n[d].start && o <= n[d].end) {
                              s = n[d];
                              break;
                            }
                          var l = a.start + a.duration;
                          s
                            ? (s.end = l)
                            : ((s = { start: o, end: l }), n.push(s));
                        }
                      }
                    }),
                    (a.onMediaAttached = function t(e) {
                      var a = e.media;
                      (this.media = a),
                        a.addEventListener('seeking', this._onMediaSeeking),
                        (this.state = sa.IDLE);
                    }),
                    (a.onMediaDetaching = function e() {
                      var t = this;
                      this.media &&
                        (this.media.removeEventListener(
                          'seeking',
                          this._onMediaSeeking
                        ),
                        this.fragmentTracker.removeAllFragments(),
                        (this.currentTrackId = -1),
                        this.tracks.forEach(function(e) {
                          t.tracksBuffered[e.id] = [];
                        }),
                        (this.media = null),
                        (this.state = sa.STOPPED));
                    }),
                    (a.onError = function t(e) {
                      var a = e.frag;
                      a &&
                        'subtitle' === a.type &&
                        (this.fragCurrent &&
                          this.fragCurrent.loader &&
                          this.fragCurrent.loader.abort(),
                        (this.state = sa.IDLE));
                    }),
                    (a.onSubtitleTracksUpdated = function t(e) {
                      var a = this;
                      ct.logger.log('subtitle tracks updated'),
                        (this.tracksBuffered = []),
                        (this.tracks = e.subtitleTracks),
                        this.tracks.forEach(function(e) {
                          a.tracksBuffered[e.id] = [];
                        });
                    }),
                    (a.onSubtitleTrackSwitch = function t(e) {
                      if (
                        ((this.currentTrackId = e.id),
                        !this.tracks ||
                          !this.tracks.length ||
                          -1 === this.currentTrackId)
                      )
                        return void this.clearInterval();
                      var a = this.tracks[this.currentTrackId];
                      a && a.details && this.setInterval(500);
                    }),
                    (a.onSubtitleTrackLoaded = function t(e) {
                      var a = e.id,
                        r = e.details,
                        n = this.currentTrackId,
                        o = this.tracks,
                        i = o[n];
                      a >= o.length ||
                        a !== n ||
                        !i ||
                        (r.live && x(i.details, r, this.lastAVStart),
                        (i.details = r),
                        this.setInterval(500));
                    }),
                    (a.onKeyLoaded = function e() {
                      this.state === sa.KEY_LOADING && (this.state = sa.IDLE);
                    }),
                    (a.onFragLoaded = function t(e) {
                      var a = this.fragCurrent,
                        r = e.frag.decryptdata,
                        n = e.frag,
                        o = this.hls;
                      if (
                        this.state === sa.FRAG_LOADING &&
                        a &&
                        'subtitle' === e.frag.type &&
                        a.sn === e.frag.sn &&
                        0 < e.payload.byteLength &&
                        r &&
                        r.key &&
                        'AES-128' === r.method
                      ) {
                        var i = Lr.now();
                        this.decrypter.decrypt(
                          e.payload,
                          r.key.buffer,
                          r.iv.buffer,
                          function(e) {
                            var t = Lr.now();
                            o.trigger(lt['default'].FRAG_DECRYPTED, {
                              frag: n,
                              payload: e,
                              stats: { tstart: i, tdecrypt: t }
                            });
                          }
                        );
                      }
                    }),
                    (a.onLevelUpdated = function t(e) {
                      var a = e.details,
                        r = a.fragments;
                      this.lastAVStart = r.length ? r[0].start : 0;
                    }),
                    (a.doTick = function e() {
                      if (!this.media) return void (this.state = sa.IDLE);
                      switch (this.state) {
                        case sa.IDLE: {
                          var t = this.config,
                            a = this.currentTrackId,
                            r = this.fragmentTracker,
                            n = this.media,
                            o = this.tracks;
                          if (!o || !o[a] || !o[a].details) break;
                          var i = t.maxBufferHole,
                            d = t.maxFragLookUpTolerance,
                            s = u(t.maxBufferLength, t.maxMaxBufferLength),
                            l = Wt.bufferedInfo(
                              this._getBuffered(),
                              n.currentTime,
                              i
                            ),
                            c = l.end,
                            p = l.len,
                            g = o[a].details,
                            f = g.fragments,
                            m = f.length,
                            y = f[m - 1].start + f[m - 1].duration;
                          if (p > s) return;
                          var h = this.fragPrevious,
                            E;
                          c < y
                            ? (h &&
                                g.hasProgramDateTime &&
                                (E = j(f, h.endProgramDateTime, d)),
                              !E && (E = Y(h, f, c, d)))
                            : (E = f[m - 1]),
                            E && E.encrypted
                              ? (ct.logger.log('Loading key for ' + E.sn),
                                (this.state = sa.KEY_LOADING),
                                this.hls.trigger(lt['default'].KEY_LOADING, {
                                  frag: E
                                }))
                              : E &&
                                r.getState(E) === Gt.NOT_LOADED &&
                                ((this.fragCurrent = E),
                                (this.state = sa.FRAG_LOADING),
                                this.hls.trigger(lt['default'].FRAG_LOADING, {
                                  frag: E
                                }));
                        }
                      }
                    }),
                    (a.stopLoad = function t() {
                      (this.lastAVStart = 0),
                        (this.fragPrevious = null),
                        e.prototype.stopLoad.call(this);
                    }),
                    (a._getBuffered = function e() {
                      return this.tracksBuffered[this.currentTrackId] || [];
                    }),
                    (a.onMediaSeeking = function e() {
                      if (this.fragCurrent) {
                        var t = this.media ? this.media.currentTime : 0,
                          a = this.config.maxFragLookUpTolerance,
                          r = this.fragCurrent.start - a,
                          n =
                            this.fragCurrent.start +
                            this.fragCurrent.duration +
                            a;
                        (t < r || t > n) &&
                          (this.fragCurrent.loader &&
                            this.fragCurrent.loader.abort(),
                          this.fragmentTracker.removeFragment(this.fragCurrent),
                          (this.fragCurrent = null),
                          (this.fragPrevious = null),
                          (this.state = sa.IDLE),
                          this.tick());
                      }
                    }),
                    t
                  );
                })(la),
                Ir;
              (function(e) {
                (e.WIDEVINE = 'com.widevine.alpha'),
                  (e.PLAYREADY = 'com.microsoft.playready');
              })(Ir || (Ir = {}));
              var Nr = (function() {
                  return 'undefined' != typeof window &&
                    window.navigator &&
                    window.navigator.requestMediaKeySystemAccess
                    ? window.navigator.requestMediaKeySystemAccess.bind(
                        window.navigator
                      )
                    : null;
                })(),
                xr = 3,
                Or = function r(e, t, a) {
                  var n = { audioCapabilities: [], videoCapabilities: [] };
                  return (
                    e.forEach(function(e) {
                      n.audioCapabilities.push({
                        contentType: 'audio/mp4; codecs="' + e + '"',
                        robustness: a.audioRobustness || ''
                      });
                    }),
                    t.forEach(function(e) {
                      n.videoCapabilities.push({
                        contentType: 'video/mp4; codecs="' + e + '"',
                        robustness: a.videoRobustness || ''
                      });
                    }),
                    [n]
                  );
                },
                Fr = function n(e, t, a, r) {
                  switch (e) {
                    case Ir.WIDEVINE:
                      return Or(t, a, r);
                    default:
                      throw new Error('Unknown key-system: ' + e);
                  }
                },
                wr = (function(e) {
                  function t(t) {
                    var a;
                    return (
                      (a =
                        e.call(
                          this,
                          t,
                          lt['default'].MEDIA_ATTACHED,
                          lt['default'].MEDIA_DETACHED,
                          lt['default'].MANIFEST_PARSED
                        ) || this),
                      (a._widevineLicenseUrl = void 0),
                      (a._licenseXhrSetup = void 0),
                      (a._emeEnabled = void 0),
                      (a._requestMediaKeySystemAccess = void 0),
                      (a._drmSystemOptions = void 0),
                      (a._config = void 0),
                      (a._mediaKeysList = []),
                      (a._media = null),
                      (a._hasSetMediaKeys = !1),
                      (a._requestLicenseFailureCount = 0),
                      (a.mediaKeysPromise = null),
                      (a._onMediaEncrypted = function(t) {
                        if (
                          (ct.logger.log(
                            'Media is encrypted using "' +
                              t.initDataType +
                              '" init data type'
                          ),
                          !a.mediaKeysPromise)
                        )
                          return (
                            ct.logger.error(
                              'Fatal: Media is encrypted but no CDM access or no keys have been requested'
                            ),
                            void a.hls.trigger(lt['default'].ERROR, {
                              type: dt.ErrorTypes.KEY_SYSTEM_ERROR,
                              details: dt.ErrorDetails.KEY_SYSTEM_NO_KEYS,
                              fatal: !0
                            })
                          );
                        var e = function r(e) {
                          a._media &&
                            (a._attemptSetMediaKeys(e),
                            a._generateRequestWithPreferredKeySession(
                              t.initDataType,
                              t.initData
                            ));
                        };
                        a.mediaKeysPromise.then(e).catch(e);
                      }),
                      (a._config = t.config),
                      (a._widevineLicenseUrl = a._config.widevineLicenseUrl),
                      (a._licenseXhrSetup = a._config.licenseXhrSetup),
                      (a._emeEnabled = a._config.emeEnabled),
                      (a._requestMediaKeySystemAccess =
                        a._config.requestMediaKeySystemAccessFunc),
                      (a._drmSystemOptions = t.config.drmSystemOptions),
                      a
                    );
                  }
                  qe(t, e);
                  var a = t.prototype;
                  return (
                    (a.getLicenseServerUrl = function t(e) {
                      switch (e) {
                        case Ir.WIDEVINE:
                          if (!this._widevineLicenseUrl) break;
                          return this._widevineLicenseUrl;
                      }
                      throw new Error(
                        'no license server URL configured for key-system "' +
                          e +
                          '"'
                      );
                    }),
                    (a._attemptKeySystemAccess = function r(e, t, a) {
                      var n = this,
                        o = Fr(e, t, a, this._drmSystemOptions);
                      ct.logger.log(
                        'Requesting encrypted media key-system access'
                      );
                      var i = this.requestMediaKeySystemAccess(e, o);
                      (this.mediaKeysPromise = i.then(function(t) {
                        return n._onMediaKeySystemAccessObtained(e, t);
                      })),
                        i.catch(function(t) {
                          ct.logger.error(
                            'Failed to obtain key-system "' + e + '" access:',
                            t
                          );
                        });
                    }),
                    (a._onMediaKeySystemAccessObtained = function a(e, t) {
                      var r = this;
                      ct.logger.log(
                        'Access for key-system "' + e + '" obtained'
                      );
                      var n = {
                        mediaKeysSessionInitialized: !1,
                        mediaKeySystemAccess: t,
                        mediaKeySystemDomain: e
                      };
                      this._mediaKeysList.push(n);
                      var o = Promise.resolve()
                        .then(function() {
                          return t.createMediaKeys();
                        })
                        .then(function(t) {
                          return (
                            (n.mediaKeys = t),
                            ct.logger.log(
                              'Media-keys created for key-system "' + e + '"'
                            ),
                            r._onMediaKeysCreated(),
                            t
                          );
                        });
                      return (
                        o.catch(function(e) {
                          ct.logger.error('Failed to create media-keys:', e);
                        }),
                        o
                      );
                    }),
                    (a._onMediaKeysCreated = function e() {
                      var t = this;
                      this._mediaKeysList.forEach(function(e) {
                        e.mediaKeysSession ||
                          ((e.mediaKeysSession = e.mediaKeys.createSession()),
                          t._onNewMediaKeySession(e.mediaKeysSession));
                      });
                    }),
                    (a._onNewMediaKeySession = function t(e) {
                      var a = this;
                      ct.logger.log('New key-system session ' + e.sessionId),
                        e.addEventListener(
                          'message',
                          function(t) {
                            a._onKeySessionMessage(e, t.message);
                          },
                          !1
                        );
                    }),
                    (a._onKeySessionMessage = function a(e, t) {
                      ct.logger.log(
                        'Got EME message event, creating license request'
                      ),
                        this._requestLicense(t, function(t) {
                          ct.logger.log(
                            'Received license data (length: ' +
                              (t ? t.byteLength : t) +
                              '), updating key-session'
                          ),
                            e.update(t);
                        });
                    }),
                    (a._attemptSetMediaKeys = function t(e) {
                      if (!this._media)
                        throw new Error(
                          'Attempted to set mediaKeys without first attaching a media element'
                        );
                      if (!this._hasSetMediaKeys) {
                        var a = this._mediaKeysList[0];
                        if (!a || !a.mediaKeys)
                          return (
                            ct.logger.error(
                              'Fatal: Media is encrypted but no CDM access or no keys have been obtained yet'
                            ),
                            void this.hls.trigger(lt['default'].ERROR, {
                              type: dt.ErrorTypes.KEY_SYSTEM_ERROR,
                              details: dt.ErrorDetails.KEY_SYSTEM_NO_KEYS,
                              fatal: !0
                            })
                          );
                        ct.logger.log('Setting keys for encrypted media'),
                          this._media.setMediaKeys(a.mediaKeys),
                          (this._hasSetMediaKeys = !0);
                      }
                    }),
                    (a._generateRequestWithPreferredKeySession = function a(
                      e,
                      t
                    ) {
                      var r = this,
                        n = this._mediaKeysList[0];
                      if (!n)
                        return (
                          ct.logger.error(
                            'Fatal: Media is encrypted but not any key-system access has been obtained yet'
                          ),
                          void this.hls.trigger(lt['default'].ERROR, {
                            type: dt.ErrorTypes.KEY_SYSTEM_ERROR,
                            details: dt.ErrorDetails.KEY_SYSTEM_NO_ACCESS,
                            fatal: !0
                          })
                        );
                      if (n.mediaKeysSessionInitialized)
                        return void ct.logger.warn(
                          'Key-Session already initialized but requested again'
                        );
                      var o = n.mediaKeysSession;
                      return o
                        ? t
                          ? void (ct.logger.log(
                              'Generating key-session request for "' +
                                e +
                                '" init data type'
                            ),
                            (n.mediaKeysSessionInitialized = !0),
                            o
                              .generateRequest(e, t)
                              .then(function() {
                                ct.logger.debug(
                                  'Key-session generation succeeded'
                                );
                              })
                              .catch(function(e) {
                                ct.logger.error(
                                  'Error generating key-session request:',
                                  e
                                ),
                                  r.hls.trigger(lt['default'].ERROR, {
                                    type: dt.ErrorTypes.KEY_SYSTEM_ERROR,
                                    details:
                                      dt.ErrorDetails.KEY_SYSTEM_NO_SESSION,
                                    fatal: !1
                                  });
                              }))
                          : (ct.logger.warn(
                              'Fatal: initData required for generating a key session is null'
                            ),
                            void this.hls.trigger(lt['default'].ERROR, {
                              type: dt.ErrorTypes.KEY_SYSTEM_ERROR,
                              details: dt.ErrorDetails.KEY_SYSTEM_NO_INIT_DATA,
                              fatal: !0
                            }))
                        : (ct.logger.error(
                            'Fatal: Media is encrypted but no key-session existing'
                          ),
                          void this.hls.trigger(lt['default'].ERROR, {
                            type: dt.ErrorTypes.KEY_SYSTEM_ERROR,
                            details: dt.ErrorDetails.KEY_SYSTEM_NO_SESSION,
                            fatal: !0
                          }));
                    }),
                    (a._createLicenseXhr = function n(t, a, r) {
                      var o = new XMLHttpRequest(),
                        i = this._licenseXhrSetup;
                      try {
                        if (i)
                          try {
                            i(o, t);
                          } catch (a) {
                            o.open('POST', t, !0), i(o, t);
                          }
                        o.readyState || o.open('POST', t, !0);
                      } catch (t) {
                        throw new Error(
                          'issue setting up KeySystem license XHR ' + t
                        );
                      }
                      return (
                        (o.responseType = 'arraybuffer'),
                        (o.onreadystatechange = this._onLicenseRequestReadyStageChange.bind(
                          this,
                          o,
                          t,
                          a,
                          r
                        )),
                        o
                      );
                    }),
                    (a._onLicenseRequestReadyStageChange = function n(
                      e,
                      t,
                      a,
                      r
                    ) {
                      switch (e.readyState) {
                        case 4:
                          if (200 === e.status)
                            (this._requestLicenseFailureCount = 0),
                              ct.logger.log('License request succeeded'),
                              'arraybuffer' !== e.responseType &&
                                ct.logger.warn(
                                  'xhr response type was not set to the expected arraybuffer for license request'
                                ),
                              r(e.response);
                          else {
                            if (
                              (ct.logger.error(
                                'License Request XHR failed (' +
                                  t +
                                  '). Status: ' +
                                  e.status +
                                  ' (' +
                                  e.statusText +
                                  ')'
                              ),
                              this._requestLicenseFailureCount++,
                              this._requestLicenseFailureCount > 3)
                            )
                              return void this.hls.trigger(
                                lt['default'].ERROR,
                                {
                                  type: dt.ErrorTypes.KEY_SYSTEM_ERROR,
                                  details:
                                    dt.ErrorDetails
                                      .KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                                  fatal: !0
                                }
                              );
                            var o = 3 - this._requestLicenseFailureCount + 1;
                            ct.logger.warn(
                              'Retrying license request, ' +
                                o +
                                ' attempts left'
                            ),
                              this._requestLicense(a, r);
                          }
                      }
                    }),
                    (a._generateLicenseRequestChallenge = function a(e, t) {
                      switch (e.mediaKeySystemDomain) {
                        case Ir.WIDEVINE:
                          return t;
                      }
                      throw new Error(
                        'unsupported key-system: ' + e.mediaKeySystemDomain
                      );
                    }),
                    (a._requestLicense = function a(e, t) {
                      ct.logger.log(
                        'Requesting content license for key-system'
                      );
                      var r = this._mediaKeysList[0];
                      if (!r)
                        return (
                          ct.logger.error(
                            'Fatal error: Media is encrypted but no key-system access has been obtained yet'
                          ),
                          void this.hls.trigger(lt['default'].ERROR, {
                            type: dt.ErrorTypes.KEY_SYSTEM_ERROR,
                            details: dt.ErrorDetails.KEY_SYSTEM_NO_ACCESS,
                            fatal: !0
                          })
                        );
                      try {
                        var n = this.getLicenseServerUrl(
                            r.mediaKeySystemDomain
                          ),
                          o = this._createLicenseXhr(n, e, t);
                        ct.logger.log('Sending license request to URL: ' + n);
                        var i = this._generateLicenseRequestChallenge(r, e);
                        o.send(i);
                      } catch (t) {
                        ct.logger.error('Failure requesting DRM license: ' + t),
                          this.hls.trigger(lt['default'].ERROR, {
                            type: dt.ErrorTypes.KEY_SYSTEM_ERROR,
                            details:
                              dt.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                            fatal: !0
                          });
                      }
                    }),
                    (a.onMediaAttached = function t(e) {
                      if (this._emeEnabled) {
                        var a = e.media;
                        (this._media = a),
                          a.addEventListener(
                            'encrypted',
                            this._onMediaEncrypted
                          );
                      }
                    }),
                    (a.onMediaDetached = function e() {
                      var t = this._media,
                        a = this._mediaKeysList;
                      t &&
                        (t.removeEventListener(
                          'encrypted',
                          this._onMediaEncrypted
                        ),
                        (this._media = null),
                        (this._mediaKeysList = []),
                        Promise.all(
                          a.map(function(e) {
                            if (e.mediaKeysSession)
                              return e.mediaKeysSession
                                .close()
                                .catch(function() {});
                          })
                        )
                          .then(function() {
                            return t.setMediaKeys(null);
                          })
                          .catch(function() {}));
                    }),
                    (a.onManifestParsed = function t(e) {
                      if (this._emeEnabled) {
                        var a = e.levels.map(function(e) {
                            return e.audioCodec;
                          }),
                          r = e.levels.map(function(e) {
                            return e.videoCodec;
                          });
                        this._attemptKeySystemAccess(Ir.WIDEVINE, a, r);
                      }
                    }),
                    Ye(t, [
                      {
                        key: 'requestMediaKeySystemAccess',
                        get: function e() {
                          if (!this._requestMediaKeySystemAccess)
                            throw new Error(
                              'No requestMediaKeySystemAccess function configured'
                            );
                          return this._requestMediaKeySystemAccess;
                        }
                      }
                    ]),
                    t
                  );
                })(gt),
                Mr = wr,
                Br = Xe(
                  Xe(
                    {
                      autoStartLoad: !0,
                      startPosition: -1,
                      defaultAudioCodec: void 0,
                      debug: !1,
                      capLevelOnFPSDrop: !1,
                      capLevelToPlayerSize: !1,
                      initialLiveManifestSize: 1,
                      maxBufferLength: 30,
                      maxBufferSize: 60000000,
                      maxBufferHole: 0.5,
                      lowBufferWatchdogPeriod: 0.5,
                      highBufferWatchdogPeriod: 3,
                      nudgeOffset: 0.1,
                      nudgeMaxRetry: 3,
                      maxFragLookUpTolerance: 0.25,
                      liveSyncDurationCount: 3,
                      liveMaxLatencyDurationCount: 1 / 0,
                      liveSyncDuration: void 0,
                      liveMaxLatencyDuration: void 0,
                      liveDurationInfinity: !1,
                      liveBackBufferLength: 1 / 0,
                      maxMaxBufferLength: 600,
                      enableWorker: !0,
                      enableSoftwareAES: !0,
                      manifestLoadingTimeOut: 1e4,
                      manifestLoadingMaxRetry: 1,
                      manifestLoadingRetryDelay: 1e3,
                      manifestLoadingMaxRetryTimeout: 64e3,
                      startLevel: void 0,
                      levelLoadingTimeOut: 1e4,
                      levelLoadingMaxRetry: 4,
                      levelLoadingRetryDelay: 1e3,
                      levelLoadingMaxRetryTimeout: 64e3,
                      fragLoadingTimeOut: 2e4,
                      fragLoadingMaxRetry: 6,
                      fragLoadingRetryDelay: 1e3,
                      fragLoadingMaxRetryTimeout: 64e3,
                      startFragPrefetch: !1,
                      fpsDroppedMonitoringPeriod: 5e3,
                      fpsDroppedMonitoringThreshold: 0.2,
                      appendErrorMaxRetry: 3,
                      loader: wa,
                      fLoader: void 0,
                      pLoader: void 0,
                      xhrSetup: void 0,
                      licenseXhrSetup: void 0,
                      abrController: Aa,
                      bufferController: La,
                      capLevelController: Pa,
                      fpsController: Oa,
                      stretchShortVideoTrack: !1,
                      maxAudioFramesDrift: 1,
                      forceKeyFrameOnDiscontinuity: !0,
                      abrEwmaFastLive: 3,
                      abrEwmaSlowLive: 9,
                      abrEwmaFastVoD: 3,
                      abrEwmaSlowVoD: 9,
                      abrEwmaDefaultEstimate: 5e5,
                      abrBandWidthFactor: 0.95,
                      abrBandWidthUpFactor: 0.7,
                      abrMaxWithRealBitrate: !1,
                      maxStarvationDelay: 4,
                      maxLoadingDelay: 4,
                      minAutoBitrate: 0,
                      emeEnabled: !1,
                      widevineLicenseUrl: void 0,
                      drmSystemOptions: {},
                      requestMediaKeySystemAccessFunc: Nr,
                      testBandwidth: !0
                    },
                    Qe()
                  ),
                  {},
                  {
                    subtitleStreamController: Pr,
                    subtitleTrackController: Ar,
                    timelineController: _r,
                    audioStreamController: Va,
                    audioTrackController: Ba,
                    emeController: Mr
                  }
                ),
                Ur = (function(e) {
                  function t(a) {
                    var r;
                    void 0 === a && (a = {}),
                      (r = e.call(this) || this),
                      (r.config = void 0),
                      (r._autoLevelCapping = void 0),
                      (r.abrController = void 0),
                      (r.capLevelController = void 0),
                      (r.levelController = void 0),
                      (r.streamController = void 0),
                      (r.networkControllers = void 0),
                      (r.audioTrackController = void 0),
                      (r.subtitleTrackController = void 0),
                      (r.emeController = void 0),
                      (r.coreComponents = void 0),
                      (r.media = null),
                      (r.url = null);
                    var n = t.DefaultConfig;
                    if (
                      (a.liveSyncDurationCount ||
                        a.liveMaxLatencyDurationCount) &&
                      (a.liveSyncDuration || a.liveMaxLatencyDuration)
                    )
                      throw new Error(
                        "Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration"
                      );
                    r.config = Je(Je({}, n), a);
                    var o = tt(r),
                      i = o.config;
                    if (
                      void 0 !== i.liveMaxLatencyDurationCount &&
                      i.liveMaxLatencyDurationCount <= i.liveSyncDurationCount
                    )
                      throw new Error(
                        'Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"'
                      );
                    if (
                      void 0 !== i.liveMaxLatencyDuration &&
                      (void 0 === i.liveSyncDuration ||
                        i.liveMaxLatencyDuration <= i.liveSyncDuration)
                    )
                      throw new Error(
                        'Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"'
                      );
                    Object(ct.enableLogs)(i.debug), (r._autoLevelCapping = -1);
                    var d = (r.abrController = new i.abrController(tt(r))),
                      s = new i.bufferController(tt(r)),
                      l = (r.capLevelController = new i.capLevelController(
                        tt(r)
                      )),
                      c = new i.fpsController(tt(r)),
                      u = new Ft(tt(r)),
                      p = new Mt(tt(r)),
                      g = new Ut(tt(r)),
                      f = new ha(tt(r)),
                      m = (r.levelController = new ga(tt(r))),
                      y = new Kt(tt(r)),
                      h = (r.streamController = new pa(tt(r), y)),
                      E = [m, h],
                      T = i.audioStreamController;
                    T && E.push(new T(tt(r), y)), (r.networkControllers = E);
                    var v = [u, p, g, d, s, l, c, f, y];
                    if (((T = i.audioTrackController), T)) {
                      var S = new T(tt(r));
                      (r.audioTrackController = S), v.push(S);
                    }
                    if (((T = i.subtitleTrackController), T)) {
                      var b = new T(tt(r));
                      (r.subtitleTrackController = b), E.push(b);
                    }
                    if (((T = i.emeController), T)) {
                      var _ = new T(tt(r));
                      (r.emeController = _), v.push(_);
                    }
                    return (
                      (T = i.subtitleStreamController),
                      T && E.push(new T(tt(r), y)),
                      (T = i.timelineController),
                      T && v.push(new T(tt(r))),
                      (r.coreComponents = v),
                      r
                    );
                  }
                  nt(t, e),
                    (t.isSupported = function e() {
                      return se();
                    }),
                    rt(t, null, [
                      {
                        key: 'version',
                        get: function e() {
                          return '0.14.17';
                        }
                      },
                      {
                        key: 'Events',
                        get: function e() {
                          return lt['default'];
                        }
                      },
                      {
                        key: 'ErrorTypes',
                        get: function e() {
                          return dt.ErrorTypes;
                        }
                      },
                      {
                        key: 'ErrorDetails',
                        get: function e() {
                          return dt.ErrorDetails;
                        }
                      },
                      {
                        key: 'DefaultConfig',
                        get: function e() {
                          return t.defaultConfig ? t.defaultConfig : Br;
                        },
                        set: function a(e) {
                          t.defaultConfig = e;
                        }
                      }
                    ]);
                  var a = t.prototype;
                  return (
                    (a.destroy = function e() {
                      ct.logger.log('destroy'),
                        this.trigger(lt['default'].DESTROYING),
                        this.detachMedia(),
                        this.coreComponents
                          .concat(this.networkControllers)
                          .forEach(function(e) {
                            e.destroy();
                          }),
                        (this.url = null),
                        this.removeAllListeners(),
                        (this._autoLevelCapping = -1);
                    }),
                    (a.attachMedia = function t(e) {
                      ct.logger.log('attachMedia'),
                        (this.media = e),
                        this.trigger(lt['default'].MEDIA_ATTACHING, {
                          media: e
                        });
                    }),
                    (a.detachMedia = function e() {
                      ct.logger.log('detachMedia'),
                        this.trigger(lt['default'].MEDIA_DETACHING),
                        (this.media = null);
                    }),
                    (a.loadSource = function t(e) {
                      (e = it.buildAbsoluteURL(window.location.href, e, {
                        alwaysNormalize: !0
                      })),
                        ct.logger.log('loadSource:' + e),
                        (this.url = e),
                        this.trigger(lt['default'].MANIFEST_LOADING, {
                          url: e
                        });
                    }),
                    (a.startLoad = function t(e) {
                      void 0 === e && (e = -1),
                        ct.logger.log('startLoad(' + e + ')'),
                        this.networkControllers.forEach(function(t) {
                          t.startLoad(e);
                        });
                    }),
                    (a.stopLoad = function e() {
                      ct.logger.log('stopLoad'),
                        this.networkControllers.forEach(function(e) {
                          e.stopLoad();
                        });
                    }),
                    (a.swapAudioCodec = function e() {
                      ct.logger.log('swapAudioCodec'),
                        this.streamController.swapAudioCodec();
                    }),
                    (a.recoverMediaError = function e() {
                      ct.logger.log('recoverMediaError');
                      var t = this.media;
                      this.detachMedia(), t && this.attachMedia(t);
                    }),
                    (a.removeLevel = function a(e, t) {
                      void 0 === t && (t = 0),
                        this.levelController.removeLevel(e, t);
                    }),
                    rt(t, [
                      {
                        key: 'levels',
                        get: function e() {
                          return this.levelController.levels;
                        }
                      },
                      {
                        key: 'currentLevel',
                        get: function e() {
                          return this.streamController.currentLevel;
                        },
                        set: function t(e) {
                          ct.logger.log('set currentLevel:' + e),
                            (this.loadLevel = e),
                            this.streamController.immediateLevelSwitch();
                        }
                      },
                      {
                        key: 'nextLevel',
                        get: function e() {
                          return this.streamController.nextLevel;
                        },
                        set: function t(e) {
                          ct.logger.log('set nextLevel:' + e),
                            (this.levelController.manualLevel = e),
                            this.streamController.nextLevelSwitch();
                        }
                      },
                      {
                        key: 'loadLevel',
                        get: function e() {
                          return this.levelController.level;
                        },
                        set: function t(e) {
                          ct.logger.log('set loadLevel:' + e),
                            (this.levelController.manualLevel = e);
                        }
                      },
                      {
                        key: 'nextLoadLevel',
                        get: function e() {
                          return this.levelController.nextLoadLevel;
                        },
                        set: function t(e) {
                          this.levelController.nextLoadLevel = e;
                        }
                      },
                      {
                        key: 'firstLevel',
                        get: function e() {
                          return s(
                            this.levelController.firstLevel,
                            this.minAutoLevel
                          );
                        },
                        set: function t(e) {
                          ct.logger.log('set firstLevel:' + e),
                            (this.levelController.firstLevel = e);
                        }
                      },
                      {
                        key: 'startLevel',
                        get: function e() {
                          return this.levelController.startLevel;
                        },
                        set: function t(e) {
                          ct.logger.log('set startLevel:' + e),
                            -1 !== e && (e = s(e, this.minAutoLevel)),
                            (this.levelController.startLevel = e);
                        }
                      },
                      {
                        key: 'capLevelToPlayerSize',
                        set: function t(e) {
                          var a = !!e;
                          a !== this.config.capLevelToPlayerSize &&
                            (a
                              ? this.capLevelController.startCapping()
                              : (this.capLevelController.stopCapping(),
                                (this.autoLevelCapping = -1),
                                this.streamController.nextLevelSwitch()),
                            (this.config.capLevelToPlayerSize = a));
                        }
                      },
                      {
                        key: 'autoLevelCapping',
                        get: function e() {
                          return this._autoLevelCapping;
                        },
                        set: function t(e) {
                          ct.logger.log('set autoLevelCapping:' + e),
                            (this._autoLevelCapping = e);
                        }
                      },
                      {
                        key: 'bandwidthEstimate',
                        get: function e() {
                          var t = this.abrController._bwEstimator;
                          return t ? t.getEstimate() : NaN;
                        }
                      },
                      {
                        key: 'autoLevelEnabled',
                        get: function e() {
                          return -1 === this.levelController.manualLevel;
                        }
                      },
                      {
                        key: 'manualLevel',
                        get: function e() {
                          return this.levelController.manualLevel;
                        }
                      },
                      {
                        key: 'minAutoLevel',
                        get: function e() {
                          for (
                            var t = this.levels,
                              a = this.config.minAutoBitrate,
                              r = t ? t.length : 0,
                              n = 0,
                              o;
                            n < r;
                            n++
                          )
                            if (
                              ((o = t[n].realBitrate
                                ? s(t[n].realBitrate, t[n].bitrate)
                                : t[n].bitrate),
                              o > a)
                            )
                              return n;
                          return 0;
                        }
                      },
                      {
                        key: 'maxAutoLevel',
                        get: function e() {
                          var t = this.levels,
                            a = this.autoLevelCapping,
                            r;
                          return (
                            (r = -1 === a && t && t.length ? t.length - 1 : a),
                            r
                          );
                        }
                      },
                      {
                        key: 'nextAutoLevel',
                        get: function e() {
                          return u(
                            s(
                              this.abrController.nextAutoLevel,
                              this.minAutoLevel
                            ),
                            this.maxAutoLevel
                          );
                        },
                        set: function t(e) {
                          this.abrController.nextAutoLevel = s(
                            this.minAutoLevel,
                            e
                          );
                        }
                      },
                      {
                        key: 'audioTracks',
                        get: function e() {
                          var t = this.audioTrackController;
                          return t ? t.audioTracks : [];
                        }
                      },
                      {
                        key: 'audioTrack',
                        get: function e() {
                          var t = this.audioTrackController;
                          return t ? t.audioTrack : -1;
                        },
                        set: function t(e) {
                          var a = this.audioTrackController;
                          a && (a.audioTrack = e);
                        }
                      },
                      {
                        key: 'liveSyncPosition',
                        get: function e() {
                          return this.streamController.liveSyncPosition;
                        }
                      },
                      {
                        key: 'subtitleTracks',
                        get: function e() {
                          var t = this.subtitleTrackController;
                          return t ? t.subtitleTracks : [];
                        }
                      },
                      {
                        key: 'subtitleTrack',
                        get: function e() {
                          var t = this.subtitleTrackController;
                          return t ? t.subtitleTrack : -1;
                        },
                        set: function t(e) {
                          var a = this.subtitleTrackController;
                          a && (a.subtitleTrack = e);
                        }
                      },
                      {
                        key: 'subtitleDisplay',
                        get: function e() {
                          var t = this.subtitleTrackController;
                          return !!t && t.subtitleDisplay;
                        },
                        set: function t(e) {
                          var a = this.subtitleTrackController;
                          a && (a.subtitleDisplay = e);
                        }
                      }
                    ]),
                    t
                  );
                })(Xt);
              Ur.defaultConfig = void 0;
            },
            './src/polyfills/number.js': function n(t, a, r) {
              var o = Number.isFinite;
              r.r(a),
                r.d(a, 'isFiniteNumber', function() {
                  return i;
                }),
                r.d(a, 'MAX_SAFE_INTEGER', function() {
                  return d;
                });
              var i =
                  o ||
                  function(e) {
                    return 'number' == typeof e && isFinite(e);
                  },
                d = e || 9007199254740991;
            },
            './src/utils/get-self-scope.js': function r(e, t, a) {
              function n() {
                return 'undefined' == typeof window ? self : window;
              }
              a.r(t),
                a.d(t, 'getSelfScope', function() {
                  return n;
                });
            },
            './src/utils/logger.js': function r(e, t, a) {
              function n() {}
              function o(e, t) {
                return (t = '[' + e + '] > ' + t), t;
              }
              function i(e) {
                var t = u.console[e];
                return t
                  ? function() {
                      for (
                        var a = arguments.length, r = Array(a), n = 0;
                        n < a;
                        n++
                      )
                        r[n] = arguments[n];
                      r[0] && (r[0] = o(e, r[0])), t.apply(u.console, r);
                    }
                  : n;
              }
              function d(e) {
                for (
                  var t = arguments.length, a = Array(1 < t ? t - 1 : 0), r = 1;
                  r < t;
                  r++
                )
                  a[r - 1] = arguments[r];
                a.forEach(function(t) {
                  c[t] = e[t] ? e[t].bind(e) : i(t);
                });
              }
              a.r(t),
                a.d(t, 'enableLogs', function() {
                  return p;
                }),
                a.d(t, 'logger', function() {
                  return g;
                });
              var s = a('./src/utils/get-self-scope.js'),
                l = { trace: n, debug: n, log: n, warn: n, info: n, error: n },
                c = l,
                u = Object(s.getSelfScope)(),
                p = function t(e) {
                  if ((u.console && !0 === e) || 'object' == typeof e) {
                    d(e, 'debug', 'log', 'info', 'warn', 'error');
                    try {
                      c.log();
                    } catch (t) {
                      c = l;
                    }
                  } else c = l;
                },
                g = c;
            }
          })['default'];
        });
    }),
    St = (function t(e) {
      return e &&
        e.__esModule &&
        Object.prototype.hasOwnProperty.call(e, 'default')
        ? e['default']
        : e;
    })(vt),
    bt = function() {
      return (
        (bt =
          Object.assign ||
          function(e) {
            for (var t = 1, a = arguments.length, r; t < a; t++)
              for (var n in ((r = arguments[t]), r))
                Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);
            return e;
          }),
        bt.apply(this, arguments)
      );
    },
    _t = function(a, r) {
      var e = {};
      for (var t in a)
        Object.prototype.hasOwnProperty.call(a, t) &&
          0 > r.indexOf(t) &&
          (e[t] = a[t]);
      if (null != a && 'function' == typeof Object.getOwnPropertySymbols)
        for (var n = 0, t = Object.getOwnPropertySymbols(a); n < t.length; n++)
          0 > r.indexOf(t[n]) &&
            Object.prototype.propertyIsEnumerable.call(a, t[n]) &&
            (e[t[n]] = a[t[n]]);
      return e;
    },
    Rt = ['order'],
    At =
      Number.isNaN ||
      function(e) {
        return e !== e;
      },
    kt = function a(e, t) {
      return e.filter(t)[0];
    },
    Dt = function a(e, t) {
      var r = e.type,
        n = t.type;
      return 'string' == typeof r || 'string' == typeof n
        ? r === n
        : !('function' != typeof r || 'function' != typeof n) &&
            r.displayName === n.displayName;
    },
    Lt = [
      'error',
      'src',
      'srcObject',
      'currentSrc',
      'crossOrigin',
      'networkState',
      'preload',
      'buffered',
      'readyState',
      'seeking',
      'currentTime',
      'duration',
      'paused',
      'defaultPlaybackRate',
      'playbackRate',
      'played',
      'seekable',
      'ended',
      'autoplay',
      'loop',
      'mediaGroup',
      'controller',
      'controls',
      'volume',
      'muted',
      'defaultMuted',
      'audioTracks',
      'videoTracks',
      'textTracks',
      'width',
      'height',
      'videoWidth',
      'videoHeight',
      'poster'
    ],
    Ct = {
      hlsConfig: dt.object,
      actions: dt.object,
      player: dt.object,
      children: dt.any,
      startTime: dt.number,
      loop: dt.bool,
      muted: dt.bool,
      autoPlay: dt.bool,
      playsInline: dt.bool,
      src: dt.string,
      poster: dt.string,
      className: dt.string,
      preload: dt.oneOf(['auto', 'metadata', 'none']),
      crossOrigin: dt.string,
      onLoadStart: dt.func,
      onWaiting: dt.func,
      onCanPlay: dt.func,
      onCanPlayThrough: dt.func,
      onPlaying: dt.func,
      onEnded: dt.func,
      onSeeking: dt.func,
      onSeeked: dt.func,
      onPlay: dt.func,
      onPause: dt.func,
      onProgress: dt.func,
      onDurationChange: dt.func,
      onError: dt.func,
      onSuspend: dt.func,
      onAbort: dt.func,
      onEmptied: dt.func,
      onStalled: dt.func,
      onLoadedMetadata: dt.func,
      onLoadedData: dt.func,
      onTimeUpdate: dt.func,
      onRateChange: dt.func,
      onVolumeChange: dt.func,
      onResize: dt.func
    },
    Pt = (function(e) {
      function t(t) {
        var a;
        return (
          (a = e.call(this, t) || this),
          (a.video = null),
          (a.hlsConfig = a.play.bind(I(a))),
          (a.play = a.play.bind(I(a))),
          (a.pause = a.pause.bind(I(a))),
          (a.seek = a.seek.bind(I(a))),
          (a.forward = a.forward.bind(I(a))),
          (a.replay = a.replay.bind(I(a))),
          (a.toggleFullscreen = a.toggleFullscreen.bind(I(a))),
          (a.getProperties = a.getProperties.bind(I(a))),
          (a.renderChildren = a.renderChildren.bind(I(a))),
          (a.handleLoadStart = a.handleLoadStart.bind(I(a))),
          (a.handleCanPlay = a.handleCanPlay.bind(I(a))),
          (a.handleCanPlayThrough = a.handleCanPlayThrough.bind(I(a))),
          (a.handlePlay = a.handlePlay.bind(I(a))),
          (a.handlePlaying = a.handlePlaying.bind(I(a))),
          (a.handlePause = a.handlePause.bind(I(a))),
          (a.handleEnded = a.handleEnded.bind(I(a))),
          (a.handleWaiting = a.handleWaiting.bind(I(a))),
          (a.handleSeeking = a.handleSeeking.bind(I(a))),
          (a.handleSeeked = a.handleSeeked.bind(I(a))),
          (a.handleFullscreenChange = a.handleFullscreenChange.bind(I(a))),
          (a.handleError = a.handleError.bind(I(a))),
          (a.handleSuspend = a.handleSuspend.bind(I(a))),
          (a.handleAbort = a.handleAbort.bind(I(a))),
          (a.handleEmptied = a.handleEmptied.bind(I(a))),
          (a.handleStalled = a.handleStalled.bind(I(a))),
          (a.handleLoadedMetaData = a.handleLoadedMetaData.bind(I(a))),
          (a.handleLoadedData = a.handleLoadedData.bind(I(a))),
          (a.handleTimeUpdate = a.handleTimeUpdate.bind(I(a))),
          (a.handleRateChange = a.handleRateChange.bind(I(a))),
          (a.handleVolumeChange = a.handleVolumeChange.bind(I(a))),
          (a.handleDurationChange = a.handleDurationChange.bind(I(a))),
          (a.handleProgress = se(a.handleProgress.bind(I(a)), 250)),
          (a.handleKeypress = a.handleKeypress.bind(I(a))),
          (a.handleTextTrackChange = a.handleTextTrackChange.bind(I(a))),
          a
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {
          this.forceUpdate(),
            this.video &&
              this.video.textTracks &&
              ((this.video.textTracks.onaddtrack = this.handleTextTrackChange),
              (this.video.textTracks.onremovetrack = this.handleTextTrackChange));
        }),
        (a.getProperties = function e() {
          var t = this;
          return this.video
            ? Lt.reduce(function(e, a) {
                return (e[a] = t.video[a]), e;
              }, {})
            : null;
        }),
        (a.handleTextTrackChange = function e() {
          var t = this.props,
            a = t.actions,
            r = t.player;
          if (this.video && this.video.textTracks) {
            var n = Array.from(this.video.textTracks).find(function(e) {
              return 'showing' === e.mode;
            });
            n !== r.activeTextTrack && a.activateTextTrack(n);
          }
        }),
        (a.play = function e() {
          var t = this.video.play();
          void 0 !== t && t.catch(function() {}).then(function() {});
        }),
        (a.pause = function e() {
          var t = this.video.pause();
          void 0 !== t && t.catch(function() {}).then(function() {});
        }),
        (a.load = function e() {
          this.video.load();
        }),
        (a.addTextTrack = function e() {
          var t;
          (t = this.video).addTextTrack.apply(t, arguments);
        }),
        (a.canPlayType = function e() {
          var t;
          (t = this.video).canPlayType.apply(t, arguments);
        }),
        (a.togglePlay = function e() {
          this.video.paused ? this.play() : this.pause();
        }),
        (a.seek = function t(e) {
          try {
            this.video.currentTime = e;
          } catch (t) {}
        }),
        (a.forward = function t(e) {
          this.seek(this.video.currentTime + e);
        }),
        (a.replay = function t(e) {
          this.forward(-e);
        }),
        (a.toggleFullscreen = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          r.toggleFullscreen(a);
        }),
        (a.handleLoadStart = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onLoadStart;
          a.handleLoadStart(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleCanPlay = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onCanPlay;
          a.handleCanPlay(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleCanPlayThrough = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onCanPlayThrough;
          a.handleCanPlayThrough(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handlePlaying = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onPlaying;
          a.handlePlaying(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handlePlay = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onPlay;
          a.handlePlay(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handlePause = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onPause;
          a.handlePause(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handleDurationChange = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onDurationChange;
          a.handleDurationChange(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleProgress = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onProgress;
          this.video && a.handleProgressChange(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleEnded = function e() {
          var t = this.props,
            a = t.loop,
            r = t.player,
            n = t.actions,
            o = t.onEnded;
          a ? (this.seek(0), this.play()) : !r.paused && this.pause(),
            n.handleEnd(this.getProperties()),
            o && o.apply(void 0, arguments);
        }),
        (a.handleWaiting = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onWaiting;
          a.handleWaiting(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleSeeking = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onSeeking;
          a.handleSeeking(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleSeeked = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onSeeked;
          a.handleSeeked(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handleFullscreenChange = function e() {}),
        (a.handleSuspend = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onSuspend;
          a.handleSuspend(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleAbort = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onAbort;
          a.handleAbort(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handleEmptied = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onEmptied;
          a.handleEmptied(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleStalled = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onStalled;
          a.handleStalled(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleLoadedMetaData = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onLoadedMetadata,
            n = t.startTime;
          n && 0 < n && (this.video.currentTime = n),
            a.handleLoadedMetaData(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleLoadedData = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onLoadedData;
          a.handleLoadedData(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleTimeUpdate = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onTimeUpdate;
          a.handleTimeUpdate(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleRateChange = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onRateChange;
          a.handleRateChange(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleVolumeChange = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onVolumeChange;
          a.handleVolumeChange(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleError = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onError;
          a.handleError(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handleResize = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onResize;
          a.handleResize(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handleKeypress = function e() {}),
        (a.renderChildren = function e() {
          var t = this,
            a = D({}, this.props, { video: this.video });
          return this.video
            ? be.Children.toArray(this.props.children)
                .filter(oe)
                .map(function(e) {
                  var r;
                  if ('string' != typeof e.type) r = a;
                  else if ('source' === e.type) {
                    r = D({}, e.props);
                    var n = r.onError;
                    r.onError = function() {
                      n && n.apply(void 0, arguments),
                        t.handleError.apply(t, arguments);
                    };
                  }
                  return be.cloneElement(e, r);
                })
            : null;
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.loop,
            n = a.poster,
            o = a.preload,
            i = a.src,
            d = a.autoPlay,
            s = a.playsInline,
            l = a.muted,
            c = a.crossOrigin,
            u = a.videoId,
            p = a.hlsConfig;
          return be.createElement(
            re,
            {
              hlsConfig: p,
              className: st('video-react-video', this.props.className),
              id: u,
              crossOrigin: c,
              ref: function a(e) {
                t.video = e;
              },
              muted: l,
              preload: o,
              loop: r,
              playsInline: s,
              autoPlay: d,
              poster: n,
              src: i,
              onLoadStart: this.handleLoadStart,
              onWaiting: this.handleWaiting,
              onCanPlay: this.handleCanPlay,
              onCanPlayThrough: this.handleCanPlayThrough,
              onPlaying: this.handlePlaying,
              onEnded: this.handleEnded,
              onSeeking: this.handleSeeking,
              onSeeked: this.handleSeeked,
              onPlay: this.handlePlay,
              onPause: this.handlePause,
              onProgress: this.handleProgress,
              onDurationChange: this.handleDurationChange,
              onError: this.handleError,
              onSuspend: this.handleSuspend,
              onAbort: this.handleAbort,
              onEmptied: this.handleEmptied,
              onStalled: this.handleStalled,
              onLoadedMetadata: this.handleLoadedMetaData,
              onLoadedData: this.handleLoadedData,
              onTimeUpdate: this.handleTimeUpdate,
              onRateChange: this.handleRateChange,
              onVolumeChange: this.handleVolumeChange,
              tabIndex: '-1'
            },
            this.renderChildren()
          );
        }),
        R(t, [
          {
            key: 'playbackRate',
            get: function e() {
              return this.video.playbackRate;
            },
            set: function t(e) {
              this.video.playbackRate = e;
            }
          },
          {
            key: 'muted',
            get: function e() {
              return this.video.muted;
            },
            set: function t(e) {
              this.video.muted = e;
            }
          },
          {
            key: 'volume',
            get: function e() {
              return this.video.volume;
            },
            set: function t(e) {
              1 < e && (e = 1), 0 > e && (e = 0), (this.video.volume = e);
            }
          },
          {
            key: 'videoWidth',
            get: function e() {
              return this.video.videoWidth;
            }
          },
          {
            key: 'videoHeight',
            get: function e() {
              return this.video.videoHeight;
            }
          }
        ]),
        t
      );
    })(o.Component);
  (Pt.propTypes = Ct), (Pt.displayName = 'Video');
  var It = { manager: dt.object, className: dt.string },
    Nt = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.timer = null),
          t.manager.subscribeToOperationStateChange(
            r.handleStateChange.bind(I(r))
          ),
          (r.state = { hidden: !0, operation: {} }),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.handleStateChange = function a(e, t) {
          var r = this;
          e.count !== t.count &&
            'shortcut' === e.operation.source &&
            (this.timer && (clearTimeout(this.timer), (this.timer = null)),
            this.setState({
              hidden: !1,
              count: e.count,
              operation: e.operation
            }),
            (this.timer = setTimeout(function() {
              r.setState({ hidden: !0 }), (r.timer = null);
            }, 500)));
        }),
        (a.render = function e() {
          if ('shortcut' !== this.state.operation.source) return null;
          var t = this.state.hidden ? { display: 'none' } : null;
          return be.createElement(
            'div',
            {
              className: st(
                {
                  'video-react-bezel': !0,
                  'video-react-bezel-animation': 0 == this.state.count % 2,
                  'video-react-bezel-animation-alt': 1 == this.state.count % 2
                },
                this.props.className
              ),
              style: t,
              role: 'status',
              'aria-label': this.state.operation.action
            },
            be.createElement('div', {
              className: st(
                'video-react-bezel-icon',
                'video-react-bezel-icon-' + this.state.operation.action
              )
            })
          );
        }),
        t
      );
    })(o.Component);
  (Nt.propTypes = It), (Nt.displayName = 'Bezel');
  var xt = {
      clickable: dt.bool,
      dblclickable: dt.bool,
      manager: dt.object,
      actions: dt.object,
      player: dt.object,
      shortcuts: dt.array
    },
    Ot = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.defaultShortcuts = [
            { keyCode: 32, handle: r.togglePlay },
            { keyCode: 75, handle: r.togglePlay },
            { keyCode: 70, handle: r.toggleFullscreen },
            {
              keyCode: 37,
              handle: function a(e, t) {
                e.hasStarted &&
                  t.replay(5, { action: 'replay-5', source: 'shortcut' });
              }
            },
            {
              keyCode: 74,
              handle: function a(e, t) {
                e.hasStarted &&
                  t.replay(10, { action: 'replay-10', source: 'shortcut' });
              }
            },
            {
              keyCode: 39,
              handle: function a(e, t) {
                e.hasStarted &&
                  t.forward(5, { action: 'forward-5', source: 'shortcut' });
              }
            },
            {
              keyCode: 76,
              handle: function a(e, t) {
                e.hasStarted &&
                  t.forward(10, { action: 'forward-10', source: 'shortcut' });
              }
            },
            {
              keyCode: 36,
              handle: function a(e, t) {
                e.hasStarted && t.seek(0);
              }
            },
            {
              keyCode: 35,
              handle: function a(e, t) {
                e.hasStarted && t.seek(e.duration);
              }
            },
            {
              keyCode: 38,
              handle: function a(e, t) {
                var r = e.volume + 0.05;
                1 < r && (r = 1),
                  t.changeVolume(r, {
                    action: 'volume-up',
                    source: 'shortcut'
                  });
              }
            },
            {
              keyCode: 40,
              handle: function a(e, t) {
                var r = e.volume - 0.05;
                0 > r && (r = 0);
                var n = 0 < r ? 'volume-down' : 'volume-off';
                t.changeVolume(r, { action: n, source: 'shortcut' });
              }
            },
            {
              keyCode: 190,
              shift: !0,
              handle: function a(e, t) {
                var r = e.playbackRate;
                1.5 <= r
                  ? (r = 2)
                  : 1.25 <= r
                  ? (r = 1.5)
                  : 1 <= r
                  ? (r = 1.25)
                  : 0.5 <= r
                  ? (r = 1)
                  : 0.25 <= r
                  ? (r = 0.5)
                  : 0 <= r && (r = 0.25),
                  t.changeRate(r, {
                    action: 'fast-forward',
                    source: 'shortcut'
                  });
              }
            },
            {
              keyCode: 188,
              shift: !0,
              handle: function a(e, t) {
                var r = e.playbackRate;
                0.5 >= r
                  ? (r = 0.25)
                  : 1 >= r
                  ? (r = 0.5)
                  : 1.25 >= r
                  ? (r = 1)
                  : 1.5 >= r
                  ? (r = 1.25)
                  : 2 >= r && (r = 1.5),
                  t.changeRate(r, {
                    action: 'fast-rewind',
                    source: 'shortcut'
                  });
              }
            }
          ]),
          (r.shortcuts = [].concat(r.defaultShortcuts)),
          (r.mergeShortcuts = r.mergeShortcuts.bind(I(r))),
          (r.handleKeyPress = r.handleKeyPress.bind(I(r))),
          (r.handleClick = r.handleClick.bind(I(r))),
          (r.handleDoubleClick = r.handleDoubleClick.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {
          this.mergeShortcuts(),
            document.addEventListener('keydown', this.handleKeyPress),
            document.addEventListener('click', this.handleClick),
            document.addEventListener('dblclick', this.handleDoubleClick);
        }),
        (a.componentDidUpdate = function t(e) {
          e.shortcuts !== this.props.shortcuts && this.mergeShortcuts();
        }),
        (a.componentWillUnmount = function e() {
          document.removeEventListener('keydown', this.handleKeyPress),
            document.removeEventListener('click', this.handleClick),
            document.removeEventListener('dblclick', this.handleDoubleClick);
        }),
        (a.mergeShortcuts = function e() {
          var t = function t(e) {
              var a = e.keyCode,
                r = void 0 === a ? 0 : a,
                n = e.ctrl,
                o = void 0 !== n && n,
                i = e.shift,
                d = void 0 !== i && i,
                s = e.alt,
                l = void 0 !== s && s;
              return r + ':' + o + ':' + d + ':' + l;
            },
            a = this.defaultShortcuts.reduce(function(e, a) {
              var r;
              return Object.assign(e, ((r = {}), (r[t(a)] = a), r));
            }, {}),
            r = (this.props.shortcuts || []).reduce(function(e, a) {
              var r = a.keyCode,
                n = a.handle;
              if (r && 'function' == typeof n) {
                var o;
                return Object.assign(e, ((o = {}), (o[t(a)] = a), o));
              }
              return e;
            }, a),
            n = function t(e) {
              var a = 0,
                r = ['ctrl', 'shift', 'alt'];
              return (
                r.forEach(function(t) {
                  e[t] && a++;
                }),
                a
              );
            };
          this.shortcuts = Object.keys(r)
            .map(function(e) {
              return r[e];
            })
            .sort(function(e, t) {
              return n(t) - n(e);
            });
        }),
        (a.togglePlay = function a(e, t) {
          e.paused
            ? t.play({ action: 'play', source: 'shortcut' })
            : t.pause({ action: 'pause', source: 'shortcut' });
        }),
        (a.toggleFullscreen = function a(e, t) {
          t.toggleFullscreen(e);
        }),
        (a.handleKeyPress = function e(t) {
          var a = this.props,
            r = a.player,
            n = a.actions;
          if (
            r.isActive &&
            !(
              document.activeElement &&
              (pe(document.activeElement, 'video-react-control') ||
                pe(document.activeElement, 'video-react-menu-button-active') ||
                pe(document.activeElement, 'video-react-big-play-button'))
            )
          ) {
            var o = t.keyCode || t.which,
              i = t.ctrlKey || t.metaKey,
              d = t.shiftKey,
              l = t.altKey,
              c = this.shortcuts.filter(function(e) {
                return (
                  !!(e.keyCode && 0 == e.keyCode - o) &&
                  (void 0 === e.ctrl || e.ctrl === i) &&
                  (void 0 === e.shift || e.shift === d) &&
                  (void 0 === e.alt || e.alt === l)
                );
              })[0];
            c && (c.handle(r, n), t.preventDefault());
          }
        }),
        (a.canBeClicked = function e(t, a) {
          return !!(
            t.isActive &&
            'VIDEO' === a.target.nodeName &&
            4 === t.readyState
          );
        }),
        (a.handleClick = function e(t) {
          var a = this.props,
            r = a.player,
            n = a.actions,
            o = a.clickable;
          this.canBeClicked(r, t) && o && this.togglePlay(r, n);
        }),
        (a.handleDoubleClick = function e(t) {
          var a = this.props,
            r = a.player,
            n = a.actions,
            o = a.dblclickable;
          this.canBeClicked(r, t) && o && this.toggleFullscreen(r, n);
        }),
        (a.render = function e() {
          return null;
        }),
        t
      );
    })(o.Component);
  (Ot.propTypes = xt),
    (Ot.defaultProps = { clickable: !0, dblclickable: !0 }),
    (Ot.displayName = 'Shortcut');
  var Ft = {
      className: dt.string,
      onMouseDown: dt.func,
      onMouseMove: dt.func,
      stepForward: dt.func,
      stepBack: dt.func,
      sliderActive: dt.func,
      sliderInactive: dt.func,
      onMouseUp: dt.func,
      onFocus: dt.func,
      onBlur: dt.func,
      onClick: dt.func,
      getPercent: dt.func,
      vertical: dt.bool,
      children: dt.node,
      label: dt.string,
      valuenow: dt.string,
      valuetext: dt.string
    },
    wt = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleMouseDown = r.handleMouseDown.bind(I(r))),
          (r.handleMouseMove = r.handleMouseMove.bind(I(r))),
          (r.handleMouseUp = r.handleMouseUp.bind(I(r))),
          (r.handleFocus = r.handleFocus.bind(I(r))),
          (r.handleBlur = r.handleBlur.bind(I(r))),
          (r.handleClick = r.handleClick.bind(I(r))),
          (r.handleKeyPress = r.handleKeyPress.bind(I(r))),
          (r.stepForward = r.stepForward.bind(I(r))),
          (r.stepBack = r.stepBack.bind(I(r))),
          (r.calculateDistance = r.calculateDistance.bind(I(r))),
          (r.getProgress = r.getProgress.bind(I(r))),
          (r.renderChildren = r.renderChildren.bind(I(r))),
          (r.state = { active: !1 }),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.componentWillUnmount = function e() {
          document.removeEventListener('mousemove', this.handleMouseMove, !0),
            document.removeEventListener('mouseup', this.handleMouseUp, !0),
            document.removeEventListener('touchmove', this.handleMouseMove, !0),
            document.removeEventListener('touchend', this.handleMouseUp, !0),
            document.removeEventListener('keydown', this.handleKeyPress, !0);
        }),
        (a.getProgress = function e() {
          var t = this.props.getPercent;
          if (!t) return 0;
          var a = t();
          return ('number' != typeof a || 0 > a || a === 1 / 0) && (a = 0), a;
        }),
        (a.handleMouseDown = function t(e) {
          var a = this.props.onMouseDown;
          document.addEventListener('mousemove', this.handleMouseMove, !0),
            document.addEventListener('mouseup', this.handleMouseUp, !0),
            document.addEventListener('touchmove', this.handleMouseMove, !0),
            document.addEventListener('touchend', this.handleMouseUp, !0),
            this.setState({ active: !0 }),
            this.props.sliderActive && this.props.sliderActive(e),
            this.handleMouseMove(e),
            a && a(e);
        }),
        (a.handleMouseMove = function t(e) {
          var a = this.props.onMouseMove;
          a && a(e);
        }),
        (a.handleMouseUp = function t(e) {
          e.preventDefault();
          var a = this.props.onMouseUp;
          document.removeEventListener('mousemove', this.handleMouseMove, !0),
            document.removeEventListener('mouseup', this.handleMouseUp, !0),
            document.removeEventListener('touchmove', this.handleMouseMove, !0),
            document.removeEventListener('touchend', this.handleMouseUp, !0),
            this.setState({ active: !1 }),
            this.props.sliderInactive && this.props.sliderInactive(e),
            a && a(e);
        }),
        (a.handleFocus = function e(t) {
          document.addEventListener('keydown', this.handleKeyPress, !0),
            this.props.onFocus && this.props.onFocus(t);
        }),
        (a.handleBlur = function e(t) {
          document.removeEventListener('keydown', this.handleKeyPress, !0),
            this.props.onBlur && this.props.onBlur(t);
        }),
        (a.handleClick = function t(e) {
          e.preventDefault(), this.props.onClick && this.props.onClick(e);
        }),
        (a.handleKeyPress = function t(e) {
          37 === e.which || 40 === e.which
            ? (e.preventDefault(), e.stopPropagation(), this.stepBack())
            : (38 === e.which || 39 === e.which) &&
              (e.preventDefault(), e.stopPropagation(), this.stepForward());
        }),
        (a.stepForward = function e() {
          this.props.stepForward && this.props.stepForward();
        }),
        (a.stepBack = function e() {
          this.props.stepBack && this.props.stepBack();
        }),
        (a.calculateDistance = function t(e) {
          var a = this.slider,
            r = ce(a, e);
          return this.props.vertical ? r.y : r.x;
        }),
        (a.renderChildren = function e() {
          var t = this.getProgress(),
            a = (100 * t).toFixed(2) + '%';
          return be.Children.map(this.props.children, function(e) {
            return be.cloneElement(e, { progress: t, percentage: a });
          });
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.vertical,
            n = a.label,
            o = a.valuenow,
            i = a.valuetext;
          return be.createElement(
            'div',
            {
              className: st(
                this.props.className,
                {
                  'video-react-slider-vertical': r,
                  'video-react-slider-horizontal': !r,
                  'video-react-sliding': this.state.active
                },
                'video-react-slider'
              ),
              ref: function a(e) {
                t.slider = e;
              },
              tabIndex: '0',
              role: 'slider',
              onMouseDown: this.handleMouseDown,
              onTouchStart: this.handleMouseDown,
              onFocus: this.handleFocus,
              onBlur: this.handleBlur,
              onClick: this.handleClick,
              'aria-label': n || '',
              'aria-valuenow': o || '',
              'aria-valuetext': i || '',
              'aria-valuemin': 0,
              'aria-valuemax': 100
            },
            this.renderChildren()
          );
        }),
        t
      );
    })(o.Component);
  (wt.propTypes = Ft), (wt.displayName = 'Slider');
  var Mt = {
    currentTime: dt.number,
    duration: dt.number,
    percentage: dt.string,
    className: dt.string
  };
  (ge.propTypes = Mt), (ge.displayName = 'PlayProgressBar');
  var Bt = { duration: dt.number, buffered: dt.object, className: dt.string };
  (fe.propTypes = Bt),
    (fe.displayName = 'LoadProgressBar'),
    (me.propTypes = {
      duration: dt.number,
      mouseTime: dt.object,
      className: dt.string
    }),
    (me.displayName = 'MouseTimeDisplay');
  var Ut = {
      player: dt.object,
      mouseTime: dt.object,
      actions: dt.object,
      className: dt.string
    },
    Gt = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.getPercent = r.getPercent.bind(I(r))),
          (r.getNewTime = r.getNewTime.bind(I(r))),
          (r.stepForward = r.stepForward.bind(I(r))),
          (r.stepBack = r.stepBack.bind(I(r))),
          (r.handleMouseDown = r.handleMouseDown.bind(I(r))),
          (r.handleMouseMove = r.handleMouseMove.bind(I(r))),
          (r.handleMouseUp = r.handleMouseUp.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {}),
        (a.componentDidUpdate = function e() {}),
        (a.getPercent = function e() {
          var t = this.props.player,
            a = t.currentTime,
            r = t.seekingTime,
            n = t.duration,
            o = r || a,
            i = o / n;
          return 1 <= i ? 1 : i;
        }),
        (a.getNewTime = function t(e) {
          var a = this.props.player.duration,
            r = this.slider.calculateDistance(e),
            n = r * a;
          return n === a ? n - 0.1 : n;
        }),
        (a.handleMouseDown = function e() {}),
        (a.handleMouseUp = function t(e) {
          var a = this.props.actions,
            r = this.getNewTime(e);
          a.seek(r), a.handleEndSeeking(r);
        }),
        (a.handleMouseMove = function t(e) {
          var a = this.props.actions,
            r = this.getNewTime(e);
          a.handleSeekingTime(r);
        }),
        (a.stepForward = function e() {
          var t = this.props.actions;
          t.forward(5);
        }),
        (a.stepBack = function e() {
          var t = this.props.actions;
          t.replay(5);
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.player,
            n = r.currentTime,
            o = r.seekingTime,
            i = r.duration,
            d = r.buffered,
            s = a.mouseTime,
            l = o || n;
          return be.createElement(
            wt,
            {
              ref: function a(e) {
                t.slider = e;
              },
              label: 'video progress bar',
              className: st(
                'video-react-progress-holder',
                this.props.className
              ),
              valuenow: (100 * this.getPercent()).toFixed(2),
              valuetext: ne(l, i),
              onMouseDown: this.handleMouseDown,
              onMouseMove: this.handleMouseMove,
              onMouseUp: this.handleMouseUp,
              getPercent: this.getPercent,
              stepForward: this.stepForward,
              stepBack: this.stepBack
            },
            be.createElement(fe, { buffered: d, currentTime: l, duration: i }),
            be.createElement(me, { duration: i, mouseTime: s }),
            be.createElement(ge, { currentTime: l, duration: i })
          );
        }),
        t
      );
    })(o.Component);
  (Gt.propTypes = Ut), (Gt.displayName = 'SeekBar');
  var Kt = { player: dt.object, className: dt.string },
    Ht = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.state = { mouseTime: { time: null, position: 0 } }),
          (r.handleMouseMoveThrottle = r.handleMouseMove.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.handleMouseMove = function t(e) {
          if (e.pageX) {
            var a = this.props.player.duration,
              r = this.seekBar,
              n = ce(r, e).x * a,
              o = e.pageX - le(r).left;
            this.setState({ mouseTime: { time: n, position: o } });
          }
        }),
        (a.render = function e() {
          var t = this,
            a = this.props.className;
          return be.createElement(
            'div',
            {
              onMouseMove: this.handleMouseMoveThrottle,
              className: st(
                'video-react-progress-control video-react-control',
                a
              )
            },
            be.createElement(
              Gt,
              D(
                {
                  mouseTime: this.state.mouseTime,
                  ref: function a(e) {
                    t.seekBar = e;
                  }
                },
                this.props
              )
            )
          );
        }),
        t
      );
    })(o.Component);
  (Ht.propTypes = Kt), (Ht.displayName = 'ProgressControl');
  var Vt = { actions: dt.object, player: dt.object, className: dt.string },
    Wt = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function e() {
          var t = this.props,
            a = t.actions,
            r = t.player;
          r.paused ? a.play() : a.pause();
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.player,
            n = a.className,
            o = r.paused ? 'Play' : 'Pause';
          return be.createElement(
            'button',
            {
              ref: function a(e) {
                t.button = e;
              },
              className: st(n, {
                'video-react-play-control': !0,
                'video-react-control': !0,
                'video-react-button': !0,
                'video-react-paused': r.paused,
                'video-react-playing': !r.paused
              }),
              type: 'button',
              tabIndex: '0',
              onClick: this.handleClick
            },
            be.createElement(
              'span',
              { className: 'video-react-control-text' },
              o
            )
          );
        }),
        t
      );
    })(o.Component);
  (Wt.propTypes = Vt), (Wt.displayName = 'PlayToggle');
  var jt = { actions: dt.object, className: dt.string, seconds: dt.number },
    Yt = { seconds: 10 },
    qt = function(e) {
      var t = (function(t) {
        function a(e, a) {
          var r;
          return (
            (r = t.call(this, e, a) || this),
            (r.handleClick = r.handleClick.bind(I(r))),
            r
          );
        }
        L(a, t);
        var r = a.prototype;
        return (
          (r.handleClick = function t() {
            var a = this.props,
              r = a.actions,
              n = a.seconds;
            'forward' === e ? r.forward(n) : r.replay(n);
          }),
          (r.render = function t() {
            var a = this,
              r = this.props,
              n = r.seconds,
              o = r.className,
              i = [
                'video-react-control',
                'video-react-button',
                'video-react-icon'
              ];
            return (
              i.push(
                'video-react-icon-' + e + '-' + n,
                'video-react-' + e + '-control'
              ),
              o && i.push(o),
              be.createElement(
                'button',
                {
                  ref: function t(e) {
                    a.button = e;
                  },
                  className: i.join(' '),
                  type: 'button',
                  onClick: this.handleClick
                },
                be.createElement(
                  'span',
                  { className: 'video-react-control-text' },
                  e + ' ' + n + ' seconds'
                )
              )
            );
          }),
          a
        );
      })(o.Component);
      return (t.propTypes = jt), (t.defaultProps = Yt), t;
    },
    zt = qt('forward');
  zt.displayName = 'ForwardControl';
  var Xt = qt('replay');
  Xt.displayName = 'ReplayControl';
  var $t = { actions: dt.object, player: dt.object, className: dt.string },
    Qt = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          r.toggleFullscreen(a);
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.player,
            n = a.className;
          return be.createElement(
            'button',
            {
              className: st(
                n,
                {
                  'video-react-icon-fullscreen-exit': r.isFullscreen,
                  'video-react-icon-fullscreen': !r.isFullscreen
                },
                'video-react-fullscreen-control video-react-control video-react-button video-react-icon'
              ),
              ref: function a(e) {
                t.button = e;
              },
              type: 'button',
              tabIndex: '0',
              onClick: this.handleClick
            },
            be.createElement(
              'span',
              { className: 'video-react-control-text' },
              'Non-Fullscreen'
            )
          );
        }),
        t
      );
    })(o.Component);
  (Qt.propTypes = $t), (Qt.displayName = 'FullscreenToggle');
  var Zt = { player: dt.object, className: dt.string };
  (ye.propTypes = Zt), (ye.displayName = 'RemainingTimeDisplay');
  var Jt = { player: dt.object, className: dt.string };
  (he.propTypes = Jt), (he.displayName = 'CurrentTimeDisplay');
  var ea = { player: dt.object, className: dt.string };
  (Ee.propTypes = ea), (Ee.displayName = 'DurationDisplay');
  var ta = { separator: dt.string, className: dt.string };
  (Te.propTypes = ta), (Te.displayName = 'TimeDivider');
  var aa = {
      tagName: dt.string,
      onClick: dt.func.isRequired,
      onFocus: dt.func,
      onBlur: dt.func,
      className: dt.string
    },
    ra = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(I(r))),
          (r.handleFocus = r.handleFocus.bind(I(r))),
          (r.handleBlur = r.handleBlur.bind(I(r))),
          (r.handleKeypress = r.handleKeypress.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.componentWillUnmount = function e(t) {
          this.handleBlur(t);
        }),
        (a.handleKeypress = function t(e) {
          (32 === e.which || 13 === e.which) &&
            (e.preventDefault(), this.handleClick(e));
        }),
        (a.handleClick = function t(e) {
          var a = this.props.onClick;
          a(e);
        }),
        (a.handleFocus = function e(t) {
          document.addEventListener('keydown', this.handleKeypress),
            this.props.onFocus && this.props.onFocus(t);
        }),
        (a.handleBlur = function e(t) {
          document.removeEventListener('keydown', this.handleKeypress),
            this.props.onBlur && this.props.onBlur(t);
        }),
        (a.render = function e() {
          var t = this.props.tagName,
            a = D({}, this.props);
          return (
            delete a.tagName,
            delete a.className,
            be.createElement(
              t,
              D(
                {
                  className: st(this.props.className),
                  role: 'button',
                  tabIndex: '0',
                  onClick: this.handleClick,
                  onFocus: this.handleFocus,
                  onBlur: this.handleBlur
                },
                a
              )
            )
          );
        }),
        t
      );
    })(o.Component);
  (ra.propTypes = aa),
    (ra.defaultProps = { tagName: 'div' }),
    (ra.displayName = 'ClickableComponent');
  var na = { player: dt.object, children: dt.any },
    oa = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function t(e) {
          e.preventDefault();
        }),
        (a.render = function e() {
          var t = this.props.children;
          return be.createElement(
            'div',
            { className: 'video-react-menu', onClick: this.handleClick },
            be.createElement(
              'div',
              { className: 'video-react-menu-content' },
              t
            )
          );
        }),
        t
      );
    })(o.Component);
  (oa.propTypes = na), (oa.displayName = 'Popup');
  var ia = {
    inline: dt.bool,
    onClick: dt.func.isRequired,
    onFocus: dt.func,
    onBlur: dt.func,
    className: dt.string
  };
  (ve.propTypes = ia),
    (ve.defaultProps = { inline: !0 }),
    (ve.displayName = 'PopupButton');
  var da = { percentage: dt.string, vertical: dt.bool, className: dt.string };
  (Se.propTypes = da),
    (Se.defaultProps = { percentage: '100%', vertical: !1 }),
    (Se.displayName = 'VolumeLevel');
  var sa = {
      actions: dt.object,
      player: dt.object,
      className: dt.string,
      onFocus: dt.func,
      onBlur: dt.func
    },
    la = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.state = { percentage: '0%' }),
          (r.handleMouseMove = r.handleMouseMove.bind(I(r))),
          (r.handlePercentageChange = r.handlePercentageChange.bind(I(r))),
          (r.checkMuted = r.checkMuted.bind(I(r))),
          (r.getPercent = r.getPercent.bind(I(r))),
          (r.stepForward = r.stepForward.bind(I(r))),
          (r.stepBack = r.stepBack.bind(I(r))),
          (r.handleFocus = r.handleFocus.bind(I(r))),
          (r.handleBlur = r.handleBlur.bind(I(r))),
          (r.handleClick = r.handleClick.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {}),
        (a.getPercent = function e() {
          var t = this.props.player;
          return t.muted ? 0 : t.volume;
        }),
        (a.checkMuted = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          a.muted && r.mute(!1);
        }),
        (a.handleMouseMove = function t(e) {
          var a = this.props.actions;
          this.checkMuted();
          var r = this.slider.calculateDistance(e);
          a.changeVolume(r);
        }),
        (a.stepForward = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          this.checkMuted(), r.changeVolume(a.volume + 0.1);
        }),
        (a.stepBack = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          this.checkMuted(), r.changeVolume(a.volume - 0.1);
        }),
        (a.handleFocus = function e(t) {
          this.props.onFocus && this.props.onFocus(t);
        }),
        (a.handleBlur = function e(t) {
          this.props.onBlur && this.props.onBlur(t);
        }),
        (a.handlePercentageChange = function t(e) {
          e !== this.state.percentage && this.setState({ percentage: e });
        }),
        (a.handleClick = function t(e) {
          e.stopPropagation();
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.player,
            n = a.className,
            o = (100 * r.volume).toFixed(2);
          return be.createElement(
            wt,
            D(
              {
                ref: function a(e) {
                  t.slider = e;
                },
                label: 'volume level',
                valuenow: o,
                valuetext: o + '%',
                onMouseMove: this.handleMouseMove,
                onFocus: this.handleFocus,
                onBlur: this.handleBlur,
                onClick: this.handleClick,
                sliderActive: this.handleFocus,
                sliderInactive: this.handleBlur,
                getPercent: this.getPercent,
                onPercentageChange: this.handlePercentageChange,
                stepForward: this.stepForward,
                stepBack: this.stepBack
              },
              this.props,
              {
                className: st(
                  n,
                  'video-react-volume-bar video-react-slider-bar'
                )
              }
            ),
            be.createElement(Se, this.props)
          );
        }),
        t
      );
    })(o.Component);
  (la.propTypes = sa), (la.displayName = 'VolumeBar');
  var ca = {
      player: dt.object,
      actions: dt.object,
      vertical: dt.bool,
      className: dt.string,
      alwaysShowVolume: dt.bool
    },
    ua = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.state = { active: !1 }),
          (r.handleClick = r.handleClick.bind(I(r))),
          (r.handleFocus = r.handleFocus.bind(I(r))),
          (r.handleBlur = r.handleBlur.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          r.mute(!a.muted);
        }),
        (a.handleFocus = function e() {
          this.setState({ active: !0 });
        }),
        (a.handleBlur = function e() {
          this.setState({ active: !1 });
        }),
        (a.render = function e() {
          var t = this.props,
            a = t.vertical,
            r = t.player,
            n = t.className,
            o = !a,
            i = this.volumeLevel;
          return be.createElement(
            ve,
            {
              className: st(
                n,
                {
                  'video-react-volume-menu-button-vertical': a,
                  'video-react-volume-menu-button-horizontal': !a,
                  'video-react-vol-muted': r.muted,
                  'video-react-vol-0': 0 === i && !r.muted,
                  'video-react-vol-1': 1 === i,
                  'video-react-vol-2': 2 === i,
                  'video-react-vol-3': 3 === i,
                  'video-react-slider-active':
                    this.props.alwaysShowVolume || this.state.active,
                  'video-react-lock-showing':
                    this.props.alwaysShowVolume || this.state.active
                },
                'video-react-volume-menu-button'
              ),
              onClick: this.handleClick,
              inline: o
            },
            be.createElement(
              la,
              D(
                { onFocus: this.handleFocus, onBlur: this.handleBlur },
                this.props
              )
            )
          );
        }),
        R(t, [
          {
            key: 'volumeLevel',
            get: function e() {
              var t = this.props.player,
                a = t.volume,
                r = t.muted,
                n = 3;
              return (
                0 === a || r
                  ? (n = 0)
                  : 0.33 > a
                  ? (n = 1)
                  : 0.67 > a && (n = 2),
                n
              );
            }
          }
        ]),
        t
      );
    })(o.Component);
  (ua.propTypes = ca),
    (ua.defaultProps = { vertical: !1 }),
    (ua.displayName = 'VolumeMenuButton');
  var pa = { children: dt.any },
    ga = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function t(e) {
          e.preventDefault();
        }),
        (a.render = function e() {
          return be.createElement(
            'div',
            {
              className: 'video-react-menu video-react-lock-showing',
              role: 'presentation',
              onClick: this.handleClick
            },
            be.createElement(
              'ul',
              { className: 'video-react-menu-content' },
              this.props.children
            )
          );
        }),
        t
      );
    })(o.Component);
  (ga.propTypes = pa), (ga.displayName = 'Menu');
  var fa = {
      item: dt.object,
      index: dt.number,
      activateIndex: dt.number,
      onSelectItem: dt.func
    },
    ma = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function e() {
          var t = this.props,
            a = t.index,
            r = t.onSelectItem;
          r(a);
        }),
        (a.render = function e() {
          var t = this.props,
            a = t.item,
            r = t.index,
            n = t.activateIndex;
          return be.createElement(
            'li',
            {
              className: st({
                'video-react-menu-item': !0,
                'video-react-selected': r === n
              }),
              role: 'menuitem',
              onClick: this.handleClick
            },
            a.label,
            be.createElement('span', { className: 'video-react-control-text' })
          );
        }),
        t
      );
    })(o.Component);
  (ma.propTypes = fa), (ma.displayName = 'MenuItem');
  var ya = {
      inline: dt.bool,
      items: dt.array,
      className: dt.string,
      onSelectItem: dt.func,
      children: dt.any,
      selectedIndex: dt.number
    },
    ha = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.state = { active: !1, activateIndex: t.selectedIndex || 0 }),
          (r.commitSelection = r.commitSelection.bind(I(r))),
          (r.activateMenuItem = r.activateMenuItem.bind(I(r))),
          (r.handleClick = r.handleClick.bind(I(r))),
          (r.renderMenu = r.renderMenu.bind(I(r))),
          (r.handleFocus = r.handleFocus.bind(I(r))),
          (r.handleBlur = r.handleBlur.bind(I(r))),
          (r.handleUpArrow = r.handleUpArrow.bind(I(r))),
          (r.handleDownArrow = r.handleDownArrow.bind(I(r))),
          (r.handleEscape = r.handleEscape.bind(I(r))),
          (r.handleReturn = r.handleReturn.bind(I(r))),
          (r.handleTab = r.handleTab.bind(I(r))),
          (r.handleKeyPress = r.handleKeyPress.bind(I(r))),
          (r.handleSelectItem = r.handleSelectItem.bind(I(r))),
          (r.handleIndexChange = r.handleIndexChange.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.componentDidUpdate = function t(e) {
          e.selectedIndex !== this.props.selectedIndex &&
            this.activateMenuItem(this.props.selectedIndex);
        }),
        (a.commitSelection = function t(e) {
          this.setState({ activateIndex: e }), this.handleIndexChange(e);
        }),
        (a.activateMenuItem = function t(e) {
          this.setState({ activateIndex: e }), this.handleIndexChange(e);
        }),
        (a.handleIndexChange = function t(e) {
          var a = this.props.onSelectItem;
          a(e);
        }),
        (a.handleClick = function e() {
          this.setState(function(e) {
            return { active: !e.active };
          });
        }),
        (a.handleFocus = function e() {
          document.addEventListener('keydown', this.handleKeyPress);
        }),
        (a.handleBlur = function e() {
          this.setState({ active: !1 }),
            document.removeEventListener('keydown', this.handleKeyPress);
        }),
        (a.handleUpArrow = function e(t) {
          var a = this.props.items;
          if (this.state.active) {
            t.preventDefault();
            var r = this.state.activateIndex - 1;
            0 > r && (r = a.length ? a.length - 1 : 0),
              this.activateMenuItem(r);
          }
        }),
        (a.handleDownArrow = function e(t) {
          var a = this.props.items;
          if (this.state.active) {
            t.preventDefault();
            var r = this.state.activateIndex + 1;
            r >= a.length && (r = 0), this.activateMenuItem(r);
          }
        }),
        (a.handleTab = function e(t) {
          this.state.active &&
            (t.preventDefault(),
            this.commitSelection(this.state.activateIndex));
        }),
        (a.handleReturn = function e(t) {
          t.preventDefault(),
            this.state.active
              ? this.commitSelection(this.state.activateIndex)
              : this.setState({ active: !0 });
        }),
        (a.handleEscape = function e() {
          this.setState({ active: !1, activateIndex: 0 });
        }),
        (a.handleKeyPress = function t(e) {
          27 === e.which
            ? this.handleEscape(e)
            : 9 === e.which
            ? this.handleTab(e)
            : 13 === e.which
            ? this.handleReturn(e)
            : 38 === e.which
            ? this.handleUpArrow(e)
            : 40 === e.which && this.handleDownArrow(e);
        }),
        (a.handleSelectItem = function t(e) {
          this.commitSelection(e);
        }),
        (a.renderMenu = function e() {
          var t = this;
          if (!this.state.active) return null;
          var a = this.props.items;
          return be.createElement(
            ga,
            null,
            a.map(function(e, a) {
              return be.createElement(ma, {
                item: e,
                index: a,
                onSelectItem: t.handleSelectItem,
                activateIndex: t.state.activateIndex,
                key: 'item-' + a++
              });
            })
          );
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.inline,
            n = a.className;
          return be.createElement(
            ra,
            {
              className: st(
                n,
                {
                  'video-react-menu-button-inline': !!r,
                  'video-react-menu-button-popup': !r,
                  'video-react-menu-button-active': this.state.active
                },
                'video-react-control video-react-button video-react-menu-button'
              ),
              role: 'button',
              tabIndex: '0',
              ref: function a(e) {
                t.menuButton = e;
              },
              onClick: this.handleClick,
              onFocus: this.handleFocus,
              onBlur: this.handleBlur
            },
            this.props.children,
            this.renderMenu()
          );
        }),
        t
      );
    })(o.Component);
  (ha.propTypes = ya), (ha.displayName = 'MenuButton');
  var Ea = {
      player: dt.object,
      actions: dt.object,
      rates: dt.array,
      className: dt.string
    },
    Ta = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleSelectItem = r.handleSelectItem.bind(I(r))),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.handleSelectItem = function t(e) {
          var a = this.props,
            r = a.rates,
            n = a.actions;
          0 <= e && e < r.length && n.changeRate(r[e]);
        }),
        (a.render = function e() {
          var t = this.props,
            a = t.rates,
            r = t.player,
            n = a.map(function(e) {
              return { label: e + 'x', value: e };
            }),
            o = a.indexOf(r.playbackRate) || 0;
          return be.createElement(
            ha,
            {
              className: st('video-react-playback-rate', this.props.className),
              onSelectItem: this.handleSelectItem,
              items: n,
              selectedIndex: o
            },
            be.createElement(
              'span',
              { className: 'video-react-control-text' },
              'Playback Rate'
            ),
            be.createElement(
              'div',
              { className: 'video-react-playback-rate-value' },
              r.playbackRate.toFixed(2) + 'x'
            )
          );
        }),
        t
      );
    })(o.Component);
  (Ta.propTypes = Ea),
    (Ta.defaultProps = { rates: [2, 1.5, 1.25, 1, 0.5, 0.25] }),
    (Ta.displayName = 'PlaybackRateMenuButton');
  var va = ['className'],
    Sa = {
      children: dt.any,
      autoHide: dt.bool,
      autoHideTime: dt.number,
      disableDefaultControls: dt.bool,
      disableCompletely: dt.bool,
      className: dt.string
    },
    ba = (function(e) {
      function t(t) {
        var a;
        return (
          (a = e.call(this, t) || this),
          (a.getDefaultChildren = a.getDefaultChildren.bind(I(a))),
          (a.getFullChildren = a.getFullChildren.bind(I(a))),
          a
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.getDefaultChildren = function e() {
          return [
            be.createElement(Wt, { key: 'play-toggle', order: 1 }),
            be.createElement(ua, { key: 'volume-menu-button', order: 4 }),
            be.createElement(he, { key: 'current-time-display', order: 5.1 }),
            be.createElement(Te, { key: 'time-divider', order: 5.2 }),
            be.createElement(Ee, { key: 'duration-display', order: 5.3 }),
            be.createElement(Ht, { key: 'progress-control', order: 6 }),
            be.createElement(Qt, { key: 'fullscreen-toggle', order: 8 })
          ];
        }),
        (a.getFullChildren = function e() {
          return [
            be.createElement(Wt, { key: 'play-toggle', order: 1 }),
            be.createElement(Xt, { key: 'replay-control', order: 2 }),
            be.createElement(zt, { key: 'forward-control', order: 3 }),
            be.createElement(ua, { key: 'volume-menu-button', order: 4 }),
            be.createElement(he, { key: 'current-time-display', order: 5 }),
            be.createElement(Te, { key: 'time-divider', order: 6 }),
            be.createElement(Ee, { key: 'duration-display', order: 7 }),
            be.createElement(Ht, { key: 'progress-control', order: 8 }),
            be.createElement(ye, { key: 'remaining-time-display', order: 9 }),
            be.createElement(Ta, {
              rates: [1, 1.25, 1.5, 2],
              key: 'playback-rate',
              order: 10
            }),
            be.createElement(Qt, { key: 'fullscreen-toggle', order: 11 })
          ];
        }),
        (a.getChildren = function e() {
          var t = be.Children.toArray(this.props.children),
            a = this.props.disableDefaultControls
              ? []
              : this.getDefaultChildren(),
            r = this.props,
            n = r.className,
            o = P(r, va);
          return ie(a, t, o);
        }),
        (a.render = function e() {
          var t = this.props,
            a = t.autoHide,
            r = t.className,
            n = t.disableCompletely,
            o = this.getChildren();
          return n
            ? null
            : be.createElement(
                'div',
                {
                  className: st(
                    'video-react-control-bar',
                    { 'video-react-control-bar-auto-hide': a },
                    r
                  )
                },
                o
              );
        }),
        t
      );
    })(o.Component);
  (ba.propTypes = Sa),
    (ba.defaultProps = { autoHide: !0, disableCompletely: !1 }),
    (ba.displayName = 'ControlBar');
  var _a =
      'undefined' != typeof window && window.navigator
        ? window.navigator.userAgent
        : '',
    Ra = /iPad/i.test(_a),
    Aa = /iPhone/i.test(_a) && !Ra,
    ka = /iPod/i.test(_a),
    Da = ['className', 'children'],
    La = {
      children: dt.any,
      width: dt.oneOfType([dt.string, dt.number]),
      height: dt.oneOfType([dt.string, dt.number]),
      fluid: dt.bool,
      muted: dt.bool,
      playsInline: dt.bool,
      aspectRatio: dt.string,
      className: dt.string,
      videoId: dt.string,
      startTime: dt.number,
      loop: dt.bool,
      autoPlay: dt.bool,
      src: dt.string,
      poster: dt.string,
      preload: dt.oneOf(['auto', 'metadata', 'none']),
      onLoadStart: dt.func,
      onWaiting: dt.func,
      onCanPlay: dt.func,
      onCanPlayThrough: dt.func,
      onPlaying: dt.func,
      onEnded: dt.func,
      onSeeking: dt.func,
      onSeeked: dt.func,
      onPlay: dt.func,
      onPause: dt.func,
      onProgress: dt.func,
      onDurationChange: dt.func,
      onError: dt.func,
      onSuspend: dt.func,
      onAbort: dt.func,
      onEmptied: dt.func,
      onStalled: dt.func,
      onLoadedMetadata: dt.func,
      onLoadedData: dt.func,
      onTimeUpdate: dt.func,
      onRateChange: dt.func,
      onVolumeChange: dt.func,
      store: dt.object
    },
    Ca = (function(e) {
      function t(t) {
        var a;
        return (
          (a = e.call(this, t) || this),
          (a.controlsHideTimer = null),
          (a.video = null),
          (a.manager = new mt(t.store)),
          (a.actions = a.manager.getActions()),
          a.manager.subscribeToPlayerStateChange(
            a.handleStateChange.bind(I(a))
          ),
          (a.getStyle = a.getStyle.bind(I(a))),
          (a.handleResize = a.handleResize.bind(I(a))),
          (a.getChildren = a.getChildren.bind(I(a))),
          (a.handleMouseMove = se(a.handleMouseMove.bind(I(a)), 250)),
          (a.handleMouseDown = a.handleMouseDown.bind(I(a))),
          (a.startControlsTimer = a.startControlsTimer.bind(I(a))),
          (a.handleFullScreenChange = a.handleFullScreenChange.bind(I(a))),
          (a.handleKeyDown = a.handleKeyDown.bind(I(a))),
          (a.handleFocus = a.handleFocus.bind(I(a))),
          (a.handleBlur = a.handleBlur.bind(I(a))),
          a
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {
          this.handleResize(),
            window.addEventListener('resize', this.handleResize),
            ut.addEventListener(this.handleFullScreenChange);
        }),
        (a.componentWillUnmount = function e() {
          window.removeEventListener('resize', this.handleResize),
            ut.removeEventListener(this.handleFullScreenChange),
            this.controlsHideTimer &&
              window.clearTimeout(this.controlsHideTimer);
        }),
        (a.getDefaultChildren = function t(e) {
          var a = this;
          return [
            be.createElement(
              Pt,
              {
                ref: function t(e) {
                  (a.video = e), (a.manager.video = a.video);
                },
                key: 'video',
                order: 0
              },
              e
            ),
            be.createElement(ae, { key: 'poster-image', order: 1 }),
            be.createElement(te, { key: 'loading-spinner', order: 2 }),
            be.createElement(Nt, { key: 'bezel', order: 3 }),
            be.createElement(ht, { key: 'big-play-button', order: 4 }),
            be.createElement(ba, { key: 'control-bar', order: 5 }),
            be.createElement(Ot, { key: 'shortcut', order: 99 })
          ];
        }),
        (a.getChildren = function t(e) {
          var a = e.className,
            r = e.children,
            n = P(e, Da),
            o = be.Children.toArray(this.props.children).filter(function(t) {
              return !oe(t);
            }),
            i = this.getDefaultChildren(r);
          return ie(i, o, n);
        }),
        (a.setWidthOrHeight = function r(e, t, a) {
          var n, o;
          'string' == typeof a
            ? 'auto' === a
              ? (o = 'auto')
              : a.match(/\d+%/) && (o = a)
            : 'number' == typeof a && (o = a + 'px'),
            Object.assign(e, ((n = {}), (n[t] = o), n));
        }),
        (a.getStyle = function e() {
          var t = this.props,
            a = t.fluid,
            r = t.aspectRatio,
            n = t.height,
            o = t.width,
            i = this.manager.getState(),
            d = i.player,
            s = {},
            l,
            c,
            u;
          u =
            void 0 !== r && 'auto' !== r
              ? r
              : d.videoWidth
              ? d.videoWidth + ':' + d.videoHeight
              : '16:9';
          var p = u.split(':'),
            g = p[1] / p[0];
          return (
            (l =
              void 0 === o ? (void 0 === n ? d.videoWidth || 400 : n / g) : o),
            (c = void 0 === n ? l * g : n),
            a
              ? (s.paddingTop = 100 * g + '%')
              : (this.setWidthOrHeight(s, 'width', l),
                this.setWidthOrHeight(s, 'height', c)),
            s
          );
        }),
        (a.getState = function e() {
          return this.manager.getState();
        }),
        (a.play = function e() {
          this.video.play();
        }),
        (a.pause = function e() {
          this.video.pause();
        }),
        (a.load = function e() {
          this.video.load();
        }),
        (a.addTextTrack = function e() {
          var t;
          (t = this.video).addTextTrack.apply(t, arguments);
        }),
        (a.canPlayType = function e() {
          var t;
          (t = this.video).canPlayType.apply(t, arguments);
        }),
        (a.seek = function t(e) {
          this.video.seek(e);
        }),
        (a.forward = function t(e) {
          this.video.forward(e);
        }),
        (a.replay = function t(e) {
          this.video.replay(e);
        }),
        (a.toggleFullscreen = function e() {
          this.video.toggleFullscreen();
        }),
        (a.subscribeToStateChange = function t(e) {
          return this.manager.subscribeToPlayerStateChange(e);
        }),
        (a.handleResize = function e() {}),
        (a.handleFullScreenChange = function t(e) {
          e.target === this.manager.rootElement &&
            this.actions.handleFullscreenChange(ut.isFullscreen);
        }),
        (a.handleMouseDown = function e() {
          this.startControlsTimer();
        }),
        (a.handleMouseMove = function e() {
          this.startControlsTimer();
        }),
        (a.handleKeyDown = function e() {
          this.startControlsTimer();
        }),
        (a.startControlsTimer = function e() {
          var t = this,
            a = 3e3;
          be.Children.forEach(this.props.children, function(e) {
            if (be.isValidElement(e) && e.type === ba) {
              var t = e.props.autoHideTime;
              'number' == typeof t && (a = t);
            }
          }),
            this.actions.userActivate(!0),
            clearTimeout(this.controlsHideTimer),
            (this.controlsHideTimer = setTimeout(function() {
              t.actions.userActivate(!1);
            }, a));
        }),
        (a.handleStateChange = function a(e, t) {
          e.isFullscreen !== t.isFullscreen &&
            (this.handleResize(), ue(this.manager.rootElement)),
            this.forceUpdate();
        }),
        (a.handleFocus = function e() {
          this.actions.activate(!0);
        }),
        (a.handleBlur = function e() {
          this.actions.activate(!1);
        }),
        (a.render = function e() {
          var t = this,
            a = this.props.fluid,
            r = this.manager.getState(),
            n = r.player,
            o = n.paused,
            i = n.hasStarted,
            d = n.waiting,
            s = n.seeking,
            l = n.isFullscreen,
            c = n.userActivity,
            u = D({}, this.props, {
              player: n,
              actions: this.actions,
              manager: this.manager,
              store: this.manager.store,
              video: this.video ? this.video.video : null
            }),
            p = this.getChildren(u);
          return be.createElement(
            'div',
            {
              className: st(
                {
                  'video-react-controls-enabled': !0,
                  'video-react-has-started': i,
                  'video-react-paused': o,
                  'video-react-playing': !o,
                  'video-react-waiting': d,
                  'video-react-seeking': s,
                  'video-react-fluid': a,
                  'video-react-fullscreen': l,
                  'video-react-user-inactive': !c,
                  'video-react-user-active': c,
                  'video-react-workinghover': !(Aa || Ra || ka)
                },
                'video-react',
                this.props.className
              ),
              style: this.getStyle(),
              ref: function a(e) {
                t.manager.rootElement = e;
              },
              role: 'region',
              onTouchStart: this.handleMouseDown,
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleMouseMove,
              onMouseMove: this.handleMouseMove,
              onKeyDown: this.handleKeyDown,
              onFocus: this.handleFocus,
              onBlur: this.handleBlur,
              tabIndex: '-1'
            },
            p
          );
        }),
        R(t, [
          {
            key: 'playbackRate',
            get: function e() {
              return this.video.playbackRate;
            },
            set: function t(e) {
              this.video.playbackRate = e;
            }
          },
          {
            key: 'muted',
            get: function e() {
              return this.video.muted;
            },
            set: function t(e) {
              this.video.muted = e;
            }
          },
          {
            key: 'volume',
            get: function e() {
              return this.video.volume;
            },
            set: function t(e) {
              this.video.volume = e;
            }
          },
          {
            key: 'videoWidth',
            get: function e() {
              return this.video.videoWidth;
            }
          },
          {
            key: 'videoHeight',
            get: function e() {
              return this.video.videoHeight;
            }
          }
        ]),
        t
      );
    })(o.Component);
  (Ca.contextTypes = { store: dt.object }),
    (Ca.propTypes = La),
    (Ca.defaultProps = {
      fluid: !0,
      muted: !1,
      playsInline: !1,
      preload: 'auto',
      aspectRatio: 'auto'
    }),
    (Ca.displayName = 'Player');
  var Pa = (function(e) {
    function t(t, a) {
      var r;
      return (
        (r = e.call(this, t, a) || this),
        de('PlaybackRate', 'PlaybackRateMenuButton'),
        r
      );
    }
    L(t, e);
    var a = t.prototype;
    return (
      (a.render = function e() {
        return be.createElement(Ta, this.props);
      }),
      t
    );
  })(o.Component);
  Pa.displayName = 'PlaybackRate';
  var Ia = {
      player: dt.object,
      actions: dt.object,
      className: dt.string,
      offMenuText: dt.string,
      showOffMenu: dt.bool,
      kinds: dt.array
    },
    Na = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.getTextTrackItems = r.getTextTrackItems.bind(I(r))),
          (r.updateState = r.updateState.bind(I(r))),
          (r.handleSelectItem = r.handleSelectItem.bind(I(r))),
          (r.state = r.getTextTrackItems()),
          r
        );
      }
      L(t, e);
      var a = t.prototype;
      return (
        (a.componentDidUpdate = function e() {
          this.updateState();
        }),
        (a.getTextTrackItems = function e() {
          var t = this.props,
            a = t.kinds,
            r = t.player,
            n = t.offMenuText,
            o = t.showOffMenu,
            i = r.textTracks,
            d = r.activeTextTrack,
            s = { items: [], selectedIndex: 0 },
            l = Array.from(i || []);
          return 0 === l.length
            ? s
            : (o && s.items.push({ label: n || 'Off', value: null }),
              l.forEach(function(e) {
                (a.length && !a.includes(e.kind)) ||
                  s.items.push({ label: e.label, value: e.language });
              }),
              (s.selectedIndex = s.items.findIndex(function(e) {
                return d && d.language === e.value;
              })),
              -1 === s.selectedIndex && (s.selectedIndex = 0),
              s);
        }),
        (a.updateState = function e() {
          var t = this.getTextTrackItems();
          (t.selectedIndex === this.state.selectedIndex &&
            this.textTrackItemsAreEqual(t.items, this.state.items)) ||
            this.setState(t);
        }),
        (a.textTrackItemsAreEqual = function a(e, t) {
          if (e.length !== t.length) return !1;
          for (var r = 0; r < e.length; r++)
            if (!t[r] || e[r].label !== t[r].label || e[r].value !== t[r].value)
              return !1;
          return !0;
        }),
        (a.handleSelectItem = function t(e) {
          var a = this.props,
            r = a.player,
            n = a.actions,
            o = a.showOffMenu,
            i = r.textTracks;
          Array.from(i).forEach(function(t, a) {
            e === (o ? a + 1 : a)
              ? ((t.mode = 'showing'), n.activateTextTrack(t))
              : (t.mode = 'hidden');
          });
        }),
        (a.render = function e() {
          var t = this.state,
            a = t.items,
            r = t.selectedIndex;
          return be.createElement(
            ha,
            {
              className: st('video-react-closed-caption', this.props.className),
              onSelectItem: this.handleSelectItem,
              items: a,
              selectedIndex: r
            },
            be.createElement(
              'span',
              { className: 'video-react-control-text' },
              'Closed Caption'
            )
          );
        }),
        t
      );
    })(o.Component);
  (Na.propTypes = Ia),
    (Na.defaultProps = {
      offMenuText: 'Off',
      showOffMenu: !0,
      kinds: ['captions', 'subtitles']
    }),
    (Na.displayName = 'ClosedCaptionButton'),
    (a.Bezel = Nt),
    (a.BigPlayButton = ht),
    (a.ClosedCaptionButton = Na),
    (a.ControlBar = ba),
    (a.CurrentTimeDisplay = he),
    (a.DurationDisplay = Ee),
    (a.ForwardControl = zt),
    (a.FullscreenToggle = Qt),
    (a.LoadProgressBar = fe),
    (a.LoadingSpinner = te),
    (a.MenuButton = ha),
    (a.MouseTimeDisplay = me),
    (a.PlayProgressBar = ge),
    (a.PlayToggle = Wt),
    (a.PlaybackRate = Pa),
    (a.PlaybackRateMenuButton = Ta),
    (a.Player = Ca),
    (a.PosterImage = ae),
    (a.ProgressControl = Ht),
    (a.RemainingTimeDisplay = ye),
    (a.ReplayControl = Xt),
    (a.SeekBar = Gt),
    (a.Shortcut = Ot),
    (a.Slider = wt),
    (a.TimeDivider = Te),
    (a.Video = Pt),
    (a.VolumeMenuButton = ua),
    (a.operationReducer = J),
    (a.playerActions = pt),
    (a.playerReducer = Z),
    (a.videoActions = lt),
    Object.defineProperty(a, '__esModule', { value: !0 });
});
//# sourceMappingURL=video-react.min.js.map
