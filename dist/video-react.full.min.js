(function(e, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? t(exports, require('react'))
    : 'function' == typeof define && define.amd
    ? define(['exports', 'react'], t)
    : ((e = e || self), t((e['video-react'] = {}), e.React));
})(this, function(a, o) {
  'use strict';
  var s = Math.ceil,
    u = Math.exp,
    T = Number.POSITIVE_INFINITY,
    E = Number.isNaN,
    S = Math.round,
    L = Math.min,
    R = Math.abs,
    D = Number.MAX_SAFE_INTEGER,
    I = Math.pow,
    C = Math.max,
    P = Math.floor,
    _ = String.fromCharCode;
  function F(e, t) {
    for (var a = 0, r; a < t.length; a++)
      (r = t[a]),
        (r.enumerable = r.enumerable || !1),
        (r.configurable = !0),
        'value' in r && (r.writable = !0),
        Object.defineProperty(e, Z(r.key), r);
  }
  function N(e, t, a) {
    return (
      t && F(e.prototype, t),
      a && F(e, a),
      Object.defineProperty(e, 'prototype', { writable: !1 }),
      e
    );
  }
  function O() {
    return (
      (O = Object.assign
        ? Object.assign.bind()
        : function(e) {
            for (var t = 1, a; t < arguments.length; t++)
              for (var r in ((a = arguments[t]), a))
                Object.prototype.hasOwnProperty.call(a, r) && (e[r] = a[r]);
            return e;
          }),
      O.apply(this, arguments)
    );
  }
  function M(e, t) {
    (e.prototype = Object.create(t.prototype)),
      (e.prototype.constructor = e),
      U(e, t);
  }
  function B(e) {
    return (
      (B = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function t(e) {
            return e.__proto__ || Object.getPrototypeOf(e);
          }),
      B(e)
    );
  }
  function U(e, t) {
    return (
      (U = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function a(e, t) {
            return (e.__proto__ = t), e;
          }),
      U(e, t)
    );
  }
  function G() {
    if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
    if (Reflect.construct.sham) return !1;
    if ('function' == typeof Proxy) return !0;
    try {
      return (
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function() {})
        ),
        !0
      );
    } catch (t) {
      return !1;
    }
  }
  function K(e, t, a) {
    return (
      (K = G()
        ? Reflect.construct.bind()
        : function n(e, t, r) {
            var o = [null];
            o.push.apply(o, t);
            var a = Function.bind.apply(e, o),
              i = new a();
            return r && U(i, r.prototype), i;
          }),
      K.apply(null, arguments)
    );
  }
  function H(e) {
    return -1 !== Function.toString.call(e).indexOf('[native code]');
  }
  function V(e) {
    var t = 'function' == typeof Map ? new Map() : void 0;
    return (
      (V = function a(e) {
        function r() {
          return K(e, arguments, B(this).constructor);
        }
        if (null === e || !H(e)) return e;
        if ('function' != typeof e)
          throw new TypeError(
            'Super expression must either be null or a function'
          );
        if ('undefined' != typeof t) {
          if (t.has(e)) return t.get(e);
          t.set(e, r);
        }
        return (
          (r.prototype = Object.create(e.prototype, {
            constructor: {
              value: r,
              enumerable: !1,
              writable: !0,
              configurable: !0
            }
          })),
          U(r, e)
        );
      }),
      V(e)
    );
  }
  function W(e, t) {
    if (null == e) return {};
    var a = {},
      r = Object.keys(e),
      n,
      o;
    for (o = 0; o < r.length; o++)
      (n = r[o]), 0 <= t.indexOf(n) || (a[n] = e[n]);
    return a;
  }
  function Y(e) {
    if (void 0 === e)
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      );
    return e;
  }
  function j(e, t) {
    if (e) {
      if ('string' == typeof e) return X(e, t);
      var a = Object.prototype.toString.call(e).slice(8, -1);
      return (
        'Object' === a && e.constructor && (a = e.constructor.name),
        'Map' === a || 'Set' === a
          ? Array.from(e)
          : 'Arguments' === a ||
            /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)
          ? X(e, t)
          : void 0
      );
    }
  }
  function X(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for (var a = 0, r = Array(t); a < t; a++) r[a] = e[a];
    return r;
  }
  function Q(e, t) {
    var a =
      ('undefined' != typeof Symbol && e[Symbol.iterator]) || e['@@iterator'];
    if (a) return (a = a.call(e)).next.bind(a);
    if (
      Array.isArray(e) ||
      (a = j(e)) ||
      (t && e && 'number' == typeof e.length)
    ) {
      a && (e = a);
      var r = 0;
      return function() {
        return r >= e.length ? { done: !0 } : { done: !1, value: e[r++] };
      };
    }
    throw new TypeError(
      'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    );
  }
  function $(e, t) {
    if ('object' != typeof e || null === e) return e;
    var a = e[Symbol.toPrimitive];
    if (a !== void 0) {
      var r = a.call(e, t || 'default');
      if ('object' != typeof r) return r;
      throw new TypeError('@@toPrimitive must return a primitive value.');
    }
    return ('string' === t ? String : Number)(e);
  }
  function Z(e) {
    var t = $(e, 'string');
    return 'symbol' == typeof t ? t : t + '';
  }
  function J(e, t) {
    return (t = { exports: {} }), e(t, t.exports), t.exports;
  }
  function ee(t) {
    if ('object' == typeof t && null !== t) {
      var o = t.$$typeof;
      switch (o) {
        case b:
          switch (((t = t.type), t)) {
            case k:
            case l:
            case d:
            case f:
            case e:
            case n:
              return t;
            default:
              switch (((t = t && t.$$typeof), t)) {
                case h:
                case m:
                case r:
                case q:
                case g:
                  return t;
                default:
                  return o;
              }
          }
        case c:
          return o;
      }
    }
  }
  function i(e) {
    return ee(e) === l;
  }
  function A(e) {
    if (null === e || e === void 0)
      throw new TypeError(
        'Object.assign cannot be called with null or undefined'
      );
    return Object(e);
  }
  function z() {}
  function te() {}
  function ae(e) {
    return (
      'Minified Redux error #' +
      e +
      '; visit https://redux.js.org/Errors?code=' +
      e +
      ' for the full message or use the non-minified dev environment for full errors. '
    );
  }
  function re(e) {
    if ('object' != typeof e || null === e) return !1;
    for (var t = e; null !== Object.getPrototypeOf(t); )
      t = Object.getPrototypeOf(t);
    return Object.getPrototypeOf(e) === t;
  }
  function ne(e, t, a) {
    function r() {
      f === g && (f = g.slice());
    }
    function n() {
      if (p) throw new Error(ae(3));
      return u;
    }
    function o(e) {
      if ('function' != typeof e) throw new Error(ae(4));
      if (p) throw new Error(ae(5));
      var t = !0;
      return (
        r(),
        f.push(e),
        function a() {
          if (t) {
            if (p) throw new Error(ae(6));
            (t = !1), r();
            var n = f.indexOf(e);
            f.splice(n, 1), (g = null);
          }
        }
      );
    }
    function i(e) {
      if (!re(e)) throw new Error(ae(7));
      if ('undefined' == typeof e.type) throw new Error(ae(8));
      if (p) throw new Error(ae(9));
      try {
        (p = !0), (u = c(u, e));
      } finally {
        p = !1;
      }
      for (var t = (g = f), a = 0, r; a < t.length; a++) (r = t[a]), r();
      return e;
    }
    function d(e) {
      if ('function' != typeof e) throw new Error(ae(10));
      (c = e), i({ type: go.REPLACE });
    }
    function s() {
      var e = o,
        t;
      return (
        (t = {
          subscribe: function a(t) {
            function r() {
              t.next && t.next(n());
            }
            if ('object' != typeof t || null === t) throw new Error(ae(11));
            r();
            var o = e(r);
            return { unsubscribe: o };
          }
        }),
        (t[co] = function() {
          return this;
        }),
        t
      );
    }
    var l;
    if (
      ('function' == typeof t && 'function' == typeof a) ||
      ('function' == typeof a && 'function' == typeof arguments[3])
    )
      throw new Error(ae(0));
    if (
      ('function' == typeof t &&
        'undefined' == typeof a &&
        ((a = t), (t = void 0)),
      'undefined' != typeof a)
    ) {
      if ('function' != typeof a) throw new Error(ae(1));
      return a(ne)(e, t);
    }
    if ('function' != typeof e) throw new Error(ae(2));
    var c = e,
      u = t,
      g = [],
      f = g,
      p = !1;
    return (
      i({ type: go.INIT }),
      (l = { dispatch: i, subscribe: o, getState: n, replaceReducer: d }),
      (l[co] = s),
      l
    );
  }
  function oe(e) {
    return (
      void 0 === e && (e = { action: 'play', source: '' }),
      this.video.play(),
      { type: 'video-react/OPERATE', operation: e }
    );
  }
  function ie(e) {
    return (
      void 0 === e && (e = { action: 'pause', source: '' }),
      this.video.pause(),
      { type: 'video-react/OPERATE', operation: e }
    );
  }
  function de(e) {
    return (
      void 0 === e && (e = { action: 'toggle-play', source: '' }),
      this.video.togglePlay(),
      { type: 'video-react/OPERATE', operation: e }
    );
  }
  function se(e, t) {
    return (
      void 0 === t && (t = { action: 'seek', source: '' }),
      this.video.seek(e),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function le(e, t) {
    return (
      void 0 === t && (t = { action: 'forward-' + e, source: '' }),
      this.video.forward(e),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function ce(e, t) {
    return (
      void 0 === t && (t = { action: 'replay-' + e, source: '' }),
      this.video.replay(e),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function ue(e, t) {
    return (
      void 0 === t && (t = { action: 'change-rate', source: '' }),
      (this.video.playbackRate = e),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function ge(e, t) {
    void 0 === t && (t = { action: 'change-volume', source: '' });
    var a = e;
    return (
      0 > e && (a = 0),
      1 < e && (a = 1),
      (this.video.volume = a),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function fe(e, t) {
    return (
      void 0 === t && (t = { action: e ? 'muted' : 'unmuted', source: '' }),
      (this.video.muted = e),
      { type: 'video-react/OPERATE', operation: t }
    );
  }
  function pe(e) {
    return mo.enabled
      ? (mo.isFullscreen ? mo.exit() : mo.request(this.rootElement),
        {
          type: 'video-react/OPERATE',
          operation: { action: 'toggle-fullscreen', source: '' }
        })
      : {
          type: 'video-react/FULLSCREEN_CHANGE',
          isFullscreen: !e.isFullscreen
        };
  }
  function me(e, t) {
    switch ((void 0 === e && (e = ho), t.type)) {
      case 'video-react/USER_ACTIVATE':
        return O({}, e, { userActivity: t.activity });
      case 'video-react/PLAYER_ACTIVATE':
        return O({}, e, { isActive: t.activity });
      case 'video-react/FULLSCREEN_CHANGE':
        return O({}, e, { isFullscreen: !!t.isFullscreen });
      case 'video-react/SEEKING_TIME':
        return O({}, e, { seekingTime: t.time });
      case 'video-react/END_SEEKING':
        return O({}, e, { seekingTime: 0 });
      case 'video-react/LOAD_START':
        return O({}, e, t.videoProps, { hasStarted: !1, ended: !1 });
      case 'video-react/CAN_PLAY':
        return O({}, e, t.videoProps, { waiting: !1 });
      case 'video-react/WAITING':
        return O({}, e, t.videoProps, { waiting: !0 });
      case 'video-react/CAN_PLAY_THROUGH':
      case 'video-react/PLAYING':
        return O({}, e, t.videoProps, { waiting: !1 });
      case 'video-react/PLAY':
        return O({}, e, t.videoProps, {
          ended: !1,
          paused: !1,
          autoPaused: !1,
          waiting: !1,
          hasStarted: !0
        });
      case 'video-react/PAUSE':
        return O({}, e, t.videoProps, { paused: !0 });
      case 'video-react/END':
        return O({}, e, t.videoProps, { ended: !0 });
      case 'video-react/SEEKING':
        return O({}, e, t.videoProps, { seeking: !0 });
      case 'video-react/SEEKED':
        return O({}, e, t.videoProps, { seeking: !1 });
      case 'video-react/ERROR':
        return O({}, e, t.videoProps, { error: 'UNKNOWN ERROR', ended: !0 });
      case 'video-react/DURATION_CHANGE':
      case 'video-react/TIME_UPDATE':
      case 'video-react/VOLUME_CHANGE':
      case 'video-react/PROGRESS_CHANGE':
      case 'video-react/RATE_CHANGE':
      case 'video-react/SUSPEND':
      case 'video-react/ABORT':
      case 'video-react/EMPTIED':
      case 'video-react/STALLED':
      case 'video-react/LOADED_META_DATA':
      case 'video-react/LOADED_DATA':
      case 'video-react/RESIZE':
        return O({}, e, t.videoProps);
      case 'video-react/ACTIVATE_TEXT_TRACK':
        return O({}, e, { activeTextTrack: t.textTrack });
      default:
        return e;
    }
  }
  function ye(e, t) {
    switch ((void 0 === e && (e = To), t.type)) {
      case 'video-react/OPERATE':
        return O({}, e, {
          count: e.count + 1,
          operation: O({}, e.operation, t.operation)
        });
      default:
        return e;
    }
  }
  function he(e, t) {
    return (
      void 0 === e && (e = {}),
      { player: me(e.player, t), operation: ye(e.operation, t) }
    );
  }
  function Te(e) {
    var t = e.player,
      a = e.className;
    return t.error
      ? null
      : Ln.createElement('div', {
          className: lo('video-react-loading-spinner', a)
        });
  }
  function Ee(e) {
    var t = e.poster,
      a = e.player,
      r = e.actions,
      n = e.className;
    return !t || a.hasStarted
      ? null
      : Ln.createElement('div', {
          className: lo('video-react-poster', n),
          style: { backgroundImage: 'url("' + t + '")' },
          onClick: function e() {
            a.paused && r.play();
          }
        });
  }
  function ve(e, t) {
    void 0 === e && (e = 0), void 0 === t && (t = e);
    var a = P(e % 60),
      r = P((e / 60) % 60),
      n = P(e / 3600),
      o = P((t / 60) % 60),
      i = P(t / 3600);
    return (
      (ko(e) || e === 1 / 0) && ((n = '-'), (r = '-'), (a = '-')),
      (n = 0 < n || 0 < i ? n + ':' : ''),
      (r = ((n || 10 <= o) && 10 > r ? '0' + r : r) + ':'),
      (a = 10 > a ? '0' + a : a),
      n + r + a
    );
  }
  function Se(e) {
    return (
      !!(e.props && e.props.isVideoChild) ||
      'source' === e.type ||
      'track' === e.type
    );
  }
  function Le(t, a, r, n) {
    void 0 === n && (n = 1);
    var o = Ln.Children.toArray(a),
      i = r.order,
      d = W(r, Ro);
    return o
      .filter(function(t) {
        return !t.props.disabled;
      })
      .concat(
        t.filter(function(e) {
          return !Do(o, function(t) {
            return Io(t, e);
          });
        })
      )
      .map(function(a) {
        var r = Do(t, function(e) {
            return Io(e, a);
          }),
          n = r ? r.props : {},
          o = O({}, d, n, a.props),
          i = Ln.cloneElement(a, o, a.props.children);
        return i;
      })
      .sort(function(e, t) {
        return (e.props.order || n) - (t.props.order || n);
      });
  }
  function Ae(e, t) {
    console.warn(
      'WARNING: ' +
        e +
        ' will be deprecated soon! Please use ' +
        t +
        ' instead.'
    );
  }
  function Re(e, t) {
    var a = arguments,
      r = !1;
    return function() {
      r ||
        (e.apply(void 0, a),
        (r = !0),
        setTimeout(function() {
          r = !1;
        }, t));
    };
  }
  function ke(e, t) {
    var a = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var r = Object.getOwnPropertySymbols(e);
      t &&
        (r = r.filter(function(t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })),
        a.push.apply(a, r);
    }
    return a;
  }
  function De(e) {
    for (var t = 1, a; t < arguments.length; t++)
      (a = null == arguments[t] ? {} : arguments[t]),
        t % 2
          ? ke(Object(a), !0).forEach(function(t) {
              Ie(e, t, a[t]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(a))
          : ke(Object(a)).forEach(function(t) {
              Object.defineProperty(
                e,
                t,
                Object.getOwnPropertyDescriptor(a, t)
              );
            });
    return e;
  }
  function Ie(e, t, a) {
    return (
      (t = Pe(t)),
      t in e
        ? Object.defineProperty(e, t, {
            value: a,
            enumerable: !0,
            configurable: !0,
            writable: !0
          })
        : (e[t] = a),
      e
    );
  }
  function be() {
    return (
      (be = Object.assign
        ? Object.assign.bind()
        : function(e) {
            for (var t = 1, a; t < arguments.length; t++)
              for (var r in ((a = arguments[t]), a))
                Object.prototype.hasOwnProperty.call(a, r) && (e[r] = a[r]);
            return e;
          }),
      be.apply(this, arguments)
    );
  }
  function Ce(e, t) {
    if ('object' != typeof e || null === e) return e;
    var a = e[Symbol.toPrimitive];
    if (a !== void 0) {
      var r = a.call(e, t || 'default');
      if ('object' != typeof r) return r;
      throw new TypeError('@@toPrimitive must return a primitive value.');
    }
    return ('string' === t ? String : Number)(e);
  }
  function Pe(e) {
    var t = Ce(e, 'string');
    return 'symbol' == typeof t ? t : t + '';
  }
  function _e(e) {
    var t = self.console[e];
    return t ? t.bind(self.console, '[' + e + '] >') : Oo;
  }
  function xe(e) {
    for (
      var t = arguments.length, a = Array(1 < t ? t - 1 : 0), r = 1;
      r < t;
      r++
    )
      a[r - 1] = arguments[r];
    a.forEach(function(t) {
      wo[t] = e[t] ? e[t].bind(e) : _e(t);
    });
  }
  function Fe(e, t) {
    if ((self.console && !0 === e) || 'object' == typeof e) {
      xe(e, 'debug', 'log', 'info', 'warn', 'error');
      try {
        wo.log('Debug logs enabled for "' + t + '" in hls.js version 1.4.9');
      } catch (t) {
        wo = Mo;
      }
    } else wo = Mo;
  }
  function Ne(e) {
    return (
      'ID' !== e &&
      'CLASS' !== e &&
      'START-DATE' !== e &&
      'DURATION' !== e &&
      'END-DATE' !== e &&
      'END-ON-NEXT' !== e
    );
  }
  function Oe(e) {
    return 'SCTE35-OUT' === e || 'SCTE35-IN' === e;
  }
  function Me(e) {
    return Uint8Array.from(atob(e), function(e) {
      return e.charCodeAt(0);
    });
  }
  function we(e) {
    var t = Ge(e).subarray(0, 16),
      a = new Uint8Array(16);
    return a.set(t, 16 - t.length), a;
  }
  function Be(e) {
    var t = function r(e, t, a) {
      var n = e[t];
      (e[t] = e[a]), (e[a] = n);
    };
    t(e, 0, 3), t(e, 1, 2), t(e, 4, 5), t(e, 6, 7);
  }
  function Ue(e) {
    var t = e.split(':'),
      a = null;
    if ('data' === t[0] && 2 === t.length) {
      var r = t[1].split(';'),
        n = r[r.length - 1].split(',');
      if (2 === n.length) {
        var o = 'base64' === n[0],
          i = n[1];
        o ? (r.splice(-1, 1), (a = Me(i))) : (a = we(i));
      }
    }
    return a;
  }
  function Ge(e) {
    return Uint8Array.from(unescape(encodeURIComponent(e)), function(e) {
      return e.charCodeAt(0);
    });
  }
  function Ke(e) {
    return e === Qo.FAIRPLAY
      ? Xo.FAIRPLAY
      : e === Qo.PLAYREADY
      ? Xo.PLAYREADY
      : e === Qo.WIDEVINE
      ? Xo.WIDEVINE
      : e === Qo.CLEARKEY
      ? Xo.CLEARKEY
      : void 0;
  }
  function He(e) {
    if (e === $o.WIDEVINE) return Xo.WIDEVINE;
  }
  function Ve(e) {
    return e === Xo.FAIRPLAY
      ? Qo.FAIRPLAY
      : e === Xo.PLAYREADY
      ? Qo.PLAYREADY
      : e === Xo.WIDEVINE
      ? Qo.WIDEVINE
      : e === Xo.CLEARKEY
      ? Qo.CLEARKEY
      : void 0;
  }
  function We(e) {
    var t = e.drmSystems,
      a = e.widevineLicenseUrl,
      r = t
        ? [Xo.FAIRPLAY, Xo.WIDEVINE, Xo.PLAYREADY, Xo.CLEARKEY].filter(function(
            e
          ) {
            return !!t[e];
          })
        : [];
    return !r[Xo.WIDEVINE] && a && r.push(Xo.WIDEVINE), r;
  }
  function Ye(e, t, a, r) {
    var n;
    switch (e) {
      case Xo.FAIRPLAY:
        n = ['cenc', 'sinf'];
        break;
      case Xo.WIDEVINE:
      case Xo.PLAYREADY:
        n = ['cenc'];
        break;
      case Xo.CLEARKEY:
        n = ['cenc', 'keyids'];
        break;
      default:
        throw new Error('Unknown key-system: ' + e);
    }
    return qe(n, t, a, r);
  }
  function qe(e, t, a, r) {
    var n = {
      initDataTypes: e,
      persistentState: r.persistentState || 'not-allowed',
      distinctiveIdentifier: r.distinctiveIdentifier || 'not-allowed',
      sessionTypes: r.sessionTypes || [r.sessionType || 'temporary'],
      audioCapabilities: t.map(function(e) {
        return {
          contentType: 'audio/mp4; codecs="' + e + '"',
          robustness: r.audioRobustness || '',
          encryptionScheme: r.audioEncryptionScheme || null
        };
      }),
      videoCapabilities: a.map(function(e) {
        return {
          contentType: 'video/mp4; codecs="' + e + '"',
          robustness: r.videoRobustness || '',
          encryptionScheme: r.videoEncryptionScheme || null
        };
      })
    };
    return [n];
  }
  function je(e, t, a) {
    return Uint8Array.prototype.slice
      ? e.slice(t, a)
      : new Uint8Array(Array.prototype.slice.call(e, t, a));
  }
  function ze() {
    return (
      Id ||
        'undefined' == typeof self.TextDecoder ||
        (Id = new self.TextDecoder('utf-8')),
      Id
    );
  }
  function Xe(e) {
    return _.apply(null, e);
  }
  function Qe(e, t) {
    var a = (e[t] << 8) | e[t + 1];
    return 0 > a ? 65536 + a : a;
  }
  function $e(e, t) {
    var a = Ze(e, t);
    return 0 > a ? 4294967296 + a : a;
  }
  function Ze(e, t) {
    return (e[t] << 24) | (e[t + 1] << 16) | (e[t + 2] << 8) | e[t + 3];
  }
  function Je(e, t, a) {
    (e[t] = a >> 24),
      (e[t + 1] = 255 & (a >> 16)),
      (e[t + 2] = 255 & (a >> 8)),
      (e[t + 3] = 255 & a);
  }
  function et(e, t) {
    var a = [];
    if (!t.length) return a;
    for (var r = e.byteLength, n = 0; n < r; ) {
      var o = $e(e, n),
        d = Xe(e.subarray(n + 4, n + 8)),
        s = 1 < o ? n + o : r;
      if (d === t[0])
        if (1 === t.length) a.push(e.subarray(n + 8, s));
        else {
          var l = et(e.subarray(n + 8, s), t.slice(1));
          l.length && yi.apply(a, l);
        }
      n = s;
    }
    return a;
  }
  function tt(e) {
    var t = [],
      a = e[0],
      r = 8,
      n = $e(e, r);
    r += 4;
    var o = 0,
      d = 0;
    (r += 0 === a ? 8 : 16), (r += 2);
    var s = e.length + d,
      l = Qe(e, r);
    r += 2;
    for (var c = 0; c < l; c++) {
      var u = r,
        g = $e(e, u);
      u += 4;
      var f = 2147483647 & g,
        p = (2147483648 & g) >>> 31;
      if (1 === p)
        return (
          Bo.warn('SIDX has hierarchical references (not supported)'), null
        );
      var m = $e(e, u);
      (u += 4),
        t.push({
          referenceSize: f,
          subsegmentDuration: m,
          info: { duration: m / n, start: s, end: s + f - 1 }
        }),
        (s += f),
        (u += 4),
        (r = u);
    }
    return {
      earliestPresentationTime: 0,
      timescale: n,
      version: a,
      referencesCount: l,
      references: t
    };
  }
  function at(e) {
    for (var t = [], a = et(e, ['moov', 'trak']), r = 0; r < a.length; r++) {
      var n = a[r],
        o = et(n, ['tkhd'])[0];
      if (o) {
        var d = o[0],
          s = 0 === d ? 12 : 20,
          l = $e(o, s),
          c = et(n, ['mdia', 'mdhd'])[0];
        if (c) {
          (d = c[0]), (s = 0 === d ? 12 : 20);
          var u = $e(c, s),
            g = et(n, ['mdia', 'hdlr'])[0];
          if (g) {
            var f = Xe(g.subarray(8, 12)),
              p = { soun: Wo.AUDIO, vide: Wo.VIDEO }[f];
            if (p) {
              var m = et(n, ['mdia', 'minf', 'stbl', 'stsd'])[0],
                y = void 0;
              m && (y = Xe(m.subarray(12, 16))),
                (t[l] = { timescale: u, type: p }),
                (t[p] = { timescale: u, id: l, codec: y });
            }
          }
        }
      }
    }
    var h = et(e, ['moov', 'mvex', 'trex']);
    return (
      h.forEach(function(e) {
        var a = $e(e, 4),
          r = t[a];
        r && (r.default = { duration: $e(e, 12), flags: $e(e, 20) });
      }),
      t
    );
  }
  function rt(e, t) {
    if (!e || !t) return e;
    var a = t.keyId;
    if (a && t.isCommonEncryption) {
      var r = et(e, ['moov', 'trak']);
      r.forEach(function(e) {
        var t = et(e, ['mdia', 'minf', 'stbl', 'stsd'])[0],
          r = t.subarray(8),
          n = et(r, ['enca']),
          o = 0 < n.length;
        o || (n = et(r, ['encv'])),
          n.forEach(function(e) {
            var t = o ? e.subarray(28) : e.subarray(78),
              r = et(t, ['sinf']);
            r.forEach(function(e) {
              var t = nt(e);
              if (t) {
                var r = t.subarray(8, 24);
                r.some(function(e) {
                  return 0 !== e;
                }) ||
                  (Bo.log(
                    "[eme] Patching keyId in 'enc" +
                      (o ? 'a' : 'v') +
                      ">sinf>>tenc' box: " +
                      pi.hexDump(r) +
                      ' -> ' +
                      pi.hexDump(a)
                  ),
                  t.set(a, 8));
              }
            });
          });
      });
    }
    return e;
  }
  function nt(e) {
    var t = et(e, ['schm'])[0];
    if (t) {
      var a = Xe(t.subarray(4, 8));
      if ('cbcs' === a || 'cenc' === a) return et(e, ['schi', 'tenc'])[0];
    }
    return Bo.error("[eme] missing 'schm' box"), null;
  }
  function ot(e, t) {
    return et(t, ['moof', 'traf']).reduce(function(t, a) {
      var r = et(a, ['tfdt'])[0],
        n = r[0],
        o = et(a, ['tfhd']).reduce(function(t, a) {
          var o = $e(a, 4),
            i = e[o];
          if (i) {
            var d = $e(r, 4);
            if (1 === n) {
              if (4294967295 === d)
                return (
                  Bo.warn(
                    '[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time'
                  ),
                  t
                );
              (d *= 4294967296), (d += $e(r, 8));
            }
            var s = i.timescale || 9e4,
              l = d / s;
            if (isFinite(l) && (null === t || l < t)) return l;
          }
          return t;
        }, null);
      return null !== o && isFinite(o) && (null === t || o < t) ? o : t;
    }, null);
  }
  function it(e, t) {
    for (
      var a = 0, r = 0, n = 0, o = et(e, ['moof', 'traf']), d = 0;
      d < o.length;
      d++
    ) {
      var s = o[d],
        l = et(s, ['tfhd'])[0],
        c = $e(l, 4),
        u = t[c];
      if (u) {
        var g = u.default,
          f = $e(l, 0) | (null == g ? void 0 : g.flags),
          p = null == g ? void 0 : g.duration;
        8 & f && (2 & f ? (p = $e(l, 12)) : (p = $e(l, 8)));
        for (
          var m = u.timescale || 9e4, y = et(s, ['trun']), h = 0;
          h < y.length;
          h++
        ) {
          if (((a = dt(y[h])), !a && p)) {
            var T = $e(y[h], 4);
            a = p * T;
          }
          u.type === Wo.VIDEO
            ? (r += a / m)
            : u.type === Wo.AUDIO && (n += a / m);
        }
      }
    }
    if (0 === r && 0 === n) {
      for (var E = 0, v = et(e, ['sidx']), S = 0, L; S < v.length; S++)
        (L = tt(v[S])),
          null != L &&
            L.references &&
            (E += L.references.reduce(function(e, t) {
              return e + t.info.duration || 0;
            }, 0));
      return E;
    }
    return r ? r : n;
  }
  function dt(e) {
    var t = $e(e, 0),
      a = 8;
    1 & t && (a += 4), 4 & t && (a += 4);
    for (var r = 0, n = $e(e, 4), o = 0; o < n; o++) {
      if (256 & t) {
        var d = $e(e, a);
        (r += d), (a += 4);
      }
      512 & t && (a += 4), 1024 & t && (a += 4), 2048 & t && (a += 4);
    }
    return r;
  }
  function st(e, t, a) {
    et(t, ['moof', 'traf']).forEach(function(t) {
      et(t, ['tfhd']).forEach(function(r) {
        var n = $e(r, 4),
          o = e[n];
        if (o) {
          var i = o.timescale || 9e4;
          et(t, ['tfdt']).forEach(function(e) {
            var t = e[0],
              r = $e(e, 4);
            if (0 === t) (r -= a * i), (r = C(r, 0)), Je(e, 4, r);
            else {
              (r *= I(2, 32)), (r += $e(e, 8)), (r -= a * i), (r = C(r, 0));
              var n = P(r / 4294967296),
                o = P(r % 4294967296);
              Je(e, 4, n), Je(e, 8, o);
            }
          });
        }
      });
    });
  }
  function lt(e) {
    var t = { valid: null, remainder: null },
      a = et(e, ['moof']);
    if (!a) return t;
    if (2 > a.length) return (t.remainder = e), t;
    var r = a[a.length - 1];
    return (
      (t.valid = je(e, 0, r.byteOffset - 8)),
      (t.remainder = je(e, r.byteOffset - 8)),
      t
    );
  }
  function ct(e, t) {
    var a = new Uint8Array(e.length + t.length);
    return a.set(e), a.set(t, e.length), a;
  }
  function ut(e, t) {
    var a = [],
      r = t.samples,
      n = t.timescale,
      o = t.id,
      i = !1,
      d = et(r, ['moof']);
    return (
      d.map(function(d) {
        var s = d.byteOffset - 8,
          l = et(d, ['traf']);
        l.map(function(d) {
          var l = et(d, ['tfdt']).map(function(e) {
            var t = e[0],
              a = $e(e, 4);
            return 1 === t && ((a *= I(2, 32)), (a += $e(e, 8))), a / n;
          })[0];
          return (
            void 0 !== l && (e = l),
            et(d, ['tfhd']).map(function(l) {
              var c = $e(l, 4),
                u = 16777215 & $e(l, 0),
                g = 0 != (1 & u),
                f = 0 != (2 & u),
                p = 0 != (8 & u),
                m = 0,
                y = 0 != (16 & u),
                h = 0,
                T = 0 != (32 & u),
                E = 8;
              c === o &&
                (g && (E += 8),
                f && (E += 4),
                p && ((m = $e(l, E)), (E += 4)),
                y && ((h = $e(l, E)), (E += 4)),
                T && (E += 4),
                'video' === t.type && (i = gt(t.codec)),
                et(d, ['trun']).map(function(o) {
                  var d = o[0],
                    l = 16777215 & $e(o, 0),
                    c = 0 != (1 & l),
                    u = 0,
                    g = 0 != (4 & l),
                    f = 0 != (256 & l),
                    p = 0,
                    y = 0 != (512 & l),
                    T = 0,
                    E = 0 != (1024 & l),
                    v = 0 != (2048 & l),
                    S = 0,
                    L = $e(o, 4),
                    A = 8;
                  c && ((u = $e(o, A)), (A += 4)), g && (A += 4);
                  for (var R = u + s, k = 0; k < L; k++) {
                    if (
                      (f ? ((p = $e(o, A)), (A += 4)) : (p = m),
                      y ? ((T = $e(o, A)), (A += 4)) : (T = h),
                      E && (A += 4),
                      v && ((S = 0 === d ? $e(o, A) : Ze(o, A)), (A += 4)),
                      t.type === Wo.VIDEO)
                    )
                      for (var D = 0, I; D < T; ) {
                        if (((I = $e(r, R)), (R += 4), ft(i, r[R]))) {
                          var b = r.subarray(R, R + I);
                          pt(b, i ? 2 : 1, e + S / n, a);
                        }
                        (R += I), (D += I + 4);
                      }
                    e += p / n;
                  }
                }));
            })
          );
        });
      }),
      a
    );
  }
  function gt(e) {
    if (!e) return !1;
    var t = e.indexOf('.'),
      a = 0 > t ? e : e.substring(0, t);
    return 'hvc1' === a || 'hev1' === a || 'dvh1' === a || 'dvhe' === a;
  }
  function ft(e, t) {
    if (e) {
      var a = 63 & (t >> 1);
      return 39 == a || 40 === a;
    }
    var r = 31 & t;
    return 6 == r;
  }
  function pt(e, t, a, r) {
    var n = mt(e),
      o = 0;
    o += t;
    for (var d = 0, s = 0, l = !1, c = 0; o < n.length; ) {
      d = 0;
      do {
        if (o >= n.length) break;
        (c = n[o++]), (d += c);
      } while (255 === c);
      s = 0;
      do {
        if (o >= n.length) break;
        (c = n[o++]), (s += c);
      } while (255 === c);
      var u = n.length - o;
      if (!l && 4 === d && o < n.length) {
        l = !0;
        var g = n[o++];
        if (181 === g) {
          var f = Qe(n, o);
          if (((o += 2), 49 === f)) {
            var p = $e(n, o);
            if (((o += 4), 1195456820 === p)) {
              var m = n[o++];
              if (3 === m) {
                var y = n[o++],
                  h = 31 & y,
                  T = 64 & y,
                  E = T ? 2 + 3 * h : 0,
                  v = new Uint8Array(E);
                if (T) {
                  v[0] = y;
                  for (var S = 1; S < E; S++) v[S] = n[o++];
                }
                r.push({ type: m, payloadType: d, pts: a, bytes: v });
              }
            }
          }
        }
      } else if (5 === d && s < u) {
        if (((l = !0), 16 < s)) {
          for (var L = [], A = 0, R; 16 > A; A++)
            (R = n[o++].toString(16)),
              L.push(1 == R.length ? '0' + R : R),
              (3 == A || 5 === A || 7 === A || 9 === A) && L.push('-');
          for (var k = s - 16, D = new Uint8Array(k), I = 0; I < k; I++)
            D[I] = n[o++];
          r.push({
            payloadType: d,
            pts: a,
            uuid: L.join(''),
            userData: fi(D),
            userDataBytes: D
          });
        }
      } else if (s < u) o += s;
      else if (s > u) break;
    }
  }
  function mt(e) {
    for (var t = e.byteLength, a = [], r = 1; r < t - 2; )
      0 === e[r] && 0 === e[r + 1] && 3 === e[r + 2]
        ? (a.push(r + 2), (r += 2))
        : r++;
    if (0 === a.length) return e;
    var n = t - a.length,
      o = new Uint8Array(n),
      d = 0;
    for (r = 0; r < n; d++, r++) d === a[0] && (d++, a.shift()), (o[r] = e[d]);
    return o;
  }
  function yt(e) {
    var t = Number.isSafeInteger,
      a = e[0],
      r = '',
      n = '',
      o = 0,
      i = 0,
      d = 0,
      s = 0,
      l = 0,
      c = 0;
    if (0 === a) {
      for (; '\0' !== Xe(e.subarray(c, c + 1)); )
        (r += Xe(e.subarray(c, c + 1))), (c += 1);
      for (
        r += Xe(e.subarray(c, c + 1)), c += 1;
        '\0' !== Xe(e.subarray(c, c + 1));

      )
        (n += Xe(e.subarray(c, c + 1))), (c += 1);
      (n += Xe(e.subarray(c, c + 1))),
        (c += 1),
        (o = $e(e, 12)),
        (i = $e(e, 16)),
        (s = $e(e, 20)),
        (l = $e(e, 24)),
        (c = 28);
    } else if (1 === a) {
      (c += 4), (o = $e(e, c)), (c += 4);
      var u = $e(e, c);
      c += 4;
      var g = $e(e, c);
      for (
        c += 4,
          d = I(2, 32) * u + g,
          t(d) ||
            ((d = D),
            Bo.warn(
              'Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box'
            )),
          s = $e(e, c),
          c += 4,
          l = $e(e, c),
          c += 4;
        '\0' !== Xe(e.subarray(c, c + 1));

      )
        (r += Xe(e.subarray(c, c + 1))), (c += 1);
      for (
        r += Xe(e.subarray(c, c + 1)), c += 1;
        '\0' !== Xe(e.subarray(c, c + 1));

      )
        (n += Xe(e.subarray(c, c + 1))), (c += 1);
      (n += Xe(e.subarray(c, c + 1))), (c += 1);
    }
    var f = e.subarray(c, e.byteLength);
    return {
      schemeIdUri: r,
      value: n,
      timeScale: o,
      presentationTime: d,
      presentationTimeDelta: i,
      eventDuration: s,
      id: l,
      payload: f
    };
  }
  function ht(e) {
    for (
      var t = arguments.length, a = Array(1 < t ? t - 1 : 0), r = 1;
      r < t;
      r++
    )
      a[r - 1] = arguments[r];
    for (var n = a.length, o = 8, d = n; d--; ) o += a[d].byteLength;
    var s = new Uint8Array(o);
    for (
      s[0] = 255 & (o >> 24),
        s[1] = 255 & (o >> 16),
        s[2] = 255 & (o >> 8),
        s[3] = 255 & o,
        s.set(e, 4),
        ((d = 0), (o = 8));
      d < n;
      d++
    )
      s.set(a[d], o), (o += a[d].byteLength);
    return s;
  }
  function Tt(e, t, a) {
    if (16 !== e.byteLength) throw new RangeError('Invalid system id');
    var r, n;
    if (t) {
      (r = 1), (n = new Uint8Array(16 * t.length));
      for (var o = 0, i; o < t.length; o++) {
        if (((i = t[o]), 16 !== i.byteLength))
          throw new RangeError('Invalid key');
        n.set(i, 16 * o);
      }
    } else (r = 0), (n = new Uint8Array());
    var d;
    0 < r
      ? ((d = new Uint8Array(4)),
        0 < t.length && new DataView(d.buffer).setUint32(0, t.length, !1))
      : (d = new Uint8Array());
    var s = new Uint8Array(4);
    return (
      a &&
        0 < a.byteLength &&
        new DataView(s.buffer).setUint32(0, a.byteLength, !1),
      ht(
        [112, 115, 115, 104],
        new Uint8Array([r, 0, 0, 0]),
        e,
        d,
        n,
        s,
        a || new Uint8Array()
      )
    );
  }
  function Et(e) {
    if (!(e instanceof ArrayBuffer) || 32 > e.byteLength) return null;
    var t = { version: 0, systemId: '', kids: null, data: null },
      a = new DataView(e),
      r = a.getUint32(0);
    if (e.byteLength !== r && 44 < r) return null;
    var n = a.getUint32(4);
    if (1886614376 !== n) return null;
    if (((t.version = a.getUint32(8) >>> 24), 1 < t.version)) return null;
    t.systemId = pi.hexDump(new Uint8Array(e, 12, 16));
    var o = a.getUint32(28);
    if (0 === t.version) {
      if (r - 32 < o) return null;
      t.data = new Uint8Array(e, 32, o);
    } else if (1 === t.version) {
      t.kids = [];
      for (var d = 0; d < o; d++)
        t.kids.push(new Uint8Array(e, 32 + 16 * d, 16));
    }
    return t;
  }
  function vt(e) {
    for (var t = new Uint8Array(16), a = 12; 16 > a; a++)
      t[a] = 255 & (e >> (8 * (15 - a)));
    return t;
  }
  function St(e) {
    return vi.test(e);
  }
  function Lt(e, t, a) {
    if (null !== e.variableList || e.hasVariableRefs)
      for (var r = a.length; r--; ) {
        var n = a[r],
          o = t[n];
        o && (t[n] = At(e, o));
      }
  }
  function At(e, t) {
    if (null !== e.variableList || e.hasVariableRefs) {
      var a = e.variableList;
      return t.replace(vi, function(t) {
        var r = t.substring(2, t.length - 1),
          n = null == a ? void 0 : a[r];
        return void 0 === n
          ? (e.playlistParsingError ||
              (e.playlistParsingError = new Error(
                'Missing preceding EXT-X-DEFINE tag for Variable Reference: "' +
                  r +
                  '"'
              )),
            t)
          : n;
      });
    }
    return t;
  }
  function Rt(e, t, a) {
    var r = e.variableList;
    r || (e.variableList = r = {});
    var n, o;
    if ('QUERYPARAM' in t) {
      n = t.QUERYPARAM;
      try {
        var i = new self.URL(a).searchParams;
        if (i.has(n)) o = i.get(n);
        else
          throw new Error(
            '"' + n + '" does not match any query parameter in URI: "' + a + '"'
          );
      } catch (t) {
        e.playlistParsingError ||
          (e.playlistParsingError = new Error(
            'EXT-X-DEFINE QUERYPARAM: ' + t.message
          ));
      }
    } else (n = t.NAME), (o = t.VALUE);
    n in r
      ? e.playlistParsingError ||
        (e.playlistParsingError = new Error(
          'EXT-X-DEFINE duplicate Variable Name declarations: "' + n + '"'
        ))
      : (r[n] = o || '');
  }
  function kt(e, t, a) {
    var r = t.IMPORT;
    if (a && r in a) {
      var n = e.variableList;
      n || (e.variableList = n = {}), (n[r] = a[r]);
    } else e.playlistParsingError || (e.playlistParsingError = new Error('EXT-X-DEFINE IMPORT attribute not found in Multivariant Playlist: "' + r + '"'));
  }
  function Dt() {
    return 'undefined' == typeof self
      ? void 0
      : self.MediaSource || self.WebKitMediaSource;
  }
  function It(e, t) {
    var a = Si[t];
    return !!a && !0 === a[e.slice(0, 4)];
  }
  function bt(e, t) {
    var a;
    return (
      null !=
        (a =
          null == Li
            ? void 0
            : Li.isTypeSupported((t || 'video') + '/mp4;codecs="' + e + '"')) &&
      a
    );
  }
  function Ct(e, t, a) {
    var r = new Ko(e),
      n,
      o;
    Lt(a, r, ['KEYFORMAT', 'KEYFORMATVERSIONS', 'URI', 'IV', 'URI']);
    var i = null == (n = r.METHOD) ? '' : n,
      d = r.URI,
      s = r.hexadecimalInteger('IV'),
      l = r.KEYFORMATVERSIONS,
      c = null == (o = r.KEYFORMAT) ? 'identity' : o;
    d && r.IV && !s && Bo.error('Invalid IV: ' + r.IV);
    var u = d ? bi.resolve(d, t) : '',
      g = (l ? l : '1')
        .split('/')
        .map(Number)
        .filter(Number.isFinite);
    return new Ei(i, u, c, g, s);
  }
  function Pt(e) {
    var t = new Ko(e),
      a = t.decimalFloatingPoint('TIME-OFFSET');
    return _o(a) ? a : null;
  }
  function _t(e, t) {
    ['video', 'audio', 'text'].forEach(function(a) {
      var r = e.filter(function(e) {
        return It(e, a);
      });
      if (r.length) {
        var n = r.filter(function(e) {
          return (
            0 === e.lastIndexOf('avc1', 0) || 0 === e.lastIndexOf('mp4a', 0)
          );
        });
        (t[a + 'Codec'] = 0 < n.length ? n[0] : r[0]),
          (e = e.filter(function(e) {
            return -1 === r.indexOf(e);
          }));
      }
    }),
      (t.unknownCodecs = e);
  }
  function xt(e, t, a) {
    var r = t[a];
    r && (e[a] = r);
  }
  function Ft(e, t) {
    for (var a = e[t], r = t, n; r--; ) {
      if (((n = e[r]), !n)) return;
      (n.programDateTime = a.programDateTime - 1e3 * n.duration), (a = n);
    }
  }
  function Nt(e, t) {
    e.rawProgramDateTime
      ? (e.programDateTime = Date.parse(e.rawProgramDateTime))
      : null != t &&
        t.programDateTime &&
        (e.programDateTime = t.endProgramDateTime),
      _o(e.programDateTime) ||
        ((e.programDateTime = null), (e.rawProgramDateTime = null));
  }
  function Ot(e, t, a, r) {
    (e.relurl = t.URI),
      t.BYTERANGE && e.setByteRange(t.BYTERANGE),
      (e.level = a),
      (e.sn = 'initSegment'),
      r && (e.levelkeys = r),
      (e.initSegment = null);
  }
  function Mt(e, t, a) {
    e.levelkeys = t;
    var r = a.encryptedFragments;
    (!r.length || r[r.length - 1].levelkeys !== t) &&
      Object.keys(t).some(function(e) {
        return t[e].isCommonEncryption;
      }) &&
      r.push(e);
  }
  function wt(e) {
    var t = e.type;
    return t === Ci.AUDIO_TRACK
      ? Pi.AUDIO
      : t === Ci.SUBTITLE_TRACK
      ? Pi.SUBTITLE
      : Pi.MAIN;
  }
  function Bt(e, t) {
    var a = e.url;
    return (void 0 === a || 0 === a.indexOf('data:')) && (a = t.url), a;
  }
  function Ut(e, t) {
    var a;
    try {
      a = new Event('addtrack');
    } catch (e) {
      (a = document.createEvent('Event')), a.initEvent('addtrack', !1, !1);
    }
    (a.track = e), t.dispatchEvent(a);
  }
  function Gt(e, t) {
    var a = e.mode;
    if (
      ('disabled' === a && (e.mode = 'hidden'),
      e.cues && !e.cues.getCueById(t.id))
    )
      try {
        if ((e.addCue(t), !e.cues.getCueById(t.id)))
          throw new Error('addCue is failed for: ' + t);
      } catch (a) {
        Bo.debug('[texttrack-utils]: ' + a);
        var r = new self.TextTrackCue(t.startTime, t.endTime, t.text);
        (r.id = t.id), e.addCue(r);
      }
    'disabled' === a && (e.mode = a);
  }
  function Kt(e) {
    var t = e.mode;
    if (('disabled' === t && (e.mode = 'hidden'), e.cues))
      for (var a = e.cues.length; a--; ) e.removeCue(e.cues[a]);
    'disabled' === t && (e.mode = t);
  }
  function Ht(e, t, a, r) {
    var n = e.mode;
    if (('disabled' === n && (e.mode = 'hidden'), e.cues && 0 < e.cues.length))
      for (var o = Wt(e.cues, t, a), d = 0; d < o.length; d++)
        (!r || r(o[d])) && e.removeCue(o[d]);
    'disabled' === n && (e.mode = n);
  }
  function Vt(e, t) {
    if (t < e[0].startTime) return 0;
    var a = e.length - 1;
    if (t > e[a].endTime) return -1;
    for (var r = 0, n = a; r <= n; ) {
      var o = P((n + r) / 2);
      if (t < e[o].startTime) n = o - 1;
      else if (t > e[o].startTime && r < a) r = o + 1;
      else return o;
    }
    return e[r].startTime - t < t - e[n].startTime ? r : n;
  }
  function Wt(e, t, a) {
    var r = [],
      n = Vt(e, t);
    if (-1 < n)
      for (var o = n, d = e.length, s; o < d; o++)
        if (((s = e[o]), s.startTime >= t && s.endTime <= a)) r.push(s);
        else if (s.startTime > a) return r;
    return r;
  }
  function Yt() {
    return 'undefined' == typeof self
      ? void 0
      : self.WebKitDataCue || self.VTTCue || self.TextTrackCue;
  }
  function qt(e, t) {
    return e.getTime() / 1e3 - t;
  }
  function jt(e) {
    return Uint8Array.from(
      e
        .replace(/^0x/, '')
        .replace(/([\da-fA-F]{2}) ?/g, '0x$1 ')
        .replace(/ +$/, '')
        .split(' ')
    ).buffer;
  }
  function zt(e, t) {
    var a = e.canSkipUntil,
      r = e.canSkipDateRanges,
      n = e.endSN,
      o = t === void 0 ? 0 : t - n;
    return a && o < a ? (r ? wi.v2 : wi.Yes) : wi.No;
  }
  function Xt(e, t) {
    var a = t.startPTS;
    if (_o(a)) {
      var r = 0,
        n;
      t.sn > e.sn ? ((r = a - e.start), (n = e)) : ((r = e.start - a), (n = t)),
        n.duration !== r && (n.duration = r);
    } else if (t.sn > e.sn) {
      var o = e.cc === t.cc;
      t.start =
        o && e.minEndPTS
          ? e.start + (e.minEndPTS - e.start)
          : e.start + e.duration;
    } else t.start = C(e.start - t.duration, 0);
  }
  function Qt(e, t, a, r, n, o) {
    var d = r - a;
    0 >= d &&
      (Bo.warn('Fragment should have a positive duration', t),
      (r = a + t.duration),
      (o = n + t.duration));
    var s = a,
      l = r,
      c = t.startPTS,
      u = t.endPTS;
    if (_o(c)) {
      var g = R(c - a);
      (t.deltaPTS = _o(t.deltaPTS) ? C(g, t.deltaPTS) : g),
        (s = C(a, c)),
        (a = L(a, c)),
        (n = L(n, t.startDTS)),
        (l = L(r, u)),
        (r = C(r, u)),
        (o = C(o, t.endDTS));
    }
    var f = a - t.start;
    0 !== t.start && (t.start = a),
      (t.duration = r - t.start),
      (t.startPTS = a),
      (t.maxStartPTS = s),
      (t.startDTS = n),
      (t.endPTS = r),
      (t.minEndPTS = l),
      (t.endDTS = o);
    var p = t.sn;
    if (!e || p < e.startSN || p > e.endSN) return 0;
    var m = p - e.startSN,
      y = e.fragments,
      h;
    for (y[m] = t, h = m; 0 < h; h--) Xt(y[h], y[h - 1]);
    for (h = m; h < y.length - 1; h++) Xt(y[h], y[h + 1]);
    return (
      e.fragmentHint && Xt(y[y.length - 1], e.fragmentHint),
      (e.PTSKnown = e.alignedSliding = !0),
      f
    );
  }
  function $t(e, t) {
    for (var a = null, r = e.fragments, n = r.length - 1, o; 0 <= n; n--)
      if (((o = r[n].initSegment), o)) {
        a = o;
        break;
      }
    e.fragmentHint && delete e.fragmentHint.endPTS;
    var d = 0,
      s;
    if (
      (ea(e, t, function(e, r) {
        e.relurl && (d = e.cc - r.cc),
          _o(e.startPTS) &&
            _o(e.endPTS) &&
            ((r.start = r.startPTS = e.startPTS),
            (r.startDTS = e.startDTS),
            (r.maxStartPTS = e.maxStartPTS),
            (r.endPTS = e.endPTS),
            (r.endDTS = e.endDTS),
            (r.minEndPTS = e.minEndPTS),
            (r.duration = e.endPTS - e.startPTS),
            r.duration && (s = r),
            (t.PTSKnown = t.alignedSliding = !0)),
          (r.elementaryStreams = e.elementaryStreams),
          (r.loader = e.loader),
          (r.stats = e.stats),
          (r.urlId = e.urlId),
          e.initSegment &&
            ((r.initSegment = e.initSegment), (a = e.initSegment));
      }),
      a)
    ) {
      var l = t.fragmentHint ? t.fragments.concat(t.fragmentHint) : t.fragments;
      l.forEach(function(e) {
        var t;
        (e.initSegment &&
          e.initSegment.relurl !== (null == (t = a) ? void 0 : t.relurl)) ||
          (e.initSegment = a);
      });
    }
    if (t.skippedSegments)
      if (
        ((t.deltaUpdateFailed = t.fragments.some(function(e) {
          return !e;
        })),
        t.deltaUpdateFailed)
      ) {
        Bo.warn(
          '[level-helper] Previous playlist missing segments skipped in delta playlist'
        );
        for (var c = t.skippedSegments; c--; ) t.fragments.shift();
        (t.startSN = t.fragments[0].sn), (t.startCC = t.fragments[0].cc);
      } else
        t.canSkipDateRanges &&
          (t.dateRanges = Zt(
            e.dateRanges,
            t.dateRanges,
            t.recentlyRemovedDateranges
          ));
    var u = t.fragments;
    if (d) {
      Bo.warn('discontinuity sliding from playlist, take drift into account');
      for (var g = 0; g < u.length; g++) u[g].cc += d;
    }
    t.skippedSegments && (t.startCC = t.fragments[0].cc),
      Jt(e.partList, t.partList, function(e, t) {
        (t.elementaryStreams = e.elementaryStreams), (t.stats = e.stats);
      }),
      s ? Qt(t, s, s.startPTS, s.endPTS, s.startDTS, s.endDTS) : ta(e, t),
      u.length && (t.totalduration = t.edge - u[0].start),
      (t.driftStartTime = e.driftStartTime),
      (t.driftStart = e.driftStart);
    var f = t.advancedDateTime;
    if (t.advanced && f) {
      var p = t.edge;
      t.driftStart || ((t.driftStartTime = f), (t.driftStart = p)),
        (t.driftEndTime = f),
        (t.driftEnd = p);
    } else (t.driftEndTime = e.driftEndTime), (t.driftEnd = e.driftEnd), (t.advancedDateTime = e.advancedDateTime);
  }
  function Zt(e, t, a) {
    var r = be({}, e);
    return (
      a &&
        a.forEach(function(e) {
          delete r[e];
        }),
      Object.keys(t).forEach(function(e) {
        var a = new Ho(t[e].attr, r[e]);
        a.isValid
          ? (r[e] = a)
          : Bo.warn(
              'Ignoring invalid Playlist Delta Update DATERANGE tag: "' +
                JSON.stringify(t[e].attr) +
                '"'
            );
      }),
      r
    );
  }
  function Jt(e, t, a) {
    if (e && t)
      for (var r = 0, n = 0, o = e.length; n <= o; n++) {
        var d = e[n],
          s = t[n + r];
        d && s && d.index === s.index && d.fragment.sn === s.fragment.sn
          ? a(d, s)
          : r--;
      }
  }
  function ea(e, t, a) {
    for (
      var r = t.skippedSegments,
        n = C(e.startSN, t.startSN) - t.startSN,
        o =
          (e.fragmentHint ? 1 : 0) +
          (r ? t.endSN : L(e.endSN, t.endSN)) -
          t.startSN,
        d = t.startSN - e.startSN,
        s = t.fragmentHint ? t.fragments.concat(t.fragmentHint) : t.fragments,
        l = e.fragmentHint ? e.fragments.concat(e.fragmentHint) : e.fragments,
        c = n;
      c <= o;
      c++
    ) {
      var u = l[d + c],
        g = s[c];
      r && !g && c < r && (g = t.fragments[c] = u), u && g && a(u, g);
    }
  }
  function ta(e, t) {
    var a = t.startSN + t.skippedSegments - e.startSN,
      r = e.fragments;
    0 > a || a >= r.length || aa(t, r[a].start);
  }
  function aa(e, t) {
    if (t) {
      for (var a = e.fragments, r = e.skippedSegments; r < a.length; r++)
        a[r].start += t;
      e.fragmentHint && (e.fragmentHint.start += t);
    }
  }
  function ra(e, t) {
    void 0 === t && (t = 1 / 0);
    var a = 1e3 * e.targetduration;
    if (e.updated) {
      var r = e.fragments,
        n = 4;
      if (r.length && a * n > t) {
        var o = 1e3 * r[r.length - 1].duration;
        o < a && (a = o);
      }
    } else a /= 2;
    return S(a);
  }
  function na(e, t, a) {
    if (!(null != e && e.details)) return null;
    var r = e.details,
      n = r.fragments[t - r.startSN];
    return n
      ? n
      : ((n = r.fragmentHint),
        n && n.sn === t ? n : t < r.startSN && a && a.sn === t ? a : null);
  }
  function oa(e, t, a) {
    var r;
    return null != e && e.details
      ? ia(null == (r = e.details) ? void 0 : r.partList, t, a)
      : null;
  }
  function ia(e, t, a) {
    if (e)
      for (var r = e.length, n; r--; )
        if (((n = e[r]), n.index === a && n.fragment.sn === t)) return n;
    return null;
  }
  function da(e) {
    switch (e.details) {
      case No.FRAG_LOAD_TIMEOUT:
      case No.KEY_LOAD_TIMEOUT:
      case No.LEVEL_LOAD_TIMEOUT:
      case No.MANIFEST_LOAD_TIMEOUT:
        return !0;
    }
    return !1;
  }
  function sa(e, t) {
    var a = da(t);
    return e.default[(a ? 'timeout' : 'error') + 'Retry'];
  }
  function la(e, t) {
    var a = 'linear' === e.backoff ? 1 : I(2, t);
    return L(a * e.retryDelayMs, e.maxRetryDelayMs);
  }
  function ca(e) {
    return De(De({}, e), { errorRetry: null, timeoutRetry: null });
  }
  function ua(e, t, a, r) {
    return !!e && t < e.maxNumRetry && (ga(r) || !!a);
  }
  function ga(e) {
    return (
      (0 === e && !1 === navigator.onLine) || (!!e && (400 > e || 499 < e))
    );
  }
  function fa(e, t, a) {
    if (null === t || !Array.isArray(e) || !e.length || !_o(t)) return null;
    var r = e[0].programDateTime;
    if (t < (r || 0)) return null;
    var n = e[e.length - 1].endProgramDateTime;
    if (t >= (n || 0)) return null;
    a = a || 0;
    for (var o = 0, i; o < e.length; ++o)
      if (((i = e[o]), ya(t, a, i))) return i;
    return null;
  }
  function pa(e, t, a, r) {
    void 0 === a && (a = 0), void 0 === r && (r = 0);
    var n = null;
    if (
      (e
        ? (n = t[e.sn - t[0].sn + 1] || null)
        : 0 === a && 0 === t[0].start && (n = t[0]),
      n && 0 === ma(a, r, n))
    )
      return n;
    var o = Gi.search(t, ma.bind(null, a, r));
    return o && (o !== e || !n) ? o : n;
  }
  function ma(e, t, a) {
    if (
      (void 0 === e && (e = 0),
      void 0 === t && (t = 0),
      a.start <= e && a.start + a.duration > e)
    )
      return 0;
    var r = L(t, a.duration + (a.deltaPTS ? a.deltaPTS : 0));
    return a.start + a.duration - r <= e
      ? 1
      : a.start - r > e && a.start
      ? -1
      : 0;
  }
  function ya(e, t, a) {
    var r = 1e3 * L(t, a.duration + (a.deltaPTS ? a.deltaPTS : 0)),
      n = a.endProgramDateTime || 0;
    return n - r > e;
  }
  function ha(e, t) {
    return Gi.search(e, function(e) {
      return e.cc < t ? 1 : e.cc > t ? -1 : 0;
    });
  }
  function Ta(e, t, a) {
    if (performance.now() - e.lastErrorPerfMs > 300000) return !0;
    var r = e.details;
    if (t.details === No.FRAG_GAP && r && t.frag) {
      var n = t.frag.start,
        o = pa(null, r.fragments, n);
      if (o && !o.gap) return !0;
    }
    if (a && e.errors.length < a.errors.length) {
      var i = e.errors[e.errors.length - 1];
      if (
        r &&
        i.frag &&
        t.frag &&
        R(i.frag.start - t.frag.start) > 3 * r.targetduration
      )
        return !0;
    }
    return !1;
  }
  function Ea(e, t, a) {
    a &&
      ('audio' === t
        ? (!e.audioGroupIds && (e.audioGroupIds = []),
          (e.audioGroupIds[e.url.length - 1] = a))
        : 'text' == t &&
          (!e.textGroupIds && (e.textGroupIds = []),
          (e.textGroupIds[e.url.length - 1] = a)));
  }
  function va(e) {
    var t = {};
    e.forEach(function(e) {
      var a = e.groupId || '';
      (e.id = t[a] = t[a] || 0), t[a]++;
    });
  }
  function Sa(e) {
    var t, a, r;
    return (
      e.buffered &&
      (e.body.gap ||
        (null == (t = e.range.video) ? void 0 : t.partial) ||
        (null == (a = e.range.audio) ? void 0 : a.partial) ||
        (null == (r = e.range.audiovideo) ? void 0 : r.partial))
    );
  }
  function La(e) {
    return e.type + '_' + e.level + '_' + e.urlId + '_' + e.sn;
  }
  function Aa(e, t) {
    void 0 === t && (t = null);
    var a = t || e,
      r = {
        frag: e,
        part: t,
        responseType: 'arraybuffer',
        url: a.url,
        headers: {},
        rangeStart: 0,
        rangeEnd: 0
      },
      n = a.byteRangeStartOffset,
      o = a.byteRangeEndOffset;
    if (_o(n) && _o(o)) {
      var i = n,
        d = o,
        s;
      if (
        'initSegment' === e.sn &&
        'AES-128' === (null == (s = e.decryptdata) ? void 0 : s.method)
      ) {
        var l = o - n;
        l % 16 && (d = o + (16 - (l % 16))),
          0 !== n && ((r.resetIV = !0), (i = n - 16));
      }
      (r.rangeStart = i), (r.rangeEnd = d);
    }
    return r;
  }
  function Ra(e, t) {
    var a = new Error('GAP ' + (e.gap ? 'tag' : 'attribute') + ' found'),
      r = {
        type: Fo.MEDIA_ERROR,
        details: No.FRAG_GAP,
        fatal: !1,
        frag: e,
        error: a,
        networkDetails: null
      };
    return t && (r.part = t), ((t ? t : e).stats.aborted = !0), new Qi(r);
  }
  function ka() {
    return { start: 0, executeStart: 0, executeEnd: 0, end: 0 };
  }
  function Da(e, t) {
    for (var a = null, r = 0, n = e.length, o; r < n; r++)
      if (((o = e[r]), o && o.cc === t)) {
        a = o;
        break;
      }
    return a;
  }
  function Ia(e, t, a) {
    return !!(t.details && (a.endCC > a.startCC || (e && e.cc < a.startCC)));
  }
  function ba(e, t, a) {
    var r = e.fragments,
      n = t.fragments;
    if (!n.length || !r.length) return void Bo.log('No fragments to align');
    var o = Da(r, n[0].cc);
    return o && (!o || o.startPTS)
      ? o
      : void Bo.log('No frag in previous level to align on');
  }
  function Ca(e, t) {
    if (e) {
      var a = e.start + t;
      (e.start = e.startPTS = a), (e.endPTS = a + e.duration);
    }
  }
  function Pa(e, t) {
    for (var a = t.fragments, r = 0, n = a.length; r < n; r++) Ca(a[r], e);
    t.fragmentHint && Ca(t.fragmentHint, e), (t.alignedSliding = !0);
  }
  function _a(e, t, a) {
    t &&
      (xa(e, a, t),
      !a.alignedSliding && t.details && Fa(a, t.details),
      !a.alignedSliding && t.details && !a.skippedSegments && ta(t.details, a));
  }
  function xa(e, t, a) {
    if (Ia(e, a, t)) {
      var r = ba(a.details, t);
      r &&
        _o(r.start) &&
        (Bo.log(
          'Adjusting PTS using last level due to CC increase within current level ' +
            t.url
        ),
        Pa(r.start, t));
    }
  }
  function Fa(e, t) {
    if (t.fragments.length && e.hasProgramDateTime && t.hasProgramDateTime) {
      var a = t.fragments[0].programDateTime,
        r = e.fragments[0].programDateTime,
        n = (r - a) / 1e3 + t.fragments[0].start;
      n &&
        _o(n) &&
        (Bo.log(
          'Adjusting PTS using programDateTime delta ' +
            (r - a) +
            'ms, sliding:' +
            n.toFixed(3) +
            ' ' +
            e.url +
            ' '
        ),
        Pa(n, e));
    }
  }
  function Na(e, t) {
    if (e.hasProgramDateTime && t.hasProgramDateTime) {
      var a = e.fragments,
        r = t.fragments;
      if (a.length && r.length) {
        var n = S(r.length / 2) - 1,
          o = r[n],
          i = Da(a, o.cc) || a[S(a.length / 2) - 1],
          d = o.programDateTime,
          s = i.programDateTime;
        if (null !== d && null !== s) {
          var l = (s - d) / 1e3 - (i.start - o.start);
          Pa(l, e);
        }
      }
    }
  }
  function Oa(e) {
    var t = e.byteLength,
      a = t && new DataView(e.buffer).getUint8(t - 1);
    return a ? je(e, 0, t - a) : e;
  }
  function Ma() {
    return self.SourceBuffer || self.WebKitSourceBuffer;
  }
  function wa() {
    var e = Dt();
    if (!e) return !1;
    var t = Ma(),
      a =
        e &&
        'function' == typeof e.isTypeSupported &&
        e.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'),
      r =
        !t ||
        (t.prototype &&
          'function' == typeof t.prototype.appendBuffer &&
          'function' == typeof t.prototype.remove);
    return !!a && !!r;
  }
  function Ba() {
    var e = Ma(),
      t;
    return (
      'function' ==
      typeof (null == e || null == (t = e.prototype) ? void 0 : t.changeType)
    );
  }
  function Ua() {
    return 'function' == typeof __HLS_WORKER_BUNDLE__;
  }
  function Ga() {
    var e = new self.Blob(
        [
          'var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(' +
            __HLS_WORKER_BUNDLE__.toString() +
            ')(true);'
        ],
        { type: 'text/javascript' }
      ),
      t = self.URL.createObjectURL(e),
      a = new self.Worker(t);
    return { worker: a, objectURL: t };
  }
  function Ka(e) {
    var t = new self.URL(e, self.location.href).href,
      a = new self.Worker(t);
    return { worker: a, scriptURL: t };
  }
  function Ha(e, t) {
    return (
      void 0 === e && (e = ''),
      void 0 === t && (t = 9e4),
      {
        type: e,
        id: -1,
        pid: -1,
        inputTimeScale: t,
        sequenceNumber: -1,
        samples: [],
        dropped: 0
      }
    );
  }
  function Va(e, t, a, r) {
    var n = navigator.userAgent.toLowerCase(),
      o = r,
      i = [
        96e3,
        88200,
        64e3,
        48e3,
        44100,
        32e3,
        24e3,
        22050,
        16e3,
        12e3,
        11025,
        8e3,
        7350
      ],
      d,
      s,
      l,
      c;
    d = ((192 & t[a + 2]) >>> 6) + 1;
    var u = (60 & t[a + 2]) >>> 2;
    return u > i.length - 1
      ? void e.trigger(xo.ERROR, {
          type: Fo.MEDIA_ERROR,
          details: No.FRAG_PARSING_ERROR,
          fatal: !0,
          reason: 'invalid ADTS sampling index:' + u
        })
      : ((l = (1 & t[a + 2]) << 2),
        (l |= (192 & t[a + 3]) >>> 6),
        Bo.log(
          'manifest codec:' + r + ', ADTS type:' + d + ', samplingIndex:' + u
        ),
        /firefox/i.test(n)
          ? 6 <= u
            ? ((d = 5), (c = [, , , ,]), (s = u - 3))
            : ((d = 2), (c = [, ,]), (s = u))
          : -1 === n.indexOf('android')
          ? ((d = 5),
            (c = [, , , ,]),
            (r &&
              (-1 !== r.indexOf('mp4a.40.29') ||
                -1 !== r.indexOf('mp4a.40.5'))) ||
            (!r && 6 <= u)
              ? (s = u - 3)
              : (((r &&
                  -1 !== r.indexOf('mp4a.40.2') &&
                  ((6 <= u && 1 === l) || /vivaldi/i.test(n))) ||
                  (!r && 1 === l)) &&
                  ((d = 2), (c = [, ,])),
                (s = u)))
          : ((d = 2), (c = [, ,]), (s = u)),
        (c[0] = d << 3),
        (c[0] |= (14 & u) >> 1),
        (c[1] |= (1 & u) << 7),
        (c[1] |= l << 3),
        5 === d &&
          ((c[1] |= (14 & s) >> 1),
          (c[2] = (1 & s) << 7),
          (c[2] |= 8),
          (c[3] = 0)),
        {
          config: c,
          samplerate: i[u],
          channelCount: l,
          codec: 'mp4a.40.' + d,
          manifestCodec: o
        });
  }
  function Wa(e, t) {
    return 255 === e[t] && 240 == (246 & e[t + 1]);
  }
  function Ya(e, t) {
    return 1 & e[t + 1] ? 7 : 9;
  }
  function qa(e, t) {
    return ((3 & e[t + 3]) << 11) | (e[t + 4] << 3) | ((224 & e[t + 5]) >>> 5);
  }
  function ja(e, t) {
    return t + 5 < e.length;
  }
  function za(e, t) {
    return t + 1 < e.length && Wa(e, t);
  }
  function Xa(e, t) {
    return ja(e, t) && Wa(e, t) && qa(e, t) <= e.length - t;
  }
  function Qa(e, t) {
    if (za(e, t)) {
      var a = Ya(e, t);
      if (t + a >= e.length) return !1;
      var r = qa(e, t);
      if (r <= a) return !1;
      var n = t + r;
      return n === e.length || za(e, n);
    }
    return !1;
  }
  function $a(e, t, a, r, n) {
    if (!e.samplerate) {
      var o = Va(t, a, r, n);
      if (!o) return;
      (e.config = o.config),
        (e.samplerate = o.samplerate),
        (e.channelCount = o.channelCount),
        (e.codec = o.codec),
        (e.manifestCodec = o.manifestCodec),
        Bo.log(
          'parsed codec:' +
            e.codec +
            ', rate:' +
            o.samplerate +
            ', channels:' +
            o.channelCount
        );
    }
  }
  function Za(e) {
    return 92160000 / e;
  }
  function Ja(e, t) {
    var a = Ya(e, t);
    if (t + a <= e.length) {
      var r = qa(e, t) - a;
      if (0 < r) return { headerLength: a, frameLength: r };
    }
  }
  function er(e, t, a, r, n) {
    var o = Za(e.samplerate),
      i = r + n * o,
      d = Ja(t, a),
      s;
    if (d) {
      var l = d.frameLength,
        c = d.headerLength,
        u = c + l,
        g = C(0, a + u - t.length);
      g
        ? ((s = new Uint8Array(u - c)), s.set(t.subarray(a + c, t.length), 0))
        : (s = t.subarray(a + c, a + u));
      var f = { unit: s, pts: i };
      return g || e.samples.push(f), { sample: f, length: u, missing: g };
    }
    var p = t.length - a;
    (s = new Uint8Array(p)), s.set(t.subarray(a, t.length), 0);
    var m = { unit: s, pts: i };
    return { sample: m, length: p, missing: -1 };
  }
  function tr(e, t, a, r, n) {
    if (!(a + 24 > t.length)) {
      var o = ar(t, a);
      if (o && a + o.frameLength <= t.length) {
        var i = (9e4 * o.samplesPerFrame) / o.sampleRate,
          d = r + n * i,
          s = { unit: t.subarray(a, a + o.frameLength), pts: d, dts: d };
        return (
          (e.config = []),
          (e.channelCount = o.channelCount),
          (e.samplerate = o.sampleRate),
          e.samples.push(s),
          { sample: s, length: o.frameLength, missing: 0 }
        );
      }
    }
  }
  function ar(e, t) {
    var a = 3 & (e[t + 1] >> 3),
      r = 3 & (e[t + 1] >> 1),
      n = 15 & (e[t + 2] >> 4),
      o = 3 & (e[t + 2] >> 2);
    if (1 != a && 0 !== n && 15 !== n && 3 !== o) {
      var i = 1 & (e[t + 2] >> 1),
        d = e[t + 3] >> 6,
        s = 3 === a ? 3 - r : 3 === r ? 3 : 4,
        l = 1e3 * md[14 * s + n - 1],
        c = 3 === a ? 0 : 2 === a ? 1 : 2,
        u = yd[3 * c + o],
        g = 3 === d ? 1 : 2,
        f = hd[a][r],
        p = Td[r],
        m = 8 * f * p,
        y = P((f * l) / u + i) * p;
      if (null === pd) {
        var h = navigator.userAgent || '',
          T = h.match(/Chrome\/(\d+)/i);
        pd = T ? parseInt(T[1]) : 0;
      }
      var E = !!pd && 87 >= pd;
      return (
        E && 2 === r && 224e3 <= l && 0 === d && (e[t + 3] = 128 | e[t + 3]),
        { sampleRate: u, channelCount: g, frameLength: y, samplesPerFrame: m }
      );
    }
  }
  function rr(e, t) {
    return 255 === e[t] && 224 == (224 & e[t + 1]) && 0 != (6 & e[t + 1]);
  }
  function nr(e, t) {
    return t + 1 < e.length && rr(e, t);
  }
  function or(e, t) {
    var a = 4;
    return rr(e, t) && 4 <= e.length - t;
  }
  function ir(e, t) {
    if (t + 1 < e.length && rr(e, t)) {
      var a = 4,
        r = ar(e, t),
        n = 4;
      null != r && r.frameLength && (n = r.frameLength);
      var o = t + n;
      return o === e.length || nr(e, o);
    }
    return !1;
  }
  function dr(e, t, a, r) {
    return {
      key: e,
      frame: !1,
      pts: t,
      dts: a,
      units: [],
      debug: r,
      length: 0
    };
  }
  function sr(e, t) {
    return ((31 & e[t + 1]) << 8) + e[t + 2];
  }
  function lr(e, t) {
    return ((31 & e[t + 10]) << 8) | e[t + 11];
  }
  function cr(e, t, a, r) {
    var n = { audio: -1, avc: -1, id3: -1, segmentCodec: 'aac' },
      o = ((15 & e[t + 1]) << 8) | e[t + 2],
      i = t + 3 + o - 4,
      d = ((15 & e[t + 10]) << 8) | e[t + 11];
    for (t += 12 + d; t < i; ) {
      var s = sr(e, t);
      switch (e[t]) {
        case 207:
          if (!r) {
            Bo.log(
              'ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream'
            );
            break;
          }
        case 15:
          -1 === n.audio && (n.audio = s);
          break;
        case 21:
          -1 === n.id3 && (n.id3 = s);
          break;
        case 219:
          if (!r) {
            Bo.log(
              'H.264 with AES-128-CBC slice encryption found in unencrypted stream'
            );
            break;
          }
        case 27:
          -1 === n.avc && (n.avc = s);
          break;
        case 3:
        case 4:
          !0 !== a.mpeg && !0 !== a.mp3
            ? Bo.log('MPEG audio found, not supported in this browser')
            : -1 === n.audio && ((n.audio = s), (n.segmentCodec = 'mp3'));
          break;
        case 36:
          Bo.warn('Unsupported HEVC stream type found');
      }
      t += (((15 & e[t + 3]) << 8) | e[t + 4]) + 5;
    }
    return n;
  }
  function ur(e) {
    var t = 0,
      a = e.data,
      r,
      n,
      o,
      d,
      s;
    if (!e || 0 === e.size) return null;
    for (; 19 > a[0].length && 1 < a.length; ) {
      var l = new Uint8Array(a[0].length + a[1].length);
      l.set(a[0]), l.set(a[1], a[0].length), (a[0] = l), a.splice(1, 1);
    }
    r = a[0];
    var c = (r[0] << 16) + (r[1] << 8) + r[2];
    if (1 === c) {
      if (((n = (r[4] << 8) + r[5]), n && n > e.size - 6)) return null;
      var u = r[7];
      192 & u &&
        ((d =
          536870912 * (14 & r[9]) +
          4194304 * (255 & r[10]) +
          16384 * (254 & r[11]) +
          128 * (255 & r[12]) +
          (254 & r[13]) / 2),
        64 & u
          ? ((s =
              536870912 * (14 & r[14]) +
              4194304 * (255 & r[15]) +
              16384 * (254 & r[16]) +
              128 * (255 & r[17]) +
              (254 & r[18]) / 2),
            5400000 < d - s &&
              (Bo.warn(
                S((d - s) / 9e4) + 's delta between PTS and DTS, align them'
              ),
              (d = s)))
          : (s = d)),
        (o = r[8]);
      var g = o + 9;
      if (e.size <= g) return null;
      e.size -= g;
      for (var f = new Uint8Array(e.size), p = 0, m = a.length; p < m; p++) {
        r = a[p];
        var y = r.byteLength;
        if (g)
          if (g > y) {
            g -= y;
            continue;
          } else (r = r.subarray(g)), (y -= g), (g = 0);
        f.set(r, t), (t += y);
      }
      return n && (n -= o + 3), { data: f, pts: d, dts: s, len: n };
    }
    return null;
  }
  function gr(e, t) {
    if (e.units.length && e.frame) {
      if (e.pts === void 0) {
        var a = t.samples,
          r = a.length;
        if (r) {
          var n = a[r - 1];
          (e.pts = n.pts), (e.dts = n.dts);
        } else return void t.dropped++;
      }
      t.samples.push(e);
    }
    e.debug.length && Bo.log(e.pts + '/' + e.dts + ':' + e.debug);
  }
  function fr(e, t, a, r) {
    void 0 === a && (a = 1), void 0 === r && (r = !1);
    var n = e * t * a;
    return r ? S(n) : n;
  }
  function pr(e, t, a, r) {
    return (
      void 0 === a && (a = 1), void 0 === r && (r = !1), fr(e, t, 1 / a, r)
    );
  }
  function mr(e, t) {
    return void 0 === t && (t = !1), fr(e, 1e3, 1 / 90000, t);
  }
  function yr(e, t) {
    return void 0 === t && (t = 1), fr(e, 90000, 1 / t);
  }
  function hr(e, t) {
    var a;
    if (null === t) return e;
    for (a = t < e ? -8589934592 : 8589934592; 4294967296 < R(e - t); ) e += a;
    return e;
  }
  function Tr(e) {
    for (var t = 0; t < e.length; t++) if (e[t].key) return t;
    return -1;
  }
  function Er(e, t, a, r) {
    var n = e.samples.length;
    if (n) {
      for (var o = e.inputTimeScale, i = 0, d; i < n; i++)
        (d = e.samples[i]),
          (d.pts = hr(d.pts - (a.baseTime * o) / a.timescale, t * o) / o),
          (d.dts = hr(d.dts - (r.baseTime * o) / r.timescale, t * o) / o);
      var s = e.samples;
      return (e.samples = []), { samples: s };
    }
  }
  function vr(e, t, a) {
    var r = e.samples.length;
    if (r) {
      for (var n = e.inputTimeScale, o = 0, i; o < r; o++)
        (i = e.samples[o]),
          (i.pts = hr(i.pts - (9e4 * a.baseTime) / a.timescale, t * n) / n);
      e.samples.sort(function(e, t) {
        return e.pts - t.pts;
      });
      var d = e.samples;
      return (e.samples = []), { samples: d };
    }
  }
  function Sr(e, t, a, r) {
    if (null === e) return !0;
    var n = C(r, 1),
      o = t - e.baseTime / e.timescale;
    return R(o - a) > n;
  }
  function Lr(e, t) {
    var a = null == e ? void 0 : e.codec;
    return a && 4 < a.length
      ? a
      : 'hvc1' === a || 'hev1' === a
      ? 'hvc1.1.6.L120.90'
      : 'av01' === a
      ? 'av01.0.04M.08'
      : 'avc1' === a || t === Wo.VIDEO
      ? 'avc1.42e01e'
      : 'mp4a.40.5';
  }
  function Ar(e, t) {
    var a = null;
    return (
      0 < e.byteLength &&
        null != t &&
        null != t.key &&
        null !== t.iv &&
        null != t.method &&
        (a = t),
      a
    );
  }
  function Rr(e) {
    return 'then' in e && e.then instanceof Function;
  }
  function kr(e, t) {
    for (var a = new Uint8Array(t), r = 0, n = 0, o; n < e.length; n++)
      (o = e[n]), a.set(o, r), (r += o.length);
    return a;
  }
  function Dr(e, t) {
    if (e.length !== t.length) return !1;
    for (var a = 0; a < e.length; a++)
      if (!Ir(e[a].attrs, t[a].attrs)) return !1;
    return !0;
  }
  function Ir(e, t) {
    var a = e['STABLE-RENDITION-ID'];
    return a
      ? a === t['STABLE-RENDITION-ID']
      : ![
          'LANGUAGE',
          'NAME',
          'CHARACTERISTICS',
          'AUTOSELECT',
          'DEFAULT',
          'FORCED'
        ].some(function(a) {
          return e[a] !== t[a];
        });
  }
  function br(e) {
    for (var t = [], a = 0, r; a < e.length; a++)
      (r = e[a]),
        ('subtitles' === r.kind || 'captions' === r.kind) &&
          r.label &&
          t.push(e[a]);
    return t;
  }
  function Cr(e, t, a) {
    (a.a = e), (a.b = t);
  }
  function Pr(e, t, a) {
    return a.a === e && a.b === t;
  }
  function _r() {
    return { a: null, b: null };
  }
  function xr(e) {
    function t(e, t, a, r) {
      return 3600 * (0 | e) + 60 * (0 | t) + (0 | a) + parseFloat(r || 0);
    }
    var a = e.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);
    return a
      ? 59 < parseFloat(a[2])
        ? t(a[2], a[3], 0, a[4])
        : t(a[1], a[2], a[3], a[4])
      : null;
  }
  function Fr(e, t, a, r) {
    var n = r ? e.split(r) : [e];
    for (var o in n)
      if ('string' == typeof n[o]) {
        var d = n[o].split(a);
        if (2 === d.length) {
          var s = d[0],
            l = d[1];
          t(s, l);
        }
      }
  }
  function Nr(e, t, a) {
    function r() {
      var t = xr(e);
      if (null === t) throw new Error('Malformed timestamp: ' + i);
      return (e = e.replace(/^[^\sa-zA-Z-]+/, '')), t;
    }
    function n(e, t) {
      var r = new _s();
      Fr(
        e,
        function(e, t) {
          var n;
          switch (e) {
            case 'region':
              for (var o = a.length - 1; 0 <= o; o--)
                if (a[o].id === t) {
                  r.set(e, a[o].region);
                  break;
                }
              break;
            case 'vertical':
              r.alt(e, t, ['rl', 'lr']);
              break;
            case 'line':
              (n = t.split(',')),
                r.integer(e, n[0]),
                r.percent(e, n[0]) && r.set('snapToLines', !1),
                r.alt(e, n[0], ['auto']),
                2 === n.length &&
                  r.alt('lineAlign', n[1], ['start', Fs, 'end']);
              break;
            case 'position':
              (n = t.split(',')),
                r.percent(e, n[0]),
                2 === n.length &&
                  r.alt('positionAlign', n[1], [
                    'start',
                    Fs,
                    'end',
                    'line-left',
                    'line-right',
                    'auto'
                  ]);
              break;
            case 'size':
              r.percent(e, t);
              break;
            case 'align':
              r.alt(e, t, ['start', Fs, 'end', 'left', 'right']);
          }
        },
        /:/,
        /\s/
      ),
        (t.region = r.get('region', null)),
        (t.vertical = r.get('vertical', ''));
      var n = r.get('line', 'auto');
      'auto' === n && -1 === xs.line && (n = -1),
        (t.line = n),
        (t.lineAlign = r.get('lineAlign', 'start')),
        (t.snapToLines = r.get('snapToLines', !0)),
        (t.size = r.get('size', 100)),
        (t.align = r.get('align', Fs));
      var o = r.get('position', 'auto');
      'auto' === o &&
        50 === xs.position &&
        (o =
          'start' === t.align || 'left' === t.align
            ? 0
            : 'end' === t.align || 'right' === t.align
            ? 100
            : 50),
        (t.position = o);
    }
    function o() {
      e = e.replace(/^\s+/, '');
    }
    var i = e;
    if ((o(), (t.startTime = r()), o(), '-->' !== e.slice(0, 3)))
      throw new Error(
        "Malformed time stamp (time stamps must be separated by '-->'): " + i
      );
    (e = e.slice(3)), o(), (t.endTime = r()), o(), n(e, t);
  }
  function Or(e) {
    return e.replace(/<br(?: \/)?>/gi, '\n');
  }
  function Mr(e, t, a) {
    return Bs(e.toString()) + Bs(t.toString()) + Bs(a);
  }
  function wr(e, t, a, r, n, o, i) {
    var d = new Ns(),
      s = fi(new Uint8Array(e))
        .trim()
        .replace(Os, '\n')
        .split('\n'),
      l = [],
      c = t ? yr(t.baseTime, t.timescale) : 0,
      u = '00:00.000',
      g = 0,
      f = 0,
      p = !0,
      m;
    (d.oncue = function(e) {
      var o = a[r],
        i = a.ccOffset,
        d = (g - c) / 9e4;
      if (
        (null != o &&
          o.new &&
          (void 0 === f ? Us(a, r, d) : (i = a.ccOffset = o.start)),
        d)
      ) {
        if (!t) return void (m = new Error('Missing initPTS for VTT MPEGTS'));
        i = d - a.presentationOffset;
      }
      var s = e.endTime - e.startTime,
        u = hr(9e4 * (e.startTime + i - f), 9e4 * n) / 9e4;
      (e.startTime = C(u, 0)), (e.endTime = C(u + s, 0));
      var p = e.text.trim();
      (e.text = decodeURIComponent(encodeURIComponent(p))),
        e.id || (e.id = Mr(e.startTime, e.endTime, p)),
        0 < e.endTime && l.push(e);
    }),
      (d.onparsingerror = function(e) {
        m = e;
      }),
      (d.onflush = function() {
        return m ? void i(m) : void o(l);
      }),
      s.forEach(function(e) {
        if (p) {
          if (Ms(e, 'X-TIMESTAMP-MAP=')) {
            (p = !1),
              e
                .slice(16)
                .split(',')
                .forEach(function(e) {
                  Ms(e, 'LOCAL:')
                    ? (u = e.slice(6))
                    : Ms(e, 'MPEGTS:') && (g = parseInt(e.slice(7)));
                });
            try {
              f = ws(u) / 1e3;
            } catch (e) {
              m = e;
            }
            return;
          }
          '' === e && (p = !1);
        }
        d.parse(e + '\n');
      }),
      d.flush();
  }
  function Br(e, t, a, r) {
    var n = et(new Uint8Array(e), ['mdat']);
    if (0 === n.length) return void r(new Error('Could not parse IMSC1 mdat'));
    var o = n.map(function(e) {
        return fi(e);
      }),
      i = pr(t.baseTime, 1, t.timescale);
    try {
      o.forEach(function(e) {
        return a(Ur(e, i));
      });
    } catch (e) {
      r(e);
    }
  }
  function Ur(e, t) {
    var a = new DOMParser(),
      r = a.parseFromString(e, 'text/xml'),
      n = r.getElementsByTagName('tt')[0];
    if (!n) throw new Error('Invalid ttml');
    var o = {
        frameRate: 30,
        subFrameRate: 1,
        frameRateMultiplier: 0,
        tickRate: 0
      },
      i = Object.keys(o).reduce(function(e, t) {
        return (e[t] = n.getAttribute('ttp:' + t) || o[t]), e;
      }, {}),
      d = 'preserve' !== n.getAttribute('xml:space'),
      s = Kr(Gr(n, 'styling', 'style')),
      l = Kr(Gr(n, 'layout', 'region')),
      c = Gr(n, 'body', '[begin]');
    return [].map
      .call(c, function(e) {
        var a = Hr(e, d);
        if (!a || !e.hasAttribute('begin')) return null;
        var r = qr(e.getAttribute('begin'), i),
          n = qr(e.getAttribute('dur'), i),
          o = qr(e.getAttribute('end'), i);
        if (null === r) throw Yr(e);
        if (null === o) {
          if (null === n) throw Yr(e);
          o = r + n;
        }
        var c = new Cs(r - t, o - t, a);
        c.id = Mr(c.startTime, c.endTime, c.text);
        var u = l[e.getAttribute('region')],
          g = s[e.getAttribute('style')],
          f = Vr(u, g, s),
          p = f.textAlign;
        if (p) {
          var m = Vs[p];
          m && (c.lineAlign = m), (c.align = p);
        }
        return be(c, f), c;
      })
      .filter(function(e) {
        return null !== e;
      });
  }
  function Gr(e, t, a) {
    var r = e.getElementsByTagName(t)[0];
    return r ? [].slice.call(r.querySelectorAll(a)) : [];
  }
  function Kr(e) {
    return e.reduce(function(e, t) {
      var a = t.getAttribute('xml:id');
      return a && (e[a] = t), e;
    }, {});
  }
  function Hr(e, t) {
    return [].slice.call(e.childNodes).reduce(function(e, a, r) {
      var n;
      if ('br' === a.nodeName && r) return e + '\n';
      return null != (n = a.childNodes) && n.length
        ? Hr(a, t)
        : t
        ? e + a.textContent.trim().replace(/\s+/g, ' ')
        : e + a.textContent;
    }, '');
  }
  function Vr(e, t, a) {
    var r = 'http://www.w3.org/ns/ttml#styling',
      n = null,
      o = [
        'displayAlign',
        'textAlign',
        'color',
        'backgroundColor',
        'fontSize',
        'fontFamily'
      ],
      i = null != e && e.hasAttribute('style') ? e.getAttribute('style') : null;
    return (
      i && a.hasOwnProperty(i) && (n = a[i]),
      o.reduce(function(a, r) {
        var o =
          Wr(t, 'http://www.w3.org/ns/ttml#styling', r) ||
          Wr(e, 'http://www.w3.org/ns/ttml#styling', r) ||
          Wr(n, 'http://www.w3.org/ns/ttml#styling', r);
        return o && (a[r] = o), a;
      }, {})
    );
  }
  function Wr(e, t, a) {
    return e ? (e.hasAttributeNS(t, a) ? e.getAttributeNS(t, a) : null) : null;
  }
  function Yr(e) {
    return new Error('Could not parse ttml timestamp ' + e);
  }
  function qr(e, t) {
    if (!e) return null;
    var a = xr(e);
    return (
      null === a &&
        (Ks.test(e) ? (a = jr(e, t)) : Hs.test(e) && (a = zr(e, t))),
      a
    );
  }
  function jr(e, t) {
    var a = Ks.exec(e),
      r = (0 | a[4]) + (0 | a[5]) / t.subFrameRate;
    return 3600 * (0 | a[1]) + 60 * (0 | a[2]) + (0 | a[3]) + r / t.frameRate;
  }
  function zr(e, t) {
    var a = Hs.exec(e),
      r = +a[1],
      n = a[2];
    return 'h' === n
      ? 3600 * r
      : 'm' === n
      ? 60 * r
      : 'ms' === n
      ? 1e3 * r
      : 'f' === n
      ? r / t.frameRate
      : 't' === n
      ? r / t.tickRate
      : r;
  }
  function Xr(e, t) {
    return !!e && e.label === t.name && !(e.textTrack1 || e.textTrack2);
  }
  function Qr(e, t, a, r) {
    return L(t, r) - C(e, a);
  }
  function $r() {
    return {
      ccOffset: 0,
      presentationOffset: 0,
      0: { start: 0, prevCC: -1, new: !0 }
    };
  }
  function Zr(e, t, a, r) {
    e &&
      Object.keys(t).forEach(function(n) {
        var o = e
          .filter(function(e) {
            return e.groupId === n;
          })
          .map(function(e) {
            var o = be({}, e);
            return (
              (o.details = void 0),
              (o.attrs = new Ko(o.attrs)),
              (o.url = o.attrs.URI = Jr(
                e.url,
                e.attrs['STABLE-RENDITION-ID'],
                'PER-RENDITION-URIS',
                a
              )),
              (o.groupId = o.attrs['GROUP-ID'] = t[n]),
              (o.attrs['PATHWAY-ID'] = r),
              o
            );
          });
        e.push.apply(e, o);
      });
  }
  function Jr(e, t, a, r) {
    var n = r.HOST,
      o = r.PARAMS,
      i = r[a],
      d;
    t && ((d = null == i ? void 0 : i[t]), d && (e = d));
    var s = new self.URL(e);
    return (
      n && !d && (s.host = n),
      o &&
        Object.keys(o)
          .sort()
          .forEach(function(e) {
            e && s.searchParams.set(e, o[e]);
          }),
      s.href
    );
  }
  function en() {
    if (
      self.fetch &&
      self.AbortController &&
      self.ReadableStream &&
      self.Request
    )
      try {
        return new self.ReadableStream({}), !0;
      } catch (t) {}
    return !1;
  }
  function tn(e, t) {
    var a = {
      method: 'GET',
      mode: 'cors',
      credentials: 'same-origin',
      signal: t,
      headers: new self.Headers(be({}, e.headers))
    };
    return (
      e.rangeEnd &&
        a.headers.set(
          'Range',
          'bytes=' + e.rangeStart + '-' + (e.rangeEnd - 1 + '')
        ),
      a
    );
  }
  function an(e) {
    var t = tl.exec(e);
    if (t) return parseInt(t[2]) - parseInt(t[1]) + 1;
  }
  function rn(e) {
    var t = e.get('Content-Range');
    if (t) {
      var a = an(t);
      if (_o(a)) return a;
    }
    var r = e.get('Content-Length');
    if (r) return parseInt(r);
  }
  function nn(e, t) {
    return new self.Request(e.url, t);
  }
  function on(e, t) {
    if (
      (t.liveSyncDurationCount || t.liveMaxLatencyDurationCount) &&
      (t.liveSyncDuration || t.liveMaxLatencyDuration)
    )
      throw new Error(
        "Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration"
      );
    if (
      void 0 !== t.liveMaxLatencyDurationCount &&
      (void 0 === t.liveSyncDurationCount ||
        t.liveMaxLatencyDurationCount <= t.liveSyncDurationCount)
    )
      throw new Error(
        'Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"'
      );
    if (
      void 0 !== t.liveMaxLatencyDuration &&
      (void 0 === t.liveSyncDuration ||
        t.liveMaxLatencyDuration <= t.liveSyncDuration)
    )
      throw new Error(
        'Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"'
      );
    var a = dn(e),
      r = ['manifest', 'level', 'frag'],
      n = ['TimeOut', 'MaxRetry', 'RetryDelay', 'MaxRetryTimeout'];
    return (
      r.forEach(function(e) {
        var r = ('level' === e ? 'playlist' : e) + 'LoadPolicy',
          o = void 0 === t[r],
          i = [];
        n.forEach(function(n) {
          var d = e + 'Loading' + n,
            s = t[d];
          if (void 0 !== s && o) {
            i.push(d);
            var l = a[r].default;
            (t[r] = { default: l }),
              'TimeOut' === n
                ? ((l.maxLoadTimeMs = s), (l.maxTimeToFirstByteMs = s))
                : 'MaxRetry' === n
                ? ((l.errorRetry.maxNumRetry = s),
                  (l.timeoutRetry.maxNumRetry = s))
                : 'RetryDelay' === n
                ? ((l.errorRetry.retryDelayMs = s),
                  (l.timeoutRetry.retryDelayMs = s))
                : 'MaxRetryTimeout' === n
                ? ((l.errorRetry.maxRetryDelayMs = s),
                  (l.timeoutRetry.maxRetryDelayMs = s))
                : void 0;
          }
        }),
          i.length &&
            Bo.warn(
              'hls.js config: "' +
                i.join('", "') +
                '" setting(s) are deprecated, use "' +
                r +
                '": ' +
                JSON.stringify(t[r])
            );
      }),
      De(De({}, a), t)
    );
  }
  function dn(e) {
    return e && 'object' == typeof e
      ? Array.isArray(e)
        ? e.map(dn)
        : Object.keys(e).reduce(function(t, a) {
            return (t[a] = dn(e[a])), t;
          }, {})
      : e;
  }
  function sn(e) {
    var t = e.loader;
    if (t !== al && t !== el)
      Bo.log(
        '[config]: Custom loader detected, cannot enable progressive streaming'
      ),
        (e.progressive = !1);
    else {
      var a = en();
      a &&
        ((e.loader = al),
        (e.progressive = !0),
        (e.enableSoftwareAES = !0),
        Bo.log('[config]: Progressive streaming enabled, using FetchLoader'));
    }
  }
  function ln(e) {
    var t;
    if (
      (e.getBoundingClientRect &&
        e.parentNode &&
        (t = e.getBoundingClientRect()),
      !t)
    )
      return { left: 0, top: 0 };
    var a = document,
      r = a.body,
      n = a.documentElement,
      o = n.clientLeft || r.clientLeft || 0,
      i = window.pageXOffset || r.scrollLeft,
      d = t.left + i - o,
      s = n.clientTop || r.clientTop || 0,
      l = window.pageYOffset || r.scrollTop,
      c = t.top + l - s;
    return { left: S(d), top: S(c) };
  }
  function cn(e, t) {
    var a = {},
      r = ln(e),
      n = e.offsetWidth,
      o = e.offsetHeight,
      i = r.top,
      d = r.left,
      s = t.pageY,
      l = t.pageX;
    return (
      t.changedTouches &&
        ((l = t.changedTouches[0].pageX), (s = t.changedTouches[0].pageY)),
      (a.y = C(0, L(1, (i - s + o) / o))),
      (a.x = C(0, L(1, (l - d) / n))),
      a
    );
  }
  function un(e) {
    e && e.focus && e.focus();
  }
  function gn(e, t) {
    for (var a = e.className.split(' '), r = 0; r < a.length; r++)
      if (a[r].toLowerCase() === t.toLowerCase()) return !0;
    return !1;
  }
  function fn(e) {
    var t = e.currentTime,
      a = e.duration,
      r = e.percentage,
      n = e.className;
    return Ln.createElement(
      'div',
      {
        'data-current-time': ve(t, a),
        className: lo('video-react-play-progress video-react-slider-bar', n),
        style: { width: r }
      },
      Ln.createElement(
        'span',
        { className: 'video-react-control-text' },
        'Progress: ' + r
      )
    );
  }
  function pn(e) {
    function t(e, t) {
      var a = e / t || 0;
      return 100 * (1 <= a ? 1 : a) + '%';
    }
    var a = e.buffered,
      r = e.duration,
      n = e.className;
    if (!a || !a.length) return null;
    var o = a.end(a.length - 1),
      d = {};
    o > r && (o = r), (d.width = t(o, r));
    for (var s = [], l = 0; l < a.length; l++) {
      var c = a.start(l),
        u = a.end(l),
        g = Ln.createElement('div', {
          style: { left: t(c, o), width: t(u - c, o) },
          key: 'part-' + l
        });
      s.push(g);
    }
    return (
      0 === s.length && (s = null),
      Ln.createElement(
        'div',
        { style: d, className: lo('video-react-load-progress', n) },
        Ln.createElement(
          'span',
          { className: 'video-react-control-text' },
          'Loaded: 0%'
        ),
        s
      )
    );
  }
  function mn(e) {
    var t = e.duration,
      a = e.mouseTime,
      r = e.className,
      n = e.text;
    if (!a.time) return null;
    var o = n || ve(a.time, t);
    return Ln.createElement('div', {
      className: lo('video-react-mouse-display', r),
      style: { left: a.position + 'px' },
      'data-current-time': o
    });
  }
  function yn(e) {
    var t = e.player,
      a = t.currentTime,
      r = t.duration,
      n = e.className,
      o = r - a,
      i = ve(o);
    return Ln.createElement(
      'div',
      {
        className: lo(
          'video-react-remaining-time video-react-time-control video-react-control',
          n
        )
      },
      Ln.createElement(
        'div',
        { className: 'video-react-remaining-time-display', 'aria-live': 'off' },
        Ln.createElement(
          'span',
          { className: 'video-react-control-text' },
          'Remaining Time '
        ),
        '-' + i
      )
    );
  }
  function hn(e) {
    var t = e.player,
      a = t.currentTime,
      r = t.duration,
      n = e.className,
      o = ve(a, r);
    return Ln.createElement(
      'div',
      {
        className: lo(
          'video-react-current-time video-react-time-control video-react-control',
          n
        )
      },
      Ln.createElement(
        'div',
        { className: 'video-react-current-time-display', 'aria-live': 'off' },
        Ln.createElement(
          'span',
          { className: 'video-react-control-text' },
          'Current Time '
        ),
        o
      )
    );
  }
  function Tn(e) {
    var t = e.player.duration,
      a = e.className,
      r = ve(t);
    return Ln.createElement(
      'div',
      {
        className: lo(
          a,
          'video-react-duration video-react-time-control video-react-control'
        )
      },
      Ln.createElement(
        'div',
        { className: 'video-react-duration-display', 'aria-live': 'off' },
        Ln.createElement(
          'span',
          { className: 'video-react-control-text' },
          'Duration Time '
        ),
        r
      )
    );
  }
  function En(e) {
    var t = e.separator,
      a = e.className,
      r = t || '/';
    return Ln.createElement(
      'div',
      {
        className: lo('video-react-time-control video-react-time-divider', a),
        dir: 'ltr'
      },
      Ln.createElement('div', null, Ln.createElement('span', null, r))
    );
  }
  function vn(e) {
    var t = e.inline,
      a = e.className,
      r = O({}, e);
    return (
      delete r.children,
      delete r.inline,
      delete r.className,
      Ln.createElement(
        wl,
        O(
          {
            className: lo(
              a,
              {
                'video-react-menu-button-inline': !!t,
                'video-react-menu-button-popup': !t
              },
              'video-react-control video-react-button video-react-menu-button'
            )
          },
          r
        ),
        Ln.createElement(Ul, e)
      )
    );
  }
  function Sn(e) {
    var t = e.percentage,
      a = e.vertical,
      r = e.className,
      n = {};
    return (
      a ? (n.height = t) : (n.width = t),
      Ln.createElement(
        'div',
        { className: lo(r, 'video-react-volume-level'), style: n },
        Ln.createElement('span', { className: 'video-react-control-text' })
      )
    );
  }
  var Ln = 'default' in o ? o['default'] : o,
    An = 'function' == typeof Symbol && Symbol.for,
    b = An ? Symbol.for('react.element') : 60103,
    c = An ? Symbol.for('react.portal') : 60106,
    d = An ? Symbol.for('react.fragment') : 60107,
    e = An ? Symbol.for('react.strict_mode') : 60108,
    f = An ? Symbol.for('react.profiler') : 60114,
    g = An ? Symbol.for('react.provider') : 60109,
    h = An ? Symbol.for('react.context') : 60110,
    k = An ? Symbol.for('react.async_mode') : 60111,
    l = An ? Symbol.for('react.concurrent_mode') : 60111,
    m = An ? Symbol.for('react.forward_ref') : 60112,
    n = An ? Symbol.for('react.suspense') : 60113,
    p = An ? Symbol.for('react.suspense_list') : 60120,
    q = An ? Symbol.for('react.memo') : 60115,
    r = An ? Symbol.for('react.lazy') : 60116,
    t = An ? Symbol.for('react.block') : 60121,
    v = An ? Symbol.for('react.fundamental') : 60117,
    w = An ? Symbol.for('react.responder') : 60118,
    x = An ? Symbol.for('react.scope') : 60119,
    y = {
      AsyncMode: k,
      ConcurrentMode: l,
      ContextConsumer: h,
      ContextProvider: g,
      Element: b,
      ForwardRef: m,
      Fragment: d,
      Lazy: r,
      Memo: q,
      Portal: c,
      Profiler: f,
      StrictMode: e,
      Suspense: n,
      isAsyncMode: function t(e) {
        return i(e) || ee(e) === k;
      },
      isConcurrentMode: i,
      isContextConsumer: function t(e) {
        return ee(e) === h;
      },
      isContextProvider: function t(e) {
        return ee(e) === g;
      },
      isElement: function t(e) {
        return 'object' == typeof e && null !== e && e.$$typeof === b;
      },
      isForwardRef: function t(e) {
        return ee(e) === m;
      },
      isFragment: function t(e) {
        return ee(e) === d;
      },
      isLazy: function t(e) {
        return ee(e) === r;
      },
      isMemo: function t(e) {
        return ee(e) === q;
      },
      isPortal: function t(e) {
        return ee(e) === c;
      },
      isProfiler: function t(e) {
        return ee(e) === f;
      },
      isStrictMode: function a(t) {
        return ee(t) === e;
      },
      isSuspense: function t(e) {
        return ee(e) === n;
      },
      isValidElementType: function a(o) {
        return (
          'string' == typeof o ||
          'function' == typeof o ||
          o === d ||
          o === l ||
          o === f ||
          o === e ||
          o === n ||
          o === p ||
          ('object' == typeof o &&
            null !== o &&
            (o.$$typeof === r ||
              o.$$typeof === q ||
              o.$$typeof === g ||
              o.$$typeof === h ||
              o.$$typeof === m ||
              o.$$typeof === v ||
              o.$$typeof === w ||
              o.$$typeof === x ||
              o.$$typeof === t))
        );
      },
      typeOf: ee
    },
    Rn = J(function(e, t) {}),
    kn = Rn.AsyncMode,
    Dn = Rn.ConcurrentMode,
    In = Rn.ContextConsumer,
    bn = Rn.ContextProvider,
    Cn = Rn.Element,
    Pn = Rn.ForwardRef,
    _n = Rn.Fragment,
    xn = Rn.Lazy,
    Fn = Rn.Memo,
    Nn = Rn.Portal,
    On = Rn.Profiler,
    Mn = Rn.StrictMode,
    wn = Rn.Suspense,
    Bn = Rn.isAsyncMode,
    Un = Rn.isConcurrentMode,
    Gn = Rn.isContextConsumer,
    Kn = Rn.isContextProvider,
    Hn = Rn.isElement,
    Vn = Rn.isForwardRef,
    Wn = Rn.isFragment,
    Yn = Rn.isLazy,
    qn = Rn.isMemo,
    jn = Rn.isPortal,
    zn = Rn.isProfiler,
    Xn = Rn.isStrictMode,
    Qn = Rn.isSuspense,
    $n = Rn.isValidElementType,
    Zn = Rn.typeOf,
    Jn = J(function(e) {
      e.exports = y;
    }),
    eo = Object.getOwnPropertySymbols,
    ao = Object.prototype.hasOwnProperty,
    ro = Object.prototype.propertyIsEnumerable,
    no = (function e() {
      try {
        if (!Object.assign) return !1;
        var t = new String('abc');
        if (((t[5] = 'de'), '5' === Object.getOwnPropertyNames(t)[0]))
          return !1;
        for (var a = {}, r = 0; 10 > r; r++) a['_' + _(r)] = r;
        var n = Object.getOwnPropertyNames(a).map(function(e) {
          return a[e];
        });
        if ('0123456789' !== n.join('')) return !1;
        var o = {};
        return (
          [
            'a',
            'b',
            'c',
            'd',
            'e',
            'f',
            'g',
            'h',
            'i',
            'j',
            'k',
            'l',
            'm',
            'n',
            'o',
            'p',
            'q',
            'r',
            's',
            't'
          ].forEach(function(e) {
            o[e] = e;
          }),
          'abcdefghijklmnopqrst' === Object.keys(Object.assign({}, o)).join('')
        );
      } catch (e) {
        return !1;
      }
    })()
      ? Object.assign
      : function(e, t) {
          for (var a = A(e), r = 1, n, o; r < arguments.length; r++) {
            for (var d in ((n = Object(arguments[r])), n))
              ao.call(n, d) && (a[d] = n[d]);
            if (eo) {
              o = eo(n);
              for (var l = 0; l < o.length; l++)
                ro.call(n, o[l]) && (a[o[l]] = n[o[l]]);
            }
          }
          return a;
        },
    oo = Function.call.bind(Object.prototype.hasOwnProperty);
  te.resetWarningCache = z;
  var io = function e() {
      function t(e, t, a, r, n, o) {
        if (o !== 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED') {
          var i = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types'
          );
          throw ((i.name = 'Invariant Violation'), i);
        }
      }
      function a() {
        return t;
      }
      t.isRequired = t;
      var r = {
        array: t,
        bigint: t,
        bool: t,
        func: t,
        number: t,
        object: t,
        string: t,
        symbol: t,
        any: t,
        arrayOf: a,
        element: t,
        elementType: t,
        instanceOf: a,
        node: t,
        objectOf: a,
        oneOf: a,
        oneOfType: a,
        shape: a,
        exact: a,
        checkPropTypes: te,
        resetWarningCache: z
      };
      return (r.PropTypes = r), r;
    },
    so = J(function(e) {
      e.exports = io();
    }),
    lo = J(function(e) {
      (function() {
        function t() {
          for (var e = [], r = 0, n; r < arguments.length; r++)
            if (((n = arguments[r]), n)) {
              var o = typeof n;
              if ('string' === o || 'number' === o) e.push(n);
              else if (Array.isArray(n)) {
                if (n.length) {
                  var d = t.apply(null, n);
                  d && e.push(d);
                }
              } else if ('object' === o) {
                if (
                  n.toString !== Object.prototype.toString &&
                  !n.toString.toString().includes('[native code]')
                ) {
                  e.push(n.toString());
                  continue;
                }
                for (var s in n) a.call(n, s) && n[s] && e.push(s);
              }
            }
          return e.join(' ');
        }
        var a = {}.hasOwnProperty;
        e.exports
          ? ((t.default = t), (e.exports = t))
          : (window.classNames = t);
      })();
    }),
    co = (function() {
      return (
        ('function' == typeof Symbol && Symbol.observable) || '@@observable'
      );
    })(),
    uo = function e() {
      return Math.random()
        .toString(36)
        .substring(7)
        .split('')
        .join('.');
    },
    go = {
      INIT: '@@redux/INIT' + uo(),
      REPLACE: '@@redux/REPLACE' + uo(),
      PROBE_UNKNOWN_ACTION: function e() {
        return '@@redux/PROBE_UNKNOWN_ACTION' + uo();
      }
    },
    fo = Object.freeze({
      __proto__: null,
      LOAD_START: 'video-react/LOAD_START',
      CAN_PLAY: 'video-react/CAN_PLAY',
      WAITING: 'video-react/WAITING',
      CAN_PLAY_THROUGH: 'video-react/CAN_PLAY_THROUGH',
      PLAYING: 'video-react/PLAYING',
      PLAY: 'video-react/PLAY',
      PAUSE: 'video-react/PAUSE',
      END: 'video-react/END',
      SEEKING: 'video-react/SEEKING',
      SEEKED: 'video-react/SEEKED',
      SEEKING_TIME: 'video-react/SEEKING_TIME',
      END_SEEKING: 'video-react/END_SEEKING',
      DURATION_CHANGE: 'video-react/DURATION_CHANGE',
      TIME_UPDATE: 'video-react/TIME_UPDATE',
      VOLUME_CHANGE: 'video-react/VOLUME_CHANGE',
      PROGRESS_CHANGE: 'video-react/PROGRESS_CHANGE',
      RATE_CHANGE: 'video-react/RATE_CHANGE',
      SUSPEND: 'video-react/SUSPEND',
      ABORT: 'video-react/ABORT',
      EMPTIED: 'video-react/EMPTIED',
      STALLED: 'video-react/STALLED',
      LOADED_META_DATA: 'video-react/LOADED_META_DATA',
      LOADED_DATA: 'video-react/LOADED_DATA',
      RESIZE: 'video-react/RESIZE',
      ERROR: 'video-react/ERROR',
      ACTIVATE_TEXT_TRACK: 'video-react/ACTIVATE_TEXT_TRACK',
      handleLoadStart: function t(e) {
        return { type: 'video-react/LOAD_START', videoProps: e };
      },
      handleCanPlay: function t(e) {
        return { type: 'video-react/CAN_PLAY', videoProps: e };
      },
      handleWaiting: function t(e) {
        return { type: 'video-react/WAITING', videoProps: e };
      },
      handleCanPlayThrough: function t(e) {
        return { type: 'video-react/CAN_PLAY_THROUGH', videoProps: e };
      },
      handlePlaying: function t(e) {
        return { type: 'video-react/PLAYING', videoProps: e };
      },
      handlePlay: function t(e) {
        return { type: 'video-react/PLAY', videoProps: e };
      },
      handlePause: function t(e) {
        return { type: 'video-react/PAUSE', videoProps: e };
      },
      handleEnd: function t(e) {
        return { type: 'video-react/END', videoProps: e };
      },
      handleSeeking: function t(e) {
        return { type: 'video-react/SEEKING', videoProps: e };
      },
      handleSeeked: function t(e) {
        return { type: 'video-react/SEEKED', videoProps: e };
      },
      handleDurationChange: function t(e) {
        return { type: 'video-react/DURATION_CHANGE', videoProps: e };
      },
      handleTimeUpdate: function t(e) {
        return { type: 'video-react/TIME_UPDATE', videoProps: e };
      },
      handleVolumeChange: function t(e) {
        return { type: 'video-react/VOLUME_CHANGE', videoProps: e };
      },
      handleProgressChange: function t(e) {
        return { type: 'video-react/PROGRESS_CHANGE', videoProps: e };
      },
      handleRateChange: function t(e) {
        return { type: 'video-react/RATE_CHANGE', videoProps: e };
      },
      handleSuspend: function t(e) {
        return { type: 'video-react/SUSPEND', videoProps: e };
      },
      handleAbort: function t(e) {
        return { type: 'video-react/ABORT', videoProps: e };
      },
      handleEmptied: function t(e) {
        return { type: 'video-react/EMPTIED', videoProps: e };
      },
      handleStalled: function t(e) {
        return { type: 'video-react/STALLED', videoProps: e };
      },
      handleLoadedMetaData: function t(e) {
        return { type: 'video-react/LOADED_META_DATA', videoProps: e };
      },
      handleLoadedData: function t(e) {
        return { type: 'video-react/LOADED_DATA', videoProps: e };
      },
      handleResize: function t(e) {
        return { type: 'video-react/RESIZE', videoProps: e };
      },
      handleError: function t(e) {
        return { type: 'video-react/ERROR', videoProps: e };
      },
      handleSeekingTime: function t(e) {
        return { type: 'video-react/SEEKING_TIME', time: e };
      },
      handleEndSeeking: function t(e) {
        return { type: 'video-react/END_SEEKING', time: e };
      },
      activateTextTrack: function t(e) {
        return { type: 'video-react/ACTIVATE_TEXT_TRACK', textTrack: e };
      }
    }),
    po = (function() {
      function e() {}
      var t = e.prototype;
      return (
        (t.request = function t(e) {
          e.requestFullscreen
            ? e.requestFullscreen()
            : e.webkitRequestFullscreen
            ? e.webkitRequestFullscreen()
            : e.mozRequestFullScreen
            ? e.mozRequestFullScreen()
            : e.msRequestFullscreen && e.msRequestFullscreen();
        }),
        (t.exit = function e() {
          document.exitFullscreen
            ? document.exitFullscreen()
            : document.webkitExitFullscreen
            ? document.webkitExitFullscreen()
            : document.mozCancelFullScreen
            ? document.mozCancelFullScreen()
            : document.msExitFullscreen && document.msExitFullscreen();
        }),
        (t.addEventListener = function t(e) {
          document.addEventListener('fullscreenchange', e),
            document.addEventListener('webkitfullscreenchange', e),
            document.addEventListener('mozfullscreenchange', e),
            document.addEventListener('MSFullscreenChange', e);
        }),
        (t.removeEventListener = function t(e) {
          document.removeEventListener('fullscreenchange', e),
            document.removeEventListener('webkitfullscreenchange', e),
            document.removeEventListener('mozfullscreenchange', e),
            document.removeEventListener('MSFullscreenChange', e);
        }),
        N(e, [
          {
            key: 'isFullscreen',
            get: function e() {
              return (
                document.fullscreenElement ||
                document.webkitFullscreenElement ||
                document.mozFullScreenElement ||
                document.msFullscreenElement
              );
            }
          },
          {
            key: 'enabled',
            get: function e() {
              return (
                document.fullscreenEnabled ||
                document.webkitFullscreenEnabled ||
                document.mozFullScreenEnabled ||
                document.msFullscreenEnabled
              );
            }
          }
        ]),
        e
      );
    })(),
    mo = new po(),
    yo = Object.freeze({
      __proto__: null,
      OPERATE: 'video-react/OPERATE',
      FULLSCREEN_CHANGE: 'video-react/FULLSCREEN_CHANGE',
      PLAYER_ACTIVATE: 'video-react/PLAYER_ACTIVATE',
      USER_ACTIVATE: 'video-react/USER_ACTIVATE',
      handleFullscreenChange: function t(e) {
        return { type: 'video-react/FULLSCREEN_CHANGE', isFullscreen: e };
      },
      activate: function t(e) {
        return { type: 'video-react/PLAYER_ACTIVATE', activity: e };
      },
      userActivate: function t(e) {
        return { type: 'video-react/USER_ACTIVATE', activity: e };
      },
      play: oe,
      pause: ie,
      togglePlay: de,
      seek: se,
      forward: le,
      replay: ce,
      changeRate: ue,
      changeVolume: ge,
      mute: fe,
      toggleFullscreen: pe
    }),
    ho = {
      currentSrc: null,
      duration: 0,
      currentTime: 0,
      seekingTime: 0,
      buffered: null,
      waiting: !1,
      seeking: !1,
      paused: !0,
      autoPaused: !1,
      ended: !1,
      playbackRate: 1,
      muted: !1,
      volume: 1,
      readyState: 0,
      networkState: 0,
      videoWidth: 0,
      videoHeight: 0,
      hasStarted: !1,
      userActivity: !0,
      isActive: !1,
      isFullscreen: !1,
      activeTextTrack: null
    },
    To = { count: 0, operation: { action: '', source: '' } },
    Eo = (function() {
      function e(e) {
        (this.store = e || ne(he)),
          (this.video = null),
          (this.rootElement = null);
      }
      var t = e.prototype;
      return (
        (t.getActions = function e() {
          function t(e) {
            return function t() {
              var n = e.apply(a, arguments);
              'undefined' != typeof n && r(n);
            };
          }
          var a = this,
            r = this.store.dispatch,
            n = O({}, yo, fo);
          return Object.keys(n)
            .filter(function(e) {
              return 'function' == typeof n[e];
            })
            .reduce(function(e, a) {
              return (e[a] = t(n[a])), e;
            }, {});
        }),
        (t.getState = function e() {
          return this.store.getState();
        }),
        (t.subscribeToStateChange = function a(e, t) {
          t || (t = this.getState.bind(this));
          var r = t(),
            n = function a() {
              var n = t();
              if (n !== r) {
                var o = r;
                (r = n), e(n, o);
              }
            };
          return this.store.subscribe(n);
        }),
        (t.subscribeToOperationStateChange = function t(e) {
          var a = this;
          return this.subscribeToStateChange(e, function() {
            return a.getState().operation;
          });
        }),
        (t.subscribeToPlayerStateChange = function t(e) {
          var a = this;
          return this.subscribeToStateChange(e, function() {
            return a.getState().player;
          });
        }),
        e
      );
    })(),
    vo = {
      actions: so.object,
      player: so.object,
      position: so.string,
      className: so.string
    },
    So = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {}),
        (a.handleClick = function e() {
          var t = this.props.actions;
          t.play();
        }),
        (a.render = function e() {
          var t = this.props,
            a = t.player,
            r = t.position;
          return Ln.createElement(
            'button',
            {
              className: lo(
                'video-react-button',
                'video-react-big-play-button',
                'video-react-big-play-button-' + r,
                this.props.className,
                { 'big-play-button-hide': a.hasStarted || !a.currentSrc }
              ),
              type: 'button',
              'aria-live': 'polite',
              tabIndex: '0',
              onClick: this.handleClick
            },
            Ln.createElement(
              'span',
              { className: 'video-react-control-text' },
              'Play Video'
            )
          );
        }),
        t
      );
    })(o.Component);
  (So.propTypes = vo),
    (So.defaultProps = { position: 'left' }),
    (So.displayName = 'BigPlayButton');
  var Lo = { player: so.object, className: so.string };
  (Te.propTypes = Lo), (Te.displayName = 'LoadingSpinner');
  var Ao = {
    poster: so.string,
    player: so.object,
    actions: so.object,
    className: so.string
  };
  (Ee.propTypes = Ao), (Ee.displayName = 'PosterImage');
  var Ro = ['order'],
    ko =
      E ||
      function(e) {
        return e !== e;
      },
    Do = function a(e, t) {
      return e.filter(t)[0];
    },
    Io = function a(e, t) {
      var r = e.type,
        n = t.type;
      return 'string' == typeof r || 'string' == typeof n
        ? r === n
        : !('function' != typeof r || 'function' != typeof n) &&
            r.displayName === n.displayName;
    },
    bo = [
      'error',
      'src',
      'srcObject',
      'currentSrc',
      'crossOrigin',
      'networkState',
      'preload',
      'buffered',
      'readyState',
      'seeking',
      'currentTime',
      'duration',
      'paused',
      'defaultPlaybackRate',
      'playbackRate',
      'played',
      'seekable',
      'ended',
      'autoplay',
      'loop',
      'mediaGroup',
      'controller',
      'controls',
      'volume',
      'muted',
      'defaultMuted',
      'audioTracks',
      'videoTracks',
      'textTracks',
      'width',
      'height',
      'videoWidth',
      'videoHeight',
      'poster'
    ],
    Co = { exports: {} };
  (function(e, t) {
    (function(t) {
      var a = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/,
        r = /^(?=([^\/?#]*))\1([^]*)$/,
        n = /(?:\/|^)\.(?=\/)/g,
        o = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g,
        i = {
          buildAbsoluteURL: function n(e, t, a) {
            if (((a = a || {}), (e = e.trim()), (t = t.trim()), !t)) {
              if (!a.alwaysNormalize) return e;
              var o = i.parseURL(e);
              if (!o) throw new Error('Error trying to parse base URL.');
              return (o.path = i.normalizePath(o.path)), i.buildURLFromParts(o);
            }
            var d = i.parseURL(t);
            if (!d) throw new Error('Error trying to parse relative URL.');
            if (d.scheme)
              return a.alwaysNormalize
                ? ((d.path = i.normalizePath(d.path)), i.buildURLFromParts(d))
                : t;
            var s = i.parseURL(e);
            if (!s) throw new Error('Error trying to parse base URL.');
            if (!s.netLoc && s.path && '/' !== s.path[0]) {
              var l = r.exec(s.path);
              (s.netLoc = l[1]), (s.path = l[2]);
            }
            s.netLoc && !s.path && (s.path = '/');
            var c = {
              scheme: s.scheme,
              netLoc: d.netLoc,
              path: null,
              params: d.params,
              query: d.query,
              fragment: d.fragment
            };
            if (!d.netLoc && ((c.netLoc = s.netLoc), '/' !== d.path[0]))
              if (!d.path)
                (c.path = s.path),
                  d.params ||
                    ((c.params = s.params), !d.query && (c.query = s.query));
              else {
                var u = s.path,
                  g = u.substring(0, u.lastIndexOf('/') + 1) + d.path;
                c.path = i.normalizePath(g);
              }
            return (
              null === c.path &&
                (c.path = a.alwaysNormalize ? i.normalizePath(d.path) : d.path),
              i.buildURLFromParts(c)
            );
          },
          parseURL: function t(e) {
            var r = a.exec(e);
            return r
              ? {
                  scheme: r[1] || '',
                  netLoc: r[2] || '',
                  path: r[3] || '',
                  params: r[4] || '',
                  query: r[5] || '',
                  fragment: r[6] || ''
                }
              : null;
          },
          normalizePath: function t(e) {
            for (
              e = e
                .split('')
                .reverse()
                .join('')
                .replace(n, '');
              e.length !== (e = e.replace(o, '')).length;

            );
            return e
              .split('')
              .reverse()
              .join('');
          },
          buildURLFromParts: function t(e) {
            return (
              e.scheme + e.netLoc + e.path + e.params + e.query + e.fragment
            );
          }
        };
      e.exports = i;
    })();
  })(Co);
  var Po = Co.exports,
    _o =
      Number.isFinite ||
      function(e) {
        return 'number' == typeof e && isFinite(e);
      },
    xo = (function(e) {
      return (
        (e.MEDIA_ATTACHING = 'hlsMediaAttaching'),
        (e.MEDIA_ATTACHED = 'hlsMediaAttached'),
        (e.MEDIA_DETACHING = 'hlsMediaDetaching'),
        (e.MEDIA_DETACHED = 'hlsMediaDetached'),
        (e.BUFFER_RESET = 'hlsBufferReset'),
        (e.BUFFER_CODECS = 'hlsBufferCodecs'),
        (e.BUFFER_CREATED = 'hlsBufferCreated'),
        (e.BUFFER_APPENDING = 'hlsBufferAppending'),
        (e.BUFFER_APPENDED = 'hlsBufferAppended'),
        (e.BUFFER_EOS = 'hlsBufferEos'),
        (e.BUFFER_FLUSHING = 'hlsBufferFlushing'),
        (e.BUFFER_FLUSHED = 'hlsBufferFlushed'),
        (e.MANIFEST_LOADING = 'hlsManifestLoading'),
        (e.MANIFEST_LOADED = 'hlsManifestLoaded'),
        (e.MANIFEST_PARSED = 'hlsManifestParsed'),
        (e.LEVEL_SWITCHING = 'hlsLevelSwitching'),
        (e.LEVEL_SWITCHED = 'hlsLevelSwitched'),
        (e.LEVEL_LOADING = 'hlsLevelLoading'),
        (e.LEVEL_LOADED = 'hlsLevelLoaded'),
        (e.LEVEL_UPDATED = 'hlsLevelUpdated'),
        (e.LEVEL_PTS_UPDATED = 'hlsLevelPtsUpdated'),
        (e.LEVELS_UPDATED = 'hlsLevelsUpdated'),
        (e.AUDIO_TRACKS_UPDATED = 'hlsAudioTracksUpdated'),
        (e.AUDIO_TRACK_SWITCHING = 'hlsAudioTrackSwitching'),
        (e.AUDIO_TRACK_SWITCHED = 'hlsAudioTrackSwitched'),
        (e.AUDIO_TRACK_LOADING = 'hlsAudioTrackLoading'),
        (e.AUDIO_TRACK_LOADED = 'hlsAudioTrackLoaded'),
        (e.SUBTITLE_TRACKS_UPDATED = 'hlsSubtitleTracksUpdated'),
        (e.SUBTITLE_TRACKS_CLEARED = 'hlsSubtitleTracksCleared'),
        (e.SUBTITLE_TRACK_SWITCH = 'hlsSubtitleTrackSwitch'),
        (e.SUBTITLE_TRACK_LOADING = 'hlsSubtitleTrackLoading'),
        (e.SUBTITLE_TRACK_LOADED = 'hlsSubtitleTrackLoaded'),
        (e.SUBTITLE_FRAG_PROCESSED = 'hlsSubtitleFragProcessed'),
        (e.CUES_PARSED = 'hlsCuesParsed'),
        (e.NON_NATIVE_TEXT_TRACKS_FOUND = 'hlsNonNativeTextTracksFound'),
        (e.INIT_PTS_FOUND = 'hlsInitPtsFound'),
        (e.FRAG_LOADING = 'hlsFragLoading'),
        (e.FRAG_LOAD_EMERGENCY_ABORTED = 'hlsFragLoadEmergencyAborted'),
        (e.FRAG_LOADED = 'hlsFragLoaded'),
        (e.FRAG_DECRYPTED = 'hlsFragDecrypted'),
        (e.FRAG_PARSING_INIT_SEGMENT = 'hlsFragParsingInitSegment'),
        (e.FRAG_PARSING_USERDATA = 'hlsFragParsingUserdata'),
        (e.FRAG_PARSING_METADATA = 'hlsFragParsingMetadata'),
        (e.FRAG_PARSED = 'hlsFragParsed'),
        (e.FRAG_BUFFERED = 'hlsFragBuffered'),
        (e.FRAG_CHANGED = 'hlsFragChanged'),
        (e.FPS_DROP = 'hlsFpsDrop'),
        (e.FPS_DROP_LEVEL_CAPPING = 'hlsFpsDropLevelCapping'),
        (e.ERROR = 'hlsError'),
        (e.DESTROYING = 'hlsDestroying'),
        (e.KEY_LOADING = 'hlsKeyLoading'),
        (e.KEY_LOADED = 'hlsKeyLoaded'),
        (e.LIVE_BACK_BUFFER_REACHED = 'hlsLiveBackBufferReached'),
        (e.BACK_BUFFER_REACHED = 'hlsBackBufferReached'),
        e
      );
    })({}),
    Fo = (function(e) {
      return (
        (e.NETWORK_ERROR = 'networkError'),
        (e.MEDIA_ERROR = 'mediaError'),
        (e.KEY_SYSTEM_ERROR = 'keySystemError'),
        (e.MUX_ERROR = 'muxError'),
        (e.OTHER_ERROR = 'otherError'),
        e
      );
    })({}),
    No = (function(e) {
      return (
        (e.KEY_SYSTEM_NO_KEYS = 'keySystemNoKeys'),
        (e.KEY_SYSTEM_NO_ACCESS = 'keySystemNoAccess'),
        (e.KEY_SYSTEM_NO_SESSION = 'keySystemNoSession'),
        (e.KEY_SYSTEM_NO_CONFIGURED_LICENSE = 'keySystemNoConfiguredLicense'),
        (e.KEY_SYSTEM_LICENSE_REQUEST_FAILED = 'keySystemLicenseRequestFailed'),
        (e.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED =
          'keySystemServerCertificateRequestFailed'),
        (e.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED =
          'keySystemServerCertificateUpdateFailed'),
        (e.KEY_SYSTEM_SESSION_UPDATE_FAILED = 'keySystemSessionUpdateFailed'),
        (e.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED =
          'keySystemStatusOutputRestricted'),
        (e.KEY_SYSTEM_STATUS_INTERNAL_ERROR = 'keySystemStatusInternalError'),
        (e.MANIFEST_LOAD_ERROR = 'manifestLoadError'),
        (e.MANIFEST_LOAD_TIMEOUT = 'manifestLoadTimeOut'),
        (e.MANIFEST_PARSING_ERROR = 'manifestParsingError'),
        (e.MANIFEST_INCOMPATIBLE_CODECS_ERROR =
          'manifestIncompatibleCodecsError'),
        (e.LEVEL_EMPTY_ERROR = 'levelEmptyError'),
        (e.LEVEL_LOAD_ERROR = 'levelLoadError'),
        (e.LEVEL_LOAD_TIMEOUT = 'levelLoadTimeOut'),
        (e.LEVEL_PARSING_ERROR = 'levelParsingError'),
        (e.LEVEL_SWITCH_ERROR = 'levelSwitchError'),
        (e.AUDIO_TRACK_LOAD_ERROR = 'audioTrackLoadError'),
        (e.AUDIO_TRACK_LOAD_TIMEOUT = 'audioTrackLoadTimeOut'),
        (e.SUBTITLE_LOAD_ERROR = 'subtitleTrackLoadError'),
        (e.SUBTITLE_TRACK_LOAD_TIMEOUT = 'subtitleTrackLoadTimeOut'),
        (e.FRAG_LOAD_ERROR = 'fragLoadError'),
        (e.FRAG_LOAD_TIMEOUT = 'fragLoadTimeOut'),
        (e.FRAG_DECRYPT_ERROR = 'fragDecryptError'),
        (e.FRAG_PARSING_ERROR = 'fragParsingError'),
        (e.FRAG_GAP = 'fragGap'),
        (e.REMUX_ALLOC_ERROR = 'remuxAllocError'),
        (e.KEY_LOAD_ERROR = 'keyLoadError'),
        (e.KEY_LOAD_TIMEOUT = 'keyLoadTimeOut'),
        (e.BUFFER_ADD_CODEC_ERROR = 'bufferAddCodecError'),
        (e.BUFFER_INCOMPATIBLE_CODECS_ERROR = 'bufferIncompatibleCodecsError'),
        (e.BUFFER_APPEND_ERROR = 'bufferAppendError'),
        (e.BUFFER_APPENDING_ERROR = 'bufferAppendingError'),
        (e.BUFFER_STALLED_ERROR = 'bufferStalledError'),
        (e.BUFFER_FULL_ERROR = 'bufferFullError'),
        (e.BUFFER_SEEK_OVER_HOLE = 'bufferSeekOverHole'),
        (e.BUFFER_NUDGE_ON_STALL = 'bufferNudgeOnStall'),
        (e.INTERNAL_EXCEPTION = 'internalException'),
        (e.INTERNAL_ABORTED = 'aborted'),
        (e.UNKNOWN = 'unknown'),
        e
      );
    })({}),
    Oo = function e() {},
    Mo = { trace: Oo, debug: Oo, log: Oo, warn: Oo, info: Oo, error: Oo },
    wo = Mo,
    Bo = wo,
    Uo = /^(\d+)x(\d+)$/,
    Go = /(.+?)=(".*?"|.*?)(?:,|$)/g,
    Ko = (function() {
      function e(t) {
        for (var a in ('string' == typeof t && (t = e.parseAttrList(t)), t))
          t.hasOwnProperty(a) &&
            ('X-' === a.substring(0, 2) &&
              ((this.clientAttrs = this.clientAttrs || []),
              this.clientAttrs.push(a)),
            (this[a] = t[a]));
      }
      var t = e.prototype;
      return (
        (t.decimalInteger = function t(e) {
          var a = parseInt(this[e], 10);
          return a > D ? 1 / 0 : a;
        }),
        (t.hexadecimalInteger = function t(e) {
          if (this[e]) {
            var a = (this[e] || '0x').slice(2);
            a = (1 & a.length ? '0' : '') + a;
            for (
              var r = new Uint8Array(a.length / 2), n = 0;
              n < a.length / 2;
              n++
            )
              r[n] = parseInt(a.slice(2 * n, 2 * n + 2), 16);
            return r;
          }
          return null;
        }),
        (t.hexadecimalIntegerAsNumber = function t(e) {
          var a = parseInt(this[e], 16);
          return a > D ? 1 / 0 : a;
        }),
        (t.decimalFloatingPoint = function t(e) {
          return parseFloat(this[e]);
        }),
        (t.optionalFloat = function a(e, t) {
          var r = this[e];
          return r ? parseFloat(r) : t;
        }),
        (t.enumeratedString = function t(e) {
          return this[e];
        }),
        (t.bool = function t(e) {
          return 'YES' === this[e];
        }),
        (t.decimalResolution = function t(e) {
          var a = Uo.exec(this[e]);
          return null === a
            ? void 0
            : { width: parseInt(a[1], 10), height: parseInt(a[2], 10) };
        }),
        (e.parseAttrList = function t(e) {
          var a = {},
            r = '"',
            n;
          for (Go.lastIndex = 0; null !== (n = Go.exec(e)); ) {
            var o = n[2];
            0 === o.indexOf(r) &&
              o.lastIndexOf(r) === o.length - 1 &&
              (o = o.slice(1, -1));
            var i = n[1].trim();
            a[i] = o;
          }
          return a;
        }),
        e
      );
    })(),
    Ho = (function() {
      function e(e, t) {
        if (
          ((this.attr = void 0),
          (this._startDate = void 0),
          (this._endDate = void 0),
          (this._badValueForSameId = void 0),
          t)
        ) {
          var a = t.attr;
          for (var r in a)
            if (Object.prototype.hasOwnProperty.call(e, r) && e[r] !== a[r]) {
              Bo.warn(
                'DATERANGE tag attribute: "' +
                  r +
                  '" does not match for tags with ID: "' +
                  e.ID +
                  '"'
              ),
                (this._badValueForSameId = r);
              break;
            }
          e = be(new Ko({}), a, e);
        }
        if (
          ((this.attr = e),
          (this._startDate = new Date(e['START-DATE'])),
          'END-DATE' in this.attr)
        ) {
          var n = new Date(this.attr['END-DATE']);
          _o(n.getTime()) && (this._endDate = n);
        }
      }
      return (
        N(e, [
          {
            key: 'id',
            get: function e() {
              return this.attr.ID;
            }
          },
          {
            key: 'class',
            get: function e() {
              return this.attr.CLASS;
            }
          },
          {
            key: 'startDate',
            get: function e() {
              return this._startDate;
            }
          },
          {
            key: 'endDate',
            get: function e() {
              if (this._endDate) return this._endDate;
              var t = this.duration;
              return null === t
                ? null
                : new Date(this._startDate.getTime() + 1e3 * t);
            }
          },
          {
            key: 'duration',
            get: function e() {
              if ('DURATION' in this.attr) {
                var t = this.attr.decimalFloatingPoint('DURATION');
                if (_o(t)) return t;
              } else if (this._endDate)
                return (
                  (this._endDate.getTime() - this._startDate.getTime()) / 1e3
                );
              return null;
            }
          },
          {
            key: 'plannedDuration',
            get: function e() {
              return 'PLANNED-DURATION' in this.attr
                ? this.attr.decimalFloatingPoint('PLANNED-DURATION')
                : null;
            }
          },
          {
            key: 'endOnNext',
            get: function e() {
              return this.attr.bool('END-ON-NEXT');
            }
          },
          {
            key: 'isValid',
            get: function e() {
              return (
                !!this.id &&
                !this._badValueForSameId &&
                _o(this.startDate.getTime()) &&
                (null === this.duration || 0 <= this.duration) &&
                (!this.endOnNext || !!this.class)
              );
            }
          }
        ]),
        e
      );
    })(),
    Vo = function e() {
      (this.aborted = !1),
        (this.loaded = 0),
        (this.retry = 0),
        (this.total = 0),
        (this.chunkCount = 0),
        (this.bwEstimate = 0),
        (this.loading = { start: 0, first: 0, end: 0 }),
        (this.parsing = { start: 0, end: 0 }),
        (this.buffering = { start: 0, first: 0, end: 0 });
    },
    Wo = { AUDIO: 'audio', VIDEO: 'video', AUDIOVIDEO: 'audiovideo' },
    Yo = (function() {
      function e(e) {
        var t;
        (this._byteRange = null),
          (this._url = null),
          (this.baseurl = void 0),
          (this.relurl = void 0),
          (this.elementaryStreams =
            ((t = {}),
            (t[Wo.AUDIO] = null),
            (t[Wo.VIDEO] = null),
            (t[Wo.AUDIOVIDEO] = null),
            t)),
          (this.baseurl = e);
      }
      var t = e.prototype;
      return (
        (t.setByteRange = function a(e, t) {
          var r = e.split('@', 2),
            n = [];
          (n[0] =
            1 === r.length ? (t ? t.byteRangeEndOffset : 0) : parseInt(r[1])),
            (n[1] = parseInt(r[0]) + n[0]),
            (this._byteRange = n);
        }),
        N(e, [
          {
            key: 'byteRange',
            get: function e() {
              return this._byteRange ? this._byteRange : [];
            }
          },
          {
            key: 'byteRangeStartOffset',
            get: function e() {
              return this.byteRange[0];
            }
          },
          {
            key: 'byteRangeEndOffset',
            get: function e() {
              return this.byteRange[1];
            }
          },
          {
            key: 'url',
            get: function e() {
              return (
                !this._url &&
                  this.baseurl &&
                  this.relurl &&
                  (this._url = Po.buildAbsoluteURL(this.baseurl, this.relurl, {
                    alwaysNormalize: !0
                  })),
                this._url || ''
              );
            },
            set: function t(e) {
              this._url = e;
            }
          }
        ]),
        e
      );
    })(),
    qo = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, a) || this),
          (r._decryptdata = null),
          (r.rawProgramDateTime = null),
          (r.programDateTime = null),
          (r.tagList = []),
          (r.duration = 0),
          (r.sn = 0),
          (r.levelkeys = void 0),
          (r.type = void 0),
          (r.loader = null),
          (r.keyLoader = null),
          (r.level = -1),
          (r.cc = 0),
          (r.startPTS = void 0),
          (r.endPTS = void 0),
          (r.startDTS = void 0),
          (r.endDTS = void 0),
          (r.start = 0),
          (r.deltaPTS = void 0),
          (r.maxStartPTS = void 0),
          (r.minEndPTS = void 0),
          (r.stats = new Vo()),
          (r.urlId = 0),
          (r.data = void 0),
          (r.bitrateTest = !1),
          (r.title = null),
          (r.initSegment = null),
          (r.endList = void 0),
          (r.gap = void 0),
          (r.type = t),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.setKeyFormat = function t(e) {
          if (this.levelkeys) {
            var a = this.levelkeys[e];
            a &&
              !this._decryptdata &&
              (this._decryptdata = a.getDecryptData(this.sn));
          }
        }),
        (a.abortRequests = function e() {
          var t, a;
          null == (t = this.loader) ? void 0 : t.abort(),
            null == (a = this.keyLoader) ? void 0 : a.abort();
        }),
        (a.setElementaryStreamInfo = function i(e, t, a, r, n, o) {
          void 0 === o && (o = !1);
          var d = this.elementaryStreams,
            s = d[e];
          return s
            ? void ((s.startPTS = L(s.startPTS, t)),
              (s.endPTS = C(s.endPTS, a)),
              (s.startDTS = L(s.startDTS, r)),
              (s.endDTS = C(s.endDTS, n)))
            : void (d[e] = {
                startPTS: t,
                endPTS: a,
                startDTS: r,
                endDTS: n,
                partial: o
              });
        }),
        (a.clearElementaryStreamInfo = function e() {
          var t = this.elementaryStreams;
          (t[Wo.AUDIO] = null), (t[Wo.VIDEO] = null), (t[Wo.AUDIOVIDEO] = null);
        }),
        N(t, [
          {
            key: 'decryptdata',
            get: function e() {
              var t = this.levelkeys;
              if (!t && !this._decryptdata) return null;
              if (
                !this._decryptdata &&
                this.levelkeys &&
                !this.levelkeys.NONE
              ) {
                var a = this.levelkeys.identity;
                if (a) this._decryptdata = a.getDecryptData(this.sn);
                else {
                  var r = Object.keys(this.levelkeys);
                  if (1 === r.length)
                    return (this._decryptdata = this.levelkeys[
                      r[0]
                    ].getDecryptData(this.sn));
                }
              }
              return this._decryptdata;
            }
          },
          {
            key: 'end',
            get: function e() {
              return this.start + this.duration;
            }
          },
          {
            key: 'endProgramDateTime',
            get: function e() {
              if (null === this.programDateTime) return null;
              if (!_o(this.programDateTime)) return null;
              var t = _o(this.duration) ? this.duration : 0;
              return this.programDateTime + 1e3 * t;
            }
          },
          {
            key: 'encrypted',
            get: function e() {
              var t;
              if (null != (t = this._decryptdata) && t.encrypted) return !0;
              if (this.levelkeys) {
                var a = Object.keys(this.levelkeys),
                  r = a.length;
                if (1 < r || (1 === r && this.levelkeys[a[0]].encrypted))
                  return !0;
              }
              return !1;
            }
          }
        ]),
        t
      );
    })(Yo),
    jo = (function(e) {
      function t(t, a, r, n, o) {
        var i;
        (i = e.call(this, r) || this),
          (i.fragOffset = 0),
          (i.duration = 0),
          (i.gap = !1),
          (i.independent = !1),
          (i.relurl = void 0),
          (i.fragment = void 0),
          (i.index = void 0),
          (i.stats = new Vo()),
          (i.duration = t.decimalFloatingPoint('DURATION')),
          (i.gap = t.bool('GAP')),
          (i.independent = t.bool('INDEPENDENT')),
          (i.relurl = t.enumeratedString('URI')),
          (i.fragment = a),
          (i.index = n);
        var d = t.enumeratedString('BYTERANGE');
        return (
          d && i.setByteRange(d, o),
          o && (i.fragOffset = o.fragOffset + o.duration),
          i
        );
      }
      return (
        M(t, e),
        N(t, [
          {
            key: 'start',
            get: function e() {
              return this.fragment.start + this.fragOffset;
            }
          },
          {
            key: 'end',
            get: function e() {
              return this.start + this.duration;
            }
          },
          {
            key: 'loaded',
            get: function e() {
              var t = this.elementaryStreams;
              return !!(t.audio || t.video || t.audiovideo);
            }
          }
        ]),
        t
      );
    })(Yo),
    zo = (function() {
      function e(e) {
        (this.PTSKnown = !1),
          (this.alignedSliding = !1),
          (this.averagetargetduration = void 0),
          (this.endCC = 0),
          (this.endSN = 0),
          (this.fragments = void 0),
          (this.fragmentHint = void 0),
          (this.partList = null),
          (this.dateRanges = void 0),
          (this.live = !0),
          (this.ageHeader = 0),
          (this.advancedDateTime = void 0),
          (this.updated = !0),
          (this.advanced = !0),
          (this.availabilityDelay = void 0),
          (this.misses = 0),
          (this.startCC = 0),
          (this.startSN = 0),
          (this.startTimeOffset = null),
          (this.targetduration = 0),
          (this.totalduration = 0),
          (this.type = null),
          (this.url = void 0),
          (this.m3u8 = ''),
          (this.version = null),
          (this.canBlockReload = !1),
          (this.canSkipUntil = 0),
          (this.canSkipDateRanges = !1),
          (this.skippedSegments = 0),
          (this.recentlyRemovedDateranges = void 0),
          (this.partHoldBack = 0),
          (this.holdBack = 0),
          (this.partTarget = 0),
          (this.preloadHint = void 0),
          (this.renditionReports = void 0),
          (this.tuneInGoal = 0),
          (this.deltaUpdateFailed = void 0),
          (this.driftStartTime = 0),
          (this.driftEndTime = 0),
          (this.driftStart = 0),
          (this.driftEnd = 0),
          (this.encryptedFragments = void 0),
          (this.playlistParsingError = null),
          (this.variableList = null),
          (this.hasVariableRefs = !1),
          (this.fragments = []),
          (this.encryptedFragments = []),
          (this.dateRanges = {}),
          (this.url = e);
      }
      var t = e.prototype;
      return (
        (t.reloaded = function t(e) {
          if (!e) return (this.advanced = !0), void (this.updated = !0);
          var a = this.lastPartSn - e.lastPartSn,
            r = this.lastPartIndex - e.lastPartIndex;
          (this.updated = this.endSN !== e.endSN || !!r || !!a),
            (this.advanced =
              this.endSN > e.endSN || 0 < a || (0 === a && 0 < r)),
            (this.misses =
              this.updated || this.advanced ? P(0.6 * e.misses) : e.misses + 1),
            (this.availabilityDelay = e.availabilityDelay);
        }),
        N(e, [
          {
            key: 'hasProgramDateTime',
            get: function e() {
              return (
                !!this.fragments.length &&
                _o(this.fragments[this.fragments.length - 1].programDateTime)
              );
            }
          },
          {
            key: 'levelTargetDuration',
            get: function e() {
              return this.averagetargetduration || this.targetduration || 10;
            }
          },
          {
            key: 'drift',
            get: function e() {
              var t = this.driftEndTime - this.driftStartTime;
              if (0 < t) {
                var a = this.driftEnd - this.driftStart;
                return (1e3 * a) / t;
              }
              return 1;
            }
          },
          {
            key: 'edge',
            get: function e() {
              return this.partEnd || this.fragmentEnd;
            }
          },
          {
            key: 'partEnd',
            get: function e() {
              var t;
              return null != (t = this.partList) && t.length
                ? this.partList[this.partList.length - 1].end
                : this.fragmentEnd;
            }
          },
          {
            key: 'fragmentEnd',
            get: function e() {
              var t;
              return null != (t = this.fragments) && t.length
                ? this.fragments[this.fragments.length - 1].end
                : 0;
            }
          },
          {
            key: 'age',
            get: function e() {
              return this.advancedDateTime
                ? C(Date.now() - this.advancedDateTime, 0) / 1e3
                : 0;
            }
          },
          {
            key: 'lastPartIndex',
            get: function e() {
              var t;
              return null != (t = this.partList) && t.length
                ? this.partList[this.partList.length - 1].index
                : -1;
            }
          },
          {
            key: 'lastPartSn',
            get: function e() {
              var t;
              return null != (t = this.partList) && t.length
                ? this.partList[this.partList.length - 1].fragment.sn
                : this.endSN;
            }
          }
        ]),
        e
      );
    })(),
    Xo = {
      CLEARKEY: 'org.w3.clearkey',
      FAIRPLAY: 'com.apple.fps',
      PLAYREADY: 'com.microsoft.playready',
      WIDEVINE: 'com.widevine.alpha'
    },
    Qo = {
      CLEARKEY: 'org.w3.clearkey',
      FAIRPLAY: 'com.apple.streamingkeydelivery',
      PLAYREADY: 'com.microsoft.playready',
      WIDEVINE: 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'
    },
    $o = { WIDEVINE: 'edef8ba979d64acea3c827dcd51d21ed' },
    Zo = (function() {
      return 'undefined' != typeof self &&
        self.navigator &&
        self.navigator.requestMediaKeySystemAccess
        ? self.navigator.requestMediaKeySystemAccess.bind(self.navigator)
        : null;
    })(),
    Jo = function a(e, t) {
      return !!(
        t + 10 <= e.length &&
        73 === e[t] &&
        68 === e[t + 1] &&
        51 === e[t + 2] &&
        255 > e[t + 3] &&
        255 > e[t + 4] &&
        128 > e[t + 6] &&
        128 > e[t + 7] &&
        128 > e[t + 8] &&
        128 > e[t + 9]
      );
    },
    ei = function a(e, t) {
      return !!(
        t + 10 <= e.length &&
        51 === e[t] &&
        68 === e[t + 1] &&
        73 === e[t + 2] &&
        255 > e[t + 3] &&
        255 > e[t + 4] &&
        128 > e[t + 6] &&
        128 > e[t + 7] &&
        128 > e[t + 8] &&
        128 > e[t + 9]
      );
    },
    ti = function a(e, t) {
      for (var r = t, n = 0; Jo(e, t); ) {
        n += 10;
        var o = ai(e, t + 6);
        (n += o), ei(e, t + 10) && (n += 10), (t += n);
      }
      return 0 < n ? e.subarray(r, r + n) : void 0;
    },
    ai = function a(e, t) {
      var r = 0;
      return (
        (r = (127 & e[t]) << 21),
        (r |= (127 & e[t + 1]) << 14),
        (r |= (127 & e[t + 2]) << 7),
        (r |= 127 & e[t + 3]),
        r
      );
    },
    ri = function a(e, t) {
      return Jo(e, t) && ai(e, t + 6) + 10 <= e.length - t;
    },
    ni = function t(e) {
      for (var a = di(e), r = 0, n; r < a.length; r++)
        if (((n = a[r]), oi(n))) return gi(n);
    },
    oi = function t(e) {
      return (
        e &&
        'PRIV' === e.key &&
        'com.apple.streaming.transportStreamTimestamp' === e.info
      );
    },
    ii = function t(e) {
      var a = _(e[0], e[1], e[2], e[3]),
        r = ai(e, 4),
        n = 10;
      return { type: a, size: r, data: e.subarray(n, n + r) };
    },
    di = function t(e) {
      for (var a = 0, r = []; Jo(e, a); ) {
        var n = ai(e, a + 6);
        a += 10;
        for (var o = a + n; a + 8 < o; ) {
          var i = ii(e.subarray(a)),
            d = si(i);
          d && r.push(d), (a += i.size + 10);
        }
        ei(e, a) && (a += 10);
      }
      return r;
    },
    si = function t(e) {
      if ('PRIV' === e.type) return li(e);
      return 'W' === e.type[0] ? ui(e) : ci(e);
    },
    li = function t(e) {
      if (!(2 > e.size)) {
        var a = fi(e.data, !0),
          r = new Uint8Array(e.data.subarray(a.length + 1));
        return { key: e.type, info: a, data: r.buffer };
      }
    },
    ci = function t(e) {
      if (!(2 > e.size)) {
        if ('TXXX' === e.type) {
          var a = 1,
            r = fi(e.data.subarray(a), !0);
          a += r.length + 1;
          var n = fi(e.data.subarray(a));
          return { key: e.type, info: r, data: n };
        }
        var o = fi(e.data.subarray(1));
        return { key: e.type, data: o };
      }
    },
    ui = function t(e) {
      if ('WXXX' === e.type) {
        if (2 > e.size) return;
        var a = 1,
          r = fi(e.data.subarray(a), !0);
        a += r.length + 1;
        var n = fi(e.data.subarray(a));
        return { key: e.type, info: r, data: n };
      }
      var o = fi(e.data);
      return { key: e.type, data: o };
    },
    gi = function t(e) {
      if (8 === e.data.byteLength) {
        var a = new Uint8Array(e.data),
          r = 1 & a[3],
          n = (a[4] << 23) + (a[5] << 15) + (a[6] << 7) + a[7];
        return (n /= 45), r && (n += 47721858.84), S(n);
      }
    },
    fi = function a(e, t) {
      void 0 === t && (t = !1);
      var r = ze();
      if (r) {
        var n = r.decode(e);
        if (t) {
          var o = n.indexOf('\0');
          return -1 === o ? n : n.substring(0, o);
        }
        return n.replace(/\0/g, '');
      }
      for (var d = e.length, s = '', l = 0, u, g, f; l < d; ) {
        if (((u = e[l++]), 0 === u && t)) return s;
        if (0 !== u && 3 !== u)
          switch (u >> 4) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              s += _(u);
              break;
            case 12:
            case 13:
              (g = e[l++]), (s += _(((31 & u) << 6) | (63 & g)));
              break;
            case 14:
              (g = e[l++]),
                (f = e[l++]),
                (s += _(((15 & u) << 12) | ((63 & g) << 6) | ((63 & f) << 0)));
          }
      }
      return s;
    },
    pi = {
      hexDump: function t(e) {
        for (var a = '', r = 0, n; r < e.length; r++)
          (n = e[r].toString(16)), 2 > n.length && (n = '0' + n), (a += n);
        return a;
      }
    },
    mi = I(2, 32) - 1,
    yi = [].push,
    hi = { video: 1, audio: 2, id3: 3, text: 4 },
    Ti = {},
    Ei = (function() {
      function e(e, t, a, r, n) {
        void 0 === r && (r = [1]),
          void 0 === n && (n = null),
          (this.uri = void 0),
          (this.method = void 0),
          (this.keyFormat = void 0),
          (this.keyFormatVersions = void 0),
          (this.encrypted = void 0),
          (this.isCommonEncryption = void 0),
          (this.iv = null),
          (this.key = null),
          (this.keyId = null),
          (this.pssh = null),
          (this.method = e),
          (this.uri = t),
          (this.keyFormat = a),
          (this.keyFormatVersions = r),
          (this.iv = n),
          (this.encrypted = !!e && 'NONE' !== e),
          (this.isCommonEncryption = this.encrypted && 'AES-128' !== e);
      }
      e.clearKeyUriToKeyIdMap = function e() {
        Ti = {};
      };
      var t = e.prototype;
      return (
        (t.isSupported = function e() {
          if (this.method) {
            if ('AES-128' === this.method || 'NONE' === this.method) return !0;
            if ('identity' === this.keyFormat)
              return 'SAMPLE-AES' === this.method;
            switch (this.keyFormat) {
              case Qo.FAIRPLAY:
              case Qo.WIDEVINE:
              case Qo.PLAYREADY:
              case Qo.CLEARKEY:
                return (
                  -1 !==
                  [
                    'ISO-23001-7',
                    'SAMPLE-AES',
                    'SAMPLE-AES-CENC',
                    'SAMPLE-AES-CTR'
                  ].indexOf(this.method)
                );
            }
          }
          return !1;
        }),
        (t.getDecryptData = function a(t) {
          if (!this.encrypted || !this.uri) return null;
          if ('AES-128' === this.method && this.uri && !this.iv) {
            'number' != typeof t &&
              ('AES-128' === this.method &&
                !this.iv &&
                Bo.warn(
                  'missing IV for initialization segment with method="' +
                    this.method +
                    '" - compliance issue'
                ),
              (t = 0));
            var r = vt(t),
              n = new e(
                this.method,
                this.uri,
                'identity',
                this.keyFormatVersions,
                r
              );
            return n;
          }
          var o = Ue(this.uri);
          if (o)
            switch (this.keyFormat) {
              case Qo.WIDEVINE:
                (this.pssh = o),
                  22 <= o.length &&
                    (this.keyId = o.subarray(o.length - 22, o.length - 6));
                break;
              case Qo.PLAYREADY: {
                var i = new Uint8Array([
                  154,
                  4,
                  240,
                  121,
                  152,
                  64,
                  66,
                  134,
                  171,
                  146,
                  230,
                  91,
                  224,
                  136,
                  95,
                  149
                ]);
                this.pssh = Tt(i, null, o);
                var d = new Uint16Array(
                    o.buffer,
                    o.byteOffset,
                    o.byteLength / 2
                  ),
                  s = _.apply(null, Array.from(d)),
                  l = s.substring(s.indexOf('<'), s.length),
                  c = new DOMParser(),
                  u = c.parseFromString(l, 'text/xml'),
                  g = u.getElementsByTagName('KID')[0];
                if (g) {
                  var f = g.childNodes[0]
                    ? g.childNodes[0].nodeValue
                    : g.getAttribute('VALUE');
                  if (f) {
                    var p = Me(f).subarray(0, 16);
                    Be(p), (this.keyId = p);
                  }
                }
                break;
              }
              default: {
                var m = o.subarray(0, 16);
                if (16 !== m.length) {
                  var y = new Uint8Array(16);
                  y.set(m, 16 - m.length), (m = y);
                }
                this.keyId = m;
                break;
              }
            }
          if (!this.keyId || 16 !== this.keyId.byteLength) {
            var h = Ti[this.uri];
            if (!h) {
              var T = Object.keys(Ti).length % D;
              h = new Uint8Array(16);
              var E = new DataView(h.buffer, 12, 4);
              E.setUint32(0, T), (Ti[this.uri] = h);
            }
            this.keyId = h;
          }
          return this;
        }),
        e
      );
    })(),
    vi = /\{\$([a-zA-Z0-9-_]+)\}/g,
    Si = {
      audio: {
        a3ds: !0,
        'ac-3': !0,
        'ac-4': !0,
        alac: !0,
        alaw: !0,
        dra1: !0,
        'dts+': !0,
        'dts-': !0,
        dtsc: !0,
        dtse: !0,
        dtsh: !0,
        'ec-3': !0,
        enca: !0,
        g719: !0,
        g726: !0,
        m4ae: !0,
        mha1: !0,
        mha2: !0,
        mhm1: !0,
        mhm2: !0,
        mlpa: !0,
        mp4a: !0,
        'raw ': !0,
        Opus: !0,
        opus: !0,
        samr: !0,
        sawb: !0,
        sawp: !0,
        sevc: !0,
        sqcp: !0,
        ssmv: !0,
        twos: !0,
        ulaw: !0
      },
      video: {
        avc1: !0,
        avc2: !0,
        avc3: !0,
        avc4: !0,
        avcp: !0,
        av01: !0,
        drac: !0,
        dva1: !0,
        dvav: !0,
        dvh1: !0,
        dvhe: !0,
        encv: !0,
        hev1: !0,
        hvc1: !0,
        mjp2: !0,
        mp4v: !0,
        mvc1: !0,
        mvc2: !0,
        mvc3: !0,
        mvc4: !0,
        resv: !0,
        rv60: !0,
        s263: !0,
        svc1: !0,
        svc2: !0,
        'vc-1': !0,
        vp08: !0,
        vp09: !0
      },
      text: { stpp: !0, wvtt: !0 }
    },
    Li = Dt(),
    Ai = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\r\n]*)[\r\n]+/g,
    Ri = /#EXT-X-MEDIA:(.*)/g,
    ki = /^#EXT(?:INF|-X-TARGETDURATION):/m,
    Di = new RegExp(
      [
        /#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,
        /(?!#) *(\S[\S ]*)/.source,
        /#EXT-X-BYTERANGE:*(.+)/.source,
        /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,
        /#.*/.source
      ].join('|'),
      'g'
    ),
    Ii = new RegExp(
      [
        /#(EXTM3U)/.source,
        /#EXT-X-(DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/
          .source,
        /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/
          .source,
        /#EXT-X-(DISCONTINUITY|ENDLIST|GAP)/.source,
        /(#)([^:]*):(.*)/.source,
        /(#)(.*)(?:.*)\r?\n?/.source
      ].join('|')
    ),
    bi = (function() {
      function e() {}
      return (
        (e.findGroup = function a(e, t) {
          for (var r = 0, n; r < e.length; r++)
            if (((n = e[r]), n.id === t)) return n;
        }),
        (e.convertAVC1ToAVCOTI = function t(e) {
          var a = e.split('.');
          if (2 < a.length) {
            var r = a.shift() + '.';
            return (
              (r += parseInt(a.shift()).toString(16)),
              (r += ('000' + parseInt(a.shift()).toString(16)).slice(-4)),
              r
            );
          }
          return e;
        }),
        (e.resolve = function a(e, t) {
          return Po.buildAbsoluteURL(t, e, { alwaysNormalize: !0 });
        }),
        (e.isMediaPlaylist = function t(e) {
          return ki.test(e);
        }),
        (e.parseMasterPlaylist = function r(t, a) {
          var n = St(t),
            o = {
              contentSteering: null,
              levels: [],
              playlistParsingError: null,
              sessionData: null,
              sessionKeys: null,
              startTimeOffset: null,
              variableList: null,
              hasVariableRefs: n
            },
            i = [];
          Ai.lastIndex = 0;
          for (var d; null != (d = Ai.exec(t)); )
            if (d[1]) {
              var s = new Ko(d[1]),
                l;
              Lt(o, s, [
                'CODECS',
                'SUPPLEMENTAL-CODECS',
                'ALLOWED-CPC',
                'PATHWAY-ID',
                'STABLE-VARIANT-ID',
                'AUDIO',
                'VIDEO',
                'SUBTITLES',
                'CLOSED-CAPTIONS',
                'NAME'
              ]);
              var c = At(o, d[2]),
                u = {
                  attrs: s,
                  bitrate:
                    s.decimalInteger('AVERAGE-BANDWIDTH') ||
                    s.decimalInteger('BANDWIDTH'),
                  name: s.NAME,
                  url: e.resolve(c, a)
                },
                g = s.decimalResolution('RESOLUTION');
              g && ((u.width = g.width), (u.height = g.height)),
                _t(
                  (s.CODECS || '').split(/[ ,]+/).filter(function(e) {
                    return e;
                  }),
                  u
                ),
                u.videoCodec &&
                  -1 !== u.videoCodec.indexOf('avc1') &&
                  (u.videoCodec = e.convertAVC1ToAVCOTI(u.videoCodec)),
                (null != (l = u.unknownCodecs) && l.length) || i.push(u),
                o.levels.push(u);
            } else if (d[3]) {
              var f = d[3],
                p = d[4];
              switch (f) {
                case 'SESSION-DATA': {
                  var m = new Ko(p);
                  Lt(o, m, ['DATA-ID', 'LANGUAGE', 'VALUE', 'URI']);
                  var y = m['DATA-ID'];
                  y &&
                    (null === o.sessionData && (o.sessionData = {}),
                    (o.sessionData[y] = m));
                  break;
                }
                case 'SESSION-KEY': {
                  var h = Ct(p, a, o);
                  h.encrypted && h.isSupported()
                    ? (null === o.sessionKeys && (o.sessionKeys = []),
                      o.sessionKeys.push(h))
                    : Bo.warn(
                        '[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "' +
                          p +
                          '"'
                      );
                  break;
                }
                case 'DEFINE': {
                  {
                    var T = new Ko(p);
                    Lt(o, T, ['NAME', 'VALUE', 'QUERYPARAM']), Rt(o, T, a);
                  }
                  break;
                }
                case 'CONTENT-STEERING': {
                  var E = new Ko(p);
                  Lt(o, E, ['SERVER-URI', 'PATHWAY-ID']),
                    (o.contentSteering = {
                      uri: e.resolve(E['SERVER-URI'], a),
                      pathwayId: E['PATHWAY-ID'] || '.'
                    });
                  break;
                }
                case 'START': {
                  o.startTimeOffset = Pt(p);
                  break;
                }
              }
            }
          var v = 0 < i.length && i.length < o.levels.length;
          return (
            (o.levels = v ? i : o.levels),
            0 === o.levels.length &&
              (o.playlistParsingError = new Error(
                'no levels found in manifest'
              )),
            o
          );
        }),
        (e.parseMasterPlaylistMedia = function n(t, a, r) {
          var o = {},
            i = r.levels,
            d = {
              AUDIO: i.map(function(e) {
                return { id: e.attrs.AUDIO, audioCodec: e.audioCodec };
              }),
              SUBTITLES: i.map(function(e) {
                return { id: e.attrs.SUBTITLES, textCodec: e.textCodec };
              }),
              'CLOSED-CAPTIONS': []
            },
            s = 0,
            l;
          for (Ri.lastIndex = 0; null !== (l = Ri.exec(t)); ) {
            var c = new Ko(l[1]),
              u = c.TYPE;
            if (u) {
              var g = d[u],
                f = o[u] || [];
              (o[u] = f),
                Lt(r, c, [
                  'URI',
                  'GROUP-ID',
                  'LANGUAGE',
                  'ASSOC-LANGUAGE',
                  'STABLE-RENDITION-ID',
                  'NAME',
                  'INSTREAM-ID',
                  'CHARACTERISTICS',
                  'CHANNELS'
                ]);
              var p = {
                attrs: c,
                bitrate: 0,
                id: s++,
                groupId: c['GROUP-ID'] || '',
                instreamId: c['INSTREAM-ID'],
                name: c.NAME || c.LANGUAGE || '',
                type: u,
                default: c.bool('DEFAULT'),
                autoselect: c.bool('AUTOSELECT'),
                forced: c.bool('FORCED'),
                lang: c.LANGUAGE,
                url: c.URI ? e.resolve(c.URI, a) : ''
              };
              if (null != g && g.length) {
                var m = e.findGroup(g, p.groupId) || g[0];
                xt(p, m, 'audioCodec'), xt(p, m, 'textCodec');
              }
              f.push(p);
            }
          }
          return o;
        }),
        (e.parseLevelPlaylist = function d(e, t, a, r, n, o) {
          var s = new zo(t),
            l = s.fragments,
            c = null,
            u = 0,
            g = 0,
            f = 0,
            p = 0,
            m = null,
            y = new qo(r, t),
            h = -1,
            T = !1,
            E,
            v,
            S;
          for (
            Di.lastIndex = 0, s.m3u8 = e, s.hasVariableRefs = St(e);
            null !== (E = Di.exec(e));

          ) {
            T &&
              ((T = !1),
              (y = new qo(r, t)),
              (y.start = f),
              (y.sn = u),
              (y.cc = p),
              (y.level = a),
              c &&
                ((y.initSegment = c),
                (y.rawProgramDateTime = c.rawProgramDateTime),
                (c.rawProgramDateTime = null)));
            var L = E[1];
            if (L) {
              y.duration = parseFloat(L);
              var A = (' ' + E[2]).slice(1);
              (y.title = A || null),
                y.tagList.push(A ? ['INF', L, A] : ['INF', L]);
            } else if (E[3]) {
              if (_o(y.duration)) {
                (y.start = f),
                  S && Mt(y, S, s),
                  (y.sn = u),
                  (y.level = a),
                  (y.cc = p),
                  (y.urlId = n),
                  l.push(y);
                var R = (' ' + E[3]).slice(1);
                (y.relurl = At(s, R)),
                  Nt(y, m),
                  (m = y),
                  (f += y.duration),
                  u++,
                  (g = 0),
                  (T = !0);
              }
            } else if (E[4]) {
              var k = (' ' + E[4]).slice(1);
              m ? y.setByteRange(k, m) : y.setByteRange(k);
            } else if (E[5])
              (y.rawProgramDateTime = (' ' + E[5]).slice(1)),
                y.tagList.push(['PROGRAM-DATE-TIME', y.rawProgramDateTime]),
                -1 === h && (h = l.length);
            else {
              if (((E = E[0].match(Ii)), !E)) {
                Bo.warn('No matches on slow regex match for level playlist!');
                continue;
              }
              for (v = 1; v < E.length && 'undefined' == typeof E[v]; v++);
              var D = (' ' + E[v]).slice(1),
                I = (' ' + E[v + 1]).slice(1),
                b = E[v + 2] ? (' ' + E[v + 2]).slice(1) : '';
              switch (D) {
                case 'PLAYLIST-TYPE':
                  s.type = I.toUpperCase();
                  break;
                case 'MEDIA-SEQUENCE':
                  u = s.startSN = parseInt(I);
                  break;
                case 'SKIP': {
                  var P = new Ko(I);
                  Lt(s, P, ['RECENTLY-REMOVED-DATERANGES']);
                  var _ = P.decimalInteger('SKIPPED-SEGMENTS');
                  if (_o(_)) {
                    s.skippedSegments = _;
                    for (var x = _; x--; ) l.unshift(null);
                    u += _;
                  }
                  var F = P.enumeratedString('RECENTLY-REMOVED-DATERANGES');
                  F && (s.recentlyRemovedDateranges = F.split('\t'));
                  break;
                }
                case 'TARGETDURATION':
                  s.targetduration = C(parseInt(I), 1);
                  break;
                case 'VERSION':
                  s.version = parseInt(I);
                  break;
                case 'EXTM3U':
                  break;
                case 'ENDLIST':
                  s.live = !1;
                  break;
                case '#':
                  (I || b) && y.tagList.push(b ? [I, b] : [I]);
                  break;
                case 'DISCONTINUITY':
                  p++, y.tagList.push(['DIS']);
                  break;
                case 'GAP':
                  (y.gap = !0), y.tagList.push([D]);
                  break;
                case 'BITRATE':
                  y.tagList.push([D, I]);
                  break;
                case 'DATERANGE': {
                  var N = new Ko(I);
                  Lt(s, N, [
                    'ID',
                    'CLASS',
                    'START-DATE',
                    'END-DATE',
                    'SCTE35-CMD',
                    'SCTE35-OUT',
                    'SCTE35-IN'
                  ]),
                    Lt(s, N, N.clientAttrs);
                  var O = new Ho(N, s.dateRanges[N.ID]);
                  O.isValid || s.skippedSegments
                    ? (s.dateRanges[O.id] = O)
                    : Bo.warn('Ignoring invalid DATERANGE tag: "' + I + '"'),
                    y.tagList.push(['EXT-X-DATERANGE', I]);
                  break;
                }
                case 'DEFINE': {
                  {
                    var M = new Ko(I);
                    Lt(s, M, ['NAME', 'VALUE', 'IMPORT', 'QUERYPARAM']),
                      'IMPORT' in M ? kt(s, M, o) : Rt(s, M, t);
                  }
                  break;
                }
                case 'DISCONTINUITY-SEQUENCE':
                  p = parseInt(I);
                  break;
                case 'KEY': {
                  var w = Ct(I, t, s);
                  if (w.isSupported()) {
                    if ('NONE' === w.method) {
                      S = void 0;
                      break;
                    }
                    S || (S = {}),
                      S[w.keyFormat] && (S = be({}, S)),
                      (S[w.keyFormat] = w);
                  } else
                    Bo.warn(
                      '[Keys] Ignoring invalid EXT-X-KEY tag: "' + I + '"'
                    );
                  break;
                }
                case 'START':
                  s.startTimeOffset = Pt(I);
                  break;
                case 'MAP': {
                  var B = new Ko(I);
                  if ((Lt(s, B, ['BYTERANGE', 'URI']), y.duration)) {
                    var U = new qo(r, t);
                    Ot(U, B, a, S),
                      (c = U),
                      (y.initSegment = c),
                      c.rawProgramDateTime &&
                        !y.rawProgramDateTime &&
                        (y.rawProgramDateTime = c.rawProgramDateTime);
                  } else Ot(y, B, a, S), (c = y), (T = !0);
                  break;
                }
                case 'SERVER-CONTROL': {
                  var G = new Ko(I);
                  (s.canBlockReload = G.bool('CAN-BLOCK-RELOAD')),
                    (s.canSkipUntil = G.optionalFloat('CAN-SKIP-UNTIL', 0)),
                    (s.canSkipDateRanges =
                      0 < s.canSkipUntil && G.bool('CAN-SKIP-DATERANGES')),
                    (s.partHoldBack = G.optionalFloat('PART-HOLD-BACK', 0)),
                    (s.holdBack = G.optionalFloat('HOLD-BACK', 0));
                  break;
                }
                case 'PART-INF': {
                  var K = new Ko(I);
                  s.partTarget = K.decimalFloatingPoint('PART-TARGET');
                  break;
                }
                case 'PART': {
                  var H = s.partList;
                  H || (H = s.partList = []);
                  var V = 0 < g ? H[H.length - 1] : void 0,
                    W = g++,
                    Y = new Ko(I);
                  Lt(s, Y, ['BYTERANGE', 'URI']);
                  var q = new jo(Y, y, t, W, V);
                  H.push(q), (y.duration += q.duration);
                  break;
                }
                case 'PRELOAD-HINT': {
                  var j = new Ko(I);
                  Lt(s, j, ['URI']), (s.preloadHint = j);
                  break;
                }
                case 'RENDITION-REPORT': {
                  var z = new Ko(I);
                  Lt(s, z, ['URI']),
                    (s.renditionReports = s.renditionReports || []),
                    s.renditionReports.push(z);
                  break;
                }
                default:
                  Bo.warn('line parsed but not handled: ' + E);
              }
            }
          }
          m && !m.relurl
            ? (l.pop(), (f -= m.duration), s.partList && (s.fragmentHint = m))
            : s.partList &&
              (Nt(y, m), (y.cc = p), (s.fragmentHint = y), S && Mt(y, S, s));
          var X = l.length,
            Q = l[0],
            $ = l[X - 1];
          if (((f += s.skippedSegments * s.targetduration), 0 < f && X && $)) {
            s.averagetargetduration = f / X;
            var Z = $.sn;
            (s.endSN = 'initSegment' === Z ? 0 : Z),
              s.live || ($.endList = !0),
              Q && (s.startCC = Q.cc);
          } else (s.endSN = 0), (s.startCC = 0);
          return (
            s.fragmentHint && (f += s.fragmentHint.duration),
            (s.totalduration = f),
            (s.endCC = p),
            0 < h && Ft(l, h),
            s
          );
        }),
        e
      );
    })(),
    Ci = {
      MANIFEST: 'manifest',
      LEVEL: 'level',
      AUDIO_TRACK: 'audioTrack',
      SUBTITLE_TRACK: 'subtitleTrack'
    },
    Pi = { MAIN: 'main', AUDIO: 'audio', SUBTITLE: 'subtitle' },
    _i = (function() {
      function e(e) {
        (this.hls = void 0),
          (this.loaders = Object.create(null)),
          (this.variableList = null),
          (this.hls = e),
          this.registerListeners();
      }
      var t = e.prototype;
      return (
        (t.startLoad = function t(e) {}),
        (t.stopLoad = function e() {
          this.destroyInternalLoaders();
        }),
        (t.registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.LEVEL_LOADING, this.onLevelLoading, this),
            t.on(xo.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this),
            t.on(xo.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
        }),
        (t.unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.LEVEL_LOADING, this.onLevelLoading, this),
            t.off(xo.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this),
            t.off(xo.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
        }),
        (t.createInternalLoader = function t(e) {
          var a = this.hls.config,
            r = a.pLoader,
            n = a.loader,
            o = r || n,
            i = new o(a);
          return (this.loaders[e.type] = i), i;
        }),
        (t.getInternalLoader = function t(e) {
          return this.loaders[e.type];
        }),
        (t.resetInternalLoader = function t(e) {
          this.loaders[e] && delete this.loaders[e];
        }),
        (t.destroyInternalLoaders = function e() {
          for (var t in this.loaders) {
            var a = this.loaders[t];
            a && a.destroy(), this.resetInternalLoader(t);
          }
        }),
        (t.destroy = function e() {
          (this.variableList = null),
            this.unregisterListeners(),
            this.destroyInternalLoaders();
        }),
        (t.onManifestLoading = function a(e, t) {
          var r = t.url;
          (this.variableList = null),
            this.load({
              id: null,
              level: 0,
              responseType: 'text',
              type: Ci.MANIFEST,
              url: r,
              deliveryDirectives: null
            });
        }),
        (t.onLevelLoading = function a(e, t) {
          var r = t.id,
            n = t.level,
            o = t.url,
            i = t.deliveryDirectives;
          this.load({
            id: r,
            level: n,
            responseType: 'text',
            type: Ci.LEVEL,
            url: o,
            deliveryDirectives: i
          });
        }),
        (t.onAudioTrackLoading = function a(e, t) {
          var r = t.id,
            n = t.groupId,
            o = t.url,
            i = t.deliveryDirectives;
          this.load({
            id: r,
            groupId: n,
            level: null,
            responseType: 'text',
            type: Ci.AUDIO_TRACK,
            url: o,
            deliveryDirectives: i
          });
        }),
        (t.onSubtitleTrackLoading = function a(e, t) {
          var r = t.id,
            n = t.groupId,
            o = t.url,
            i = t.deliveryDirectives;
          this.load({
            id: r,
            groupId: n,
            level: null,
            responseType: 'text',
            type: Ci.SUBTITLE_TRACK,
            url: o,
            deliveryDirectives: i
          });
        }),
        (t.load = function t(e) {
          var a = this,
            r = this.hls.config,
            n = this.getInternalLoader(e),
            o;
          if (n) {
            var i = n.context;
            if (i && i.url === e.url)
              return void Bo.trace(
                '[playlist-loader]: playlist request ongoing'
              );
            Bo.log(
              '[playlist-loader]: aborting previous loader for type: ' + e.type
            ),
              n.abort();
          }
          var d;
          if (
            ((d =
              e.type === Ci.MANIFEST
                ? r.manifestLoadPolicy.default
                : be({}, r.playlistLoadPolicy.default, {
                    timeoutRetry: null,
                    errorRetry: null
                  })),
            (n = this.createInternalLoader(e)),
            null != (o = e.deliveryDirectives) && o.part)
          ) {
            var s;
            if (
              (e.type === Ci.LEVEL && null !== e.level
                ? (s = this.hls.levels[e.level].details)
                : e.type === Ci.AUDIO_TRACK && null !== e.id
                ? (s = this.hls.audioTracks[e.id].details)
                : e.type === Ci.SUBTITLE_TRACK &&
                  null !== e.id &&
                  (s = this.hls.subtitleTracks[e.id].details),
              s)
            ) {
              var l = s.partTarget,
                c = s.targetduration;
              if (l && c) {
                var u = 1e3 * C(3 * l, 0.8 * c);
                d = be({}, d, {
                  maxTimeToFirstByteMs: L(u, d.maxTimeToFirstByteMs),
                  maxLoadTimeMs: L(u, d.maxTimeToFirstByteMs)
                });
              }
            }
          }
          var g = d.errorRetry || d.timeoutRetry || {},
            f = {
              loadPolicy: d,
              timeout: d.maxLoadTimeMs,
              maxRetry: g.maxNumRetry || 0,
              retryDelay: g.retryDelayMs || 0,
              maxRetryDelay: g.maxRetryDelayMs || 0
            },
            p = {
              onSuccess: function o(e, t, r, n) {
                var i = a.getInternalLoader(r);
                a.resetInternalLoader(r.type);
                var d = e.data;
                return 0 === d.indexOf('#EXTM3U')
                  ? void ((t.parsing.start = performance.now()),
                    bi.isMediaPlaylist(d)
                      ? a.handleTrackOrLevelPlaylist(e, t, r, n || null, i)
                      : a.handleMasterPlaylist(e, t, r, n))
                  : void a.handleManifestParsingError(
                      e,
                      r,
                      new Error('no EXTM3U delimiter'),
                      n || null,
                      t
                    );
              },
              onError: function o(e, t, r, n) {
                a.handleNetworkError(t, r, !1, e, n);
              },
              onTimeout: function n(e, t, r) {
                a.handleNetworkError(t, r, !0, void 0, e);
              }
            };
          n.load(e, f, p);
        }),
        (t.handleMasterPlaylist = function n(e, t, a, r) {
          var o = this.hls,
            i = e.data,
            d = Bt(e, a),
            s = bi.parseMasterPlaylist(i, d);
          if (s.playlistParsingError)
            return void this.handleManifestParsingError(
              e,
              a,
              s.playlistParsingError,
              r,
              t
            );
          var l = s.contentSteering,
            c = s.levels,
            u = s.sessionData,
            g = s.sessionKeys,
            f = s.startTimeOffset,
            p = s.variableList;
          this.variableList = p;
          var m = bi.parseMasterPlaylistMedia(i, d, s),
            y = m.AUDIO,
            h = void 0 === y ? [] : y,
            T = m.SUBTITLES,
            E = m['CLOSED-CAPTIONS'];
          if (h.length) {
            var v = h.some(function(e) {
              return !e.url;
            });
            v ||
              !c[0].audioCodec ||
              c[0].attrs.AUDIO ||
              (Bo.log(
                '[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one'
              ),
              h.unshift({
                type: 'main',
                name: 'main',
                groupId: 'main',
                default: !1,
                autoselect: !1,
                forced: !1,
                id: -1,
                attrs: new Ko({}),
                bitrate: 0,
                url: ''
              }));
          }
          o.trigger(xo.MANIFEST_LOADED, {
            levels: c,
            audioTracks: h,
            subtitles: T,
            captions: E,
            contentSteering: l,
            url: d,
            stats: t,
            networkDetails: r,
            sessionData: u,
            sessionKeys: g,
            startTimeOffset: f,
            variableList: p
          });
        }),
        (t.handleTrackOrLevelPlaylist = function o(e, t, a, r, n) {
          var i = this.hls,
            d = a.id,
            s = a.level,
            l = a.type,
            c = Bt(e, a),
            u = _o(d) ? d : 0,
            g = _o(s) ? s : u,
            f = wt(a),
            p = bi.parseLevelPlaylist(e.data, c, g, f, u, this.variableList);
          if (l === Ci.MANIFEST) {
            var m = {
              attrs: new Ko({}),
              bitrate: 0,
              details: p,
              name: '',
              url: c
            };
            i.trigger(xo.MANIFEST_LOADED, {
              levels: [m],
              audioTracks: [],
              url: c,
              stats: t,
              networkDetails: r,
              sessionData: null,
              sessionKeys: null,
              contentSteering: null,
              startTimeOffset: null,
              variableList: null
            });
          }
          (t.parsing.end = performance.now()),
            (a.levelDetails = p),
            this.handlePlaylistLoaded(p, e, t, a, r, n);
        }),
        (t.handleManifestParsingError = function o(e, t, a, r, n) {
          this.hls.trigger(xo.ERROR, {
            type: Fo.NETWORK_ERROR,
            details: No.MANIFEST_PARSING_ERROR,
            fatal: t.type === Ci.MANIFEST,
            url: e.url,
            err: a,
            error: a,
            reason: a.message,
            response: e,
            context: t,
            networkDetails: r,
            stats: n
          });
        }),
        (t.handleNetworkError = function o(e, t, a, r, n) {
          void 0 === a && (a = !1);
          var i =
            'A network ' +
            (a ? 'timeout' : 'error' + (r ? ' (status ' + r.code + ')' : '')) +
            ' occurred while loading ' +
            e.type;
          e.type === Ci.LEVEL
            ? (i += ': ' + e.level + ' id: ' + e.id)
            : (e.type === Ci.AUDIO_TRACK || e.type === Ci.SUBTITLE_TRACK) &&
              (i += ' id: ' + e.id + ' group-id: "' + e.groupId + '"');
          var d = new Error(i);
          Bo.warn('[playlist-loader]: ' + i);
          var s = No.UNKNOWN,
            l = !1,
            c = this.getInternalLoader(e);
          switch (e.type) {
            case Ci.MANIFEST:
              (s = a ? No.MANIFEST_LOAD_TIMEOUT : No.MANIFEST_LOAD_ERROR),
                (l = !0);
              break;
            case Ci.LEVEL:
              (s = a ? No.LEVEL_LOAD_TIMEOUT : No.LEVEL_LOAD_ERROR), (l = !1);
              break;
            case Ci.AUDIO_TRACK:
              (s = a ? No.AUDIO_TRACK_LOAD_TIMEOUT : No.AUDIO_TRACK_LOAD_ERROR),
                (l = !1);
              break;
            case Ci.SUBTITLE_TRACK:
              (s = a ? No.SUBTITLE_TRACK_LOAD_TIMEOUT : No.SUBTITLE_LOAD_ERROR),
                (l = !1);
          }
          c && this.resetInternalLoader(e.type);
          var u = {
            type: Fo.NETWORK_ERROR,
            details: s,
            fatal: l,
            url: e.url,
            loader: c,
            context: e,
            error: d,
            networkDetails: t,
            stats: n
          };
          if (r) {
            var g = (null == t ? void 0 : t.url) || e.url;
            u.response = De({ url: g, data: void 0 }, r);
          }
          this.hls.trigger(xo.ERROR, u);
        }),
        (t.handlePlaylistLoaded = function i(e, t, a, r, n, o) {
          var d = this.hls,
            s = r.type,
            l = r.level,
            c = r.id,
            u = r.groupId,
            g = r.deliveryDirectives,
            f = Bt(t, r),
            p = wt(r),
            m = 'number' == typeof r.level && p === Pi.MAIN ? l : void 0;
          if (!e.fragments.length) {
            var y = new Error('No Segments found in Playlist');
            return void d.trigger(xo.ERROR, {
              type: Fo.NETWORK_ERROR,
              details: No.LEVEL_EMPTY_ERROR,
              fatal: !1,
              url: f,
              error: y,
              reason: y.message,
              response: t,
              context: r,
              level: m,
              parent: p,
              networkDetails: n,
              stats: a
            });
          }
          e.targetduration ||
            (e.playlistParsingError = new Error('Missing Target Duration'));
          var h = e.playlistParsingError;
          return h
            ? void d.trigger(xo.ERROR, {
                type: Fo.NETWORK_ERROR,
                details: No.LEVEL_PARSING_ERROR,
                fatal: !1,
                url: f,
                error: h,
                reason: h.message,
                response: t,
                context: r,
                level: m,
                parent: p,
                networkDetails: n,
                stats: a
              })
            : void (e.live &&
                o &&
                (o.getCacheAge && (e.ageHeader = o.getCacheAge() || 0),
                (!o.getCacheAge || isNaN(e.ageHeader)) && (e.ageHeader = 0)),
              s === Ci.MANIFEST || s === Ci.LEVEL
                ? d.trigger(xo.LEVEL_LOADED, {
                    details: e,
                    level: m || 0,
                    id: c || 0,
                    stats: a,
                    networkDetails: n,
                    deliveryDirectives: g
                  })
                : s === Ci.AUDIO_TRACK
                ? d.trigger(xo.AUDIO_TRACK_LOADED, {
                    details: e,
                    id: c || 0,
                    groupId: u || '',
                    stats: a,
                    networkDetails: n,
                    deliveryDirectives: g
                  })
                : s === Ci.SUBTITLE_TRACK
                ? d.trigger(xo.SUBTITLE_TRACK_LOADED, {
                    details: e,
                    id: c || 0,
                    groupId: u || '',
                    stats: a,
                    networkDetails: n,
                    deliveryDirectives: g
                  })
                : void 0);
        }),
        e
      );
    })(),
    xi = {
      audioId3: 'org.id3',
      dateRange: 'com.apple.quicktime.HLS',
      emsg: 'https://aomedia.org/emsg/ID3'
    },
    Fi = (function() {
      var e = Yt();
      try {
        new e(0, T, '');
      } catch (t) {
        return Number.MAX_VALUE;
      }
      return T;
    })(),
    Ni = (function() {
      function e(e) {
        (this.hls = void 0),
          (this.id3Track = null),
          (this.media = null),
          (this.dateRangeCuesAppended = {}),
          (this.hls = e),
          this._registerListeners();
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          this._unregisterListeners(),
            (this.id3Track = null),
            (this.media = null),
            (this.dateRangeCuesAppended = {}),
            (this.hls = null);
        }),
        (t._registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.on(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this),
            t.on(xo.BUFFER_FLUSHING, this.onBufferFlushing, this),
            t.on(xo.LEVEL_UPDATED, this.onLevelUpdated, this);
        }),
        (t._unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.off(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this),
            t.off(xo.BUFFER_FLUSHING, this.onBufferFlushing, this),
            t.off(xo.LEVEL_UPDATED, this.onLevelUpdated, this);
        }),
        (t.onMediaAttached = function a(e, t) {
          this.media = t.media;
        }),
        (t.onMediaDetaching = function e() {
          this.id3Track &&
            (Kt(this.id3Track),
            (this.id3Track = null),
            (this.media = null),
            (this.dateRangeCuesAppended = {}));
        }),
        (t.onManifestLoading = function e() {
          this.dateRangeCuesAppended = {};
        }),
        (t.createTrack = function t(e) {
          var a = this.getID3Track(e.textTracks);
          return (a.mode = 'hidden'), a;
        }),
        (t.getID3Track = function t(e) {
          if (this.media) {
            for (var a = 0, r; a < e.length; a++)
              if (((r = e[a]), 'metadata' === r.kind && 'id3' === r.label))
                return Ut(r, this.media), r;
            return this.media.addTextTrack('metadata', 'id3');
          }
        }),
        (t.onFragParsingMetadata = function a(e, t) {
          if (this.media) {
            var r = this.hls.config,
              n = r.enableEmsgMetadataCues,
              o = r.enableID3MetadataCues;
            if (n || o) {
              var d = t.samples;
              this.id3Track || (this.id3Track = this.createTrack(this.media));
              for (var s = Yt(), l = 0, c; l < d.length; l++)
                if (((c = d[l].type), (c !== xi.emsg || n) && o)) {
                  var u = di(d[l].data);
                  if (u) {
                    var g = d[l].pts,
                      f = g + d[l].duration;
                    f > Fi && (f = Fi);
                    var p = f - g;
                    0 >= p && (f = g + 0.25);
                    for (var m = 0, y; m < u.length; m++)
                      if (((y = u[m]), !oi(y))) {
                        this.updateId3CueEnds(g, c);
                        var h = new s(g, f, '');
                        (h.value = y),
                          c && (h.type = c),
                          this.id3Track.addCue(h);
                      }
                  }
                }
            }
          }
        }),
        (t.updateId3CueEnds = function a(e, t) {
          var r = null == (n = this.id3Track) ? void 0 : n.cues,
            n;
          if (r)
            for (var o = r.length, d; o--; )
              (d = r[o]),
                d.type === t &&
                  d.startTime < e &&
                  d.endTime === Fi &&
                  (d.endTime = e);
        }),
        (t.onBufferFlushing = function a(e, t) {
          var r = t.startOffset,
            n = t.endOffset,
            o = t.type,
            i = this.id3Track,
            d = this.hls;
          if (d) {
            var s = d.config,
              l = s.enableEmsgMetadataCues,
              c = s.enableID3MetadataCues;
            if (i && (l || c)) {
              var u;
              (u =
                'audio' === o
                  ? function t(e) {
                      return e.type === xi.audioId3 && c;
                    }
                  : 'video' === o
                  ? function t(e) {
                      return e.type === xi.emsg && l;
                    }
                  : function t(e) {
                      return (
                        (e.type === xi.audioId3 && c) ||
                        (e.type === xi.emsg && l)
                      );
                    }),
                Ht(i, r, n, u);
            }
          }
        }),
        (t.onLevelUpdated = function a(e, t) {
          var r = this,
            n = t.details;
          if (
            this.media &&
            n.hasProgramDateTime &&
            this.hls.config.enableDateRangeMetadataCues
          ) {
            var o = this.dateRangeCuesAppended,
              d = this.id3Track,
              s = n.dateRanges,
              l = Object.keys(s);
            if (d)
              for (
                var c = Object.keys(o).filter(function(e) {
                    return !l.includes(e);
                  }),
                  u = function e() {
                    var t = c[g];
                    Object.keys(o[t].cues).forEach(function(e) {
                      d.removeCue(o[t].cues[e]);
                    }),
                      delete o[t];
                  },
                  g = c.length;
                g--;

              )
                u();
            var f = n.fragments[n.fragments.length - 1];
            if (0 !== l.length && _o(null == f ? void 0 : f.programDateTime)) {
              this.id3Track || (this.id3Track = this.createTrack(this.media));
              for (
                var p = f.programDateTime / 1e3 - f.start,
                  m = Yt(),
                  y = function e() {
                    var t = l[h],
                      a = s[t],
                      n = o[t],
                      i = (null == n ? void 0 : n.cues) || {},
                      d = (null == n ? void 0 : n.durationKnown) || !1,
                      c = qt(a.startDate, p),
                      u = Fi,
                      g = a.endDate;
                    if (g) (u = qt(g, p)), (d = !0);
                    else if (a.endOnNext && !d) {
                      var f = l
                        .reduce(function(e, t) {
                          var r = s[t];
                          return (
                            r.class === a.class &&
                              r.id !== t &&
                              r.startDate > a.startDate &&
                              e.push(r),
                            e
                          );
                        }, [])
                        .sort(function(e, t) {
                          return e.startDate.getTime() - t.startDate.getTime();
                        })[0];
                      f && ((u = qt(f.startDate, p)), (d = !0));
                    }
                    for (
                      var y = Object.keys(a.attr), T = 0, E;
                      T < y.length;
                      T++
                    )
                      if (((E = y[T]), !!Ne(E))) {
                        var v = i[E];
                        if (v) d && !n.durationKnown && (v.endTime = u);
                        else {
                          var S = a.attr[E];
                          (v = new m(c, u, '')),
                            Oe(E) && (S = jt(S)),
                            (v.value = { key: E, data: S }),
                            (v.type = xi.dateRange),
                            (v.id = t),
                            r.id3Track.addCue(v),
                            (i[E] = v);
                        }
                      }
                    o[t] = { cues: i, dateRange: a, durationKnown: d };
                  },
                  h = 0;
                h < l.length;
                h++
              )
                y();
            }
          }
        }),
        e
      );
    })(),
    Oi = (function() {
      function e(e) {
        var t = this;
        (this.hls = void 0),
          (this.config = void 0),
          (this.media = null),
          (this.levelDetails = null),
          (this.currentTime = 0),
          (this.stallCount = 0),
          (this._latency = null),
          (this.timeupdateHandler = function() {
            return t.timeupdate();
          }),
          (this.hls = e),
          (this.config = e.config),
          this.registerListeners();
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          this.unregisterListeners(),
            this.onMediaDetaching(),
            (this.levelDetails = null),
            (this.hls = this.timeupdateHandler = null);
        }),
        (t.registerListeners = function e() {
          this.hls.on(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            this.hls.on(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            this.hls.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            this.hls.on(xo.LEVEL_UPDATED, this.onLevelUpdated, this),
            this.hls.on(xo.ERROR, this.onError, this);
        }),
        (t.unregisterListeners = function e() {
          this.hls.off(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            this.hls.off(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            this.hls.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            this.hls.off(xo.LEVEL_UPDATED, this.onLevelUpdated, this),
            this.hls.off(xo.ERROR, this.onError, this);
        }),
        (t.onMediaAttached = function a(e, t) {
          (this.media = t.media),
            this.media.addEventListener('timeupdate', this.timeupdateHandler);
        }),
        (t.onMediaDetaching = function e() {
          this.media &&
            (this.media.removeEventListener(
              'timeupdate',
              this.timeupdateHandler
            ),
            (this.media = null));
        }),
        (t.onManifestLoading = function e() {
          (this.levelDetails = null),
            (this._latency = null),
            (this.stallCount = 0);
        }),
        (t.onLevelUpdated = function a(e, t) {
          var r = t.details;
          (this.levelDetails = r),
            r.advanced && this.timeupdate(),
            !r.live &&
              this.media &&
              this.media.removeEventListener(
                'timeupdate',
                this.timeupdateHandler
              );
        }),
        (t.onError = function a(e, t) {
          var r;
          t.details !== No.BUFFER_STALLED_ERROR ||
            (this.stallCount++,
            null != (r = this.levelDetails) &&
              r.live &&
              Bo.warn(
                '[playback-rate-controller]: Stall detected, adjusting target latency'
              ));
        }),
        (t.timeupdate = function e() {
          var t = this.media,
            a = this.levelDetails;
          if (t && a) {
            this.currentTime = t.currentTime;
            var r = this.computeLatency();
            if (null !== r) {
              this._latency = r;
              var n = this.config,
                o = n.lowLatencyMode,
                i = n.maxLiveSyncPlaybackRate;
              if (o && 1 !== i) {
                var d = this.targetLatency;
                if (null !== d) {
                  var s = r - d,
                    l = L(this.maxLatency, d + a.targetduration),
                    c = s < l;
                  if (a.live && c && 0.05 < s && 1 < this.forwardBufferLength) {
                    var g = L(2, C(1, i)),
                      f =
                        S(20 * (2 / (1 + u(-0.75 * s - this.edgeStalled)))) /
                        20;
                    t.playbackRate = L(g, C(1, f));
                  } else
                    1 !== t.playbackRate &&
                      0 !== t.playbackRate &&
                      (t.playbackRate = 1);
                }
              }
            }
          }
        }),
        (t.estimateLiveEdge = function e() {
          var t = this.levelDetails;
          return null === t ? null : t.edge + t.age;
        }),
        (t.computeLatency = function e() {
          var t = this.estimateLiveEdge();
          return null === t ? null : t - this.currentTime;
        }),
        N(e, [
          {
            key: 'latency',
            get: function e() {
              return this._latency || 0;
            }
          },
          {
            key: 'maxLatency',
            get: function e() {
              var t = this.config,
                a = this.levelDetails;
              return void 0 === t.liveMaxLatencyDuration
                ? a
                  ? t.liveMaxLatencyDurationCount * a.targetduration
                  : 0
                : t.liveMaxLatencyDuration;
            }
          },
          {
            key: 'targetLatency',
            get: function e() {
              var t = this.levelDetails;
              if (null === t) return null;
              var a = t.holdBack,
                r = t.partHoldBack,
                n = t.targetduration,
                o = this.config,
                i = o.liveSyncDuration,
                d = o.liveSyncDurationCount,
                s = o.lowLatencyMode,
                l = this.hls.userConfig,
                c = s ? r || a : a;
              (l.liveSyncDuration || l.liveSyncDurationCount || 0 === c) &&
                (c = void 0 === i ? d * n : i);
              var u = n,
                g = 1;
              return c + L(this.stallCount * g, u);
            }
          },
          {
            key: 'liveSyncPosition',
            get: function e() {
              var t = this.estimateLiveEdge(),
                a = this.targetLatency,
                r = this.levelDetails;
              if (null === t || null === a || null === r) return null;
              var n = r.edge,
                o = t - a - this.edgeStalled,
                i = n - r.totalduration,
                d =
                  n -
                  ((this.config.lowLatencyMode && r.partTarget) ||
                    r.targetduration);
              return L(C(i, o), d);
            }
          },
          {
            key: 'drift',
            get: function e() {
              var t = this.levelDetails;
              return null === t ? 1 : t.drift;
            }
          },
          {
            key: 'edgeStalled',
            get: function e() {
              var t = this.levelDetails;
              if (null === t) return 0;
              var a =
                3 *
                ((this.config.lowLatencyMode && t.partTarget) ||
                  t.targetduration);
              return C(t.age - a, 0);
            }
          },
          {
            key: 'forwardBufferLength',
            get: function e() {
              var t = this.media,
                a = this.levelDetails;
              if (!t || !a) return 0;
              var r = t.buffered.length;
              return (r ? t.buffered.end(r - 1) : a.edge) - this.currentTime;
            }
          }
        ]),
        e
      );
    })(),
    Mi = ['NONE', 'TYPE-0', 'TYPE-1', null],
    wi = { No: '', Yes: 'YES', v2: 'v2' },
    Bi = (function() {
      function e(e, t, a) {
        (this.msn = void 0),
          (this.part = void 0),
          (this.skip = void 0),
          (this.msn = e),
          (this.part = t),
          (this.skip = a);
      }
      var t = e.prototype;
      return (
        (t.addDirectives = function t(e) {
          var a = new self.URL(e);
          return (
            void 0 !== this.msn &&
              a.searchParams.set('_HLS_msn', this.msn.toString()),
            void 0 !== this.part &&
              a.searchParams.set('_HLS_part', this.part.toString()),
            this.skip && a.searchParams.set('_HLS_skip', this.skip),
            a.href
          );
        }),
        e
      );
    })(),
    Ui = (function() {
      function e(e) {
        (this._attrs = void 0),
          (this.audioCodec = void 0),
          (this.bitrate = void 0),
          (this.codecSet = void 0),
          (this.height = void 0),
          (this.id = void 0),
          (this.name = void 0),
          (this.videoCodec = void 0),
          (this.width = void 0),
          (this.unknownCodecs = void 0),
          (this.audioGroupIds = void 0),
          (this.details = void 0),
          (this.fragmentError = 0),
          (this.loadError = 0),
          (this.loaded = void 0),
          (this.realBitrate = 0),
          (this.textGroupIds = void 0),
          (this.url = void 0),
          (this._urlId = 0),
          (this.url = [e.url]),
          (this._attrs = [e.attrs]),
          (this.bitrate = e.bitrate),
          e.details && (this.details = e.details),
          (this.id = e.id || 0),
          (this.name = e.name),
          (this.width = e.width || 0),
          (this.height = e.height || 0),
          (this.audioCodec = e.audioCodec),
          (this.videoCodec = e.videoCodec),
          (this.unknownCodecs = e.unknownCodecs),
          (this.codecSet = [e.videoCodec, e.audioCodec]
            .filter(function(e) {
              return e;
            })
            .join(',')
            .replace(/\.[^.,]+/g, ''));
      }
      var t = e.prototype;
      return (
        (t.addFallback = function t(e) {
          this.url.push(e.url), this._attrs.push(e.attrs);
        }),
        N(e, [
          {
            key: 'maxBitrate',
            get: function e() {
              return C(this.realBitrate, this.bitrate);
            }
          },
          {
            key: 'attrs',
            get: function e() {
              return this._attrs[this._urlId];
            }
          },
          {
            key: 'pathwayId',
            get: function e() {
              return this.attrs['PATHWAY-ID'] || '.';
            }
          },
          {
            key: 'uri',
            get: function e() {
              return this.url[this._urlId] || '';
            }
          },
          {
            key: 'urlId',
            get: function e() {
              return this._urlId;
            },
            set: function t(e) {
              var a = e % this.url.length;
              this._urlId !== a &&
                ((this.fragmentError = 0),
                (this.loadError = 0),
                (this.details = void 0),
                (this._urlId = a));
            }
          },
          {
            key: 'audioGroupId',
            get: function e() {
              var t;
              return null == (t = this.audioGroupIds) ? void 0 : t[this.urlId];
            }
          },
          {
            key: 'textGroupId',
            get: function e() {
              var t;
              return null == (t = this.textGroupIds) ? void 0 : t[this.urlId];
            }
          }
        ]),
        e
      );
    })(),
    Gi = {
      search: function a(e, t) {
        for (var r = 0, n = e.length - 1, o = null, i = null; r <= n; ) {
          (o = 0 | ((r + n) / 2)), (i = e[o]);
          var d = t(i);
          if (0 < d) r = o + 1;
          else if (0 > d) n = o - 1;
          else return i;
        }
        return null;
      }
    },
    Ki = {
      DoNothing: 0,
      SendEndCallback: 1,
      SendAlternateToPenaltyBox: 2,
      RemoveAlternatePermanently: 3,
      InsertDiscontinuity: 4,
      RetryRequest: 5
    },
    Hi = {
      None: 0,
      MoveAllAlternatesMatchingHost: 1,
      MoveAllAlternatesMatchingHDCP: 2,
      SwitchToSDR: 4
    },
    Vi = (function() {
      function e(e) {
        (this.hls = void 0),
          (this.playlistError = 0),
          (this.penalizedRenditions = {}),
          (this.log = void 0),
          (this.warn = void 0),
          (this.error = void 0),
          (this.hls = e),
          (this.log = Bo.log.bind(Bo, '[info]:')),
          (this.warn = Bo.warn.bind(Bo, '[warning]:')),
          (this.error = Bo.error.bind(Bo, '[error]:')),
          this.registerListeners();
      }
      var t = e.prototype;
      return (
        (t.registerListeners = function e() {
          var t = this.hls;
          t.on(xo.ERROR, this.onError, this),
            t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.LEVEL_UPDATED, this.onLevelUpdated, this);
        }),
        (t.unregisterListeners = function e() {
          var t = this.hls;
          t &&
            (t.off(xo.ERROR, this.onError, this),
            t.off(xo.ERROR, this.onErrorOut, this),
            t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.LEVEL_UPDATED, this.onLevelUpdated, this));
        }),
        (t.destroy = function e() {
          this.unregisterListeners(),
            (this.hls = null),
            (this.penalizedRenditions = {});
        }),
        (t.startLoad = function t(e) {
          this.playlistError = 0;
        }),
        (t.stopLoad = function e() {}),
        (t.getVariantLevelIndex = function t(e) {
          return (null == e ? void 0 : e.type) === Pi.MAIN
            ? e.level
            : this.hls.loadLevel;
        }),
        (t.onManifestLoading = function e() {
          (this.playlistError = 0), (this.penalizedRenditions = {});
        }),
        (t.onLevelUpdated = function e() {
          this.playlistError = 0;
        }),
        (t.onError = function a(e, t) {
          var r;
          if (!t.fatal) {
            var n = this.hls,
              o = t.context;
            switch (t.details) {
              case No.FRAG_LOAD_ERROR:
              case No.FRAG_LOAD_TIMEOUT:
              case No.KEY_LOAD_ERROR:
              case No.KEY_LOAD_TIMEOUT:
                return void (t.errorAction = this.getFragRetryOrSwitchAction(
                  t
                ));
              case No.FRAG_GAP:
              case No.FRAG_PARSING_ERROR:
              case No.FRAG_DECRYPT_ERROR:
                return (
                  (t.errorAction = this.getFragRetryOrSwitchAction(t)),
                  void (t.errorAction.action = Ki.SendAlternateToPenaltyBox)
                );
              case No.LEVEL_EMPTY_ERROR:
              case No.LEVEL_PARSING_ERROR:
                {
                  var i = t.parent === Pi.MAIN ? t.level : n.loadLevel,
                    d,
                    s;
                  t.details === No.LEVEL_EMPTY_ERROR &&
                  null != (d = t.context) &&
                  null != (s = d.levelDetails) &&
                  s.live
                    ? (t.errorAction = this.getPlaylistRetryOrSwitchAction(
                        t,
                        i
                      ))
                    : ((t.levelRetry = !1),
                      (t.errorAction = this.getLevelSwitchAction(t, i)));
                }
                return;
              case No.LEVEL_LOAD_ERROR:
              case No.LEVEL_LOAD_TIMEOUT:
                return void (
                  'number' == typeof (null == o ? void 0 : o.level) &&
                  (t.errorAction = this.getPlaylistRetryOrSwitchAction(
                    t,
                    o.level
                  ))
                );
              case No.AUDIO_TRACK_LOAD_ERROR:
              case No.AUDIO_TRACK_LOAD_TIMEOUT:
              case No.SUBTITLE_LOAD_ERROR:
              case No.SUBTITLE_TRACK_LOAD_TIMEOUT:
                if (o) {
                  var l = n.levels[n.loadLevel];
                  if (
                    l &&
                    ((o.type === Ci.AUDIO_TRACK &&
                      o.groupId === l.audioGroupId) ||
                      (o.type === Ci.SUBTITLE_TRACK &&
                        o.groupId === l.textGroupId))
                  )
                    return (
                      (t.errorAction = this.getPlaylistRetryOrSwitchAction(
                        t,
                        n.loadLevel
                      )),
                      (t.errorAction.action = Ki.SendAlternateToPenaltyBox),
                      void (t.errorAction.flags =
                        Hi.MoveAllAlternatesMatchingHost)
                    );
                }
                return;
              case No.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:
                {
                  var c = n.levels[n.loadLevel],
                    u = null == c ? void 0 : c.attrs['HDCP-LEVEL'];
                  u &&
                    (t.errorAction = {
                      action: Ki.SendAlternateToPenaltyBox,
                      flags: Hi.MoveAllAlternatesMatchingHDCP,
                      hdcpLevel: u
                    });
                }
                return;
              case No.BUFFER_ADD_CODEC_ERROR:
              case No.REMUX_ALLOC_ERROR:
                return void (t.errorAction = this.getLevelSwitchAction(
                  t,
                  null == (r = t.level) ? n.loadLevel : r
                ));
              case No.INTERNAL_EXCEPTION:
              case No.BUFFER_APPENDING_ERROR:
              case No.BUFFER_APPEND_ERROR:
              case No.BUFFER_FULL_ERROR:
              case No.LEVEL_SWITCH_ERROR:
              case No.BUFFER_STALLED_ERROR:
              case No.BUFFER_SEEK_OVER_HOLE:
              case No.BUFFER_NUDGE_ON_STALL:
                return void (t.errorAction = {
                  action: Ki.DoNothing,
                  flags: Hi.None
                });
            }
            if (t.type === Fo.KEY_SYSTEM_ERROR) {
              var g = this.getVariantLevelIndex(t.frag);
              return (
                (t.levelRetry = !1),
                void (t.errorAction = this.getLevelSwitchAction(t, g))
              );
            }
          }
        }),
        (t.getPlaylistRetryOrSwitchAction = function a(e, t) {
          var r = this.hls,
            n = sa(r.config.playlistLoadPolicy, e),
            o = this.playlistError++,
            i = null == (s = e.response) ? void 0 : s.code,
            d = ua(n, o, da(e), i),
            s;
          if (d)
            return {
              action: Ki.RetryRequest,
              flags: Hi.None,
              retryConfig: n,
              retryCount: o
            };
          var l = this.getLevelSwitchAction(e, t);
          return n && ((l.retryConfig = n), (l.retryCount = o)), l;
        }),
        (t.getFragRetryOrSwitchAction = function t(e) {
          var a = this.hls,
            r = this.getVariantLevelIndex(e.frag),
            n = a.levels[r],
            o = a.config,
            i = o.fragLoadPolicy,
            d = o.keyLoadPolicy,
            s = sa(e.details.startsWith('key') ? d : i, e),
            l = a.levels.reduce(function(e, t) {
              return e + t.fragmentError;
            }, 0);
          if (n) {
            var c;
            e.details !== No.FRAG_GAP && n.fragmentError++;
            var u = null == (c = e.response) ? void 0 : c.code,
              g = ua(s, l, da(e), u);
            if (g)
              return {
                action: Ki.RetryRequest,
                flags: Hi.None,
                retryConfig: s,
                retryCount: l
              };
          }
          var f = this.getLevelSwitchAction(e, r);
          return s && ((f.retryConfig = s), (f.retryCount = l)), f;
        }),
        (t.getLevelSwitchAction = function a(e, t) {
          var r = this.hls;
          (null === t || void 0 === t) && (t = r.loadLevel);
          var n = this.hls.levels[t];
          if (n && (n.loadError++, r.autoLevelEnabled)) {
            for (
              var o = -1,
                d = r.levels,
                s = r.loadLevel,
                l = r.minAutoLevel,
                c = r.maxAutoLevel,
                u = null == (y = e.frag) ? void 0 : y.type,
                g = null == (h = e.context) ? {} : h,
                f = g.type,
                p = g.groupId,
                m = d.length,
                y,
                h,
                T;
              m--;

            )
              if (
                ((T = (m + s) % d.length),
                T !== s && T >= l && T <= c && 0 === d[T].loadError)
              ) {
                var E = d[T];
                if (e.details === No.FRAG_GAP && e.frag) {
                  var v = d[T].details;
                  if (v) {
                    var S = pa(e.frag, v.fragments, e.frag.start);
                    if (null != S && S.gap) continue;
                  }
                } else if (
                  (f === Ci.AUDIO_TRACK && p === E.audioGroupId) ||
                  (f === Ci.SUBTITLE_TRACK && p === E.textGroupId)
                )
                  continue;
                else if (
                  (u === Pi.AUDIO && n.audioGroupId === E.audioGroupId) ||
                  (u === Pi.SUBTITLE && n.textGroupId === E.textGroupId)
                )
                  continue;
                o = T;
                break;
              }
            if (-1 < o && r.loadLevel !== o)
              return (
                (e.levelRetry = !0),
                (this.playlistError = 0),
                {
                  action: Ki.SendAlternateToPenaltyBox,
                  flags: Hi.None,
                  nextAutoLevel: o
                }
              );
          }
          return {
            action: Ki.SendAlternateToPenaltyBox,
            flags: Hi.MoveAllAlternatesMatchingHost
          };
        }),
        (t.onErrorOut = function a(e, t) {
          var r;
          switch (null == (r = t.errorAction) ? void 0 : r.action) {
            case Ki.DoNothing:
              break;
            case Ki.SendAlternateToPenaltyBox:
              this.sendAlternateToPenaltyBox(t),
                t.errorAction.resolved ||
                  t.details === No.FRAG_GAP ||
                  (t.fatal = !0);
          }
          if (t.fatal) return void this.hls.stopLoad();
        }),
        (t.sendAlternateToPenaltyBox = function t(e) {
          var a = this.hls,
            r = e.errorAction;
          if (r) {
            var n = r.flags,
              o = r.hdcpLevel,
              i = r.nextAutoLevel;
            n === Hi.None
              ? this.switchLevel(e, i)
              : n === Hi.MoveAllAlternatesMatchingHost
              ? r.resolved || (r.resolved = this.redundantFailover(e))
              : n === Hi.MoveAllAlternatesMatchingHDCP
              ? (o &&
                  ((a.maxHdcpLevel = Mi[Mi.indexOf(o) - 1]), (r.resolved = !0)),
                this.warn(
                  'Restricting playback to HDCP-LEVEL of "' +
                    a.maxHdcpLevel +
                    '" or lower'
                ))
              : void 0,
              r.resolved || this.switchLevel(e, i);
          }
        }),
        (t.switchLevel = function a(e, t) {
          void 0 !== t &&
            e.errorAction &&
            (this.warn('switching to level ' + t + ' after ' + e.details),
            (this.hls.nextAutoLevel = t),
            (e.errorAction.resolved = !0),
            (this.hls.nextLoadLevel = this.hls.nextAutoLevel));
        }),
        (t.redundantFailover = function t(e) {
          var a = this,
            r = this.hls,
            n = this.penalizedRenditions,
            o = e.parent === Pi.MAIN ? e.level : r.loadLevel,
            d = r.levels[o],
            s = d.url.length,
            l = e.frag ? e.frag.urlId : d.urlId;
          d.urlId === l &&
            (!e.frag || d.details) &&
            this.penalizeRendition(d, e);
          for (
            var c = function t() {
                var i = (l + u) % s,
                  c = n[i];
                if (!c || Ta(c, e, n[l]))
                  return (
                    a.warn(
                      'Switching to Redundant Stream ' +
                        (i + 1) +
                        '/' +
                        s +
                        ': "' +
                        d.url[i] +
                        '" after ' +
                        e.details
                    ),
                    (a.playlistError = 0),
                    r.levels.forEach(function(e) {
                      e.urlId = i;
                    }),
                    (r.nextLoadLevel = o),
                    { v: !0 }
                  );
              },
              u = 1,
              g;
            u < s;
            u++
          )
            if (((g = c()), 'object' == typeof g)) return g.v;
          return !1;
        }),
        (t.penalizeRendition = function a(e, t) {
          var r = this.penalizedRenditions,
            n = r[e.urlId] || {
              lastErrorPerfMs: 0,
              errors: [],
              details: void 0
            };
          (n.lastErrorPerfMs = performance.now()),
            n.errors.push(t),
            (n.details = e.details),
            (r[e.urlId] = n);
        }),
        e
      );
    })(),
    Wi = (function() {
      function e(e, t) {
        (this.hls = void 0),
          (this.timer = -1),
          (this.requestScheduled = -1),
          (this.canLoad = !1),
          (this.log = void 0),
          (this.warn = void 0),
          (this.log = Bo.log.bind(Bo, t + ':')),
          (this.warn = Bo.warn.bind(Bo, t + ':')),
          (this.hls = e);
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          this.clearTimer(), (this.hls = this.log = this.warn = null);
        }),
        (t.clearTimer = function e() {
          clearTimeout(this.timer), (this.timer = -1);
        }),
        (t.startLoad = function e() {
          (this.canLoad = !0),
            (this.requestScheduled = -1),
            this.loadPlaylist();
        }),
        (t.stopLoad = function e() {
          (this.canLoad = !1), this.clearTimer();
        }),
        (t.switchParams = function a(e, t) {
          var r = null == t ? void 0 : t.renditionReports;
          if (r) {
            for (var n = -1, o = 0; o < r.length; o++) {
              var d = r[o],
                s = void 0;
              try {
                s = new self.URL(d.URI, t.url).href;
              } catch (e) {
                Bo.warn(
                  'Could not construct new URL for Rendition Report: ' + e
                ),
                  (s = d.URI || '');
              }
              if (s === e) {
                n = o;
                break;
              } else s === e.substring(0, s.length) && (n = o);
            }
            if (-1 !== n) {
              var l = r[n],
                c =
                  parseInt(l['LAST-MSN']) ||
                  (null == t ? void 0 : t.lastPartSn),
                u =
                  parseInt(l['LAST-PART']) ||
                  (null == t ? void 0 : t.lastPartIndex);
              if (this.hls.config.lowLatencyMode) {
                var g = L(t.age - t.partTarget, t.targetduration);
                0 <= u && g > t.partTarget && (u += 1);
              }
              return new Bi(c, 0 <= u ? u : void 0, wi.No);
            }
          }
        }),
        (t.loadPlaylist = function t(e) {
          -1 === this.requestScheduled &&
            (this.requestScheduled = self.performance.now());
        }),
        (t.shouldLoadPlaylist = function t(e) {
          return (
            this.canLoad && !!e && !!e.url && (!e.details || e.details.live)
          );
        }),
        (t.shouldReloadPlaylist = function t(e) {
          return (
            -1 === this.timer &&
            -1 === this.requestScheduled &&
            this.shouldLoadPlaylist(e)
          );
        }),
        (t.playlistLoaded = function r(e, t, a) {
          var n = this,
            o = t.details,
            i = t.stats,
            d = self.performance.now(),
            s = i.loading.first ? C(0, d - i.loading.first) : 0;
          if (
            ((o.advancedDateTime = Date.now() - s),
            o.live || (null != a && a.live))
          ) {
            if (
              (o.reloaded(a),
              a &&
                this.log(
                  'live playlist ' +
                    e +
                    ' ' +
                    (o.advanced
                      ? 'REFRESHED ' + o.lastPartSn + '-' + o.lastPartIndex
                      : 'MISSED')
                ),
              a && 0 < o.fragments.length && $t(a, o),
              !this.canLoad || !o.live)
            )
              return;
            var l = void 0,
              c = void 0,
              u;
            if (o.canBlockReload && o.endSN && o.advanced) {
              var g = this.hls.config.lowLatencyMode,
                f = o.lastPartSn,
                p = o.endSN,
                m = o.lastPartIndex,
                y = -1 !== m,
                h = f === p,
                T = g ? 0 : m;
              y ? ((l = h ? p + 1 : f), (c = h ? T : m + 1)) : (l = p + 1);
              var E = o.age,
                v = E + o.ageHeader,
                A = L(v - o.partTarget, 1.5 * o.targetduration);
              if (0 < A) {
                if (a && A > a.tuneInGoal)
                  this.warn(
                    'CDN Tune-in goal increased from: ' +
                      a.tuneInGoal +
                      ' to: ' +
                      A +
                      ' with playlist age: ' +
                      o.age
                  ),
                    (A = 0);
                else {
                  var R = P(A / o.targetduration);
                  if (((l += R), void 0 !== c)) {
                    var k = S((A % o.targetduration) / o.partTarget);
                    c += k;
                  }
                  this.log(
                    'CDN Tune-in age: ' +
                      o.ageHeader +
                      's last advanced ' +
                      E.toFixed(2) +
                      's goal: ' +
                      A +
                      ' skip sn ' +
                      R +
                      ' to part ' +
                      c
                  );
                }
                o.tuneInGoal = A;
              }
              if (
                ((u = this.getDeliveryDirectives(
                  o,
                  t.deliveryDirectives,
                  l,
                  c
                )),
                g || !h)
              )
                return void this.loadPlaylist(u);
            } else
              o.canBlockReload &&
                (u = this.getDeliveryDirectives(o, t.deliveryDirectives, l, c));
            var D = this.hls.mainForwardBufferInfo,
              I = D ? D.end - D.len : 0,
              b = 1e3 * (o.edge - I),
              _ = ra(o, b);
            o.updated &&
              d > this.requestScheduled + _ &&
              (this.requestScheduled = i.loading.start),
              void 0 !== l && o.canBlockReload
                ? (this.requestScheduled =
                    i.loading.first + _ - (1e3 * o.partTarget || 1e3))
                : -1 === this.requestScheduled || this.requestScheduled + _ < d
                ? (this.requestScheduled = d)
                : 0 >= this.requestScheduled - d &&
                  (this.requestScheduled += _);
            var x = this.requestScheduled - d;
            (x = C(0, x)),
              this.log('reload live playlist ' + e + ' in ' + S(x) + ' ms'),
              (this.timer = self.setTimeout(function() {
                return n.loadPlaylist(u);
              }, x));
          } else this.clearTimer();
        }),
        (t.getDeliveryDirectives = function n(e, t, a, r) {
          var o = zt(e, a);
          return (
            null != t &&
              t.skip &&
              e.deltaUpdateFailed &&
              ((a = t.msn), (r = t.part), (o = wi.No)),
            new Bi(a, r, o)
          );
        }),
        (t.checkRetry = function t(e) {
          var a = this,
            r = e.details,
            n = da(e),
            o = e.errorAction,
            i = o || {},
            d = i.action,
            s = i.retryCount,
            l = void 0 === s ? 0 : s,
            c = i.retryConfig,
            u =
              !!o &&
              !!c &&
              (d === Ki.RetryRequest ||
                (!o.resolved && d === Ki.SendAlternateToPenaltyBox));
          if (u) {
            var g;
            if (((this.requestScheduled = -1), l >= c.maxNumRetry)) return !1;
            if (n && null != (g = e.context) && g.deliveryDirectives)
              this.warn(
                'Retrying playlist loading ' +
                  (l + 1) +
                  '/' +
                  c.maxNumRetry +
                  ' after "' +
                  r +
                  '" without delivery-directives'
              ),
                this.loadPlaylist();
            else {
              var f = la(c, l);
              (this.timer = self.setTimeout(function() {
                return a.loadPlaylist();
              }, f)),
                this.warn(
                  'Retrying playlist loading ' +
                    (l + 1) +
                    '/' +
                    c.maxNumRetry +
                    ' after "' +
                    r +
                    '" in ' +
                    f +
                    'ms'
                );
            }
            (e.levelRetry = !0), (o.resolved = !0);
          }
          return u;
        }),
        e
      );
    })(),
    Yi = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, '[level-controller]') || this),
          (r._levels = []),
          (r._firstLevel = -1),
          (r._startLevel = void 0),
          (r.currentLevel = null),
          (r.currentLevelIndex = -1),
          (r.manualLevelIndex = -1),
          (r.steering = void 0),
          (r.onParsedComplete = void 0),
          (r.steering = a),
          r._registerListeners(),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a._registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.MANIFEST_LOADED, this.onManifestLoaded, this),
            t.on(xo.LEVEL_LOADED, this.onLevelLoaded, this),
            t.on(xo.LEVELS_UPDATED, this.onLevelsUpdated, this),
            t.on(xo.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this),
            t.on(xo.FRAG_LOADED, this.onFragLoaded, this),
            t.on(xo.ERROR, this.onError, this);
        }),
        (a._unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.MANIFEST_LOADED, this.onManifestLoaded, this),
            t.off(xo.LEVEL_LOADED, this.onLevelLoaded, this),
            t.off(xo.LEVELS_UPDATED, this.onLevelsUpdated, this),
            t.off(xo.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this),
            t.off(xo.FRAG_LOADED, this.onFragLoaded, this),
            t.off(xo.ERROR, this.onError, this);
        }),
        (a.destroy = function t() {
          this._unregisterListeners(),
            (this.steering = null),
            this.resetLevels(),
            e.prototype.destroy.call(this);
        }),
        (a.startLoad = function t() {
          var a = this._levels;
          a.forEach(function(e) {
            (e.loadError = 0), (e.fragmentError = 0);
          }),
            e.prototype.startLoad.call(this);
        }),
        (a.resetLevels = function e() {
          (this._startLevel = void 0),
            (this.manualLevelIndex = -1),
            (this.currentLevelIndex = -1),
            (this.currentLevel = null),
            (this._levels = []);
        }),
        (a.onManifestLoading = function a(e, t) {
          this.resetLevels();
        }),
        (a.onManifestLoaded = function a(e, t) {
          var r = [],
            n = {},
            o;
          t.levels.forEach(function(e) {
            var t = e.attrs,
              a;
            -1 !==
              (null == (a = e.audioCodec) ? void 0 : a.indexOf('mp4a.40.34')) &&
              (bd || (bd = /chrome|firefox/i.test(navigator.userAgent)),
              bd && (e.audioCodec = void 0));
            var i = t.AUDIO,
              d = t.CODECS,
              s = t['FRAME-RATE'],
              l = t['PATHWAY-ID'],
              c = t.RESOLUTION,
              u = t.SUBTITLES,
              g = (l || '.') + '-',
              f = '' + g + e.bitrate + '-' + c + '-' + s + '-' + d;
            (o = n[f]),
              o ? o.addFallback(e) : ((o = new Ui(e)), (n[f] = o), r.push(o)),
              Ea(o, 'audio', i),
              Ea(o, 'text', u);
          }),
            this.filterAndSortMediaOptions(r, t);
        }),
        (a.filterAndSortMediaOptions = function a(e, t) {
          var r = this,
            n = [],
            o = [],
            d = !1,
            s = !1,
            l = !1,
            c = e.filter(function(e) {
              var t = e.audioCodec,
                a = e.videoCodec,
                r = e.width,
                n = e.height,
                o = e.unknownCodecs;
              return (
                d || (d = !!(r && n)),
                s || (s = !!a),
                l || (l = !!t),
                !(null != o && o.length) &&
                  (!t || bt(t, 'audio')) &&
                  (!a || bt(a, 'video'))
              );
            });
          if (
            ((d || s) &&
              l &&
              (c = c.filter(function(e) {
                var t = e.videoCodec,
                  a = e.width,
                  r = e.height;
                return !!t || !!(a && r);
              })),
            0 === c.length)
          )
            return void Promise.resolve().then(function() {
              if (r.hls) {
                var e = new Error(
                  'no level with compatible codecs found in manifest'
                );
                r.hls.trigger(xo.ERROR, {
                  type: Fo.MEDIA_ERROR,
                  details: No.MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                  fatal: !0,
                  url: t.url,
                  error: e,
                  reason: e.message
                });
              }
            });
          t.audioTracks &&
            ((n = t.audioTracks.filter(function(e) {
              return !e.audioCodec || bt(e.audioCodec, 'audio');
            })),
            va(n)),
            t.subtitles && ((o = t.subtitles), va(o));
          var u = c.slice(0);
          c.sort(function(e, t) {
            return e.attrs['HDCP-LEVEL'] === t.attrs['HDCP-LEVEL']
              ? e.bitrate === t.bitrate
                ? e.attrs['FRAME-RATE'] === t.attrs['FRAME-RATE']
                  ? e.attrs.SCORE === t.attrs.SCORE
                    ? d && e.height !== t.height
                      ? e.height - t.height
                      : 0
                    : e.attrs.decimalFloatingPoint('SCORE') -
                      t.attrs.decimalFloatingPoint('SCORE')
                  : e.attrs.decimalFloatingPoint('FRAME-RATE') -
                    t.attrs.decimalFloatingPoint('FRAME-RATE')
                : e.bitrate - t.bitrate
              : (e.attrs['HDCP-LEVEL'] || '') > (t.attrs['HDCP-LEVEL'] || '')
              ? 1
              : -1;
          });
          var g = u[0];
          if (
            this.steering &&
            ((c = this.steering.filterParsedLevels(c)), c.length !== u.length)
          )
            for (var f = 0; f < u.length; f++)
              if (u[f].pathwayId === c[0].pathwayId) {
                g = u[f];
                break;
              }
          this._levels = c;
          for (var p = 0; p < c.length; p++)
            if (c[p] === g) {
              (this._firstLevel = p),
                this.log(
                  'manifest loaded, ' +
                    c.length +
                    ' level(s) found, first bitrate: ' +
                    g.bitrate
                );
              break;
            }
          var m = l && !s,
            y = {
              levels: c,
              audioTracks: n,
              subtitleTracks: o,
              sessionData: t.sessionData,
              sessionKeys: t.sessionKeys,
              firstLevel: this._firstLevel,
              stats: t.stats,
              audio: l,
              video: s,
              altAudio:
                !m &&
                n.some(function(e) {
                  return !!e.url;
                })
            };
          this.hls.trigger(xo.MANIFEST_PARSED, y),
            (this.hls.config.autoStartLoad || this.hls.forceStartLoad) &&
              this.hls.startLoad(this.hls.config.startPosition);
        }),
        (a.onError = function a(e, t) {
          t.fatal ||
            !t.context ||
            (t.context.type === Ci.LEVEL &&
              t.context.level === this.level &&
              this.checkRetry(t));
        }),
        (a.onFragLoaded = function a(e, t) {
          var r = t.frag;
          if (void 0 !== r && r.type === Pi.MAIN) {
            var n = this._levels[r.level];
            void 0 !== n && (n.loadError = 0);
          }
        }),
        (a.onLevelLoaded = function a(e, t) {
          var r = t.level,
            n = t.details,
            o = this._levels[r],
            i;
          if (!o) {
            var d;
            return (
              this.warn('Invalid level index ' + r),
              void (
                null != (d = t.deliveryDirectives) &&
                d.skip &&
                (n.deltaUpdateFailed = !0)
              )
            );
          }
          r === this.currentLevelIndex
            ? (0 === o.fragmentError && (o.loadError = 0),
              this.playlistLoaded(r, t, o.details))
            : null != (i = t.deliveryDirectives) &&
              i.skip &&
              (n.deltaUpdateFailed = !0);
        }),
        (a.onAudioTrackSwitched = function a(e, t) {
          var r = this.currentLevel;
          if (r) {
            var n = this.hls.audioTracks[t.id].groupId;
            if (r.audioGroupIds && r.audioGroupId !== n) {
              for (var o = -1, d = 0; d < r.audioGroupIds.length; d++)
                if (r.audioGroupIds[d] === n) {
                  o = d;
                  break;
                }
              -1 !== o &&
                o !== r.urlId &&
                ((r.urlId = o), this.canLoad && this.startLoad());
            }
          }
        }),
        (a.loadPlaylist = function a(t) {
          e.prototype.loadPlaylist.call(this);
          var r = this.currentLevelIndex,
            n = this.currentLevel;
          if (n && this.shouldLoadPlaylist(n)) {
            var o = n.urlId,
              i = n.uri;
            if (t)
              try {
                i = t.addDirectives(i);
              } catch (e) {
                this.warn(
                  'Could not construct new URL with HLS Delivery Directives: ' +
                    e
                );
              }
            var d = n.attrs['PATHWAY-ID'];
            this.log(
              'Loading level index ' +
                r +
                (void 0 === (null == t ? void 0 : t.msn)
                  ? ''
                  : ' at sn ' + t.msn + ' part ' + t.part) +
                ' with' +
                (d ? ' Pathway ' + d : '') +
                ' URI ' +
                (o + 1) +
                '/' +
                n.url.length +
                ' ' +
                i
            ),
              this.clearTimer(),
              this.hls.trigger(xo.LEVEL_LOADING, {
                url: i,
                level: r,
                id: o,
                deliveryDirectives: t || null
              });
          }
        }),
        (a.removeLevel = function a(e, t) {
          var r = this,
            n = function r(e, a) {
              return a !== t;
            },
            o = this._levels.filter(function(a, o) {
              return (
                o !== e ||
                (1 < a.url.length && void 0 !== t
                  ? ((a.url = a.url.filter(n)),
                    a.audioGroupIds &&
                      (a.audioGroupIds = a.audioGroupIds.filter(n)),
                    a.textGroupIds &&
                      (a.textGroupIds = a.textGroupIds.filter(n)),
                    (a.urlId = 0),
                    !0)
                  : (r.steering && r.steering.removeLevel(a), !1))
              );
            });
          this.hls.trigger(xo.LEVELS_UPDATED, { levels: o });
        }),
        (a.onLevelsUpdated = function a(e, t) {
          var r = t.levels;
          r.forEach(function(e, t) {
            var a = e.details;
            null != a &&
              a.fragments &&
              a.fragments.forEach(function(e) {
                e.level = t;
              });
          }),
            (this._levels = r);
        }),
        N(t, [
          {
            key: 'levels',
            get: function e() {
              return 0 === this._levels.length ? null : this._levels;
            }
          },
          {
            key: 'level',
            get: function e() {
              return this.currentLevelIndex;
            },
            set: function t(e) {
              var a = this._levels;
              if (0 !== a.length) {
                if (0 > e || e >= a.length) {
                  var r = new Error('invalid level idx'),
                    n = 0 > e;
                  if (
                    (this.hls.trigger(xo.ERROR, {
                      type: Fo.OTHER_ERROR,
                      details: No.LEVEL_SWITCH_ERROR,
                      level: e,
                      fatal: n,
                      error: r,
                      reason: r.message
                    }),
                    n)
                  )
                    return;
                  e = L(e, a.length - 1);
                }
                var o = this.currentLevelIndex,
                  i = this.currentLevel,
                  d = i ? i.attrs['PATHWAY-ID'] : void 0,
                  s = a[e],
                  l = s.attrs['PATHWAY-ID'];
                if (
                  ((this.currentLevelIndex = e),
                  (this.currentLevel = s),
                  !(o === e && s.details && i && d === l))
                ) {
                  this.log(
                    'Switching to level ' +
                      e +
                      (l ? ' with Pathway ' + l : '') +
                      ' from level ' +
                      o +
                      (d ? ' with Pathway ' + d : '')
                  );
                  var c = be({}, s, {
                    level: e,
                    maxBitrate: s.maxBitrate,
                    attrs: s.attrs,
                    uri: s.uri,
                    urlId: s.urlId
                  });
                  delete c._attrs,
                    delete c._urlId,
                    this.hls.trigger(xo.LEVEL_SWITCHING, c);
                  var u = s.details;
                  if (!u || u.live) {
                    var g = this.switchParams(
                      s.uri,
                      null == i ? void 0 : i.details
                    );
                    this.loadPlaylist(g);
                  }
                }
              }
            }
          },
          {
            key: 'manualLevel',
            get: function e() {
              return this.manualLevelIndex;
            },
            set: function t(e) {
              (this.manualLevelIndex = e),
                void 0 === this._startLevel && (this._startLevel = e),
                -1 !== e && (this.level = e);
            }
          },
          {
            key: 'firstLevel',
            get: function e() {
              return this._firstLevel;
            },
            set: function t(e) {
              this._firstLevel = e;
            }
          },
          {
            key: 'startLevel',
            get: function e() {
              if (void 0 === this._startLevel) {
                var t = this.hls.config.startLevel;
                return void 0 === t ? this._firstLevel : t;
              }
              return this._startLevel;
            },
            set: function t(e) {
              this._startLevel = e;
            }
          },
          {
            key: 'nextLoadLevel',
            get: function e() {
              return -1 === this.manualLevelIndex
                ? this.hls.nextAutoLevel
                : this.manualLevelIndex;
            },
            set: function t(e) {
              (this.level = e),
                -1 === this.manualLevelIndex && (this.hls.nextAutoLevel = e);
            }
          }
        ]),
        t
      );
    })(Wi),
    qi = {
      NOT_LOADED: 'NOT_LOADED',
      APPENDING: 'APPENDING',
      PARTIAL: 'PARTIAL',
      OK: 'OK'
    },
    ji = (function() {
      function e(e) {
        (this.activePartLists = Object.create(null)),
          (this.endListFragments = Object.create(null)),
          (this.fragments = Object.create(null)),
          (this.timeRanges = Object.create(null)),
          (this.bufferPadding = 0.2),
          (this.hls = void 0),
          (this.hasGaps = !1),
          (this.hls = e),
          this._registerListeners();
      }
      var t = e.prototype;
      return (
        (t._registerListeners = function e() {
          var t = this.hls;
          t.on(xo.BUFFER_APPENDED, this.onBufferAppended, this),
            t.on(xo.FRAG_BUFFERED, this.onFragBuffered, this),
            t.on(xo.FRAG_LOADED, this.onFragLoaded, this);
        }),
        (t._unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.BUFFER_APPENDED, this.onBufferAppended, this),
            t.off(xo.FRAG_BUFFERED, this.onFragBuffered, this),
            t.off(xo.FRAG_LOADED, this.onFragLoaded, this);
        }),
        (t.destroy = function e() {
          this._unregisterListeners(),
            (this.fragments = this.activePartLists = this.endListFragments = this.timeRanges = null);
        }),
        (t.getAppendedFrag = function a(e, t) {
          var r = this.activePartLists[t];
          if (r)
            for (var n = r.length, o, d; n-- && ((o = r[n]), !!o); )
              if (((d = o.end), o.start <= e && null !== d && e <= d)) return o;
          return this.getBufferedFrag(e, t);
        }),
        (t.getBufferedFrag = function a(e, t) {
          for (
            var r = this.fragments, n = Object.keys(r), o = n.length, d;
            o--;

          )
            if (
              ((d = r[n[o]]),
              (null == d ? void 0 : d.body.type) === t && d.buffered)
            ) {
              var s = d.body;
              if (s.start <= e && e <= s.end) return s;
            }
          return null;
        }),
        (t.detectEvictedFragments = function n(e, t, a, r) {
          var o = this;
          this.timeRanges && (this.timeRanges[e] = t);
          var i = (null == r ? void 0 : r.fragment.sn) || -1;
          Object.keys(this.fragments).forEach(function(r) {
            var n = o.fragments[r];
            if (n && !(i >= n.body.sn)) {
              if (!n.buffered && !n.loaded)
                return void (n.body.type === a && o.removeFragment(n.body));
              var d = n.range[e];
              d &&
                d.time.some(function(e) {
                  var a = !o.isTimeBuffered(e.startPTS, e.endPTS, t);
                  return a && o.removeFragment(n.body), a;
                });
            }
          });
        }),
        (t.detectPartialFragments = function t(e) {
          var a = this,
            r = this.timeRanges,
            n = e.frag,
            o = e.part;
          if (r && 'initSegment' !== n.sn) {
            var i = La(n),
              d = this.fragments[i];
            if (d) {
              var s = !n.relurl;
              Object.keys(r).forEach(function(e) {
                var t = n.elementaryStreams[e];
                if (t) {
                  var i = r[e],
                    l = s || !0 === t.partial;
                  d.range[e] = a.getBufferedTimes(n, o, l, i);
                }
              }),
                (d.loaded = null),
                Object.keys(d.range).length
                  ? ((d.buffered = !0),
                    d.body.endList && (this.endListFragments[d.body.type] = d),
                    !Sa(d) && this.removeParts(n.sn - 1, n.type))
                  : this.removeFragment(d.body);
            }
          }
        }),
        (t.removeParts = function a(e, t) {
          var r = this.activePartLists[t];
          r &&
            (this.activePartLists[t] = r.filter(function(t) {
              return t.fragment.sn >= e;
            }));
        }),
        (t.fragBuffered = function a(e, t) {
          var r = La(e),
            n = this.fragments[r];
          !n &&
            t &&
            ((n = this.fragments[r] = {
              body: e,
              appendedPTS: null,
              loaded: null,
              buffered: !1,
              range: Object.create(null)
            }),
            e.gap && (this.hasGaps = !0)),
            n && ((n.loaded = null), (n.buffered = !0));
        }),
        (t.getBufferedTimes = function n(e, t, a, r) {
          for (
            var o = { time: [], partial: a },
              d = e.start,
              s = e.end,
              l = e.minEndPTS || s,
              c = e.maxStartPTS || d,
              u = 0;
            u < r.length;
            u++
          ) {
            var g = r.start(u) - this.bufferPadding,
              f = r.end(u) + this.bufferPadding;
            if (c >= g && l <= f) {
              o.time.push({
                startPTS: C(d, r.start(u)),
                endPTS: L(s, r.end(u))
              });
              break;
            } else if (d < f && s > g)
              (o.partial = !0),
                o.time.push({
                  startPTS: C(d, r.start(u)),
                  endPTS: L(s, r.end(u))
                });
            else if (s <= g) break;
          }
          return o;
        }),
        (t.getPartialFragment = function t(e) {
          var a = null,
            r = 0,
            n = this.bufferPadding,
            o = this.fragments,
            i,
            d,
            s;
          return (
            Object.keys(o).forEach(function(t) {
              var l = o[t];
              !l ||
                (Sa(l) &&
                  ((d = l.body.start - n),
                  (s = l.body.end + n),
                  e >= d &&
                    e <= s &&
                    ((i = L(e - d, s - e)),
                    r <= i && ((a = l.body), (r = i)))));
            }),
            a
          );
        }),
        (t.isEndListAppended = function t(e) {
          var a = this.endListFragments[e];
          return void 0 !== a && (a.buffered || Sa(a));
        }),
        (t.getState = function t(e) {
          var a = La(e),
            r = this.fragments[a];
          return r
            ? r.buffered
              ? Sa(r)
                ? qi.PARTIAL
                : qi.OK
              : qi.APPENDING
            : qi.NOT_LOADED;
        }),
        (t.isTimeBuffered = function r(e, t, a) {
          for (var n = 0, o, d; n < a.length; n++) {
            if (
              ((o = a.start(n) - this.bufferPadding),
              (d = a.end(n) + this.bufferPadding),
              e >= o && t <= d)
            )
              return !0;
            if (t <= o) return !1;
          }
          return !1;
        }),
        (t.onFragLoaded = function a(e, t) {
          var r = t.frag,
            n = t.part;
          if (!('initSegment' === r.sn || r.bitrateTest)) {
            var o = n ? null : t,
              i = La(r);
            this.fragments[i] = {
              body: r,
              appendedPTS: null,
              loaded: o,
              buffered: !1,
              range: Object.create(null)
            };
          }
        }),
        (t.onBufferAppended = function a(e, t) {
          var r = this,
            n = t.frag,
            o = t.part,
            i = t.timeRanges;
          if ('initSegment' !== n.sn) {
            var d = n.type;
            if (o) {
              var s = this.activePartLists[d];
              s || (this.activePartLists[d] = s = []), s.push(o);
            }
            (this.timeRanges = i),
              Object.keys(i).forEach(function(e) {
                var t = i[e];
                r.detectEvictedFragments(e, t, d, o);
              });
          }
        }),
        (t.onFragBuffered = function a(e, t) {
          this.detectPartialFragments(t);
        }),
        (t.hasFragment = function t(e) {
          var a = La(e);
          return !!this.fragments[a];
        }),
        (t.hasParts = function t(e) {
          var a;
          return !!(null != (a = this.activePartLists[e]) && a.length);
        }),
        (t.removeFragmentsInRange = function o(e, t, a, r, n) {
          var i = this;
          (r && !this.hasGaps) ||
            Object.keys(this.fragments).forEach(function(o) {
              var d = i.fragments[o];
              if (d) {
                var s = d.body;
                s.type !== a ||
                  (r && !s.gap) ||
                  (s.start < t &&
                    s.end > e &&
                    (d.buffered || n) &&
                    i.removeFragment(s));
              }
            });
        }),
        (t.removeFragment = function t(e) {
          var a = La(e);
          (e.stats.loaded = 0), e.clearElementaryStreamInfo();
          var r = this.activePartLists[e.type];
          if (r) {
            var n = e.sn;
            this.activePartLists[e.type] = r.filter(function(e) {
              return e.fragment.sn !== n;
            });
          }
          delete this.fragments[a],
            e.endList && delete this.endListFragments[e.type];
        }),
        (t.removeAllFragments = function e() {
          (this.fragments = Object.create(null)),
            (this.endListFragments = Object.create(null)),
            (this.activePartLists = Object.create(null)),
            (this.hasGaps = !1);
        }),
        e
      );
    })(),
    zi = I(2, 17),
    Xi = (function() {
      function e(e) {
        (this.config = void 0),
          (this.loader = null),
          (this.partLoadTimeout = -1),
          (this.config = e);
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          this.loader && (this.loader.destroy(), (this.loader = null));
        }),
        (t.abort = function e() {
          this.loader && this.loader.abort();
        }),
        (t.load = function a(e, t) {
          var r = this,
            n = e.url;
          if (!n)
            return Promise.reject(
              new Qi({
                type: Fo.NETWORK_ERROR,
                details: No.FRAG_LOAD_ERROR,
                fatal: !1,
                frag: e,
                error: new Error(
                  'Fragment does not have a ' + (n ? 'part list' : 'url')
                ),
                networkDetails: null
              })
            );
          this.abort();
          var o = this.config,
            i = o.fLoader,
            d = o.loader;
          return new Promise(function(a, s) {
            if ((r.loader && r.loader.destroy(), e.gap)) {
              if (
                e.tagList.some(function(e) {
                  return 'GAP' === e[0];
                })
              )
                return void s(Ra(e));
              e.gap = !1;
            }
            var l = (r.loader = e.loader = i ? new i(o) : new d(o)),
              c = Aa(e),
              u = ca(o.fragLoadPolicy.default),
              g = {
                loadPolicy: u,
                timeout: u.maxLoadTimeMs,
                maxRetry: 0,
                retryDelay: 0,
                maxRetryDelay: 0,
                highWaterMark: 'initSegment' === e.sn ? 1 / 0 : zi
              };
            (e.stats = l.stats),
              l.load(c, g, {
                onSuccess: function d(t, n, o, i) {
                  r.resetLoader(e, l);
                  var s = t.data;
                  o.resetIV &&
                    e.decryptdata &&
                    ((e.decryptdata.iv = new Uint8Array(s.slice(0, 16))),
                    (s = s.slice(16))),
                    a({ frag: e, part: null, payload: s, networkDetails: i });
                },
                onError: function d(t, a, o, i) {
                  r.resetLoader(e, l),
                    s(
                      new Qi({
                        type: Fo.NETWORK_ERROR,
                        details: No.FRAG_LOAD_ERROR,
                        fatal: !1,
                        frag: e,
                        response: De({ url: n, data: void 0 }, t),
                        error: new Error('HTTP Error ' + t.code + ' ' + t.text),
                        networkDetails: o,
                        stats: i
                      })
                    );
                },
                onAbort: function o(t, a, n) {
                  r.resetLoader(e, l),
                    s(
                      new Qi({
                        type: Fo.NETWORK_ERROR,
                        details: No.INTERNAL_ABORTED,
                        fatal: !1,
                        frag: e,
                        error: new Error('Aborted'),
                        networkDetails: n,
                        stats: t
                      })
                    );
                },
                onTimeout: function o(t, a, n) {
                  r.resetLoader(e, l),
                    s(
                      new Qi({
                        type: Fo.NETWORK_ERROR,
                        details: No.FRAG_LOAD_TIMEOUT,
                        fatal: !1,
                        frag: e,
                        error: new Error('Timeout after ' + g.timeout + 'ms'),
                        networkDetails: n,
                        stats: t
                      })
                    );
                },
                onProgress: function i(a, r, n, o) {
                  t &&
                    t({ frag: e, part: null, payload: n, networkDetails: o });
                }
              });
          });
        }),
        (t.loadPart = function r(e, t, a) {
          var n = this;
          this.abort();
          var o = this.config,
            i = o.fLoader,
            d = o.loader;
          return new Promise(function(r, s) {
            if ((n.loader && n.loader.destroy(), e.gap || t.gap))
              return void s(Ra(e, t));
            var l = (n.loader = e.loader = i ? new i(o) : new d(o)),
              c = Aa(e, t),
              u = ca(o.fragLoadPolicy.default),
              g = {
                loadPolicy: u,
                timeout: u.maxLoadTimeMs,
                maxRetry: 0,
                retryDelay: 0,
                maxRetryDelay: 0,
                highWaterMark: zi
              };
            (t.stats = l.stats),
              l.load(c, g, {
                onSuccess: function c(o, i, d, s) {
                  n.resetLoader(e, l), n.updateStatsFromPart(e, t);
                  var u = {
                    frag: e,
                    part: t,
                    payload: o.data,
                    networkDetails: s
                  };
                  a(u), r(u);
                },
                onError: function d(a, r, o, i) {
                  n.resetLoader(e, l),
                    s(
                      new Qi({
                        type: Fo.NETWORK_ERROR,
                        details: No.FRAG_LOAD_ERROR,
                        fatal: !1,
                        frag: e,
                        part: t,
                        response: De({ url: c.url, data: void 0 }, a),
                        error: new Error('HTTP Error ' + a.code + ' ' + a.text),
                        networkDetails: o,
                        stats: i
                      })
                    );
                },
                onAbort: function i(a, r, o) {
                  (e.stats.aborted = t.stats.aborted),
                    n.resetLoader(e, l),
                    s(
                      new Qi({
                        type: Fo.NETWORK_ERROR,
                        details: No.INTERNAL_ABORTED,
                        fatal: !1,
                        frag: e,
                        part: t,
                        error: new Error('Aborted'),
                        networkDetails: o,
                        stats: a
                      })
                    );
                },
                onTimeout: function i(a, r, o) {
                  n.resetLoader(e, l),
                    s(
                      new Qi({
                        type: Fo.NETWORK_ERROR,
                        details: No.FRAG_LOAD_TIMEOUT,
                        fatal: !1,
                        frag: e,
                        part: t,
                        error: new Error('Timeout after ' + g.timeout + 'ms'),
                        networkDetails: o,
                        stats: a
                      })
                    );
                }
              });
          });
        }),
        (t.updateStatsFromPart = function a(e, t) {
          var r = e.stats,
            n = t.stats,
            o = n.total;
          if (((r.loaded += n.loaded), o)) {
            var i = S(e.duration / t.duration),
              d = L(S(r.loaded / o), i),
              s = i - d,
              l = s * S(r.loaded / d);
            r.total = r.loaded + l;
          } else r.total = C(r.loaded, r.total);
          var c = r.loading,
            u = n.loading;
          c.start
            ? (c.first += u.first - u.start)
            : ((c.start = u.start), (c.first = u.first)),
            (c.end = u.end);
        }),
        (t.resetLoader = function a(e, t) {
          (e.loader = null),
            this.loader === t &&
              (self.clearTimeout(this.partLoadTimeout), (this.loader = null)),
            t.destroy();
        }),
        e
      );
    })(),
    Qi = (function(e) {
      function t(t) {
        var a;
        return (
          (a = e.call(this, t.error.message) || this),
          (a.data = void 0),
          (a.data = t),
          a
        );
      }
      return M(t, e), t;
    })(V(Error)),
    $i = (function() {
      function e(e) {
        (this.config = void 0),
          (this.keyUriToKeyInfo = {}),
          (this.emeController = null),
          (this.config = e);
      }
      var t = e.prototype;
      return (
        (t.abort = function t(e) {
          for (var a in this.keyUriToKeyInfo) {
            var r = this.keyUriToKeyInfo[a].loader;
            if (r) {
              if (e && e !== r.context.frag.type) return;
              r.abort();
            }
          }
        }),
        (t.detach = function e() {
          for (var t in this.keyUriToKeyInfo) {
            var a = this.keyUriToKeyInfo[t];
            (a.mediaKeySessionContext || a.decryptdata.isCommonEncryption) &&
              delete this.keyUriToKeyInfo[t];
          }
        }),
        (t.destroy = function e() {
          for (var t in (this.detach(), this.keyUriToKeyInfo)) {
            var a = this.keyUriToKeyInfo[t].loader;
            a && a.destroy();
          }
          this.keyUriToKeyInfo = {};
        }),
        (t.createKeyLoadError = function o(e, t, a, r, n) {
          return (
            void 0 === t && (t = No.KEY_LOAD_ERROR),
            new Qi({
              type: Fo.NETWORK_ERROR,
              details: t,
              fatal: !1,
              frag: e,
              response: n,
              error: a,
              networkDetails: r
            })
          );
        }),
        (t.loadClear = function a(e, t) {
          var r = this;
          if (this.emeController && this.config.emeEnabled)
            for (
              var n = e.sn,
                o = e.cc,
                d = function e() {
                  var a = t[s];
                  if (
                    o <= a.cc &&
                    ('initSegment' === n || 'initSegment' === a.sn || n < a.sn)
                  )
                    return (
                      r.emeController
                        .selectKeySystemFormat(a)
                        .then(function(e) {
                          a.setKeyFormat(e);
                        }),
                      'break'
                    );
                },
                s = 0,
                l;
              s < t.length && ((l = d()), 'break' !== l);
              s++
            );
        }),
        (t.load = function t(e) {
          var a = this;
          return !e.decryptdata && e.encrypted && this.emeController
            ? this.emeController.selectKeySystemFormat(e).then(function(t) {
                return a.loadInternal(e, t);
              })
            : this.loadInternal(e);
        }),
        (t.loadInternal = function a(e, t) {
          var r, n;
          t && e.setKeyFormat(t);
          var o = e.decryptdata;
          if (!o) {
            var i = new Error(
              t
                ? 'Expected frag.decryptdata to be defined after setting format ' +
                  t
                : 'Missing decryption data on fragment in onKeyLoading'
            );
            return Promise.reject(
              this.createKeyLoadError(e, No.KEY_LOAD_ERROR, i)
            );
          }
          var d = o.uri;
          if (!d)
            return Promise.reject(
              this.createKeyLoadError(
                e,
                No.KEY_LOAD_ERROR,
                new Error('Invalid key URI: "' + d + '"')
              )
            );
          var s = this.keyUriToKeyInfo[d];
          if (null != (r = s) && r.decryptdata.key)
            return (
              (o.key = s.decryptdata.key),
              Promise.resolve({ frag: e, keyInfo: s })
            );
          if (null != (n = s) && n.keyLoadPromise) {
            var l;
            switch (
              null == (l = s.mediaKeySessionContext) ? void 0 : l.keyStatus
            ) {
              case void 0:
              case 'status-pending':
              case 'usable':
              case 'usable-in-future':
                return s.keyLoadPromise.then(function(t) {
                  return (
                    (o.key = t.keyInfo.decryptdata.key), { frag: e, keyInfo: s }
                  );
                });
            }
          }
          switch (
            ((s = this.keyUriToKeyInfo[d] = {
              decryptdata: o,
              keyLoadPromise: null,
              loader: null,
              mediaKeySessionContext: null
            }),
            o.method)
          ) {
            case 'ISO-23001-7':
            case 'SAMPLE-AES':
            case 'SAMPLE-AES-CENC':
            case 'SAMPLE-AES-CTR':
              return 'identity' === o.keyFormat
                ? this.loadKeyHTTP(s, e)
                : this.loadKeyEME(s, e);
            case 'AES-128':
              return this.loadKeyHTTP(s, e);
            default:
              return Promise.reject(
                this.createKeyLoadError(
                  e,
                  No.KEY_LOAD_ERROR,
                  new Error(
                    'Key supplied with unsupported METHOD: "' + o.method + '"'
                  )
                )
              );
          }
        }),
        (t.loadKeyEME = function a(e, t) {
          var r = { frag: t, keyInfo: e };
          if (this.emeController && this.config.emeEnabled) {
            var n = this.emeController.loadKey(r);
            if (n)
              return (e.keyLoadPromise = n.then(function(t) {
                return (e.mediaKeySessionContext = t), r;
              })).catch(function(t) {
                throw ((e.keyLoadPromise = null), t);
              });
          }
          return Promise.resolve(r);
        }),
        (t.loadKeyHTTP = function a(e, t) {
          var r = this,
            n = this.config,
            o = n.loader,
            i = new o(n);
          return (
            (t.keyLoader = e.loader = i),
            (e.keyLoadPromise = new Promise(function(a, o) {
              var d = {
                  keyInfo: e,
                  frag: t,
                  responseType: 'arraybuffer',
                  url: e.decryptdata.uri
                },
                s = n.keyLoadPolicy.default,
                l = {
                  loadPolicy: s,
                  timeout: s.maxLoadTimeMs,
                  maxRetry: 0,
                  retryDelay: 0,
                  maxRetryDelay: 0
                },
                c = {
                  onSuccess: function d(e, t, n, i) {
                    var s = n.frag,
                      l = n.keyInfo,
                      c = n.url;
                    return s.decryptdata && l === r.keyUriToKeyInfo[c]
                      ? void ((l.decryptdata.key = s.decryptdata.key = new Uint8Array(
                          e.data
                        )),
                        (s.keyLoader = null),
                        (l.loader = null),
                        a({ frag: s, keyInfo: l }))
                      : o(
                          r.createKeyLoadError(
                            s,
                            No.KEY_LOAD_ERROR,
                            new Error(
                              'after key load, decryptdata unset or changed'
                            ),
                            i
                          )
                        );
                  },
                  onError: function s(e, a, n, i) {
                    r.resetLoader(a),
                      o(
                        r.createKeyLoadError(
                          t,
                          No.KEY_LOAD_ERROR,
                          new Error(
                            'HTTP Error ' + e.code + ' loading key ' + e.text
                          ),
                          n,
                          De({ url: d.url, data: void 0 }, e)
                        )
                      );
                  },
                  onTimeout: function i(e, a, n) {
                    r.resetLoader(a),
                      o(
                        r.createKeyLoadError(
                          t,
                          No.KEY_LOAD_TIMEOUT,
                          new Error('key loading timed out'),
                          n
                        )
                      );
                  },
                  onAbort: function i(e, a, n) {
                    r.resetLoader(a),
                      o(
                        r.createKeyLoadError(
                          t,
                          No.INTERNAL_ABORTED,
                          new Error('key loading aborted'),
                          n
                        )
                      );
                  }
                };
              i.load(d, l, c);
            }))
          );
        }),
        (t.resetLoader = function t(e) {
          var a = e.frag,
            r = e.keyInfo,
            n = e.url,
            o = r.loader;
          a.keyLoader === o && ((a.keyLoader = null), (r.loader = null)),
            delete this.keyUriToKeyInfo[n],
            o && o.destroy();
        }),
        e
      );
    })(),
    Zi = (function() {
      function e() {
        (this._boundTick = void 0),
          (this._tickTimer = null),
          (this._tickInterval = null),
          (this._tickCallCount = 0),
          (this._boundTick = this.tick.bind(this));
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          this.onHandlerDestroying(), this.onHandlerDestroyed();
        }),
        (t.onHandlerDestroying = function e() {
          this.clearNextTick(), this.clearInterval();
        }),
        (t.onHandlerDestroyed = function e() {}),
        (t.hasInterval = function e() {
          return !!this._tickInterval;
        }),
        (t.hasNextTick = function e() {
          return !!this._tickTimer;
        }),
        (t.setInterval = function t(e) {
          return (
            !this._tickInterval &&
            ((this._tickCallCount = 0),
            (this._tickInterval = self.setInterval(this._boundTick, e)),
            !0)
          );
        }),
        (t.clearInterval = function e() {
          return (
            !!this._tickInterval &&
            (self.clearInterval(this._tickInterval),
            (this._tickInterval = null),
            !0)
          );
        }),
        (t.clearNextTick = function e() {
          return (
            !!this._tickTimer &&
            (self.clearTimeout(this._tickTimer), (this._tickTimer = null), !0)
          );
        }),
        (t.tick = function e() {
          this._tickCallCount++,
            1 === this._tickCallCount &&
              (this.doTick(),
              1 < this._tickCallCount && this.tickImmediate(),
              (this._tickCallCount = 0));
        }),
        (t.tickImmediate = function e() {
          this.clearNextTick(),
            (this._tickTimer = self.setTimeout(this._boundTick, 0));
        }),
        (t.doTick = function e() {}),
        e
      );
    })(),
    Ji = {
      length: 0,
      start: function e() {
        return 0;
      },
      end: function e() {
        return 0;
      }
    },
    ed = (function() {
      function e() {}
      return (
        (e.isBuffered = function r(t, a) {
          try {
            if (t)
              for (var n = e.getBuffered(t), o = 0; o < n.length; o++)
                if (a >= n.start(o) && a <= n.end(o)) return !0;
          } catch (e) {}
          return !1;
        }),
        (e.bufferInfo = function n(t, a, r) {
          try {
            if (t) {
              var o = e.getBuffered(t),
                d = [],
                s;
              for (s = 0; s < o.length; s++)
                d.push({ start: o.start(s), end: o.end(s) });
              return this.bufferedInfo(d, a, r);
            }
          } catch (e) {}
          return { len: 0, start: a, end: a, nextStart: void 0 };
        }),
        (e.bufferedInfo = function r(e, t, a) {
          (t = C(0, t)),
            e.sort(function(e, t) {
              var a = e.start - t.start;
              return a ? a : t.end - e.end;
            });
          var n = [];
          if (a) {
            for (var o = 0, d; o < e.length; o++)
              if (((d = n.length), d)) {
                var s = n[d - 1].end;
                e[o].start - s < a
                  ? e[o].end > s && (n[d - 1].end = e[o].end)
                  : n.push(e[o]);
              } else n.push(e[o]);
          } else n = e;
          for (var l = 0, c = t, u = t, g = 0, f; g < n.length; g++) {
            var p = n[g].start,
              m = n[g].end;
            if (t + a >= p && t < m) (c = p), (u = m), (l = u - t);
            else if (t + a < p) {
              f = p;
              break;
            }
          }
          return { len: l, start: c || 0, end: u || 0, nextStart: f };
        }),
        (e.getBuffered = function t(e) {
          try {
            return e.buffered;
          } catch (t) {
            return Bo.log('failed to get media.buffered', t), Ji;
          }
        }),
        e
      );
    })(),
    td = function i(e, t, a, r, n, o) {
      void 0 === r && (r = 0),
        void 0 === n && (n = -1),
        void 0 === o && (o = !1),
        (this.level = void 0),
        (this.sn = void 0),
        (this.part = void 0),
        (this.id = void 0),
        (this.size = void 0),
        (this.partial = void 0),
        (this.transmuxing = ka()),
        (this.buffering = { audio: ka(), video: ka(), audiovideo: ka() }),
        (this.level = e),
        (this.sn = t),
        (this.id = a),
        (this.size = r),
        (this.part = n),
        (this.partial = o);
    },
    ad = (function() {
      function e(e, t) {
        (this.subtle = void 0),
          (this.aesIV = void 0),
          (this.subtle = e),
          (this.aesIV = t);
      }
      var t = e.prototype;
      return (
        (t.decrypt = function a(e, t) {
          return this.subtle.decrypt({ name: 'AES-CBC', iv: this.aesIV }, t, e);
        }),
        e
      );
    })(),
    rd = (function() {
      function e(e, t) {
        (this.subtle = void 0),
          (this.key = void 0),
          (this.subtle = e),
          (this.key = t);
      }
      var t = e.prototype;
      return (
        (t.expandKey = function e() {
          return this.subtle.importKey(
            'raw',
            this.key,
            { name: 'AES-CBC' },
            !1,
            ['encrypt', 'decrypt']
          );
        }),
        e
      );
    })(),
    nd = (function() {
      function e() {
        (this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54]),
          (this.subMix = [
            new Uint32Array(256),
            new Uint32Array(256),
            new Uint32Array(256),
            new Uint32Array(256)
          ]),
          (this.invSubMix = [
            new Uint32Array(256),
            new Uint32Array(256),
            new Uint32Array(256),
            new Uint32Array(256)
          ]),
          (this.sBox = new Uint32Array(256)),
          (this.invSBox = new Uint32Array(256)),
          (this.key = new Uint32Array(0)),
          (this.ksRows = 0),
          (this.keySize = 0),
          (this.keySchedule = void 0),
          (this.invKeySchedule = void 0),
          this.initTable();
      }
      var t = e.prototype;
      return (
        (t.uint8ArrayToUint32Array_ = function t(e) {
          for (
            var a = new DataView(e), r = new Uint32Array(4), n = 0;
            4 > n;
            n++
          )
            r[n] = a.getUint32(4 * n);
          return r;
        }),
        (t.initTable = function e() {
          var a = this.sBox,
            r = this.invSBox,
            n = this.subMix,
            o = n[0],
            s = n[1],
            l = n[2],
            c = n[3],
            u = this.invSubMix,
            g = u[0],
            f = u[1],
            p = u[2],
            m = u[3],
            y = new Uint32Array(256),
            d = 0,
            h = 0,
            T = 0;
          for (T = 0; 256 > T; T++) y[T] = 128 > T ? T << 1 : 283 ^ (T << 1);
          for (T = 0; 256 > T; T++) {
            var E = h ^ (h << 1) ^ (h << 2) ^ (h << 3) ^ (h << 4);
            (E = 99 ^ ((E >>> 8) ^ (255 & E))), (a[d] = E), (r[E] = d);
            var v = y[d],
              S = y[v],
              L = y[S],
              A = (257 * y[E]) ^ (16843008 * E);
            (o[d] = (A << 24) | (A >>> 8)),
              (s[d] = (A << 16) | (A >>> 16)),
              (l[d] = (A << 8) | (A >>> 24)),
              (c[d] = A),
              (A = (16843009 * L) ^ (65537 * S) ^ (257 * v) ^ (16843008 * d)),
              (g[E] = (A << 24) | (A >>> 8)),
              (f[E] = (A << 16) | (A >>> 16)),
              (p[E] = (A << 8) | (A >>> 24)),
              (m[E] = A),
              d ? ((d = v ^ y[y[y[L ^ v]]]), (h ^= y[y[h]])) : (d = h = 1);
          }
        }),
        (t.expandKey = function a(e) {
          for (
            var r = this.uint8ArrayToUint32Array_(e), n = !0, o = 0;
            o < r.length && n;

          )
            (n = r[o] === this.key[o]), o++;
          if (!n) {
            this.key = r;
            var i = (this.keySize = r.length);
            if (4 !== i && 6 !== i && 8 !== i)
              throw new Error('Invalid aes key size=' + i);
            var d = (this.ksRows = 4 * (i + 6 + 1)),
              s = (this.keySchedule = new Uint32Array(d)),
              l = (this.invKeySchedule = new Uint32Array(d)),
              c = this.sBox,
              u = this.rcon,
              g = this.invSubMix,
              f = g[0],
              p = g[1],
              m = g[2],
              y = g[3],
              h,
              T,
              E,
              v;
            for (h = 0; h < d; h++) {
              if (h < i) {
                E = s[h] = r[h];
                continue;
              }
              (v = E),
                0 == h % i
                  ? ((v = (v << 8) | (v >>> 24)),
                    (v =
                      (c[v >>> 24] << 24) |
                      (c[255 & (v >>> 16)] << 16) |
                      (c[255 & (v >>> 8)] << 8) |
                      c[255 & v]),
                    (v ^= u[0 | (h / i)] << 24))
                  : 6 < i &&
                    4 == h % i &&
                    (v =
                      (c[v >>> 24] << 24) |
                      (c[255 & (v >>> 16)] << 16) |
                      (c[255 & (v >>> 8)] << 8) |
                      c[255 & v]),
                (s[h] = E = (s[h - i] ^ v) >>> 0);
            }
            for (T = 0; T < d; T++)
              (h = d - T),
                (v = 3 & T ? s[h] : s[h - 4]),
                (l[T] =
                  4 > T || 4 >= h
                    ? v
                    : f[c[v >>> 24]] ^
                      p[c[255 & (v >>> 16)]] ^
                      m[c[255 & (v >>> 8)]] ^
                      y[c[255 & v]]),
                (l[T] >>>= 0);
          }
        }),
        (t.networkToHostOrderSwap = function t(e) {
          return (
            (e << 24) | ((65280 & e) << 8) | ((16711680 & e) >> 8) | (e >>> 24)
          );
        }),
        (t.decrypt = function r(e, t, a) {
          for (
            var n = this.keySize + 6,
              o = this.invKeySchedule,
              d = this.invSBox,
              s = this.invSubMix,
              l = s[0],
              c = s[1],
              u = s[2],
              g = s[3],
              f = this.uint8ArrayToUint32Array_(a),
              p = f[0],
              m = f[1],
              y = f[2],
              h = f[3],
              T = new Int32Array(e),
              E = new Int32Array(T.length),
              v = this.networkToHostOrderSwap,
              S,
              L,
              A,
              R,
              k,
              D,
              I,
              b,
              C,
              P,
              _,
              x,
              F,
              N;
            t < T.length;

          ) {
            for (
              C = v(T[t]),
                P = v(T[t + 1]),
                _ = v(T[t + 2]),
                x = v(T[t + 3]),
                k = C ^ o[0],
                D = x ^ o[1],
                I = _ ^ o[2],
                b = P ^ o[3],
                F = 4,
                N = 1;
              N < n;
              N++
            )
              (S =
                l[k >>> 24] ^
                c[255 & (D >> 16)] ^
                u[255 & (I >> 8)] ^
                g[255 & b] ^
                o[F]),
                (L =
                  l[D >>> 24] ^
                  c[255 & (I >> 16)] ^
                  u[255 & (b >> 8)] ^
                  g[255 & k] ^
                  o[F + 1]),
                (A =
                  l[I >>> 24] ^
                  c[255 & (b >> 16)] ^
                  u[255 & (k >> 8)] ^
                  g[255 & D] ^
                  o[F + 2]),
                (R =
                  l[b >>> 24] ^
                  c[255 & (k >> 16)] ^
                  u[255 & (D >> 8)] ^
                  g[255 & I] ^
                  o[F + 3]),
                (k = S),
                (D = L),
                (I = A),
                (b = R),
                (F += 4);
            (S =
              (d[k >>> 24] << 24) ^
              (d[255 & (D >> 16)] << 16) ^
              (d[255 & (I >> 8)] << 8) ^
              d[255 & b] ^
              o[F]),
              (L =
                (d[D >>> 24] << 24) ^
                (d[255 & (I >> 16)] << 16) ^
                (d[255 & (b >> 8)] << 8) ^
                d[255 & k] ^
                o[F + 1]),
              (A =
                (d[I >>> 24] << 24) ^
                (d[255 & (b >> 16)] << 16) ^
                (d[255 & (k >> 8)] << 8) ^
                d[255 & D] ^
                o[F + 2]),
              (R =
                (d[b >>> 24] << 24) ^
                (d[255 & (k >> 16)] << 16) ^
                (d[255 & (D >> 8)] << 8) ^
                d[255 & I] ^
                o[F + 3]),
              (E[t] = v(S ^ p)),
              (E[t + 1] = v(R ^ m)),
              (E[t + 2] = v(A ^ y)),
              (E[t + 3] = v(L ^ h)),
              (p = C),
              (m = P),
              (y = _),
              (h = x),
              (t += 4);
          }
          return E.buffer;
        }),
        e
      );
    })(),
    od = (function() {
      function e(e, t) {
        var a = void 0 === t ? {} : t,
          r = a.removePKCS7Padding,
          n = void 0 === r || r;
        if (
          ((this.logEnabled = !0),
          (this.removePKCS7Padding = void 0),
          (this.subtle = null),
          (this.softwareDecrypter = null),
          (this.key = null),
          (this.fastAesKey = null),
          (this.remainderData = null),
          (this.currentIV = null),
          (this.currentResult = null),
          (this.useSoftware = void 0),
          (this.useSoftware = e.enableSoftwareAES),
          (this.removePKCS7Padding = n),
          n)
        )
          try {
            var o = self.crypto;
            o && (this.subtle = o.subtle || o.webkitSubtle);
          } catch (t) {}
        null === this.subtle && (this.useSoftware = !0);
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          (this.subtle = null),
            (this.softwareDecrypter = null),
            (this.key = null),
            (this.fastAesKey = null),
            (this.remainderData = null),
            (this.currentIV = null),
            (this.currentResult = null);
        }),
        (t.isSync = function e() {
          return this.useSoftware;
        }),
        (t.flush = function e() {
          var t = this.currentResult,
            a = this.remainderData;
          if (!t || a) return this.reset(), null;
          var r = new Uint8Array(t);
          return this.reset(), this.removePKCS7Padding ? Oa(r) : r;
        }),
        (t.reset = function e() {
          (this.currentResult = null),
            (this.currentIV = null),
            (this.remainderData = null),
            this.softwareDecrypter && (this.softwareDecrypter = null);
        }),
        (t.decrypt = function r(e, t, a) {
          var n = this;
          return this.useSoftware
            ? new Promise(function(r, o) {
                n.softwareDecrypt(new Uint8Array(e), t, a);
                var i = n.flush();
                i
                  ? r(i.buffer)
                  : o(new Error('[softwareDecrypt] Failed to decrypt data'));
              })
            : this.webCryptoDecrypt(new Uint8Array(e), t, a);
        }),
        (t.softwareDecrypt = function r(e, t, a) {
          var n = this.currentIV,
            o = this.currentResult,
            i = this.remainderData;
          this.logOnce('JS AES decrypt'),
            i && ((e = ct(i, e)), (this.remainderData = null));
          var d = this.getValidChunk(e);
          if (!d.length) return null;
          n && (a = n);
          var s = this.softwareDecrypter;
          s || (s = this.softwareDecrypter = new nd()), s.expandKey(t);
          var l = o;
          return (
            (this.currentResult = s.decrypt(d.buffer, 0, a)),
            (this.currentIV = je(d, -16).buffer),
            l ? l : null
          );
        }),
        (t.webCryptoDecrypt = function r(e, t, a) {
          var n = this,
            o = this.subtle;
          return (
            (this.key === t && this.fastAesKey) ||
              ((this.key = t), (this.fastAesKey = new rd(o, t))),
            this.fastAesKey
              .expandKey()
              .then(function(t) {
                if (!o)
                  return Promise.reject(
                    new Error('web crypto not initialized')
                  );
                n.logOnce('WebCrypto AES decrypt');
                var r = new ad(o, new Uint8Array(a));
                return r.decrypt(e.buffer, t);
              })
              .catch(function(r) {
                return (
                  Bo.warn(
                    '[decrypter]: WebCrypto Error, disable WebCrypto API, ' +
                      r.name +
                      ': ' +
                      r.message
                  ),
                  n.onWebCryptoError(e, t, a)
                );
              })
          );
        }),
        (t.onWebCryptoError = function r(e, t, a) {
          (this.useSoftware = !0),
            (this.logEnabled = !0),
            this.softwareDecrypt(e, t, a);
          var n = this.flush();
          if (n) return n.buffer;
          throw new Error(
            'WebCrypto and softwareDecrypt: failed to decrypt data'
          );
        }),
        (t.getValidChunk = function t(e) {
          var a = e,
            r = e.length - (e.length % 16);
          return (
            r !== e.length &&
              ((a = je(e, 0, r)), (this.remainderData = je(e, r))),
            a
          );
        }),
        (t.logOnce = function t(e) {
          this.logEnabled &&
            (Bo.log('[decrypter]: ' + e), (this.logEnabled = !1));
        }),
        e
      );
    })(),
    id = {
      toString: function t(e) {
        for (var a = '', r = e.length, n = 0; n < r; n++)
          a += '[' + e.start(n).toFixed(3) + '-' + e.end(n).toFixed(3) + ']';
        return a;
      }
    },
    dd = {
      STOPPED: 'STOPPED',
      IDLE: 'IDLE',
      KEY_LOADING: 'KEY_LOADING',
      FRAG_LOADING: 'FRAG_LOADING',
      FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',
      WAITING_TRACK: 'WAITING_TRACK',
      PARSING: 'PARSING',
      PARSED: 'PARSED',
      ENDED: 'ENDED',
      ERROR: 'ERROR',
      WAITING_INIT_PTS: 'WAITING_INIT_PTS',
      WAITING_LEVEL: 'WAITING_LEVEL'
    },
    sd = (function(e) {
      function t(t, a, r, n, o) {
        var i;
        return (
          (i = e.call(this) || this),
          (i.hls = void 0),
          (i.fragPrevious = null),
          (i.fragCurrent = null),
          (i.fragmentTracker = void 0),
          (i.transmuxer = null),
          (i._state = dd.STOPPED),
          (i.playlistType = void 0),
          (i.media = null),
          (i.mediaBuffer = null),
          (i.config = void 0),
          (i.bitrateTest = !1),
          (i.lastCurrentTime = 0),
          (i.nextLoadPosition = 0),
          (i.startPosition = 0),
          (i.startTimeOffset = null),
          (i.loadedmetadata = !1),
          (i.retryDate = 0),
          (i.levels = null),
          (i.fragmentLoader = void 0),
          (i.keyLoader = void 0),
          (i.levelLastLoaded = null),
          (i.startFragRequested = !1),
          (i.decrypter = void 0),
          (i.initPTS = []),
          (i.onvseeking = null),
          (i.onvended = null),
          (i.logPrefix = ''),
          (i.log = void 0),
          (i.warn = void 0),
          (i.playlistType = o),
          (i.logPrefix = n),
          (i.log = Bo.log.bind(Bo, n + ':')),
          (i.warn = Bo.warn.bind(Bo, n + ':')),
          (i.hls = t),
          (i.fragmentLoader = new Xi(t.config)),
          (i.keyLoader = r),
          (i.fragmentTracker = a),
          (i.config = t.config),
          (i.decrypter = new od(t.config)),
          t.on(xo.MANIFEST_LOADED, i.onManifestLoaded, Y(i)),
          i
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.doTick = function e() {
          this.onTickEnd();
        }),
        (a.onTickEnd = function e() {}),
        (a.startLoad = function t(e) {}),
        (a.stopLoad = function e() {
          this.fragmentLoader.abort(), this.keyLoader.abort(this.playlistType);
          var t = this.fragCurrent;
          null != t &&
            t.loader &&
            (t.abortRequests(), this.fragmentTracker.removeFragment(t)),
            this.resetTransmuxer(),
            (this.fragCurrent = null),
            (this.fragPrevious = null),
            this.clearInterval(),
            this.clearNextTick(),
            (this.state = dd.STOPPED);
        }),
        (a._streamEnded = function a(e, t) {
          if (t.live || e.nextStart || !e.end || !this.media) return !1;
          var r = t.partList;
          if (null != r && r.length) {
            var n = r[r.length - 1],
              o = ed.isBuffered(this.media, n.start + n.duration / 2);
            return o;
          }
          var i = t.fragments[t.fragments.length - 1].type;
          return this.fragmentTracker.isEndListAppended(i);
        }),
        (a.getLevelDetails = function e() {
          if (this.levels && null !== this.levelLastLoaded) {
            var t;
            return null == (t = this.levels[this.levelLastLoaded])
              ? void 0
              : t.details;
          }
        }),
        (a.onMediaAttached = function a(e, t) {
          var r = (this.media = this.mediaBuffer = t.media);
          (this.onvseeking = this.onMediaSeeking.bind(this)),
            (this.onvended = this.onMediaEnded.bind(this)),
            r.addEventListener('seeking', this.onvseeking),
            r.addEventListener('ended', this.onvended);
          var n = this.config;
          this.levels &&
            n.autoStartLoad &&
            this.state === dd.STOPPED &&
            this.startLoad(n.startPosition);
        }),
        (a.onMediaDetaching = function e() {
          var t = this.media;
          null != t &&
            t.ended &&
            (this.log('MSE detaching and video ended, reset startPosition'),
            (this.startPosition = this.lastCurrentTime = 0)),
            t &&
              this.onvseeking &&
              this.onvended &&
              (t.removeEventListener('seeking', this.onvseeking),
              t.removeEventListener('ended', this.onvended),
              (this.onvseeking = this.onvended = null)),
            this.keyLoader && this.keyLoader.detach(),
            (this.media = this.mediaBuffer = null),
            (this.loadedmetadata = !1),
            this.fragmentTracker.removeAllFragments(),
            this.stopLoad();
        }),
        (a.onMediaSeeking = function e() {
          var t = this.config,
            a = this.fragCurrent,
            r = this.media,
            n = this.mediaBuffer,
            o = this.state,
            i = r ? r.currentTime : 0,
            d = ed.bufferInfo(n ? n : r, i, t.maxBufferHole);
          if (
            (this.log(
              'media seeking to ' + (_o(i) ? i.toFixed(3) : i) + ', state: ' + o
            ),
            this.state === dd.ENDED)
          )
            this.resetLoadingState();
          else if (a) {
            var s = t.maxFragLookUpTolerance,
              l = a.start - s,
              c = a.start + a.duration + s;
            if (!d.len || c < d.start || l > d.end) {
              var u = i > c;
              (i < l || u) &&
                (u &&
                  a.loader &&
                  (this.log(
                    'seeking outside of buffer while fragment load in progress, cancel fragment load'
                  ),
                  a.abortRequests(),
                  this.resetLoadingState()),
                (this.fragPrevious = null));
            }
          }
          r &&
            (this.fragmentTracker.removeFragmentsInRange(
              i,
              1 / 0,
              this.playlistType,
              !0
            ),
            (this.lastCurrentTime = i)),
            this.loadedmetadata ||
              d.len ||
              (this.nextLoadPosition = this.startPosition = i),
            this.tickImmediate();
        }),
        (a.onMediaEnded = function e() {
          this.startPosition = this.lastCurrentTime = 0;
        }),
        (a.onManifestLoaded = function a(e, t) {
          (this.startTimeOffset = t.startTimeOffset), (this.initPTS = []);
        }),
        (a.onHandlerDestroying = function t() {
          this.stopLoad(), e.prototype.onHandlerDestroying.call(this);
        }),
        (a.onHandlerDestroyed = function t() {
          (this.state = dd.STOPPED),
            this.fragmentLoader && this.fragmentLoader.destroy(),
            this.keyLoader && this.keyLoader.destroy(),
            this.decrypter && this.decrypter.destroy(),
            (this.hls = this.log = this.warn = this.decrypter = this.keyLoader = this.fragmentLoader = this.fragmentTracker = null),
            e.prototype.onHandlerDestroyed.call(this);
        }),
        (a.loadFragment = function r(e, t, a) {
          this._loadFragForPlayback(e, t, a);
        }),
        (a._loadFragForPlayback = function r(e, t, a) {
          var n = this,
            o = function a(t) {
              return n.fragContextChanged(e)
                ? (n.warn(
                    'Fragment ' +
                      e.sn +
                      (t.part ? ' p: ' + t.part.index : '') +
                      ' of level ' +
                      e.level +
                      ' was dropped during download.'
                  ),
                  void n.fragmentTracker.removeFragment(e))
                : void (e.stats.chunkCount++, n._handleFragmentLoadProgress(t));
            };
          this._doFragLoad(e, t, a, o)
            .then(function(t) {
              if (t) {
                var a = n.state;
                return n.fragContextChanged(e)
                  ? void (
                      (a !== dd.FRAG_LOADING &&
                        (n.fragCurrent || a !== dd.PARSING)) ||
                      (n.fragmentTracker.removeFragment(e), (n.state = dd.IDLE))
                    )
                  : void ('payload' in t &&
                      (n.log(
                        'Loaded fragment ' + e.sn + ' of level ' + e.level
                      ),
                      n.hls.trigger(xo.FRAG_LOADED, t)),
                    n._handleFragmentLoadComplete(t));
              }
            })
            .catch(function(t) {
              n.state === dd.STOPPED ||
                n.state === dd.ERROR ||
                (n.warn(t), n.resetFragmentLoading(e));
            });
        }),
        (a.clearTrackerIfNeeded = function t(e) {
          var a = this.fragmentTracker,
            r = a.getState(e),
            n;
          if (r === qi.APPENDING) {
            var o = e.type,
              i = this.getFwdBufferInfo(this.mediaBuffer, o),
              d = C(e.duration, i ? i.len : this.config.maxBufferLength);
            this.reduceMaxBufferLength(d) && a.removeFragment(e);
          } else
            0 === (null == (n = this.mediaBuffer) ? void 0 : n.buffered.length)
              ? a.removeAllFragments()
              : a.hasParts(e.type) &&
                (a.detectPartialFragments({
                  frag: e,
                  part: null,
                  stats: e.stats,
                  id: e.type
                }),
                a.getState(e) === qi.PARTIAL && a.removeFragment(e));
        }),
        (a.flushMainBuffer = function r(e, t, a) {
          if ((void 0 === a && (a = null), !!(e - t))) {
            var n = { startOffset: e, endOffset: t, type: a };
            this.hls.trigger(xo.BUFFER_FLUSHING, n);
          }
        }),
        (a._loadInitSegment = function a(e, t) {
          var r = this;
          this._doFragLoad(e, t)
            .then(function(t) {
              if (!t || r.fragContextChanged(e) || !r.levels)
                throw new Error('init load aborted');
              return t;
            })
            .then(function(t) {
              var a = r.hls,
                n = t.payload,
                o = e.decryptdata;
              if (
                n &&
                0 < n.byteLength &&
                o &&
                o.key &&
                o.iv &&
                'AES-128' === o.method
              ) {
                var i = self.performance.now();
                return r.decrypter
                  .decrypt(new Uint8Array(n), o.key.buffer, o.iv.buffer)
                  .catch(function(t) {
                    throw (a.trigger(xo.ERROR, {
                      type: Fo.MEDIA_ERROR,
                      details: No.FRAG_DECRYPT_ERROR,
                      fatal: !1,
                      error: t,
                      reason: t.message,
                      frag: e
                    }),
                    t);
                  })
                  .then(function(r) {
                    var n = self.performance.now();
                    return (
                      a.trigger(xo.FRAG_DECRYPTED, {
                        frag: e,
                        payload: r,
                        stats: { tstart: i, tdecrypt: n }
                      }),
                      (t.payload = r),
                      t
                    );
                  });
              }
              return t;
            })
            .then(function(a) {
              var n = r.fragCurrent,
                o = r.hls,
                i = r.levels;
              if (!i) throw new Error('init load aborted, missing levels');
              var d = e.stats;
              (r.state = dd.IDLE),
                (t.fragmentError = 0),
                (e.data = new Uint8Array(a.payload)),
                (d.parsing.start = d.buffering.start = self.performance.now()),
                (d.parsing.end = d.buffering.end = self.performance.now()),
                a.frag === n &&
                  o.trigger(xo.FRAG_BUFFERED, {
                    stats: d,
                    frag: n,
                    part: null,
                    id: e.type
                  }),
                r.tick();
            })
            .catch(function(t) {
              r.state === dd.STOPPED ||
                r.state === dd.ERROR ||
                (r.warn(t), r.resetFragmentLoading(e));
            });
        }),
        (a.fragContextChanged = function t(e) {
          var a = this.fragCurrent;
          return (
            !e ||
            !a ||
            e.level !== a.level ||
            e.sn !== a.sn ||
            e.urlId !== a.urlId
          );
        }),
        (a.fragBufferedComplete = function a(e, t) {
          var r = this.mediaBuffer ? this.mediaBuffer : this.media,
            n,
            o,
            i,
            d;
          this.log(
            'Buffered ' +
              e.type +
              ' sn: ' +
              e.sn +
              (t ? ' part: ' + t.index : '') +
              ' of ' +
              (this.playlistType === Pi.MAIN ? 'level' : 'track') +
              ' ' +
              e.level +
              ' (frag:[' +
              (null == (n = e.startPTS) ? NaN : n).toFixed(3) +
              '-' +
              (null == (o = e.endPTS) ? NaN : o).toFixed(3) +
              '] > buffer:' +
              (r ? id.toString(ed.getBuffered(r)) : '(detached)') +
              ')'
          ),
            (this.state = dd.IDLE),
            r &&
              (!this.loadedmetadata &&
                e.type == Pi.MAIN &&
                r.buffered.length &&
                (null == (i = this.fragCurrent) ? void 0 : i.sn) ===
                  (null == (d = this.fragPrevious) ? void 0 : d.sn) &&
                ((this.loadedmetadata = !0), this.seekToStartPos()),
              this.tick());
        }),
        (a.seekToStartPos = function e() {}),
        (a._handleFragmentLoadComplete = function t(e) {
          var a = this.transmuxer;
          if (a) {
            var r = e.frag,
              n = e.part,
              o = e.partsLoaded,
              i =
                !o ||
                0 === o.length ||
                o.some(function(e) {
                  return !e;
                }),
              d = new td(
                r.level,
                r.sn,
                r.stats.chunkCount + 1,
                0,
                n ? n.index : -1,
                !i
              );
            a.flush(d);
          }
        }),
        (a._handleFragmentLoadProgress = function t(e) {}),
        (a._doFragLoad = function n(e, t, a, r) {
          var o = this;
          void 0 === a && (a = null);
          var i = null == t ? void 0 : t.details,
            d;
          if (!this.levels || !i)
            throw new Error(
              'frag load aborted, missing level' + (i ? '' : ' detail') + 's'
            );
          var s = null;
          if (
            (e.encrypted && !(null != (d = e.decryptdata) && d.key)
              ? (this.log(
                  'Loading key for ' +
                    e.sn +
                    ' of [' +
                    i.startSN +
                    '-' +
                    i.endSN +
                    '], ' +
                    ('[stream-controller]' === this.logPrefix
                      ? 'level'
                      : 'track') +
                    ' ' +
                    e.level
                ),
                (this.state = dd.KEY_LOADING),
                (this.fragCurrent = e),
                (s = this.keyLoader.load(e).then(function(e) {
                  if (!o.fragContextChanged(e.frag))
                    return (
                      o.hls.trigger(xo.KEY_LOADED, e),
                      o.state === dd.KEY_LOADING && (o.state = dd.IDLE),
                      e
                    );
                })),
                this.hls.trigger(xo.KEY_LOADING, { frag: e }),
                null === this.fragCurrent &&
                  (s = Promise.reject(
                    new Error(
                      'frag load aborted, context changed in KEY_LOADING'
                    )
                  )))
              : !e.encrypted &&
                i.encryptedFragments.length &&
                this.keyLoader.loadClear(e, i.encryptedFragments),
            (a = C(e.start, a || 0)),
            this.config.lowLatencyMode && 'initSegment' !== e.sn)
          ) {
            var l = i.partList;
            if (l && r) {
              a > e.end && i.fragmentHint && (e = i.fragmentHint);
              var c = this.getNextPart(l, e, a);
              if (-1 < c) {
                var u = l[c];
                this.log(
                  'Loading part sn: ' +
                    e.sn +
                    ' p: ' +
                    u.index +
                    ' cc: ' +
                    e.cc +
                    ' of playlist [' +
                    i.startSN +
                    '-' +
                    i.endSN +
                    '] parts [0-' +
                    c +
                    '-' +
                    (l.length - 1) +
                    '] ' +
                    ('[stream-controller]' === this.logPrefix
                      ? 'level'
                      : 'track') +
                    ': ' +
                    e.level +
                    ', target: ' +
                    parseFloat(a.toFixed(3))
                ),
                  (this.nextLoadPosition = u.start + u.duration),
                  (this.state = dd.FRAG_LOADING);
                var g;
                return (
                  (g = s
                    ? s
                        .then(function(a) {
                          return !a || o.fragContextChanged(a.frag)
                            ? null
                            : o.doFragPartsLoad(e, u, t, r);
                        })
                        .catch(function(e) {
                          return o.handleFragLoadError(e);
                        })
                    : this.doFragPartsLoad(e, u, t, r).catch(function(e) {
                        return o.handleFragLoadError(e);
                      })),
                  this.hls.trigger(xo.FRAG_LOADING, {
                    frag: e,
                    part: u,
                    targetBufferTime: a
                  }),
                  null === this.fragCurrent
                    ? Promise.reject(
                        new Error(
                          'frag load aborted, context changed in FRAG_LOADING parts'
                        )
                      )
                    : g
                );
              }
              if (!e.url || this.loadedEndOfParts(l, a))
                return Promise.resolve(null);
            }
          }
          this.log(
            'Loading fragment ' +
              e.sn +
              ' cc: ' +
              e.cc +
              ' ' +
              (i ? 'of [' + i.startSN + '-' + i.endSN + '] ' : '') +
              ('[stream-controller]' === this.logPrefix ? 'level' : 'track') +
              ': ' +
              e.level +
              ', target: ' +
              parseFloat(a.toFixed(3))
          ),
            _o(e.sn) &&
              !this.bitrateTest &&
              (this.nextLoadPosition = e.start + e.duration),
            (this.state = dd.FRAG_LOADING);
          var f = this.config.progressive,
            p;
          return (
            (p =
              f && s
                ? s
                    .then(function(t) {
                      return !t ||
                        o.fragContextChanged(null == t ? void 0 : t.frag)
                        ? null
                        : o.fragmentLoader.load(e, r);
                    })
                    .catch(function(e) {
                      return o.handleFragLoadError(e);
                    })
                : Promise.all([this.fragmentLoader.load(e, f ? r : void 0), s])
                    .then(function(e) {
                      var t = e[0];
                      return !f && t && r && r(t), t;
                    })
                    .catch(function(e) {
                      return o.handleFragLoadError(e);
                    })),
            this.hls.trigger(xo.FRAG_LOADING, { frag: e, targetBufferTime: a }),
            null === this.fragCurrent
              ? Promise.reject(
                  new Error(
                    'frag load aborted, context changed in FRAG_LOADING'
                  )
                )
              : p
          );
        }),
        (a.doFragPartsLoad = function n(e, t, a, r) {
          var o = this;
          return new Promise(function(n, i) {
            var d = [],
              s = null == (c = a.details) ? void 0 : c.partList,
              l = function l(t) {
                o.fragmentLoader
                  .loadPart(e, t, r)
                  .then(function(r) {
                    d[t.index] = r;
                    var i = r.part;
                    o.hls.trigger(xo.FRAG_LOADED, r);
                    var c =
                      oa(a, e.sn, t.index + 1) || ia(s, e.sn, t.index + 1);
                    return c
                      ? void l(c)
                      : n({ frag: e, part: i, partsLoaded: d });
                  })
                  .catch(i);
              },
              c;
            l(t);
          });
        }),
        (a.handleFragLoadError = function t(e) {
          if ('data' in e) {
            var a = e.data;
            e.data && a.details === No.INTERNAL_ABORTED
              ? this.handleFragLoadAborted(a.frag, a.part)
              : this.hls.trigger(xo.ERROR, a);
          } else
            this.hls.trigger(xo.ERROR, {
              type: Fo.OTHER_ERROR,
              details: No.INTERNAL_EXCEPTION,
              err: e,
              error: e,
              fatal: !0
            });
          return null;
        }),
        (a._handleTransmuxerFlush = function t(e) {
          var a = this.getCurrentContext(e);
          if (!a || this.state !== dd.PARSING)
            return void (
              this.fragCurrent ||
              this.state === dd.STOPPED ||
              this.state === dd.ERROR ||
              (this.state = dd.IDLE)
            );
          var r = a.frag,
            n = a.part,
            o = a.level,
            i = self.performance.now();
          (r.stats.parsing.end = i),
            n && (n.stats.parsing.end = i),
            this.updateLevelTiming(r, n, o, e.partial);
        }),
        (a.getCurrentContext = function t(e) {
          var a = this.levels,
            r = this.fragCurrent,
            n = e.level,
            o = e.sn,
            i = e.part;
          if (!(null != a && a[n]))
            return (
              this.warn(
                'Levels object was unset while buffering fragment ' +
                  o +
                  ' of level ' +
                  n +
                  '. The current chunk will not be buffered.'
              ),
              null
            );
          var d = a[n],
            s = -1 < i ? oa(d, o, i) : null,
            l = s ? s.fragment : na(d, o, r);
          return l
            ? (r && r !== l && (l.stats = r.stats),
              { frag: l, part: s, level: d })
            : null;
        }),
        (a.bufferFragmentData = function o(e, t, a, r, n) {
          var i;
          if (e && this.state === dd.PARSING) {
            var d = e.data1,
              s = e.data2,
              l = d;
            if ((d && s && (l = ct(d, s)), !!(null != (i = l) && i.length))) {
              var c = {
                type: e.type,
                frag: t,
                part: a,
                chunkMeta: r,
                parent: t.type,
                data: l
              };
              if (
                (this.hls.trigger(xo.BUFFER_APPENDING, c),
                e.dropped && e.independent && !a)
              ) {
                if (n) return;
                this.flushBufferGap(t);
              }
            }
          }
        }),
        (a.flushBufferGap = function t(e) {
          var a = this.media;
          if (a) {
            if (!ed.isBuffered(a, a.currentTime))
              return void this.flushMainBuffer(0, e.start);
            var r = a.currentTime,
              n = ed.bufferInfo(a, r, 0),
              o = e.duration,
              i = L(2 * this.config.maxFragLookUpTolerance, 0.25 * o),
              d = C(L(e.start - i, n.end - i), r + i);
            e.start - d > i && this.flushMainBuffer(d, e.start);
          }
        }),
        (a.getFwdBufferInfo = function a(e, t) {
          var r = this.getLoadPosition();
          return _o(r) ? this.getFwdBufferInfoAtPos(e, r, t) : null;
        }),
        (a.getFwdBufferInfoAtPos = function r(e, t, a) {
          var n = this.config.maxBufferHole,
            o = ed.bufferInfo(e, t, n);
          if (0 === o.len && void 0 !== o.nextStart) {
            var i = this.fragmentTracker.getBufferedFrag(t, a);
            if (i && o.nextStart < i.end)
              return ed.bufferInfo(e, t, C(o.nextStart, n));
          }
          return o;
        }),
        (a.getMaxBufferLength = function t(e) {
          var a = this.config,
            r;
          return (
            (r = e
              ? C((8 * a.maxBufferSize) / e, a.maxBufferLength)
              : a.maxBufferLength),
            L(r, a.maxMaxBufferLength)
          );
        }),
        (a.reduceMaxBufferLength = function t(e) {
          var a = this.config,
            r = e || a.maxBufferLength;
          return (
            !!(a.maxMaxBufferLength >= r) &&
            ((a.maxMaxBufferLength /= 2),
            this.warn(
              'Reduce max buffer length to ' + a.maxMaxBufferLength + 's'
            ),
            !0)
          );
        }),
        (a.getAppendedFrag = function a(e, t) {
          var r = this.fragmentTracker.getAppendedFrag(e, Pi.MAIN);
          return r && 'fragment' in r ? r.fragment : r;
        }),
        (a.getNextFragment = function a(e, t) {
          var r = t.fragments,
            n = r.length;
          if (!n) return null;
          var o = this.config,
            i = r[0].start,
            d;
          if (t.live) {
            var s = o.initialLiveManifestSize;
            if (n < s)
              return (
                this.warn(
                  'Not enough fragments to start playback (have: ' +
                    n +
                    ', need: ' +
                    s +
                    ')'
                ),
                null
              );
            t.PTSKnown ||
              this.startFragRequested ||
              -1 !== this.startPosition ||
              ((d = this.getInitialLiveFragment(t, r)),
              (this.startPosition = d
                ? this.hls.liveSyncPosition || d.start
                : e));
          } else e <= i && (d = r[0]);
          if (!d) {
            var l = o.lowLatencyMode ? t.partEnd : t.fragmentEnd;
            d = this.getFragmentAtPosition(e, l, t);
          }
          return this.mapToInitFragWhenRequired(d);
        }),
        (a.isLoopLoading = function a(e, t) {
          var r = this.fragmentTracker.getState(e);
          return (
            (r === qi.OK || (r === qi.PARTIAL && !!e.gap)) &&
            this.nextLoadPosition > t
          );
        }),
        (a.getNextFragmentLoopLoading = function o(e, t, a, r, n) {
          var i = e.gap,
            d = this.getNextFragment(this.nextLoadPosition, t);
          if (null === d) return d;
          if (((e = d), i && e && !e.gap && a.nextStart)) {
            var s = this.getFwdBufferInfoAtPos(
              this.mediaBuffer ? this.mediaBuffer : this.media,
              a.nextStart,
              r
            );
            if (null !== s && a.len + s.len >= n)
              return (
                this.log(
                  'buffer full after gaps in "' +
                    r +
                    '" playlist starting at sn: ' +
                    e.sn
                ),
                null
              );
          }
          return e;
        }),
        (a.mapToInitFragWhenRequired = function t(e) {
          return null == e ||
            !e.initSegment ||
            (null != e && e.initSegment.data) ||
            this.bitrateTest
            ? e
            : e.initSegment;
        }),
        (a.getNextPart = function r(e, t, a) {
          for (
            var n = -1, o = !1, d = !0, s = 0, l = e.length, c, u;
            s < l &&
            ((c = e[s]), (d = d && !c.independent), !(-1 < n && a < c.start));
            s++
          )
            (u = c.loaded),
              u
                ? (n = -1)
                : (o || c.independent || d) && c.fragment === t && (n = s),
              (o = u);
          return n;
        }),
        (a.loadedEndOfParts = function a(e, t) {
          var r = e[e.length - 1];
          return r && t > r.start && r.loaded;
        }),
        (a.getInitialLiveFragment = function a(e, t) {
          var r = this.fragPrevious,
            n = null;
          if (!r) {
            var o = this.hls.liveSyncPosition;
            null !== o &&
              (n = this.getFragmentAtPosition(
                o,
                this.bitrateTest ? e.fragmentEnd : e.edge,
                e
              ));
          } else if (
            (e.hasProgramDateTime &&
              (this.log(
                'Live playlist, switching playlist, load frag with same PDT: ' +
                  r.programDateTime
              ),
              (n = fa(
                t,
                r.endProgramDateTime,
                this.config.maxFragLookUpTolerance
              ))),
            !n)
          ) {
            var i = r.sn + 1;
            if (i >= e.startSN && i <= e.endSN) {
              var d = t[i - e.startSN];
              r.cc === d.cc &&
                ((n = d),
                this.log(
                  'Live playlist, switching playlist, load frag with next SN: ' +
                    n.sn
                ));
            }
            n ||
              ((n = ha(t, r.cc)),
              n &&
                this.log(
                  'Live playlist, switching playlist, load frag with same CC: ' +
                    n.sn
                ));
          }
          return n;
        }),
        (a.getFragmentAtPosition = function r(e, t, a) {
          var n = this.config,
            o = this.fragPrevious,
            i = a.fragments,
            d = a.endSN,
            s = a.fragmentHint,
            l = n.maxFragLookUpTolerance,
            c = a.partList,
            u = !!(n.lowLatencyMode && null != c && c.length && s);
          u && s && !this.bitrateTest && ((i = i.concat(s)), (d = s.sn));
          var g;
          if (e < t) {
            var f = e > t - l ? 0 : l;
            g = pa(o, i, e, f);
          } else g = i[i.length - 1];
          if (g) {
            var p = g.sn - a.startSN,
              m = this.fragmentTracker.getState(g);
            if (
              ((m === qi.OK || (m === qi.PARTIAL && g.gap)) && (o = g),
              o && g.sn === o.sn && (!u || c[0].fragment.sn > g.sn))
            ) {
              var y = o && g.level === o.level;
              if (y) {
                var h = i[p + 1];
                g =
                  g.sn < d && this.fragmentTracker.getState(h) !== qi.OK
                    ? h
                    : null;
              }
            }
          }
          return g;
        }),
        (a.synchronizeToLiveEdge = function t(e) {
          var a = this.config,
            r = this.media;
          if (r) {
            var n = this.hls.liveSyncPosition,
              o = r.currentTime,
              i = e.fragments[0].start,
              d = e.edge,
              s = o >= i - a.maxFragLookUpTolerance && o <= d;
            if (null !== n && r.duration > n && (o < n || !s)) {
              var l =
                void 0 === a.liveMaxLatencyDuration
                  ? a.liveMaxLatencyDurationCount * e.targetduration
                  : a.liveMaxLatencyDuration;
              ((!s && 4 > r.readyState) || o < d - l) &&
                (!this.loadedmetadata && (this.nextLoadPosition = n),
                r.readyState &&
                  (this.warn(
                    'Playback: ' +
                      o.toFixed(3) +
                      ' is located too far from the end of live sliding playlist: ' +
                      d +
                      ', reset currentTime to : ' +
                      n.toFixed(3)
                  ),
                  (r.currentTime = n)));
            }
          }
        }),
        (a.alignPlaylists = function a(e, t) {
          var r = this.levels,
            n = this.levelLastLoaded,
            o = this.fragPrevious,
            i = null === n ? null : r[n],
            d = e.fragments.length;
          if (!d) return this.warn('No fragments in live playlist'), 0;
          var s = e.fragments[0].start,
            l = !t,
            c = e.alignedSliding && _o(s);
          if (l || (!c && !s)) {
            _a(o, i, e);
            var u = e.fragments[0].start;
            return (
              this.log(
                'Live playlist sliding: ' +
                  u.toFixed(2) +
                  ' start-sn: ' +
                  (t ? t.startSN : 'na') +
                  '->' +
                  e.startSN +
                  ' prev-sn: ' +
                  (o ? o.sn : 'na') +
                  ' fragments: ' +
                  d
              ),
              u
            );
          }
          return s;
        }),
        (a.waitForCdnTuneIn = function t(e) {
          var a = 3;
          return (
            e.live &&
            e.canBlockReload &&
            e.partTarget &&
            e.tuneInGoal > C(e.partHoldBack, 3 * e.partTarget)
          );
        }),
        (a.setStartPosition = function a(e, t) {
          var r = this.startPosition;
          if ((r < t && (r = -1), -1 === r || -1 === this.lastCurrentTime)) {
            var n = null !== this.startTimeOffset,
              o = n ? this.startTimeOffset : e.startTimeOffset;
            null !== o && _o(o)
              ? ((r = t + o),
                0 > o && (r += e.totalduration),
                (r = L(C(t, r), t + e.totalduration)),
                this.log(
                  'Start time offset ' +
                    o +
                    ' found in ' +
                    (n ? 'multivariant' : 'media') +
                    ' playlist, adjust startPosition to ' +
                    r
                ),
                (this.startPosition = r))
              : e.live
              ? (r = this.hls.liveSyncPosition || t)
              : (this.startPosition = r = 0),
              (this.lastCurrentTime = r);
          }
          this.nextLoadPosition = r;
        }),
        (a.getLoadPosition = function e() {
          var t = this.media,
            a = 0;
          return (
            this.loadedmetadata && t
              ? (a = t.currentTime)
              : this.nextLoadPosition && (a = this.nextLoadPosition),
            a
          );
        }),
        (a.handleFragLoadAborted = function a(e, t) {
          this.transmuxer &&
            'initSegment' !== e.sn &&
            e.stats.aborted &&
            (this.warn(
              'Fragment ' +
                e.sn +
                (t ? ' part ' + t.index : '') +
                ' of level ' +
                e.level +
                ' was aborted'
            ),
            this.resetFragmentLoading(e));
        }),
        (a.resetFragmentLoading = function t(e) {
          (this.fragCurrent &&
            (this.fragContextChanged(e) ||
              this.state === dd.FRAG_LOADING_WAITING_RETRY)) ||
            (this.state = dd.IDLE);
        }),
        (a.onFragmentOrKeyLoadError = function a(e, t) {
          if (t.chunkMeta && !t.frag) {
            var r = this.getCurrentContext(t.chunkMeta);
            r && (t.frag = r.frag);
          }
          var n = t.frag;
          if (n && n.type === e && this.levels) {
            if (this.fragContextChanged(n)) {
              var o;
              return void this.warn(
                'Frag load error must match current frag to retry ' +
                  n.url +
                  ' > ' +
                  (null == (o = this.fragCurrent) ? void 0 : o.url)
              );
            }
            var i = t.details === No.FRAG_GAP;
            i && this.fragmentTracker.fragBuffered(n, !0);
            var d = t.errorAction,
              s = d || {},
              l = s.action,
              c = s.retryCount,
              u = void 0 === c ? 0 : c,
              g = s.retryConfig;
            if (d && l === Ki.RetryRequest && g) {
              var f;
              this.resetStartWhenNotLoaded(
                null == (f = this.levelLastLoaded) ? n.level : f
              );
              var p = la(g, u);
              this.warn(
                'Fragment ' +
                  n.sn +
                  ' of ' +
                  e +
                  ' ' +
                  n.level +
                  ' errored with ' +
                  t.details +
                  ', retrying loading ' +
                  (u + 1) +
                  '/' +
                  g.maxNumRetry +
                  ' in ' +
                  p +
                  'ms'
              ),
                (d.resolved = !0),
                (this.retryDate = self.performance.now() + p),
                (this.state = dd.FRAG_LOADING_WAITING_RETRY);
            } else
              g && d
                ? (this.resetFragmentErrors(e),
                  u < g.maxNumRetry
                    ? !i && (d.resolved = !0)
                    : Bo.warn(
                        t.details + ' reached or exceeded max retry (' + u + ')'
                      ))
                : (this.state =
                    (null == d ? void 0 : d.action) ===
                    Ki.SendAlternateToPenaltyBox
                      ? dd.WAITING_LEVEL
                      : dd.ERROR);
            this.tickImmediate();
          }
        }),
        (a.reduceLengthAndFlushBuffer = function t(e) {
          if (this.state === dd.PARSING || this.state === dd.PARSED) {
            var a = e.parent,
              r = this.getFwdBufferInfo(this.mediaBuffer, a),
              n = r && 0.5 < r.len;
            n && this.reduceMaxBufferLength(r.len);
            var o = !n;
            return (
              o &&
                this.warn(
                  'Buffer full error while media.currentTime is not buffered, flush ' +
                    a +
                    ' buffer'
                ),
              e.frag &&
                (this.fragmentTracker.removeFragment(e.frag),
                (this.nextLoadPosition = e.frag.start)),
              this.resetLoadingState(),
              o
            );
          }
          return !1;
        }),
        (a.resetFragmentErrors = function t(e) {
          e === Pi.AUDIO && (this.fragCurrent = null),
            this.loadedmetadata || (this.startFragRequested = !1),
            this.state !== dd.STOPPED && (this.state = dd.IDLE);
        }),
        (a.afterBufferFlushed = function r(e, t, a) {
          if (e) {
            var n = ed.getBuffered(e);
            this.fragmentTracker.detectEvictedFragments(t, n, a),
              this.state === dd.ENDED && this.resetLoadingState();
          }
        }),
        (a.resetLoadingState = function e() {
          this.log('Reset loading state'),
            (this.fragCurrent = null),
            (this.fragPrevious = null),
            (this.state = dd.IDLE);
        }),
        (a.resetStartWhenNotLoaded = function t(e) {
          if (!this.loadedmetadata) {
            this.startFragRequested = !1;
            var a = this.levels ? this.levels[e].details : null;
            null != a && a.live
              ? ((this.startPosition = -1),
                this.setStartPosition(a, 0),
                this.resetLoadingState())
              : (this.nextLoadPosition = this.startPosition);
          }
        }),
        (a.resetWhenMissingContext = function t(e) {
          var a;
          this.warn(
            'The loading context changed while buffering fragment ' +
              e.sn +
              ' of level ' +
              e.level +
              '. This chunk will not be buffered.'
          ),
            this.removeUnbufferedFrags(),
            this.resetStartWhenNotLoaded(
              null == (a = this.levelLastLoaded) ? e.level : a
            ),
            this.resetLoadingState();
        }),
        (a.removeUnbufferedFrags = function t(e) {
          void 0 === e && (e = 0),
            this.fragmentTracker.removeFragmentsInRange(
              e,
              1 / 0,
              this.playlistType,
              !1,
              !0
            );
        }),
        (a.updateLevelTiming = function n(e, t, a, r) {
          var o = this,
            i = a.details,
            d;
          if (!i) return void this.warn('level.details undefined');
          var s = Object.keys(e.elementaryStreams).reduce(function(t, n) {
            var d = e.elementaryStreams[n];
            if (d) {
              var s = d.endPTS - d.startPTS;
              if (0 >= s)
                return (
                  o.warn(
                    'Could not parse fragment ' +
                      e.sn +
                      ' ' +
                      n +
                      ' duration reliably (' +
                      s +
                      ')'
                  ),
                  t || !1
                );
              var l = r
                ? 0
                : Qt(i, e, d.startPTS, d.endPTS, d.startDTS, d.endDTS);
              return (
                o.hls.trigger(xo.LEVEL_PTS_UPDATED, {
                  details: i,
                  level: a,
                  drift: l,
                  type: n,
                  frag: e,
                  start: d.startPTS,
                  end: d.endPTS
                }),
                !0
              );
            }
            return t;
          }, !1);
          if (s) a.fragmentError = 0;
          else if (
            null === (null == (d = this.transmuxer) ? void 0 : d.error)
          ) {
            var l = new Error(
              'Found no media in fragment ' +
                e.sn +
                ' of level ' +
                a.id +
                ' resetting transmuxer to fallback to playlist timing'
            );
            if (
              (this.warn(l.message),
              this.hls.trigger(xo.ERROR, {
                type: Fo.MEDIA_ERROR,
                details: No.FRAG_PARSING_ERROR,
                fatal: !1,
                error: l,
                frag: e,
                reason:
                  'Found no media in msn ' + e.sn + ' of level "' + a.url + '"'
              }),
              !this.hls)
            )
              return;
            this.resetTransmuxer();
          }
          (this.state = dd.PARSED),
            this.hls.trigger(xo.FRAG_PARSED, { frag: e, part: t });
        }),
        (a.resetTransmuxer = function e() {
          this.transmuxer &&
            (this.transmuxer.destroy(), (this.transmuxer = null));
        }),
        (a.recoverWorkerError = function t(e) {
          if ('demuxerWorker' === e.event) {
            var a, r, n;
            this.fragmentTracker.removeAllFragments(),
              this.resetTransmuxer(),
              this.resetStartWhenNotLoaded(
                null ==
                  (a =
                    null == (r = this.levelLastLoaded)
                      ? null == (n = this.fragCurrent)
                        ? void 0
                        : n.level
                      : r)
                  ? 0
                  : a
              ),
              this.resetLoadingState();
          }
        }),
        N(t, [
          {
            key: 'state',
            get: function e() {
              return this._state;
            },
            set: function t(e) {
              var a = this._state;
              a !== e && ((this._state = e), this.log(a + '->' + e));
            }
          }
        ]),
        t
      );
    })(Zi),
    ld = (function() {
      function e() {
        (this._audioTrack = void 0),
          (this._id3Track = void 0),
          (this.frameIndex = 0),
          (this.cachedData = null),
          (this.basePTS = null),
          (this.initPTS = null),
          (this.lastPTS = null);
      }
      var t = e.prototype;
      return (
        (t.resetInitSegment = function n(e, t, a, r) {
          this._id3Track = {
            type: 'id3',
            id: 3,
            pid: -1,
            inputTimeScale: 9e4,
            sequenceNumber: 0,
            samples: [],
            dropped: 0
          };
        }),
        (t.resetTimeStamp = function t(e) {
          (this.initPTS = e), this.resetContiguity();
        }),
        (t.resetContiguity = function e() {
          (this.basePTS = null), (this.lastPTS = null), (this.frameIndex = 0);
        }),
        (t.canParse = function a(e, t) {
          return !1;
        }),
        (t.appendFrame = function r(e, t, a) {}),
        (t.demux = function a(e, t) {
          this.cachedData &&
            ((e = ct(this.cachedData, e)), (this.cachedData = null));
          var r = ti(e, 0),
            n = r ? r.length : 0,
            o = this._audioTrack,
            i = this._id3Track,
            d = r ? ni(r) : void 0,
            s = e.length,
            l;
          for (
            (null === this.basePTS || (0 === this.frameIndex && _o(d))) &&
              ((this.basePTS = cd(d, t, this.initPTS)),
              (this.lastPTS = this.basePTS)),
              null === this.lastPTS && (this.lastPTS = this.basePTS),
              r &&
                0 < r.length &&
                i.samples.push({
                  pts: this.lastPTS,
                  dts: this.lastPTS,
                  data: r,
                  type: xi.audioId3,
                  duration: T
                });
            n < s;

          ) {
            if (this.canParse(e, n)) {
              var c = this.appendFrame(o, e, n);
              c
                ? (this.frameIndex++,
                  (this.lastPTS = c.sample.pts),
                  (n += c.length),
                  (l = n))
                : (n = s);
            } else
              ri(e, n)
                ? ((r = ti(e, n)),
                  i.samples.push({
                    pts: this.lastPTS,
                    dts: this.lastPTS,
                    data: r,
                    type: xi.audioId3,
                    duration: T
                  }),
                  (n += r.length),
                  (l = n))
                : n++;
            if (n === s && l !== s) {
              var u = je(e, l);
              this.cachedData = this.cachedData ? ct(this.cachedData, u) : u;
            }
          }
          return {
            audioTrack: o,
            videoTrack: Ha(),
            id3Track: i,
            textTrack: Ha()
          };
        }),
        (t.demuxSampleAes = function r(e, t, a) {
          return Promise.reject(
            new Error(
              '[' +
                this +
                '] This demuxer does not support Sample-AES decryption'
            )
          );
        }),
        (t.flush = function t(e) {
          var a = this.cachedData;
          return (
            a && ((this.cachedData = null), this.demux(a, 0)),
            {
              audioTrack: this._audioTrack,
              videoTrack: Ha(),
              id3Track: this._id3Track,
              textTrack: Ha()
            }
          );
        }),
        (t.destroy = function e() {}),
        e
      );
    })(),
    cd = function r(e, t, a) {
      if (_o(e)) return 90 * e;
      var n = a ? (9e4 * a.baseTime) / a.timescale : 0;
      return 9e4 * t + n;
    },
    ud = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this) || this),
          (r.observer = void 0),
          (r.config = void 0),
          (r.observer = t),
          (r.config = a),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.resetInitSegment = function o(t, a, r, n) {
          e.prototype.resetInitSegment.call(this, t, a, r, n),
            (this._audioTrack = {
              container: 'audio/adts',
              type: 'audio',
              id: 2,
              pid: -1,
              sequenceNumber: 0,
              segmentCodec: 'aac',
              samples: [],
              manifestCodec: a,
              duration: n,
              inputTimeScale: 9e4,
              dropped: 0
            });
        }),
        (t.probe = function t(e) {
          if (!e) return !1;
          for (var a = ti(e, 0) || [], r = a.length, n = e.length; r < n; r++)
            if (Qa(e, r)) return Bo.log('ADTS sync word found !'), !0;
          return !1;
        }),
        (a.canParse = function a(e, t) {
          return Xa(e, t);
        }),
        (a.appendFrame = function r(e, t, a) {
          $a(e, this.observer, t, a, e.manifestCodec);
          var n = er(e, t, a, this.basePTS, this.frameIndex);
          if (n && 0 === n.missing) return n;
        }),
        t
      );
    })(ld),
    gd = /\/emsg[-/]ID3/i,
    fd = (function() {
      function e(e, t) {
        (this.remainderData = null),
          (this.timeOffset = 0),
          (this.config = void 0),
          (this.videoTrack = void 0),
          (this.audioTrack = void 0),
          (this.id3Track = void 0),
          (this.txtTrack = void 0),
          (this.config = t);
      }
      var t = e.prototype;
      return (
        (t.resetTimeStamp = function e() {}),
        (t.resetInitSegment = function n(e, t, a, r) {
          var o = (this.videoTrack = Ha('video', 1)),
            i = (this.audioTrack = Ha('audio', 1)),
            d = (this.txtTrack = Ha('text', 1));
          if (
            ((this.id3Track = Ha('id3', 1)),
            (this.timeOffset = 0),
            !!(null != e && e.byteLength))
          ) {
            var s = at(e);
            if (s.video) {
              var l = s.video,
                c = l.id,
                u = l.timescale,
                g = l.codec;
              (o.id = c), (o.timescale = d.timescale = u), (o.codec = g);
            }
            if (s.audio) {
              var f = s.audio,
                p = f.id,
                m = f.timescale,
                y = f.codec;
              (i.id = p), (i.timescale = m), (i.codec = y);
            }
            (d.id = hi.text),
              (o.sampleDuration = 0),
              (o.duration = i.duration = r);
          }
        }),
        (t.resetContiguity = function e() {
          this.remainderData = null;
        }),
        (e.probe = function t(e) {
          return (
            (e = 16384 < e.length ? e.subarray(0, 16384) : e),
            0 < et(e, ['moof']).length
          );
        }),
        (t.demux = function a(e, t) {
          this.timeOffset = t;
          var r = e,
            n = this.videoTrack,
            o = this.txtTrack;
          if (this.config.progressive) {
            this.remainderData && (r = ct(this.remainderData, e));
            var i = lt(r);
            (this.remainderData = i.remainder),
              (n.samples = i.valid || new Uint8Array());
          } else n.samples = r;
          var d = this.extractID3Track(n, t);
          return (
            (o.samples = ut(t, n)),
            {
              videoTrack: n,
              audioTrack: this.audioTrack,
              id3Track: d,
              textTrack: this.txtTrack
            }
          );
        }),
        (t.flush = function e() {
          var t = this.timeOffset,
            a = this.videoTrack,
            r = this.txtTrack;
          (a.samples = this.remainderData || new Uint8Array()),
            (this.remainderData = null);
          var n = this.extractID3Track(a, this.timeOffset);
          return (
            (r.samples = ut(t, a)),
            { videoTrack: a, audioTrack: Ha(), id3Track: n, textTrack: Ha() }
          );
        }),
        (t.extractID3Track = function a(e, t) {
          var r = this.id3Track;
          if (e.samples.length) {
            var n = et(e.samples, ['emsg']);
            n &&
              n.forEach(function(e) {
                var a = yt(e);
                if (gd.test(a.schemeIdUri)) {
                  var n = _o(a.presentationTime)
                      ? a.presentationTime / a.timeScale
                      : t + a.presentationTimeDelta / a.timeScale,
                    o =
                      4294967295 === a.eventDuration
                        ? T
                        : a.eventDuration / a.timeScale;
                  0.001 >= o && (o = T);
                  var i = a.payload;
                  r.samples.push({
                    data: i,
                    len: i.byteLength,
                    dts: n,
                    pts: n,
                    type: xi.emsg,
                    duration: o
                  });
                }
              });
          }
          return r;
        }),
        (t.demuxSampleAes = function r(e, t, a) {
          return Promise.reject(
            new Error('The MP4 demuxer does not support SAMPLE-AES decryption')
          );
        }),
        (t.destroy = function e() {}),
        e
      );
    })(),
    pd = null,
    md = [
      32,
      64,
      96,
      128,
      160,
      192,
      224,
      256,
      288,
      320,
      352,
      384,
      416,
      448,
      32,
      48,
      56,
      64,
      80,
      96,
      112,
      128,
      160,
      192,
      224,
      256,
      320,
      384,
      32,
      40,
      48,
      56,
      64,
      80,
      96,
      112,
      128,
      160,
      192,
      224,
      256,
      320,
      32,
      48,
      56,
      64,
      80,
      96,
      112,
      128,
      144,
      160,
      176,
      192,
      224,
      256,
      8,
      16,
      24,
      32,
      40,
      48,
      56,
      64,
      80,
      96,
      112,
      128,
      144,
      160
    ],
    yd = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3],
    hd = [
      [0, 72, 144, 12],
      [0, 0, 0, 0],
      [0, 72, 144, 12],
      [0, 144, 144, 12]
    ],
    Td = [0, 1, 1, 4],
    Ed = (function() {
      function e(e) {
        (this.data = void 0),
          (this.bytesAvailable = void 0),
          (this.word = void 0),
          (this.bitsAvailable = void 0),
          (this.data = e),
          (this.bytesAvailable = e.byteLength),
          (this.word = 0),
          (this.bitsAvailable = 0);
      }
      var t = e.prototype;
      return (
        (t.loadWord = function e() {
          var t = this.data,
            a = this.bytesAvailable,
            r = t.byteLength - a,
            n = new Uint8Array(4),
            o = L(4, a);
          if (0 === o) throw new Error('no bytes available');
          n.set(t.subarray(r, r + o)),
            (this.word = new DataView(n.buffer).getUint32(0)),
            (this.bitsAvailable = 8 * o),
            (this.bytesAvailable -= o);
        }),
        (t.skipBits = function t(e) {
          var a;
          (e = L(e, 8 * this.bytesAvailable + this.bitsAvailable)),
            this.bitsAvailable > e
              ? ((this.word <<= e), (this.bitsAvailable -= e))
              : ((e -= this.bitsAvailable),
                (a = e >> 3),
                (e -= a << 3),
                (this.bytesAvailable -= a),
                this.loadWord(),
                (this.word <<= e),
                (this.bitsAvailable -= e));
        }),
        (t.readBits = function t(e) {
          var a = L(this.bitsAvailable, e),
            r = this.word >>> (32 - a);
          if (
            (32 < e && Bo.error('Cannot read more than 32 bits at a time'),
            (this.bitsAvailable -= a),
            0 < this.bitsAvailable)
          )
            this.word <<= a;
          else if (0 < this.bytesAvailable) this.loadWord();
          else throw new Error('no bits available');
          return (
            (a = e - a),
            0 < a && this.bitsAvailable ? (r << a) | this.readBits(a) : r
          );
        }),
        (t.skipLZ = function e() {
          var t;
          for (t = 0; t < this.bitsAvailable; ++t)
            if (0 != (this.word & (2147483648 >>> t)))
              return (this.word <<= t), (this.bitsAvailable -= t), t;
          return this.loadWord(), t + this.skipLZ();
        }),
        (t.skipUEG = function e() {
          this.skipBits(1 + this.skipLZ());
        }),
        (t.skipEG = function e() {
          this.skipBits(1 + this.skipLZ());
        }),
        (t.readUEG = function e() {
          var t = this.skipLZ();
          return this.readBits(t + 1) - 1;
        }),
        (t.readEG = function e() {
          var t = this.readUEG();
          return 1 & t ? (1 + t) >>> 1 : -1 * (t >>> 1);
        }),
        (t.readBoolean = function e() {
          return 1 === this.readBits(1);
        }),
        (t.readUByte = function e() {
          return this.readBits(8);
        }),
        (t.readUShort = function e() {
          return this.readBits(16);
        }),
        (t.readUInt = function e() {
          return this.readBits(32);
        }),
        (t.skipScalingList = function t(e) {
          for (var a = 8, r = 8, n = 0, o; n < e; n++)
            0 !== r && ((o = this.readEG()), (r = (a + o + 256) % 256)),
              (a = 0 === r ? a : r);
        }),
        (t.readSPS = function e() {
          var t = 0,
            a = 0,
            r = 0,
            n = 0,
            o = this.readUByte.bind(this),
            d = this.readBits.bind(this),
            l = this.readUEG.bind(this),
            c = this.readBoolean.bind(this),
            u = this.skipBits.bind(this),
            g = this.skipEG.bind(this),
            f = this.skipUEG.bind(this),
            p = this.skipScalingList.bind(this),
            m,
            y,
            h;
          o();
          var T = o();
          if (
            (d(5),
            u(3),
            o(),
            f(),
            100 === T ||
              110 === T ||
              122 === T ||
              244 === T ||
              44 === T ||
              83 === T ||
              86 === T ||
              118 === T ||
              128 === T)
          ) {
            var E = l();
            if ((3 === E && u(1), f(), f(), u(1), c()))
              for (y = 3 === E ? 12 : 8, h = 0; h < y; h++)
                c() && (6 > h ? p(16) : p(64));
          }
          f();
          var v = l();
          if (0 === v) l();
          else if (1 === v)
            for (u(1), g(), g(), m = l(), h = 0; h < m; h++) g();
          f(), u(1);
          var S = l(),
            L = l(),
            A = d(1);
          0 === A && u(1),
            u(1),
            c() && ((t = l()), (a = l()), (r = l()), (n = l()));
          var R = [1, 1];
          if (c() && c()) {
            var k = o();
            switch (k) {
              case 1:
                R = [1, 1];
                break;
              case 2:
                R = [12, 11];
                break;
              case 3:
                R = [10, 11];
                break;
              case 4:
                R = [16, 11];
                break;
              case 5:
                R = [40, 33];
                break;
              case 6:
                R = [24, 11];
                break;
              case 7:
                R = [20, 11];
                break;
              case 8:
                R = [32, 11];
                break;
              case 9:
                R = [80, 33];
                break;
              case 10:
                R = [18, 11];
                break;
              case 11:
                R = [15, 11];
                break;
              case 12:
                R = [64, 33];
                break;
              case 13:
                R = [160, 99];
                break;
              case 14:
                R = [4, 3];
                break;
              case 15:
                R = [3, 2];
                break;
              case 16:
                R = [2, 1];
                break;
              case 255: {
                R = [(o() << 8) | o(), (o() << 8) | o()];
                break;
              }
            }
          }
          return {
            width: s(16 * (S + 1) - 2 * t - 2 * a),
            height: 16 * ((2 - A) * (L + 1)) - (A ? 2 : 4) * (r + n),
            pixelRatio: R
          };
        }),
        (t.readSliceType = function e() {
          return this.readUByte(), this.readUEG(), this.readUEG();
        }),
        e
      );
    })(),
    vd = (function() {
      function e(e, t, a) {
        (this.keyData = void 0),
          (this.decrypter = void 0),
          (this.keyData = a),
          (this.decrypter = new od(t, { removePKCS7Padding: !1 }));
      }
      var t = e.prototype;
      return (
        (t.decryptBuffer = function t(e) {
          return this.decrypter.decrypt(
            e,
            this.keyData.key.buffer,
            this.keyData.iv.buffer
          );
        }),
        (t.decryptAacSample = function r(e, t, a) {
          var n = this,
            o = e[t].unit;
          if (!(16 >= o.length)) {
            var i = o.subarray(16, o.length - (o.length % 16)),
              d = i.buffer.slice(i.byteOffset, i.byteOffset + i.length);
            this.decryptBuffer(d).then(function(r) {
              var i = new Uint8Array(r);
              o.set(i, 16),
                n.decrypter.isSync() || n.decryptAacSamples(e, t + 1, a);
            });
          }
        }),
        (t.decryptAacSamples = function r(e, t, a) {
          for (; ; t++) {
            if (t >= e.length) return void a();
            if (
              !(32 > e[t].unit.length) &&
              (this.decryptAacSample(e, t, a), !this.decrypter.isSync())
            )
              return;
          }
        }),
        (t.getAvcEncryptedData = function t(e) {
          for (
            var a = 16 * P((e.length - 48) / 160) + 16,
              r = new Int8Array(a),
              n = 0,
              o = 32;
            o < e.length - 16;
            o += 160, n += 16
          )
            r.set(e.subarray(o, o + 16), n);
          return r;
        }),
        (t.getAvcDecryptedUnit = function a(e, t) {
          for (
            var r = new Uint8Array(t), n = 0, o = 32;
            o < e.length - 16;
            o += 160, n += 16
          )
            e.set(r.subarray(n, n + 16), o);
          return e;
        }),
        (t.decryptAvcSample = function o(e, t, a, r, n) {
          var i = this,
            d = mt(n.data),
            s = this.getAvcEncryptedData(d);
          this.decryptBuffer(s.buffer).then(function(o) {
            (n.data = i.getAvcDecryptedUnit(d, o)),
              i.decrypter.isSync() || i.decryptAvcSamples(e, t, a + 1, r);
          });
        }),
        (t.decryptAvcSamples = function n(e, t, a, r) {
          if (e instanceof Uint8Array)
            throw new Error('Cannot decrypt samples of type Uint8Array');
          for (; ; t++, a = 0) {
            if (t >= e.length) return void r();
            for (var o = e[t].units; ; a++) {
              if (a >= o.length) break;
              var i = o[a];
              if (
                !(48 >= i.data.length || (1 !== i.type && 5 !== i.type)) &&
                (this.decryptAvcSample(e, t, a, r, i), !this.decrypter.isSync())
              )
                return;
            }
          }
        }),
        e
      );
    })(),
    Sd = 188,
    Ld = (function() {
      function e(e, t, a) {
        (this.observer = void 0),
          (this.config = void 0),
          (this.typeSupported = void 0),
          (this.sampleAes = null),
          (this.pmtParsed = !1),
          (this.audioCodec = void 0),
          (this.videoCodec = void 0),
          (this._duration = 0),
          (this._pmtId = -1),
          (this._avcTrack = void 0),
          (this._audioTrack = void 0),
          (this._id3Track = void 0),
          (this._txtTrack = void 0),
          (this.aacOverFlow = null),
          (this.avcSample = null),
          (this.remainderData = null),
          (this.observer = e),
          (this.config = t),
          (this.typeSupported = a);
      }
      (e.probe = function a(t) {
        var r = e.syncOffset(t);
        return (
          0 < r &&
            Bo.warn(
              'MPEG2-TS detected but first sync word found @ offset ' + r
            ),
          -1 !== r
        );
      }),
        (e.syncOffset = function t(e) {
          for (
            var a = e.length, r = L(5 * Sd, e.length - Sd) + 1, n = 0;
            n < r;

          ) {
            for (var o = !1, d = -1, s = 0, l = n; l < a; l += Sd)
              if (71 !== e[l]) {
                if (s) return -1;
                break;
              } else if (
                (s++,
                -1 === d &&
                  ((d = l), 0 !== d && (r = L(d + 99 * Sd, e.length - Sd) + 1)),
                o || (o = 0 === sr(e, l)),
                o && 1 < s && ((0 === d && 2 < s) || l + Sd > r))
              )
                return d;
            n++;
          }
          return -1;
        }),
        (e.createTrack = function a(e, t) {
          return {
            container: 'video' === e || 'audio' === e ? 'video/mp2t' : void 0,
            type: e,
            id: hi[e],
            pid: -1,
            inputTimeScale: 9e4,
            sequenceNumber: 0,
            samples: [],
            dropped: 0,
            duration: 'audio' === e ? t : void 0
          };
        });
      var t = e.prototype;
      return (
        (t.resetInitSegment = function o(t, a, r, n) {
          (this.pmtParsed = !1),
            (this._pmtId = -1),
            (this._avcTrack = e.createTrack('video')),
            (this._audioTrack = e.createTrack('audio', n)),
            (this._id3Track = e.createTrack('id3')),
            (this._txtTrack = e.createTrack('text')),
            (this._audioTrack.segmentCodec = 'aac'),
            (this.aacOverFlow = null),
            (this.avcSample = null),
            (this.remainderData = null),
            (this.audioCodec = a),
            (this.videoCodec = r),
            (this._duration = n);
        }),
        (t.resetTimeStamp = function e() {}),
        (t.resetContiguity = function e() {
          var t = this._audioTrack,
            a = this._avcTrack,
            r = this._id3Track;
          t && (t.pesData = null),
            a && (a.pesData = null),
            r && (r.pesData = null),
            (this.aacOverFlow = null),
            (this.avcSample = null),
            (this.remainderData = null);
        }),
        (t.demux = function o(t, a, r, n) {
          void 0 === r && (r = !1),
            void 0 === n && (n = !1),
            r || (this.sampleAes = null);
          var i = this._avcTrack,
            d = this._audioTrack,
            s = this._id3Track,
            l = this._txtTrack,
            c = i.pid,
            u = i.pesData,
            g = d.pid,
            f = s.pid,
            p = d.pesData,
            m = s.pesData,
            y = null,
            h = this.pmtParsed,
            T = this._pmtId,
            E = t.length,
            v;
          if (
            (this.remainderData &&
              ((t = ct(this.remainderData, t)),
              (E = t.length),
              (this.remainderData = null)),
            E < Sd && !n)
          )
            return (
              (this.remainderData = t),
              { audioTrack: d, videoTrack: i, id3Track: s, textTrack: l }
            );
          var S = C(0, e.syncOffset(t));
          (E -= (E - S) % Sd),
            E < t.byteLength &&
              !n &&
              (this.remainderData = new Uint8Array(
                t.buffer,
                E,
                t.buffer.byteLength - E
              ));
          for (var L = 0, A = S; A < E; A += Sd)
            if (71 === t[A]) {
              var R = !!(64 & t[A + 1]),
                k = sr(t, A),
                D = (48 & t[A + 3]) >> 4,
                I = void 0;
              if (!(1 < D)) I = A + 4;
              else if (((I = A + 5 + t[A + 4]), I === A + Sd)) continue;
              switch (k) {
                case c:
                  R &&
                    (u && (v = ur(u)) && this.parseAVCPES(i, l, v, !1),
                    (u = { data: [], size: 0 })),
                    u &&
                      (u.data.push(t.subarray(I, A + Sd)),
                      (u.size += A + Sd - I));
                  break;
                case g:
                  if (R) {
                    if (p && (v = ur(p)))
                      switch (d.segmentCodec) {
                        case 'aac':
                          this.parseAACPES(d, v);
                          break;
                        case 'mp3':
                          this.parseMPEGPES(d, v);
                      }
                    p = { data: [], size: 0 };
                  }
                  p &&
                    (p.data.push(t.subarray(I, A + Sd)),
                    (p.size += A + Sd - I));
                  break;
                case f:
                  R &&
                    (m && (v = ur(m)) && this.parseID3PES(s, v),
                    (m = { data: [], size: 0 })),
                    m &&
                      (m.data.push(t.subarray(I, A + Sd)),
                      (m.size += A + Sd - I));
                  break;
                case 0:
                  R && (I += t[I] + 1), (T = this._pmtId = lr(t, I));
                  break;
                case T: {
                  R && (I += t[I] + 1);
                  var b = cr(t, I, this.typeSupported, r);
                  (c = b.avc),
                    0 < c && (i.pid = c),
                    (g = b.audio),
                    0 < g && ((d.pid = g), (d.segmentCodec = b.segmentCodec)),
                    (f = b.id3),
                    0 < f && (s.pid = f),
                    null === y ||
                      h ||
                      (Bo.warn(
                        'MPEG-TS PMT found at ' +
                          A +
                          " after unknown PID '" +
                          y +
                          "'. Backtracking to sync byte @" +
                          S +
                          ' to parse all TS packets.'
                      ),
                      (y = null),
                      (A = S - 188)),
                    (h = this.pmtParsed = !0);
                  break;
                }
                case 17:
                case 8191:
                  break;
                default:
                  y = k;
              }
            } else L++;
          if (0 < L) {
            var P = new Error(
              'Found ' + L + ' TS packet/s that do not start with 0x47'
            );
            this.observer.emit(xo.ERROR, xo.ERROR, {
              type: Fo.MEDIA_ERROR,
              details: No.FRAG_PARSING_ERROR,
              fatal: !1,
              error: P,
              reason: P.message
            });
          }
          (i.pesData = u), (d.pesData = p), (s.pesData = m);
          var _ = { audioTrack: d, videoTrack: i, id3Track: s, textTrack: l };
          return n && this.extractRemainingSamples(_), _;
        }),
        (t.flush = function e() {
          var t = this.remainderData;
          this.remainderData = null;
          var a;
          return (
            (a = t
              ? this.demux(t, -1, !1, !0)
              : {
                  videoTrack: this._avcTrack,
                  audioTrack: this._audioTrack,
                  id3Track: this._id3Track,
                  textTrack: this._txtTrack
                }),
            this.extractRemainingSamples(a),
            this.sampleAes ? this.decrypt(a, this.sampleAes) : a
          );
        }),
        (t.extractRemainingSamples = function t(e) {
          var a = e.audioTrack,
            r = e.videoTrack,
            n = e.id3Track,
            o = e.textTrack,
            i = r.pesData,
            d = a.pesData,
            s = n.pesData,
            l;
          if (
            (i && (l = ur(i))
              ? (this.parseAVCPES(r, o, l, !0), (r.pesData = null))
              : (r.pesData = i),
            d && (l = ur(d)))
          ) {
            switch (a.segmentCodec) {
              case 'aac':
                this.parseAACPES(a, l);
                break;
              case 'mp3':
                this.parseMPEGPES(a, l);
            }
            a.pesData = null;
          } else
            null != d &&
              d.size &&
              Bo.log(
                'last AAC PES packet truncated,might overlap between fragments'
              ),
              (a.pesData = d);
          s && (l = ur(s))
            ? (this.parseID3PES(n, l), (n.pesData = null))
            : (n.pesData = s);
        }),
        (t.demuxSampleAes = function r(e, t, a) {
          var n = this.demux(e, a, !0, !this.config.progressive),
            o = (this.sampleAes = new vd(this.observer, this.config, t));
          return this.decrypt(n, o);
        }),
        (t.decrypt = function a(e, t) {
          return new Promise(function(a) {
            var r = e.audioTrack,
              n = e.videoTrack;
            r.samples && 'aac' === r.segmentCodec
              ? t.decryptAacSamples(r.samples, 0, function() {
                  n.samples
                    ? t.decryptAvcSamples(n.samples, 0, 0, function() {
                        a(e);
                      })
                    : a(e);
                })
              : n.samples &&
                t.decryptAvcSamples(n.samples, 0, 0, function() {
                  a(e);
                });
          });
        }),
        (t.destroy = function e() {
          this._duration = 0;
        }),
        (t.parseAVCPES = function n(e, t, a, r) {
          var o = this,
            i = this.parseAVCNALu(e, a.data),
            d = this.avcSample,
            s = !1,
            l;
          (a.data = null),
            d &&
              i.length &&
              !e.audFound &&
              (gr(d, e), (d = this.avcSample = dr(!1, a.pts, a.dts, ''))),
            i.forEach(function(r) {
              var n;
              switch (r.type) {
                case 1: {
                  var c = !1;
                  l = !0;
                  var u = r.data;
                  if (s && 4 < u.length) {
                    var g = new Ed(u).readSliceType();
                    (2 === g || 4 === g || 7 === g || 9 === g) && (c = !0);
                  }
                  if (c) {
                    var f;
                    null != (f = d) &&
                      f.frame &&
                      !d.key &&
                      (gr(d, e), (d = o.avcSample = null));
                  }
                  d || (d = o.avcSample = dr(!0, a.pts, a.dts, '')),
                    (d.frame = !0),
                    (d.key = c);
                  break;
                }
                case 5:
                  (l = !0),
                    null != (n = d) &&
                      n.frame &&
                      !d.key &&
                      (gr(d, e), (d = o.avcSample = null)),
                    d || (d = o.avcSample = dr(!0, a.pts, a.dts, '')),
                    (d.key = !0),
                    (d.frame = !0);
                  break;
                case 6: {
                  (l = !0), pt(r.data, 1, a.pts, t.samples);
                  break;
                }
                case 7:
                  if (((l = !0), (s = !0), !e.sps)) {
                    var p = r.data,
                      m = new Ed(p),
                      y = m.readSPS();
                    (e.width = y.width),
                      (e.height = y.height),
                      (e.pixelRatio = y.pixelRatio),
                      (e.sps = [p]),
                      (e.duration = o._duration);
                    for (
                      var T = p.subarray(1, 4), E = 'avc1.', v = 0, S;
                      3 > v;
                      v++
                    )
                      (S = T[v].toString(16)),
                        2 > S.length && (S = '0' + S),
                        (E += S);
                    e.codec = E;
                  }
                  break;
                case 8:
                  (l = !0), e.pps || (e.pps = [r.data]);
                  break;
                case 9:
                  (l = !1),
                    (e.audFound = !0),
                    d && gr(d, e),
                    (d = o.avcSample = dr(!1, a.pts, a.dts, ''));
                  break;
                case 12:
                  l = !0;
                  break;
                default:
                  (l = !1), d && (d.debug += 'unknown NAL ' + r.type + ' ');
              }
              if (d && l) {
                var L = d.units;
                L.push(r);
              }
            }),
            r && d && (gr(d, e), (this.avcSample = null));
        }),
        (t.getLastNalUnit = function t(e) {
          var a = this.avcSample,
            r,
            n;
          if (
            ((a && 0 !== a.units.length) || (a = e[e.length - 1]),
            null != (r = a) && r.units)
          ) {
            var o = a.units;
            n = o[o.length - 1];
          }
          return n;
        }),
        (t.parseAVCNALu = function a(e, t) {
          var r = t.byteLength,
            n = e.naluState || 0,
            o = n,
            d = [],
            s = 0,
            l = -1,
            c = 0,
            u,
            g,
            f;
          for (
            -1 === n && ((l = 0), (c = 31 & t[0]), (n = 0), (s = 1));
            s < r;

          ) {
            if (((u = t[s++]), !n)) {
              n = u ? 0 : 1;
              continue;
            }
            if (1 === n) {
              n = u ? 0 : 2;
              continue;
            }
            if (!u) n = 3;
            else if (1 === u) {
              if (0 <= l) {
                var p = { data: t.subarray(l, s - n - 1), type: c };
                d.push(p);
              } else {
                var m = this.getLastNalUnit(e.samples);
                if (
                  m &&
                  (o &&
                    s <= 4 - o &&
                    m.state &&
                    (m.data = m.data.subarray(0, m.data.byteLength - o)),
                  (g = s - n - 1),
                  0 < g)
                ) {
                  var y = new Uint8Array(m.data.byteLength + g);
                  y.set(m.data, 0),
                    y.set(t.subarray(0, g), m.data.byteLength),
                    (m.data = y),
                    (m.state = 0);
                }
              }
              s < r ? ((f = 31 & t[s]), (l = s), (c = f), (n = 0)) : (n = -1);
            } else n = 0;
          }
          if (0 <= l && 0 <= n) {
            var h = { data: t.subarray(l, r), type: c, state: n };
            d.push(h);
          }
          if (0 === d.length) {
            var T = this.getLastNalUnit(e.samples);
            if (T) {
              var E = new Uint8Array(T.data.byteLength + t.byteLength);
              E.set(T.data, 0), E.set(t, T.data.byteLength), (T.data = E);
            }
          }
          return (e.naluState = n), d;
        }),
        (t.parseAACPES = function a(e, t) {
          var r = 0,
            n = this.aacOverFlow,
            o = t.data;
          if (n) {
            this.aacOverFlow = null;
            var i = n.missing,
              d = n.sample.unit.byteLength;
            if (-1 === i) {
              var s = new Uint8Array(d + o.byteLength);
              s.set(n.sample.unit, 0), s.set(o, d), (o = s);
            } else {
              var l = d - i;
              n.sample.unit.set(o.subarray(0, i), l),
                e.samples.push(n.sample),
                (r = n.missing);
            }
          }
          var c, u;
          for (c = r, u = o.length; c < u - 1 && !za(o, c); c++);
          if (c !== r) {
            var g = c < u - 1,
              f;
            f = g
              ? 'AAC PES did not start with ADTS header,offset:' + c
              : 'No ADTS header found in AAC PES';
            var p = new Error(f);
            if (
              (Bo.warn('parsing error: ' + f),
              this.observer.emit(xo.ERROR, xo.ERROR, {
                type: Fo.MEDIA_ERROR,
                details: No.FRAG_PARSING_ERROR,
                fatal: !1,
                levelRetry: g,
                error: p,
                reason: f
              }),
              !g)
            )
              return;
          }
          $a(e, this.observer, o, c, this.audioCodec);
          var m;
          if (void 0 !== t.pts) m = t.pts;
          else if (n) {
            var y = Za(e.samplerate);
            m = n.sample.pts + y;
          } else return void Bo.warn('[tsdemuxer]: AAC PES unknown PTS');
          for (var h = 0, T; c < u; )
            if (((T = er(e, o, c, m, h)), (c += T.length), !T.missing))
              for (h++; c < u - 1 && !za(o, c); c++);
            else {
              this.aacOverFlow = T;
              break;
            }
        }),
        (t.parseMPEGPES = function a(e, t) {
          var r = t.data,
            n = r.length,
            o = 0,
            i = 0,
            d = t.pts;
          if (void 0 === d)
            return void Bo.warn('[tsdemuxer]: MPEG PES unknown PTS');
          for (; i < n; )
            if (nr(r, i)) {
              var s = tr(e, r, i, d, o);
              if (s) (i += s.length), o++;
              else break;
            } else i++;
        }),
        (t.parseID3PES = function a(e, t) {
          if (void 0 === t.pts)
            return void Bo.warn('[tsdemuxer]: ID3 PES unknown PTS');
          var r = be({}, t, {
            type: this._avcTrack ? xi.emsg : xi.audioId3,
            duration: T
          });
          e.samples.push(r);
        }),
        e
      );
    })(),
    Ad = (function(e) {
      function t() {
        return e.apply(this, arguments) || this;
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.resetInitSegment = function o(t, a, r, n) {
          e.prototype.resetInitSegment.call(this, t, a, r, n),
            (this._audioTrack = {
              container: 'audio/mpeg',
              type: 'audio',
              id: 2,
              pid: -1,
              sequenceNumber: 0,
              segmentCodec: 'mp3',
              samples: [],
              manifestCodec: a,
              duration: n,
              inputTimeScale: 9e4,
              dropped: 0
            });
        }),
        (t.probe = function t(e) {
          if (!e) return !1;
          for (var a = ti(e, 0) || [], r = a.length, n = e.length; r < n; r++)
            if (ir(e, r)) return Bo.log('MPEG Audio sync word found !'), !0;
          return !1;
        }),
        (a.canParse = function a(e, t) {
          return or(e, t);
        }),
        (a.appendFrame = function r(e, t, a) {
          return null === this.basePTS
            ? void 0
            : tr(e, t, a, this.basePTS, this.frameIndex);
        }),
        t
      );
    })(ld),
    Rd = (function() {
      function e() {}
      return (
        (e.getSilentFrame = function a(e, t) {
          switch (e) {
            case 'mp4a.40.2':
              if (1 === t) return new Uint8Array([0, 200, 0, 128, 35, 128]);
              if (2 === t)
                return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
              if (3 === t)
                return new Uint8Array([
                  0,
                  200,
                  0,
                  128,
                  32,
                  132,
                  1,
                  38,
                  64,
                  8,
                  100,
                  0,
                  142
                ]);
              if (4 === t)
                return new Uint8Array([
                  0,
                  200,
                  0,
                  128,
                  32,
                  132,
                  1,
                  38,
                  64,
                  8,
                  100,
                  0,
                  128,
                  44,
                  128,
                  8,
                  2,
                  56
                ]);
              if (5 === t)
                return new Uint8Array([
                  0,
                  200,
                  0,
                  128,
                  32,
                  132,
                  1,
                  38,
                  64,
                  8,
                  100,
                  0,
                  130,
                  48,
                  4,
                  153,
                  0,
                  33,
                  144,
                  2,
                  56
                ]);
              if (6 === t)
                return new Uint8Array([
                  0,
                  200,
                  0,
                  128,
                  32,
                  132,
                  1,
                  38,
                  64,
                  8,
                  100,
                  0,
                  130,
                  48,
                  4,
                  153,
                  0,
                  33,
                  144,
                  2,
                  0,
                  178,
                  0,
                  32,
                  8,
                  224
                ]);
              break;
            default:
              if (1 === t)
                return new Uint8Array([
                  1,
                  64,
                  34,
                  128,
                  163,
                  78,
                  230,
                  128,
                  186,
                  8,
                  0,
                  0,
                  0,
                  28,
                  6,
                  241,
                  193,
                  10,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  94
                ]);
              if (2 === t)
                return new Uint8Array([
                  1,
                  64,
                  34,
                  128,
                  163,
                  94,
                  230,
                  128,
                  186,
                  8,
                  0,
                  0,
                  0,
                  0,
                  149,
                  0,
                  6,
                  241,
                  161,
                  10,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  94
                ]);
              if (3 === t)
                return new Uint8Array([
                  1,
                  64,
                  34,
                  128,
                  163,
                  94,
                  230,
                  128,
                  186,
                  8,
                  0,
                  0,
                  0,
                  0,
                  149,
                  0,
                  6,
                  241,
                  161,
                  10,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  90,
                  94
                ]);
          }
        }),
        e
      );
    })(),
    kd = I(2, 32) - 1,
    Dd = (function() {
      function e() {}
      return (
        (e.init = function t() {
          e.types = {
            avc1: [],
            avcC: [],
            btrt: [],
            dinf: [],
            dref: [],
            esds: [],
            ftyp: [],
            hdlr: [],
            mdat: [],
            mdhd: [],
            mdia: [],
            mfhd: [],
            minf: [],
            moof: [],
            moov: [],
            mp4a: [],
            '.mp3': [],
            mvex: [],
            mvhd: [],
            pasp: [],
            sdtp: [],
            stbl: [],
            stco: [],
            stsc: [],
            stsd: [],
            stsz: [],
            stts: [],
            tfdt: [],
            tfhd: [],
            traf: [],
            trak: [],
            trun: [],
            trex: [],
            tkhd: [],
            vmhd: [],
            smhd: []
          };
          var a;
          for (a in e.types)
            e.types.hasOwnProperty(a) &&
              (e.types[a] = [
                a.charCodeAt(0),
                a.charCodeAt(1),
                a.charCodeAt(2),
                a.charCodeAt(3)
              ]);
          var r = new Uint8Array([
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              118,
              105,
              100,
              101,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              86,
              105,
              100,
              101,
              111,
              72,
              97,
              110,
              100,
              108,
              101,
              114,
              0
            ]),
            n = new Uint8Array([
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              115,
              111,
              117,
              110,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              83,
              111,
              117,
              110,
              100,
              72,
              97,
              110,
              100,
              108,
              101,
              114,
              0
            ]);
          e.HDLR_TYPES = { video: r, audio: n };
          var o = new Uint8Array([
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              12,
              117,
              114,
              108,
              32,
              0,
              0,
              0,
              1
            ]),
            d = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
          (e.STTS = e.STSC = e.STCO = d),
            (e.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])),
            (e.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0])),
            (e.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])),
            (e.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]));
          var s = new Uint8Array([105, 115, 111, 109]),
            l = new Uint8Array([97, 118, 99, 49]),
            c = new Uint8Array([0, 0, 0, 1]);
          (e.FTYP = e.box(e.types.ftyp, s, c, s, l)),
            (e.DINF = e.box(e.types.dinf, e.box(e.types.dref, o)));
        }),
        (e.box = function t(e) {
          for (
            var a = 8,
              r = arguments.length,
              n = Array(1 < r ? r - 1 : 0),
              o = 1;
            o < r;
            o++
          )
            n[o - 1] = arguments[o];
          for (var d = n.length, s = d; d--; ) a += n[d].byteLength;
          var l = new Uint8Array(a);
          for (
            l[0] = 255 & (a >> 24),
              l[1] = 255 & (a >> 16),
              l[2] = 255 & (a >> 8),
              l[3] = 255 & a,
              l.set(e, 4),
              ((d = 0), (a = 8));
            d < s;
            d++
          )
            l.set(n[d], a), (a += n[d].byteLength);
          return l;
        }),
        (e.hdlr = function a(t) {
          return e.box(e.types.hdlr, e.HDLR_TYPES[t]);
        }),
        (e.mdat = function a(t) {
          return e.box(e.types.mdat, t);
        }),
        (e.mdhd = function r(t, a) {
          a *= t;
          var n = P(a / (kd + 1)),
            o = P(a % (kd + 1));
          return e.box(
            e.types.mdhd,
            new Uint8Array([
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              3,
              255 & (t >> 24),
              255 & (t >> 16),
              255 & (t >> 8),
              255 & t,
              n >> 24,
              255 & (n >> 16),
              255 & (n >> 8),
              255 & n,
              o >> 24,
              255 & (o >> 16),
              255 & (o >> 8),
              255 & o,
              85,
              196,
              0,
              0
            ])
          );
        }),
        (e.mdia = function a(t) {
          return e.box(
            e.types.mdia,
            e.mdhd(t.timescale, t.duration),
            e.hdlr(t.type),
            e.minf(t)
          );
        }),
        (e.mfhd = function a(t) {
          return e.box(
            e.types.mfhd,
            new Uint8Array([
              0,
              0,
              0,
              0,
              t >> 24,
              255 & (t >> 16),
              255 & (t >> 8),
              255 & t
            ])
          );
        }),
        (e.minf = function a(t) {
          return 'audio' === t.type
            ? e.box(
                e.types.minf,
                e.box(e.types.smhd, e.SMHD),
                e.DINF,
                e.stbl(t)
              )
            : e.box(
                e.types.minf,
                e.box(e.types.vmhd, e.VMHD),
                e.DINF,
                e.stbl(t)
              );
        }),
        (e.moof = function n(t, a, r) {
          return e.box(e.types.moof, e.mfhd(t), e.traf(r, a));
        }),
        (e.moov = function a(t) {
          for (var r = t.length, n = []; r--; ) n[r] = e.trak(t[r]);
          return e.box.apply(
            null,
            [e.types.moov, e.mvhd(t[0].timescale, t[0].duration)]
              .concat(n)
              .concat(e.mvex(t))
          );
        }),
        (e.mvex = function a(t) {
          for (var r = t.length, n = []; r--; ) n[r] = e.trex(t[r]);
          return e.box.apply(null, [e.types.mvex].concat(n));
        }),
        (e.mvhd = function r(t, a) {
          a *= t;
          var n = P(a / (kd + 1)),
            o = P(a % (kd + 1)),
            i = new Uint8Array([
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              3,
              255 & (t >> 24),
              255 & (t >> 16),
              255 & (t >> 8),
              255 & t,
              n >> 24,
              255 & (n >> 16),
              255 & (n >> 8),
              255 & n,
              o >> 24,
              255 & (o >> 16),
              255 & (o >> 8),
              255 & o,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              64,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              255,
              255,
              255,
              255
            ]);
          return e.box(e.types.mvhd, i);
        }),
        (e.sdtp = function a(t) {
          var r = t.samples || [],
            n = new Uint8Array(4 + r.length),
            o,
            d;
          for (o = 0; o < r.length; o++)
            (d = r[o].flags),
              (n[o + 4] =
                (d.dependsOn << 4) | (d.isDependedOn << 2) | d.hasRedundancy);
          return e.box(e.types.sdtp, n);
        }),
        (e.stbl = function a(t) {
          return e.box(
            e.types.stbl,
            e.stsd(t),
            e.box(e.types.stts, e.STTS),
            e.box(e.types.stsc, e.STSC),
            e.box(e.types.stsz, e.STSZ),
            e.box(e.types.stco, e.STCO)
          );
        }),
        (e.avc1 = function a(t) {
          var r = [],
            n = [],
            o,
            d,
            s;
          for (o = 0; o < t.sps.length; o++)
            (d = t.sps[o]),
              (s = d.byteLength),
              r.push(255 & (s >>> 8)),
              r.push(255 & s),
              (r = r.concat(Array.prototype.slice.call(d)));
          for (o = 0; o < t.pps.length; o++)
            (d = t.pps[o]),
              (s = d.byteLength),
              n.push(255 & (s >>> 8)),
              n.push(255 & s),
              (n = n.concat(Array.prototype.slice.call(d)));
          var l = e.box(
              e.types.avcC,
              new Uint8Array(
                [1, r[3], r[4], r[5], 255, 224 | t.sps.length]
                  .concat(r)
                  .concat([t.pps.length])
                  .concat(n)
              )
            ),
            c = t.width,
            u = t.height,
            g = t.pixelRatio[0],
            f = t.pixelRatio[1];
          return e.box(
            e.types.avc1,
            new Uint8Array([
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              255 & (c >> 8),
              255 & c,
              255 & (u >> 8),
              255 & u,
              0,
              72,
              0,
              0,
              0,
              72,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              18,
              100,
              97,
              105,
              108,
              121,
              109,
              111,
              116,
              105,
              111,
              110,
              47,
              104,
              108,
              115,
              46,
              106,
              115,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              24,
              17,
              17
            ]),
            l,
            e.box(
              e.types.btrt,
              new Uint8Array([
                0,
                28,
                156,
                128,
                0,
                45,
                198,
                192,
                0,
                45,
                198,
                192
              ])
            ),
            e.box(
              e.types.pasp,
              new Uint8Array([
                g >> 24,
                255 & (g >> 16),
                255 & (g >> 8),
                255 & g,
                f >> 24,
                255 & (f >> 16),
                255 & (f >> 8),
                255 & f
              ])
            )
          );
        }),
        (e.esds = function t(e) {
          var a = e.config.length;
          return new Uint8Array(
            [
              0,
              0,
              0,
              0,
              3,
              23 + a,
              0,
              1,
              0,
              4,
              15 + a,
              64,
              21,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              5
            ]
              .concat([a])
              .concat(e.config)
              .concat([6, 1, 2])
          );
        }),
        (e.mp4a = function a(t) {
          var r = t.samplerate;
          return e.box(
            e.types.mp4a,
            new Uint8Array([
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              t.channelCount,
              0,
              16,
              0,
              0,
              0,
              0,
              255 & (r >> 8),
              255 & r,
              0,
              0
            ]),
            e.box(e.types.esds, e.esds(t))
          );
        }),
        (e.mp3 = function a(t) {
          var r = t.samplerate;
          return e.box(
            e.types['.mp3'],
            new Uint8Array([
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              t.channelCount,
              0,
              16,
              0,
              0,
              0,
              0,
              255 & (r >> 8),
              255 & r,
              0,
              0
            ])
          );
        }),
        (e.stsd = function a(t) {
          return 'audio' === t.type
            ? 'mp3' === t.segmentCodec && 'mp3' === t.codec
              ? e.box(e.types.stsd, e.STSD, e.mp3(t))
              : e.box(e.types.stsd, e.STSD, e.mp4a(t))
            : e.box(e.types.stsd, e.STSD, e.avc1(t));
        }),
        (e.tkhd = function a(t) {
          var r = t.id,
            n = t.duration * t.timescale,
            o = t.width,
            i = t.height,
            d = P(n / (kd + 1)),
            s = P(n % (kd + 1));
          return e.box(
            e.types.tkhd,
            new Uint8Array([
              1,
              0,
              0,
              7,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              3,
              255 & (r >> 24),
              255 & (r >> 16),
              255 & (r >> 8),
              255 & r,
              0,
              0,
              0,
              0,
              d >> 24,
              255 & (d >> 16),
              255 & (d >> 8),
              255 & d,
              s >> 24,
              255 & (s >> 16),
              255 & (s >> 8),
              255 & s,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              64,
              0,
              0,
              0,
              255 & (o >> 8),
              255 & o,
              0,
              0,
              255 & (i >> 8),
              255 & i,
              0,
              0
            ])
          );
        }),
        (e.traf = function r(t, a) {
          var n = e.sdtp(t),
            o = t.id,
            i = P(a / (kd + 1)),
            d = P(a % (kd + 1));
          return e.box(
            e.types.traf,
            e.box(
              e.types.tfhd,
              new Uint8Array([
                0,
                0,
                0,
                0,
                o >> 24,
                255 & (o >> 16),
                255 & (o >> 8),
                255 & o
              ])
            ),
            e.box(
              e.types.tfdt,
              new Uint8Array([
                1,
                0,
                0,
                0,
                i >> 24,
                255 & (i >> 16),
                255 & (i >> 8),
                255 & i,
                d >> 24,
                255 & (d >> 16),
                255 & (d >> 8),
                255 & d
              ])
            ),
            e.trun(t, n.length + 16 + 20 + 8 + 16 + 8 + 8),
            n
          );
        }),
        (e.trak = function a(t) {
          return (
            (t.duration = t.duration || 4294967295),
            e.box(e.types.trak, e.tkhd(t), e.mdia(t))
          );
        }),
        (e.trex = function a(t) {
          var r = t.id;
          return e.box(
            e.types.trex,
            new Uint8Array([
              0,
              0,
              0,
              0,
              r >> 24,
              255 & (r >> 16),
              255 & (r >> 8),
              255 & r,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              1
            ])
          );
        }),
        (e.trun = function r(t, a) {
          var n = t.samples || [],
            o = n.length,
            d = 12 + 16 * o,
            s = new Uint8Array(d),
            l,
            c,
            u,
            g,
            f,
            p;
          for (
            a += 8 + d,
              s.set(
                [
                  'video' === t.type ? 1 : 0,
                  0,
                  15,
                  1,
                  255 & (o >>> 24),
                  255 & (o >>> 16),
                  255 & (o >>> 8),
                  255 & o,
                  255 & (a >>> 24),
                  255 & (a >>> 16),
                  255 & (a >>> 8),
                  255 & a
                ],
                0
              ),
              l = 0;
            l < o;
            l++
          )
            (c = n[l]),
              (u = c.duration),
              (g = c.size),
              (f = c.flags),
              (p = c.cts),
              s.set(
                [
                  255 & (u >>> 24),
                  255 & (u >>> 16),
                  255 & (u >>> 8),
                  255 & u,
                  255 & (g >>> 24),
                  255 & (g >>> 16),
                  255 & (g >>> 8),
                  255 & g,
                  (f.isLeading << 2) | f.dependsOn,
                  (f.isDependedOn << 6) |
                    (f.hasRedundancy << 4) |
                    (f.paddingValue << 1) |
                    f.isNonSync,
                  61440 & f.degradPrio,
                  15 & f.degradPrio,
                  255 & (p >>> 24),
                  255 & (p >>> 16),
                  255 & (p >>> 8),
                  255 & p
                ],
                12 + 16 * l
              );
          return e.box(e.types.trun, s);
        }),
        (e.initSegment = function a(t) {
          e.types || e.init();
          var r = e.moov(t),
            n = new Uint8Array(e.FTYP.byteLength + r.byteLength);
          return n.set(e.FTYP), n.set(r, e.FTYP.byteLength), n;
        }),
        e
      );
    })(),
    Id,
    bd;
  (Dd.types = void 0),
    (Dd.HDLR_TYPES = void 0),
    (Dd.STTS = void 0),
    (Dd.STSC = void 0),
    (Dd.STCO = void 0),
    (Dd.STSZ = void 0),
    (Dd.VMHD = void 0),
    (Dd.SMHD = void 0),
    (Dd.STSD = void 0),
    (Dd.FTYP = void 0),
    (Dd.DINF = void 0);
  var Cd = 1024,
    Pd = null,
    _d = null,
    xd = (function() {
      function e(e, t, a, r) {
        if (
          ((this.observer = void 0),
          (this.config = void 0),
          (this.typeSupported = void 0),
          (this.ISGenerated = !1),
          (this._initPTS = null),
          (this._initDTS = null),
          (this.nextAvcDts = null),
          (this.nextAudioPts = null),
          (this.videoSampleDuration = null),
          (this.isAudioContiguous = !1),
          (this.isVideoContiguous = !1),
          (this.observer = e),
          (this.config = t),
          (this.typeSupported = a),
          (this.ISGenerated = !1),
          null === Pd)
        ) {
          var n = navigator.userAgent || '',
            o = n.match(/Chrome\/(\d+)/i);
          Pd = o ? parseInt(o[1]) : 0;
        }
        if (null === _d) {
          var i = navigator.userAgent.match(/Safari\/(\d+)/i);
          _d = i ? parseInt(i[1]) : 0;
        }
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {}),
        (t.resetTimeStamp = function t(e) {
          Bo.log('[mp4-remuxer]: initPTS & initDTS reset'),
            (this._initPTS = this._initDTS = e);
        }),
        (t.resetNextTimestamp = function e() {
          Bo.log('[mp4-remuxer]: reset next timestamp'),
            (this.isVideoContiguous = !1),
            (this.isAudioContiguous = !1);
        }),
        (t.resetInitSegment = function e() {
          Bo.log('[mp4-remuxer]: ISGenerated flag reset'),
            (this.ISGenerated = !1);
        }),
        (t.getVideoStartPts = function t(e) {
          var a = !1,
            r = e.reduce(function(e, t) {
              var r = t.pts - e;
              return -4294967296 > r
                ? ((a = !0), hr(e, t.pts))
                : 0 < r
                ? e
                : t.pts;
            }, e[0].pts);
          return a && Bo.debug('PTS rollover detected'), r;
        }),
        (t.remux = function s(e, t, a, r, n, o, i, d) {
          var l = n,
            c = n,
            u = -1 < e.pid,
            g = -1 < t.pid,
            f = t.samples.length,
            p = 0 < e.samples.length,
            m = (i && 0 < f) || 1 < f,
            y = ((!u || p) && (!g || m)) || this.ISGenerated || i,
            h,
            T,
            E,
            v,
            S,
            L;
          if (y) {
            this.ISGenerated || (E = this.generateIS(e, t, n, o));
            var A = this.isVideoContiguous,
              R = -1,
              k;
            if (
              m &&
              ((R = Tr(t.samples)),
              !A && this.config.forceKeyFrameOnDiscontinuity)
            )
              if (((L = !0), 0 < R)) {
                Bo.warn(
                  '[mp4-remuxer]: Dropped ' +
                    R +
                    ' out of ' +
                    f +
                    ' video samples due to a missing keyframe'
                );
                var D = this.getVideoStartPts(t.samples);
                (t.samples = t.samples.slice(R)),
                  (t.dropped += R),
                  (c += (t.samples[0].pts - D) / t.inputTimeScale),
                  (k = c);
              } else
                -1 === R &&
                  (Bo.warn(
                    '[mp4-remuxer]: No keyframe found out of ' +
                      f +
                      ' video samples'
                  ),
                  (L = !1));
            if (this.ISGenerated) {
              if (p && m) {
                var I = this.getVideoStartPts(t.samples),
                  b = hr(e.samples[0].pts, I) - I,
                  P = b / t.inputTimeScale;
                (l += C(0, P)), (c += C(0, -P));
              }
              if (!p) m && (h = this.remuxVideo(t, c, A, 0));
              else if (
                (e.samplerate ||
                  (Bo.warn(
                    '[mp4-remuxer]: regenerate InitSegment as audio detected'
                  ),
                  (E = this.generateIS(e, t, n, o))),
                (T = this.remuxAudio(
                  e,
                  l,
                  this.isAudioContiguous,
                  o,
                  g || m || d === Pi.AUDIO ? c : void 0
                )),
                m)
              ) {
                var _ = T ? T.endPTS - T.startPTS : 0;
                t.inputTimeScale ||
                  (Bo.warn(
                    '[mp4-remuxer]: regenerate InitSegment as video detected'
                  ),
                  (E = this.generateIS(e, t, n, o))),
                  (h = this.remuxVideo(t, c, A, _));
              }
              h &&
                ((h.firstKeyFrame = R),
                (h.independent = -1 !== R),
                (h.firstKeyFramePTS = k));
            }
          }
          return (
            this.ISGenerated &&
              this._initPTS &&
              this._initDTS &&
              (a.samples.length && (S = Er(a, n, this._initPTS, this._initDTS)),
              r.samples.length && (v = vr(r, n, this._initPTS))),
            {
              audio: T,
              video: h,
              initSegment: E,
              independent: L,
              text: v,
              id3: S
            }
          );
        }),
        (t.generateIS = function n(e, t, a, r) {
          var o = e.samples,
            i = t.samples,
            d = this.typeSupported,
            s = {},
            l = this._initPTS,
            c = !l || r,
            u = 'audio/mp4',
            g,
            f,
            p;
          if ((c && (g = f = 1 / 0), e.config && o.length)) {
            switch (((e.timescale = e.samplerate), e.segmentCodec)) {
              case 'mp3':
                d.mpeg
                  ? ((u = 'audio/mpeg'), (e.codec = ''))
                  : d.mp3 && (e.codec = 'mp3');
            }
            (s.audio = {
              id: 'audio',
              container: u,
              codec: e.codec,
              initSegment:
                'mp3' === e.segmentCodec && d.mpeg
                  ? new Uint8Array(0)
                  : Dd.initSegment([e]),
              metadata: { channelCount: e.channelCount }
            }),
              c &&
                ((p = e.inputTimeScale),
                l && p === l.timescale
                  ? (c = !1)
                  : (g = f = o[0].pts - S(p * a)));
          }
          if (
            t.sps &&
            t.pps &&
            i.length &&
            ((t.timescale = t.inputTimeScale),
            (s.video = {
              id: 'main',
              container: 'video/mp4',
              codec: t.codec,
              initSegment: Dd.initSegment([t]),
              metadata: { width: t.width, height: t.height }
            }),
            c)
          )
            if (((p = t.inputTimeScale), !l || p !== l.timescale)) {
              var m = this.getVideoStartPts(i),
                y = S(p * a);
              (f = L(f, hr(i[0].dts, m) - y)), (g = L(g, m - y));
            } else c = !1;
          return Object.keys(s).length
            ? ((this.ISGenerated = !0),
              c
                ? ((this._initPTS = { baseTime: g, timescale: p }),
                  (this._initDTS = { baseTime: f, timescale: p }))
                : (g = p = void 0),
              { tracks: s, initPTS: g, timescale: p })
            : void 0;
        }),
        (t.remuxVideo = function n(e, t, a, r) {
          var o = Number.NEGATIVE_INFINITY,
            d = e.inputTimeScale,
            s = e.samples,
            l = [],
            c = s.length,
            u = this._initPTS,
            g = this.nextAvcDts,
            f = 8,
            p = this.videoSampleDuration,
            m = T,
            y = o,
            h = !1,
            E,
            v;
          if (!a || null === g) {
            var A = t * d,
              R = s[0].pts - hr(s[0].dts, s[0].pts);
            g = A - R;
          }
          for (var k = (u.baseTime * d) / u.timescale, D = 0, I; D < c; D++)
            (I = s[D]),
              (I.pts = hr(I.pts - k, g)),
              (I.dts = hr(I.dts - k, g)),
              I.dts < s[0 < D ? D - 1 : D].dts && (h = !0);
          h &&
            s.sort(function(e, t) {
              var a = e.dts - t.dts,
                r = e.pts - t.pts;
              return a || r;
            }),
            (E = s[0].dts),
            (v = s[s.length - 1].dts);
          var b = v - E,
            _ = b ? S(b / (c - 1)) : p || e.inputTimeScale / 30;
          if (a) {
            var x = E - g,
              F = x > _,
              N = -1 > x;
            if (
              (F || N) &&
              (F
                ? Bo.warn(
                    'AVC: ' +
                      mr(x, !0) +
                      ' ms (' +
                      x +
                      'dts) hole between fragments detected, filling it'
                  )
                : Bo.warn(
                    'AVC: ' +
                      mr(-x, !0) +
                      ' ms (' +
                      x +
                      'dts) overlapping between fragments detected'
                  ),
              !N || g >= s[0].pts)
            ) {
              E = g;
              var O = s[0].pts - x;
              (s[0].dts = E),
                (s[0].pts = O),
                Bo.log(
                  'Video: First PTS/DTS adjusted: ' +
                    mr(O, !0) +
                    '/' +
                    mr(E, !0) +
                    ', delta: ' +
                    mr(x, !0) +
                    ' ms'
                );
            }
          }
          E = C(0, E);
          for (var M = 0, w = 0, B = 0; B < c; B++) {
            for (
              var U = s[B], G = U.units, K = G.length, H = 0, V = 0;
              V < K;
              V++
            )
              H += G[V].data.length;
            (w += H),
              (M += K),
              (U.length = H),
              (U.dts = C(U.dts, E)),
              (m = L(U.pts, m)),
              (y = C(U.pts, y));
          }
          v = s[c - 1].dts;
          var W = w + 4 * M + 8,
            Y;
          try {
            Y = new Uint8Array(W);
          } catch (e) {
            return void this.observer.emit(xo.ERROR, xo.ERROR, {
              type: Fo.MUX_ERROR,
              details: No.REMUX_ALLOC_ERROR,
              fatal: !1,
              error: e,
              bytes: W,
              reason: 'fail allocating video mdat ' + W
            });
          }
          var q = new DataView(Y.buffer);
          q.setUint32(0, W), Y.set(Dd.types.mdat, 4);
          for (var z = !1, X = T, Q = T, $ = o, Z = o, J = 0; J < c; J++) {
            for (
              var ee = s[J], te = ee.units, ae = 0, re = 0, ne = te.length;
              re < ne;
              re++
            ) {
              var oe = te[re],
                ie = oe.data,
                de = oe.data.byteLength;
              q.setUint32(f, de),
                (f += 4),
                Y.set(ie, f),
                (f += de),
                (ae += 4 + de);
            }
            var se = void 0;
            if (J < c - 1)
              (p = s[J + 1].dts - ee.dts), (se = s[J + 1].pts - ee.pts);
            else {
              var le = this.config,
                ce = 0 < J ? ee.dts - s[J - 1].dts : _;
              if (
                ((se = 0 < J ? ee.pts - s[J - 1].pts : _),
                le.stretchShortVideoTrack && null !== this.nextAudioPts)
              ) {
                var ue = P(le.maxBufferHole * d),
                  ge = (r ? m + r * d : this.nextAudioPts) - ee.pts;
                ge > ue
                  ? ((p = ge - ce),
                    0 > p ? (p = ce) : (z = !0),
                    Bo.log(
                      '[mp4-remuxer]: It is approximately ' +
                        ge / 90 +
                        ' ms to the next segment; using duration ' +
                        p / 90 +
                        ' ms for the last video frame.'
                    ))
                  : (p = ce);
              } else p = ce;
            }
            var fe = S(ee.pts - ee.dts);
            (X = L(X, p)),
              ($ = C($, p)),
              (Q = L(Q, se)),
              (Z = C(Z, se)),
              l.push(new Fd(ee.key, p, ae, fe));
          }
          if (l.length)
            if (Pd) {
              if (70 > Pd) {
                var pe = l[0].flags;
                (pe.dependsOn = 2), (pe.isNonSync = 0);
              }
            } else if (_d && Z - Q < $ - X && 0.025 > _ / $ && 0 === l[0].cts) {
              Bo.warn(
                'Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.'
              );
              for (var me = E, ye = 0, he = l.length; ye < he; ye++) {
                var Te = me + l[ye].duration,
                  Ee = me + l[ye].cts;
                if (ye < he - 1) {
                  var ve = Te + l[ye + 1].cts;
                  l[ye].duration = ve - Ee;
                } else l[ye].duration = ye ? l[ye - 1].duration : _;
                (l[ye].cts = 0), (me = Te);
              }
            }
          (p = z || !p ? _ : p),
            (this.nextAvcDts = g = v + p),
            (this.videoSampleDuration = p),
            (this.isVideoContiguous = !0);
          var Se = Dd.moof(e.sequenceNumber++, E, be({}, e, { samples: l })),
            Le = 'video',
            Ae = {
              data1: Se,
              data2: Y,
              startPTS: m / d,
              endPTS: (y + p) / d,
              startDTS: E / d,
              endDTS: g / d,
              type: Le,
              hasAudio: !1,
              hasVideo: !0,
              nb: l.length,
              dropped: e.dropped
            };
          return (e.samples = []), (e.dropped = 0), Ae;
        }),
        (t.remuxAudio = function o(e, t, a, r, n) {
          var d = e.inputTimeScale,
            s = e.samplerate ? e.samplerate : d,
            l = d / s,
            c = 'aac' === e.segmentCodec ? Cd : 1152,
            u = c * l,
            g = this._initPTS,
            f = 'mp3' === e.segmentCodec && this.typeSupported.mpeg,
            p = [],
            m = void 0 !== n,
            y = e.samples,
            h = f ? 0 : 8,
            T = this.nextAudioPts || -1,
            E = t * d,
            v = (g.baseTime * d) / g.timescale;
          if (
            ((this.isAudioContiguous = a =
              a ||
              (y.length &&
                0 < T &&
                ((r && 9e3 > R(E - T)) ||
                  R(hr(y[0].pts - v, E) - T) < 20 * u))),
            y.forEach(function(e) {
              e.pts = hr(e.pts - v, E);
            }),
            !a || 0 > T)
          ) {
            if (
              ((y = y.filter(function(e) {
                return 0 <= e.pts;
              })),
              !y.length)
            )
              return;
            T = 0 === n ? 0 : r && !m ? C(0, E) : y[0].pts;
          }
          if ('aac' === e.segmentCodec)
            for (
              var L = this.config.maxAudioFramesDrift, A = 0, k = T;
              A < y.length;
              A++
            ) {
              var D = y[A],
                I = D.pts,
                b = I - k,
                P = R((1e3 * b) / d);
              if (b <= -L * u && m)
                0 === A &&
                  (Bo.warn(
                    'Audio frame @ ' +
                      (I / d).toFixed(3) +
                      's overlaps nextAudioPts by ' +
                      S((1e3 * b) / d) +
                      ' ms.'
                  ),
                  (this.nextAudioPts = T = k = I));
              else if (b >= L * u && P < 10000 && m) {
                var _ = S(b / u);
                (k = I - _ * u),
                  0 > k && (_--, (k += u)),
                  0 === A && (this.nextAudioPts = T = k),
                  Bo.warn(
                    '[mp4-remuxer]: Injecting ' +
                      _ +
                      ' audio frame @ ' +
                      (k / d).toFixed(3) +
                      's due to ' +
                      S((1e3 * b) / d) +
                      ' ms gap.'
                  );
                for (var x = 0; x < _; x++) {
                  var F = C(k, 0),
                    N = Rd.getSilentFrame(
                      e.manifestCodec || e.codec,
                      e.channelCount
                    );
                  N ||
                    (Bo.log(
                      '[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.'
                    ),
                    (N = D.unit.subarray())),
                    y.splice(A, 0, { unit: N, pts: F }),
                    (k += u),
                    A++;
                }
              }
              (D.pts = k), (k += u);
            }
          for (var O = null, M = null, w = 0, B = y.length, U; B--; )
            w += y[B].unit.byteLength;
          for (var G = 0, K = y.length; G < K; G++) {
            var H = y[G],
              V = H.unit,
              W = H.pts;
            if (null !== M) {
              var Y = p[G - 1];
              Y.duration = S((W - M) / l);
            } else if (
              (a && 'aac' === e.segmentCodec && (W = T), (O = W), 0 < w)
            ) {
              w += h;
              try {
                U = new Uint8Array(w);
              } catch (e) {
                return void this.observer.emit(xo.ERROR, xo.ERROR, {
                  type: Fo.MUX_ERROR,
                  details: No.REMUX_ALLOC_ERROR,
                  fatal: !1,
                  error: e,
                  bytes: w,
                  reason: 'fail allocating audio mdat ' + w
                });
              }
              if (!f) {
                var q = new DataView(U.buffer);
                q.setUint32(0, w), U.set(Dd.types.mdat, 4);
              }
            } else return;
            U.set(V, h);
            var z = V.byteLength;
            (h += z), p.push(new Fd(!0, c, z, 0)), (M = W);
          }
          var X = p.length;
          if (X) {
            var Q = p[p.length - 1];
            this.nextAudioPts = T = M + l * Q.duration;
            var $ = f
              ? new Uint8Array(0)
              : Dd.moof(e.sequenceNumber++, O / l, be({}, e, { samples: p }));
            e.samples = [];
            var Z = O / d,
              J = T / d,
              ee = 'audio',
              te = {
                data1: $,
                data2: U,
                startPTS: Z,
                endPTS: J,
                startDTS: Z,
                endDTS: J,
                type: ee,
                hasAudio: !0,
                hasVideo: !1,
                nb: X
              };
            return (this.isAudioContiguous = !0), te;
          }
        }),
        (t.remuxEmptyAudio = function n(e, t, a, r) {
          var o = e.inputTimeScale,
            d = e.samplerate ? e.samplerate : o,
            l = o / d,
            c = this.nextAudioPts,
            u = this._initDTS,
            g = (9e4 * u.baseTime) / u.timescale,
            f = (null === c ? r.startDTS * o : c) + g,
            p = r.endDTS * o + g,
            m = l * Cd,
            y = s((p - f) / m),
            h = Rd.getSilentFrame(e.manifestCodec || e.codec, e.channelCount);
          if ((Bo.warn('[mp4-remuxer]: remux empty Audio'), !h))
            return void Bo.trace(
              '[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec'
            );
          for (var T = [], E = 0, v; E < y; E++)
            (v = f + E * m), T.push({ unit: h, pts: v, dts: v });
          return (e.samples = T), this.remuxAudio(e, t, a, !1);
        }),
        e
      );
    })(),
    Fd = function n(e, t, a, r) {
      (this.size = void 0),
        (this.duration = void 0),
        (this.cts = void 0),
        (this.flags = void 0),
        (this.duration = t),
        (this.size = a),
        (this.cts = r),
        (this.flags = new Nd(e));
    },
    Nd = function t(e) {
      (this.isLeading = 0),
        (this.isDependedOn = 0),
        (this.hasRedundancy = 0),
        (this.degradPrio = 0),
        (this.dependsOn = 1),
        (this.isNonSync = 1),
        (this.dependsOn = e ? 2 : 1),
        (this.isNonSync = e ? 0 : 1);
    },
    Od = (function() {
      function e() {
        (this.emitInitSegment = !1),
          (this.audioCodec = void 0),
          (this.videoCodec = void 0),
          (this.initData = void 0),
          (this.initPTS = null),
          (this.initTracks = void 0),
          (this.lastEndTime = null);
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {}),
        (t.resetTimeStamp = function t(e) {
          (this.initPTS = e), (this.lastEndTime = null);
        }),
        (t.resetNextTimestamp = function e() {
          this.lastEndTime = null;
        }),
        (t.resetInitSegment = function n(e, t, a, r) {
          (this.audioCodec = t),
            (this.videoCodec = a),
            this.generateInitSegment(rt(e, r)),
            (this.emitInitSegment = !0);
        }),
        (t.generateInitSegment = function t(e) {
          var a = this.audioCodec,
            r = this.videoCodec;
          if (!(null != e && e.byteLength))
            return (this.initTracks = void 0), void (this.initData = void 0);
          var n = (this.initData = at(e));
          a || (a = Lr(n.audio, Wo.AUDIO)), r || (r = Lr(n.video, Wo.VIDEO));
          var o = {};
          n.audio && n.video
            ? (o.audiovideo = {
                container: 'video/mp4',
                codec: a + ',' + r,
                initSegment: e,
                id: 'main'
              })
            : n.audio
            ? (o.audio = {
                container: 'audio/mp4',
                codec: a,
                initSegment: e,
                id: 'audio'
              })
            : n.video
            ? (o.video = {
                container: 'video/mp4',
                codec: r,
                initSegment: e,
                id: 'main'
              })
            : Bo.warn(
                '[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.'
              ),
            (this.initTracks = o);
        }),
        (t.remux = function i(e, t, a, r, n, o) {
          var d = this.initPTS,
            s = this.lastEndTime,
            l = {
              audio: void 0,
              video: void 0,
              text: r,
              id3: a,
              initSegment: void 0
            },
            c,
            u;
          _o(s) || (s = this.lastEndTime = n || 0);
          var g = t.samples;
          if (!(null != g && g.length)) return l;
          var f = { initPTS: void 0, timescale: 1 },
            p = this.initData;
          if (
            ((null != (c = p) && c.length) ||
              (this.generateInitSegment(g), (p = this.initData)),
            !(null != (u = p) && u.length))
          )
            return (
              Bo.warn(
                '[passthrough-remuxer.ts]: Failed to generate initSegment.'
              ),
              l
            );
          this.emitInitSegment &&
            ((f.tracks = this.initTracks), (this.emitInitSegment = !1));
          var m = it(g, p),
            y = ot(p, g),
            h = null === y ? n : y;
          (Sr(d, h, n, m) || (f.timescale !== d.timescale && o)) &&
            ((f.initPTS = h - n),
            d &&
              1 === d.timescale &&
              Bo.warn('Adjusting initPTS by ' + (f.initPTS - d.baseTime)),
            (this.initPTS = d = { baseTime: f.initPTS, timescale: 1 }));
          var T = e ? h - d.baseTime / d.timescale : s,
            E = T + m;
          st(p, g, d.baseTime / d.timescale),
            0 < m
              ? (this.lastEndTime = E)
              : (Bo.warn(
                  'Duration parsed from mp4 should be greater than zero'
                ),
                this.resetNextTimestamp());
          var v = !!p.audio,
            S = !!p.video,
            L = '';
          v && (L += 'audio'), S && (L += 'video');
          var A = {
            data1: g,
            startPTS: T,
            startDTS: T,
            endPTS: E,
            endDTS: E,
            type: L,
            hasAudio: v,
            hasVideo: S,
            nb: 1,
            dropped: 0
          };
          return (
            (l.audio = 'audio' === A.type ? A : void 0),
            (l.video = 'audio' === A.type ? void 0 : A),
            (l.initSegment = f),
            (l.id3 = Er(a, n, d, d)),
            r.samples.length && (l.text = vr(r, n, d)),
            l
          );
        }),
        e
      );
    })(),
    Md;
  try {
    Md = self.performance.now.bind(self.performance);
  } catch (e) {
    Bo.debug('Unable to use Performance API on this environment'),
      (Md = 'undefined' != typeof self && self.Date.now);
  }
  var wd = [
      { demux: fd, remux: Od },
      { demux: Ld, remux: xd },
      { demux: ud, remux: xd },
      { demux: Ad, remux: xd }
    ],
    Bd = (function() {
      function e(e, t, a, r, n) {
        (this.async = !1),
          (this.observer = void 0),
          (this.typeSupported = void 0),
          (this.config = void 0),
          (this.vendor = void 0),
          (this.id = void 0),
          (this.demuxer = void 0),
          (this.remuxer = void 0),
          (this.decrypter = void 0),
          (this.probe = void 0),
          (this.decryptionPromise = null),
          (this.transmuxConfig = void 0),
          (this.currentTransmuxState = void 0),
          (this.observer = e),
          (this.typeSupported = t),
          (this.config = a),
          (this.vendor = r),
          (this.id = n);
      }
      var t = e.prototype;
      return (
        (t.configure = function t(e) {
          (this.transmuxConfig = e), this.decrypter && this.decrypter.reset();
        }),
        (t.push = function n(e, t, a, r) {
          var o = this,
            i = a.transmuxing;
          i.executeStart = Md();
          var d = new Uint8Array(e),
            s = this.currentTransmuxState,
            l = this.transmuxConfig;
          r && (this.currentTransmuxState = r);
          var c = r || s,
            u = c.contiguous,
            g = c.discontinuity,
            f = c.trackSwitch,
            p = c.accurateTimeOffset,
            m = c.timeOffset,
            y = c.initSegmentChange,
            h = l.audioCodec,
            T = l.videoCodec,
            E = l.defaultInitPts,
            v = l.duration,
            S = l.initSegmentData,
            L = Ar(d, t);
          if (L && 'AES-128' === L.method) {
            var A = this.getDecrypter();
            if (A.isSync()) {
              var R = A.softwareDecrypt(d, L.key.buffer, L.iv.buffer),
                k = -1 < a.part;
              if ((k && (R = A.flush()), !R))
                return (i.executeEnd = Md()), Ud(a);
              d = new Uint8Array(R);
            } else
              return (
                (this.decryptionPromise = A.webCryptoDecrypt(
                  d,
                  L.key.buffer,
                  L.iv.buffer
                ).then(function(e) {
                  var t = o.push(e, null, a);
                  return (o.decryptionPromise = null), t;
                })),
                this.decryptionPromise
              );
          }
          var D = this.needsProbing(g, f);
          if (D) {
            var I = this.configureTransmuxer(d);
            if (I)
              return (
                Bo.warn('[transmuxer] ' + I.message),
                this.observer.emit(xo.ERROR, xo.ERROR, {
                  type: Fo.MEDIA_ERROR,
                  details: No.FRAG_PARSING_ERROR,
                  fatal: !1,
                  error: I,
                  reason: I.message
                }),
                (i.executeEnd = Md()),
                Ud(a)
              );
          }
          (g || f || y || D) && this.resetInitSegment(S, h, T, v, t),
            (g || y || D) && this.resetInitialTimestamp(E),
            u || this.resetContiguity();
          var b = this.transmux(d, L, m, p, a),
            C = this.currentTransmuxState;
          return (
            (C.contiguous = !0),
            (C.discontinuity = !1),
            (C.trackSwitch = !1),
            (i.executeEnd = Md()),
            b
          );
        }),
        (t.flush = function t(e) {
          var a = this,
            r = e.transmuxing;
          r.executeStart = Md();
          var n = this.decrypter,
            o = this.currentTransmuxState,
            i = this.decryptionPromise;
          if (i)
            return i.then(function() {
              return a.flush(e);
            });
          var d = [],
            s = o.timeOffset;
          if (n) {
            var l = n.flush();
            l && d.push(this.push(l, null, e));
          }
          var c = this.demuxer,
            u = this.remuxer;
          if (!c || !u) return (r.executeEnd = Md()), [Ud(e)];
          var g = c.flush(s);
          return Rr(g)
            ? g.then(function(t) {
                return a.flushRemux(d, t, e), d;
              })
            : (this.flushRemux(d, g, e), d);
        }),
        (t.flushRemux = function r(e, t, a) {
          var n = t.audioTrack,
            o = t.videoTrack,
            i = t.id3Track,
            d = t.textTrack,
            s = this.currentTransmuxState,
            l = s.accurateTimeOffset,
            c = s.timeOffset;
          Bo.log(
            '[transmuxer.ts]: Flushed fragment ' +
              a.sn +
              (-1 < a.part ? ' p: ' + a.part : '') +
              ' of level ' +
              a.level
          );
          var u = this.remuxer.remux(n, o, i, d, c, l, !0, this.id);
          e.push({ remuxResult: u, chunkMeta: a }),
            (a.transmuxing.executeEnd = Md());
        }),
        (t.resetInitialTimestamp = function t(e) {
          var a = this.demuxer,
            r = this.remuxer;
          a && r && (a.resetTimeStamp(e), r.resetTimeStamp(e));
        }),
        (t.resetContiguity = function e() {
          var t = this.demuxer,
            a = this.remuxer;
          t && a && (t.resetContiguity(), a.resetNextTimestamp());
        }),
        (t.resetInitSegment = function o(e, t, a, r, n) {
          var i = this.demuxer,
            d = this.remuxer;
          i &&
            d &&
            (i.resetInitSegment(e, t, a, r), d.resetInitSegment(e, t, a, n));
        }),
        (t.destroy = function e() {
          this.demuxer && (this.demuxer.destroy(), (this.demuxer = void 0)),
            this.remuxer && (this.remuxer.destroy(), (this.remuxer = void 0));
        }),
        (t.transmux = function o(e, t, a, r, n) {
          var i;
          return (
            (i =
              t && 'SAMPLE-AES' === t.method
                ? this.transmuxSampleAes(e, t, a, r, n)
                : this.transmuxUnencrypted(e, a, r, n)),
            i
          );
        }),
        (t.transmuxUnencrypted = function n(e, t, a, r) {
          var o = this.demuxer.demux(e, t, !1, !this.config.progressive),
            i = o.audioTrack,
            d = o.videoTrack,
            s = o.id3Track,
            l = o.textTrack,
            c = this.remuxer.remux(i, d, s, l, t, a, !1, this.id);
          return { remuxResult: c, chunkMeta: r };
        }),
        (t.transmuxSampleAes = function o(e, t, a, r, n) {
          var i = this;
          return this.demuxer.demuxSampleAes(e, t, a).then(function(e) {
            var t = i.remuxer.remux(
              e.audioTrack,
              e.videoTrack,
              e.id3Track,
              e.textTrack,
              a,
              r,
              !1,
              i.id
            );
            return { remuxResult: t, chunkMeta: n };
          });
        }),
        (t.configureTransmuxer = function t(e) {
          for (
            var a = this.config,
              r = this.observer,
              n = this.typeSupported,
              o = this.vendor,
              d = 0,
              s = wd.length,
              l;
            d < s;
            d++
          )
            if (wd[d].demux.probe(e)) {
              l = wd[d];
              break;
            }
          if (!l)
            return new Error('Failed to find demuxer by probing fragment data');
          var c = this.demuxer,
            u = this.remuxer,
            g = l.remux,
            f = l.demux;
          (u && u instanceof g) || (this.remuxer = new g(r, a, n, o)),
            (c && c instanceof f) ||
              ((this.demuxer = new f(r, a, n)), (this.probe = f.probe));
        }),
        (t.needsProbing = function a(e, t) {
          return !this.demuxer || !this.remuxer || e || t;
        }),
        (t.getDecrypter = function e() {
          var t = this.decrypter;
          return t || (t = this.decrypter = new od(this.config)), t;
        }),
        e
      );
    })(),
    Ud = function t(e) {
      return { remuxResult: {}, chunkMeta: e };
    },
    Gd = function o(e, t, a, r, n) {
      (this.audioCodec = void 0),
        (this.videoCodec = void 0),
        (this.initSegmentData = void 0),
        (this.duration = void 0),
        (this.defaultInitPts = void 0),
        (this.audioCodec = e),
        (this.videoCodec = t),
        (this.initSegmentData = a),
        (this.duration = r),
        (this.defaultInitPts = n || null);
    },
    Kd = function i(e, t, a, r, n, o) {
      (this.discontinuity = void 0),
        (this.contiguous = void 0),
        (this.accurateTimeOffset = void 0),
        (this.trackSwitch = void 0),
        (this.timeOffset = void 0),
        (this.initSegmentChange = void 0),
        (this.discontinuity = e),
        (this.contiguous = t),
        (this.accurateTimeOffset = a),
        (this.trackSwitch = r),
        (this.timeOffset = n),
        (this.initSegmentChange = o);
    },
    Hd = { exports: {} };
  (function(e) {
    function t() {}
    function a(e, t, a) {
      (this.fn = e), (this.context = t), (this.once = a || !1);
    }
    function r(e, t, r, n, o) {
      if ('function' != typeof r)
        throw new TypeError('The listener must be a function');
      var i = new a(r, n || e, o),
        s = d ? d + t : t;
      return (
        e._events[s]
          ? e._events[s].fn
            ? (e._events[s] = [e._events[s], i])
            : e._events[s].push(i)
          : ((e._events[s] = i), e._eventsCount++),
        e
      );
    }
    function n(e, a) {
      0 == --e._eventsCount ? (e._events = new t()) : delete e._events[a];
    }
    function o() {
      (this._events = new t()), (this._eventsCount = 0);
    }
    var i = Object.prototype.hasOwnProperty,
      d = '~';
    Object.create &&
      ((t.prototype = Object.create(null)), !new t().__proto__ && (d = !1)),
      (o.prototype.eventNames = function e() {
        var t = [],
          a,
          r;
        if (0 === this._eventsCount) return t;
        for (r in (a = this._events))
          i.call(a, r) && t.push(d ? r.slice(1) : r);
        return Object.getOwnPropertySymbols
          ? t.concat(Object.getOwnPropertySymbols(a))
          : t;
      }),
      (o.prototype.listeners = function t(e) {
        var a = d ? d + e : e,
          r = this._events[a];
        if (!r) return [];
        if (r.fn) return [r.fn];
        for (var n = 0, o = r.length, s = Array(o); n < o; n++) s[n] = r[n].fn;
        return s;
      }),
      (o.prototype.listenerCount = function t(e) {
        var a = d ? d + e : e,
          r = this._events[a];
        return r ? (r.fn ? 1 : r.length) : 0;
      }),
      (o.prototype.emit = function s(e, t, a, r, n, o) {
        var l = d ? d + e : e;
        if (!this._events[l]) return !1;
        var c = this._events[l],
          u = arguments.length,
          g,
          f;
        if (c.fn) {
          switch ((c.once && this.removeListener(e, c.fn, void 0, !0), u)) {
            case 1:
              return c.fn.call(c.context), !0;
            case 2:
              return c.fn.call(c.context, t), !0;
            case 3:
              return c.fn.call(c.context, t, a), !0;
            case 4:
              return c.fn.call(c.context, t, a, r), !0;
            case 5:
              return c.fn.call(c.context, t, a, r, n), !0;
            case 6:
              return c.fn.call(c.context, t, a, r, n, o), !0;
          }
          for (f = 1, g = Array(u - 1); f < u; f++) g[f - 1] = arguments[f];
          c.fn.apply(c.context, g);
        } else {
          var p = c.length,
            m;
          for (f = 0; f < p; f++)
            switch (
              (c[f].once && this.removeListener(e, c[f].fn, void 0, !0), u)
            ) {
              case 1:
                c[f].fn.call(c[f].context);
                break;
              case 2:
                c[f].fn.call(c[f].context, t);
                break;
              case 3:
                c[f].fn.call(c[f].context, t, a);
                break;
              case 4:
                c[f].fn.call(c[f].context, t, a, r);
                break;
              default:
                if (!g)
                  for (m = 1, g = Array(u - 1); m < u; m++)
                    g[m - 1] = arguments[m];
                c[f].fn.apply(c[f].context, g);
            }
        }
        return !0;
      }),
      (o.prototype.on = function n(e, t, a) {
        return r(this, e, t, a, !1);
      }),
      (o.prototype.once = function n(e, t, a) {
        return r(this, e, t, a, !0);
      }),
      (o.prototype.removeListener = function o(e, t, a, r) {
        var s = d ? d + e : e;
        if (!this._events[s]) return this;
        if (!t) return n(this, s), this;
        var l = this._events[s];
        if (l.fn)
          l.fn !== t || (r && !l.once) || (a && l.context !== a) || n(this, s);
        else {
          for (var c = 0, u = [], g = l.length; c < g; c++)
            (l[c].fn !== t || (r && !l[c].once) || (a && l[c].context !== a)) &&
              u.push(l[c]);
          u.length ? (this._events[s] = 1 === u.length ? u[0] : u) : n(this, s);
        }
        return this;
      }),
      (o.prototype.removeAllListeners = function a(e) {
        var r;
        return (
          e
            ? ((r = d ? d + e : e), this._events[r] && n(this, r))
            : ((this._events = new t()), (this._eventsCount = 0)),
          this
        );
      }),
      (o.prototype.off = o.prototype.removeListener),
      (o.prototype.addListener = o.prototype.on),
      (o.prefixed = d),
      (o.EventEmitter = o),
      (e.exports = o);
  })(Hd);
  var Vd = Hd.exports,
    Wd = (function t(e) {
      return e &&
        e.__esModule &&
        Object.prototype.hasOwnProperty.call(e, 'default')
        ? e['default']
        : e;
    })(Vd),
    Yd = Dt() || {
      isTypeSupported: function e() {
        return !1;
      }
    },
    qd = (function() {
      function e(e, t, a, r) {
        var n = this;
        (this.error = null),
          (this.hls = void 0),
          (this.id = void 0),
          (this.observer = void 0),
          (this.frag = null),
          (this.part = null),
          (this.useWorker = void 0),
          (this.workerContext = null),
          (this.onwmsg = void 0),
          (this.transmuxer = null),
          (this.onTransmuxComplete = void 0),
          (this.onFlush = void 0);
        var o = e.config;
        (this.hls = e),
          (this.id = t),
          (this.useWorker = !!o.enableWorker),
          (this.onTransmuxComplete = a),
          (this.onFlush = r);
        var i = function a(e, t) {
          (t = t || {}),
            (t.frag = n.frag),
            (t.id = n.id),
            e === xo.ERROR && (n.error = t.error),
            n.hls.trigger(e, t);
        };
        (this.observer = new Wd()),
          this.observer.on(xo.FRAG_DECRYPTED, i),
          this.observer.on(xo.ERROR, i);
        var d = {
            mp4: Yd.isTypeSupported('video/mp4'),
            mpeg: Yd.isTypeSupported('audio/mpeg'),
            mp3: Yd.isTypeSupported('audio/mp4; codecs="mp3"')
          },
          s = navigator.vendor;
        if (this.useWorker && 'undefined' != typeof Worker) {
          var l = o.workerPath || Ua();
          if (l) {
            try {
              o.workerPath
                ? (Bo.log(
                    'loading Web Worker ' + o.workerPath + ' for "' + t + '"'
                  ),
                  (this.workerContext = Ka(o.workerPath)))
                : (Bo.log('injecting Web Worker for "' + t + '"'),
                  (this.workerContext = Ga())),
                (this.onwmsg = function(e) {
                  return n.onWorkerMessage(e);
                });
              var c = this.workerContext.worker;
              c.addEventListener('message', this.onwmsg),
                (c.onerror = function(e) {
                  var a = new Error(
                    e.message + '  (' + e.filename + ':' + e.lineno + ')'
                  );
                  (o.enableWorker = !1),
                    Bo.warn(
                      'Error in "' + t + '" Web Worker, fallback to inline'
                    ),
                    n.hls.trigger(xo.ERROR, {
                      type: Fo.OTHER_ERROR,
                      details: No.INTERNAL_EXCEPTION,
                      fatal: !1,
                      event: 'demuxerWorker',
                      error: a
                    });
                }),
                c.postMessage({
                  cmd: 'init',
                  typeSupported: d,
                  vendor: s,
                  id: t,
                  config: JSON.stringify(o)
                });
            } catch (e) {
              Bo.warn(
                'Error setting up "' + t + '" Web Worker, fallback to inline',
                e
              ),
                this.resetWorker(),
                (this.error = null),
                (this.transmuxer = new Bd(this.observer, d, o, s, t));
            }
            return;
          }
        }
        this.transmuxer = new Bd(this.observer, d, o, s, t);
      }
      var t = e.prototype;
      return (
        (t.resetWorker = function e() {
          if (this.workerContext) {
            var t = this.workerContext,
              a = t.worker,
              r = t.objectURL;
            r && self.URL.revokeObjectURL(r),
              a.removeEventListener('message', this.onwmsg),
              (a.onerror = null),
              a.terminate(),
              (this.workerContext = null);
          }
        }),
        (t.destroy = function e() {
          if (this.workerContext) this.resetWorker(), (this.onwmsg = void 0);
          else {
            var t = this.transmuxer;
            t && (t.destroy(), (this.transmuxer = null));
          }
          var a = this.observer;
          a && a.removeAllListeners(),
            (this.frag = null),
            (this.observer = null),
            (this.hls = null);
        }),
        (t.push = function c(e, t, a, r, n, o, i, d, s, l) {
          var u = this,
            g,
            f;
          s.transmuxing.start = self.performance.now();
          var p = this.transmuxer,
            m = o ? o.start : n.start,
            y = n.decryptdata,
            h = this.frag,
            T = !(h && n.cc === h.cc),
            E = !(h && s.level === h.level),
            v = h ? s.sn - h.sn : -1,
            S = this.part ? s.part - this.part.index : -1,
            L =
              0 === v &&
              1 < s.id &&
              s.id === (null == h ? void 0 : h.stats.chunkCount),
            A = !E && (1 === v || (0 === v && (1 === S || (L && 0 >= S)))),
            R = self.performance.now();
          (E || v || 0 === n.stats.parsing.start) &&
            (n.stats.parsing.start = R),
            o && (S || !A) && (o.stats.parsing.start = R);
          var k = !(
              h &&
              (null == (g = n.initSegment) ? void 0 : g.url) ===
                (null == (f = h.initSegment) ? void 0 : f.url)
            ),
            D = new Kd(T, A, d, E, m, k);
          if (!A || T || k) {
            Bo.log(
              '[transmuxer-interface, ' +
                n.type +
                ']: Starting new transmux session for sn: ' +
                s.sn +
                ' p: ' +
                s.part +
                ' level: ' +
                s.level +
                ' id: ' +
                s.id +
                '\n        discontinuity: ' +
                T +
                '\n        trackSwitch: ' +
                E +
                '\n        contiguous: ' +
                A +
                '\n        accurateTimeOffset: ' +
                d +
                '\n        timeOffset: ' +
                m +
                '\n        initSegmentChange: ' +
                k
            );
            var I = new Gd(a, r, t, i, l);
            this.configureTransmuxer(I);
          }
          if (((this.frag = n), (this.part = o), this.workerContext))
            this.workerContext.worker.postMessage(
              { cmd: 'demux', data: e, decryptdata: y, chunkMeta: s, state: D },
              e instanceof ArrayBuffer ? [e] : []
            );
          else if (p) {
            var b = p.push(e, y, s, D);
            Rr(b)
              ? ((p.async = !0),
                b
                  .then(function(e) {
                    u.handleTransmuxComplete(e);
                  })
                  .catch(function(e) {
                    u.transmuxerError(e, s, 'transmuxer-interface push error');
                  }))
              : ((p.async = !1), this.handleTransmuxComplete(b));
          }
        }),
        (t.flush = function t(e) {
          var a = this;
          e.transmuxing.start = self.performance.now();
          var r = this.transmuxer;
          if (this.workerContext)
            this.workerContext.worker.postMessage({
              cmd: 'flush',
              chunkMeta: e
            });
          else if (r) {
            var n = r.flush(e),
              o = Rr(n);
            o || r.async
              ? (!Rr(n) && (n = Promise.resolve(n)),
                n
                  .then(function(t) {
                    a.handleFlushResult(t, e);
                  })
                  .catch(function(t) {
                    a.transmuxerError(t, e, 'transmuxer-interface flush error');
                  }))
              : this.handleFlushResult(n, e);
          }
        }),
        (t.transmuxerError = function r(e, t, a) {
          this.hls &&
            ((this.error = e),
            this.hls.trigger(xo.ERROR, {
              type: Fo.MEDIA_ERROR,
              details: No.FRAG_PARSING_ERROR,
              chunkMeta: t,
              fatal: !1,
              error: e,
              err: e,
              reason: a
            }));
        }),
        (t.handleFlushResult = function a(e, t) {
          var r = this;
          e.forEach(function(e) {
            r.handleTransmuxComplete(e);
          }),
            this.onFlush(t);
        }),
        (t.onWorkerMessage = function t(e) {
          var a = e.data,
            r = this.hls;
          switch (a.event) {
            case 'init': {
              var n = null == (o = this.workerContext) ? void 0 : o.objectURL,
                o;
              n && self.URL.revokeObjectURL(n);
              break;
            }
            case 'transmuxComplete': {
              this.handleTransmuxComplete(a.data);
              break;
            }
            case 'flush': {
              this.onFlush(a.data);
              break;
            }
            case 'workerLog':
              Bo[a.data.logType] && Bo[a.data.logType](a.data.message);
              break;
            default: {
              (a.data = a.data || {}),
                (a.data.frag = this.frag),
                (a.data.id = this.id),
                r.trigger(a.event, a.data);
              break;
            }
          }
        }),
        (t.configureTransmuxer = function t(e) {
          var a = this.transmuxer;
          this.workerContext
            ? this.workerContext.worker.postMessage({
                cmd: 'configure',
                config: e
              })
            : a && a.configure(e);
        }),
        (t.handleTransmuxComplete = function t(e) {
          (e.chunkMeta.transmuxing.end = self.performance.now()),
            this.onTransmuxComplete(e);
        }),
        e
      );
    })(),
    jd = 2,
    zd = (function() {
      function e(e, t, a, r) {
        (this.config = void 0),
          (this.media = null),
          (this.fragmentTracker = void 0),
          (this.hls = void 0),
          (this.nudgeRetry = 0),
          (this.stallReported = !1),
          (this.stalled = null),
          (this.moved = !1),
          (this.seeking = !1),
          (this.config = e),
          (this.media = t),
          (this.fragmentTracker = a),
          (this.hls = r);
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          (this.media = null), (this.hls = this.fragmentTracker = null);
        }),
        (t.poll = function a(e, t) {
          var r = this.config,
            n = this.media,
            o = this.stalled;
          if (null !== n) {
            var i = n.currentTime,
              d = n.seeking,
              s = this.seeking && !d,
              l = !this.seeking && d;
            if (((this.seeking = d), i !== e)) {
              if (((this.moved = !0), null !== o)) {
                if (this.stallReported) {
                  var c = self.performance.now() - o;
                  Bo.warn(
                    'playback not stuck anymore @' +
                      i +
                      ', after ' +
                      S(c) +
                      'ms'
                  ),
                    (this.stallReported = !1);
                }
                (this.stalled = null), (this.nudgeRetry = 0);
              }
              return;
            }
            if (l || s) return void (this.stalled = null);
            if (
              (!n.paused || d) &&
              !n.ended &&
              0 !== n.playbackRate &&
              ed.getBuffered(n).length
            ) {
              var u = ed.bufferInfo(n, i, 0),
                g = 0 < u.len,
                f = u.nextStart || 0;
              if (g || f) {
                if (d) {
                  var p = u.len > jd,
                    m =
                      !f ||
                      (t && t.start <= i) ||
                      (f - i > jd &&
                        !this.fragmentTracker.getPartialFragment(i));
                  if (p || m) return;
                  this.moved = !1;
                }
                if (!this.moved && null !== this.stalled) {
                  var y = C(f, u.start || 0) - i,
                    h = this.hls.levels
                      ? this.hls.levels[this.hls.currentLevel]
                      : null,
                    T = null == h || null == (L = h.details) ? void 0 : L.live,
                    E = T ? 2 * h.details.targetduration : jd,
                    v = this.fragmentTracker.getPartialFragment(i),
                    L;
                  if (0 < y && (y <= E || v))
                    return void this._trySkipBufferHole(v);
                }
                var A = self.performance.now();
                if (null === o) return void (this.stalled = A);
                var R = A - o;
                if (!(!d && R >= 250 && (this._reportStall(u), !this.media))) {
                  var k = ed.bufferInfo(n, i, r.maxBufferHole);
                  this._tryFixBufferStall(k, R);
                }
              }
            }
          }
        }),
        (t._tryFixBufferStall = function a(e, t) {
          var r = this.config,
            n = this.fragmentTracker,
            o = this.media;
          if (null !== o) {
            var i = o.currentTime,
              d = n.getPartialFragment(i);
            if (d) {
              var s = this._trySkipBufferHole(d);
              if (s || !this.media) return;
            }
            (e.len > r.maxBufferHole ||
              (e.nextStart && e.nextStart - i < r.maxBufferHole)) &&
              t > 1e3 * r.highBufferWatchdogPeriod &&
              (Bo.warn('Trying to nudge playhead over buffer-hole'),
              (this.stalled = null),
              this._tryNudgeBuffer());
          }
        }),
        (t._reportStall = function t(e) {
          var a = this.hls,
            r = this.media,
            n = this.stallReported;
          if (!n && r) {
            this.stallReported = !0;
            var o = new Error(
              'Playback stalling at @' +
                r.currentTime +
                ' due to low buffer (' +
                JSON.stringify(e) +
                ')'
            );
            Bo.warn(o.message),
              a.trigger(xo.ERROR, {
                type: Fo.MEDIA_ERROR,
                details: No.BUFFER_STALLED_ERROR,
                fatal: !1,
                error: o,
                buffer: e.len
              });
          }
        }),
        (t._trySkipBufferHole = function t(e) {
          var a = this.config,
            r = this.hls,
            n = this.media;
          if (null === n) return 0;
          var o = n.currentTime,
            i = ed.bufferInfo(n, o, 0),
            d = o < i.start ? i.start : i.nextStart;
          if (d) {
            var s = i.len <= a.maxBufferHole,
              l = 0 < i.len && 1 > i.len && 3 > n.readyState,
              c = d - o;
            if (0 < c && (s || l)) {
              if (c > a.maxBufferHole) {
                var u = this.fragmentTracker,
                  g = !1;
                if (0 === o) {
                  var f = u.getAppendedFrag(0, Pi.MAIN);
                  f && d < f.end && (g = !0);
                }
                if (!g) {
                  var p = e || u.getAppendedFrag(o, Pi.MAIN);
                  if (p) {
                    for (var m = !1, y = p.end, h; y < d; )
                      if (((h = u.getPartialFragment(y)), h)) y += h.duration;
                      else {
                        m = !0;
                        break;
                      }
                    if (m) return 0;
                  }
                }
              }
              var T = C(d + 0.05, o + 0.1);
              if (
                (Bo.warn(
                  'skipping hole, adjusting currentTime from ' + o + ' to ' + T
                ),
                (this.moved = !0),
                (this.stalled = null),
                (n.currentTime = T),
                e && !e.gap)
              ) {
                var E = new Error(
                  'fragment loaded with buffer holes, seeking from ' +
                    o +
                    ' to ' +
                    T
                );
                r.trigger(xo.ERROR, {
                  type: Fo.MEDIA_ERROR,
                  details: No.BUFFER_SEEK_OVER_HOLE,
                  fatal: !1,
                  error: E,
                  reason: E.message,
                  frag: e
                });
              }
              return T;
            }
          }
          return 0;
        }),
        (t._tryNudgeBuffer = function e() {
          var t = this.config,
            a = this.hls,
            r = this.media,
            n = this.nudgeRetry;
          if (null !== r) {
            var o = r.currentTime;
            if ((this.nudgeRetry++, n < t.nudgeMaxRetry)) {
              var i = o + (n + 1) * t.nudgeOffset,
                d = new Error("Nudging 'currentTime' from " + o + ' to ' + i);
              Bo.warn(d.message),
                (r.currentTime = i),
                a.trigger(xo.ERROR, {
                  type: Fo.MEDIA_ERROR,
                  details: No.BUFFER_NUDGE_ON_STALL,
                  error: d,
                  fatal: !1
                });
            } else {
              var s = new Error(
                'Playhead still not moving while enough data buffered @' +
                  o +
                  ' after ' +
                  t.nudgeMaxRetry +
                  ' nudges'
              );
              Bo.error(s.message),
                a.trigger(xo.ERROR, {
                  type: Fo.MEDIA_ERROR,
                  details: No.BUFFER_STALLED_ERROR,
                  error: s,
                  fatal: !0
                });
            }
          }
        }),
        e
      );
    })(),
    Xd = (function(e) {
      function t(t, a, r) {
        var n;
        return (
          (n = e.call(this, t, a, r, '[stream-controller]', Pi.MAIN) || this),
          (n.audioCodecSwap = !1),
          (n.gapController = null),
          (n.level = -1),
          (n._forceStartLoad = !1),
          (n.altAudio = !1),
          (n.audioOnly = !1),
          (n.fragPlaying = null),
          (n.onvplaying = null),
          (n.onvseeked = null),
          (n.fragLastKbps = 0),
          (n.couldBacktrack = !1),
          (n.backtrackFragment = null),
          (n.audioCodecSwitch = !1),
          (n.videoBuffer = null),
          n._registerListeners(),
          n
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a._registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.on(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.on(xo.LEVEL_LOADING, this.onLevelLoading, this),
            t.on(xo.LEVEL_LOADED, this.onLevelLoaded, this),
            t.on(
              xo.FRAG_LOAD_EMERGENCY_ABORTED,
              this.onFragLoadEmergencyAborted,
              this
            ),
            t.on(xo.ERROR, this.onError, this),
            t.on(xo.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this),
            t.on(xo.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this),
            t.on(xo.BUFFER_CREATED, this.onBufferCreated, this),
            t.on(xo.BUFFER_FLUSHED, this.onBufferFlushed, this),
            t.on(xo.LEVELS_UPDATED, this.onLevelsUpdated, this),
            t.on(xo.FRAG_BUFFERED, this.onFragBuffered, this);
        }),
        (a._unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.off(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.off(xo.LEVEL_LOADED, this.onLevelLoaded, this),
            t.off(
              xo.FRAG_LOAD_EMERGENCY_ABORTED,
              this.onFragLoadEmergencyAborted,
              this
            ),
            t.off(xo.ERROR, this.onError, this),
            t.off(xo.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this),
            t.off(xo.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this),
            t.off(xo.BUFFER_CREATED, this.onBufferCreated, this),
            t.off(xo.BUFFER_FLUSHED, this.onBufferFlushed, this),
            t.off(xo.LEVELS_UPDATED, this.onLevelsUpdated, this),
            t.off(xo.FRAG_BUFFERED, this.onFragBuffered, this);
        }),
        (a.onHandlerDestroying = function e() {
          this._unregisterListeners(), this.onMediaDetaching();
        }),
        (a.startLoad = function t(e) {
          if (this.levels) {
            var a = this.lastCurrentTime,
              r = this.hls;
            if (
              (this.stopLoad(),
              this.setInterval(100),
              (this.level = -1),
              !this.startFragRequested)
            ) {
              var n = r.startLevel;
              -1 === n &&
                (r.config.testBandwidth && 1 < this.levels.length
                  ? ((n = 0), (this.bitrateTest = !0))
                  : (n = r.nextAutoLevel)),
                (this.level = r.nextLoadLevel = n),
                (this.loadedmetadata = !1);
            }
            0 < a &&
              -1 === e &&
              (this.log(
                'Override startPosition with lastCurrentTime @' + a.toFixed(3)
              ),
              (e = a)),
              (this.state = dd.IDLE),
              (this.nextLoadPosition = this.startPosition = this.lastCurrentTime = e),
              this.tick();
          } else (this._forceStartLoad = !0), (this.state = dd.STOPPED);
        }),
        (a.stopLoad = function t() {
          (this._forceStartLoad = !1), e.prototype.stopLoad.call(this);
        }),
        (a.doTick = function e() {
          switch (this.state) {
            case dd.WAITING_LEVEL: {
              var t = this.levels,
                a = this.level,
                r = null == t || null == (n = t[a]) ? void 0 : n.details,
                n;
              if (r && (!r.live || this.levelLastLoaded === this.level)) {
                if (this.waitForCdnTuneIn(r)) break;
                this.state = dd.IDLE;
                break;
              } else if (this.hls.nextLoadLevel !== this.level) {
                this.state = dd.IDLE;
                break;
              }
              break;
            }
            case dd.FRAG_LOADING_WAITING_RETRY: {
              var o = self.performance.now(),
                i = this.retryDate,
                d;
              (!i || o >= i || (null != (d = this.media) && d.seeking)) &&
                (this.resetStartWhenNotLoaded(this.level),
                (this.state = dd.IDLE));
            }
          }
          this.state === dd.IDLE && this.doTickIdle(), this.onTickEnd();
        }),
        (a.onTickEnd = function t() {
          e.prototype.onTickEnd.call(this),
            this.checkBuffer(),
            this.checkFragmentChanged();
        }),
        (a.doTickIdle = function e() {
          var t = this.hls,
            a = this.levelLastLoaded,
            r = this.levels,
            n = this.media,
            o = t.config,
            i = t.nextLoadLevel;
          if (
            null !== a &&
            (n || (!this.startFragRequested && o.startFragPrefetch)) &&
            !(this.altAudio && this.audioOnly) &&
            null != r &&
            r[i]
          ) {
            var d = r[i],
              s = this.getMainFwdBufferInfo();
            if (null !== s) {
              var l = this.getLevelDetails();
              if (l && this._streamEnded(s, l)) {
                var c = {};
                return (
                  this.altAudio && (c.type = 'video'),
                  this.hls.trigger(xo.BUFFER_EOS, c),
                  void (this.state = dd.ENDED)
                );
              }
              t.loadLevel !== i &&
                -1 === t.manualLevel &&
                this.log(
                  'Adapting to level ' + i + ' from level ' + this.level
                ),
                (this.level = t.nextLoadLevel = i);
              var u = d.details;
              if (
                !u ||
                this.state === dd.WAITING_LEVEL ||
                (u.live && this.levelLastLoaded !== i)
              )
                return (this.level = i), void (this.state = dd.WAITING_LEVEL);
              var g = s.len,
                f = this.getMaxBufferLength(d.maxBitrate);
              if (!(g >= f)) {
                this.backtrackFragment &&
                  this.backtrackFragment.start > s.end &&
                  (this.backtrackFragment = null);
                var p = this.backtrackFragment
                    ? this.backtrackFragment.start
                    : s.end,
                  m = this.getNextFragment(p, u);
                if (
                  this.couldBacktrack &&
                  !this.fragPrevious &&
                  m &&
                  'initSegment' !== m.sn &&
                  this.fragmentTracker.getState(m) !== qi.OK
                ) {
                  var y = (null == (E = this.backtrackFragment) ? m : E).sn,
                    h = y - u.startSN,
                    T = u.fragments[h - 1],
                    E;
                  T &&
                    m.cc === T.cc &&
                    ((m = T), this.fragmentTracker.removeFragment(T));
                } else
                  this.backtrackFragment &&
                    s.len &&
                    (this.backtrackFragment = null);
                if (m && this.isLoopLoading(m, p)) {
                  var v = m.gap;
                  if (!v) {
                    var S =
                        this.audioOnly && !this.altAudio ? Wo.AUDIO : Wo.VIDEO,
                      L =
                        (S === Wo.VIDEO
                          ? this.videoBuffer
                          : this.mediaBuffer) || this.media;
                    L && this.afterBufferFlushed(L, S, Pi.MAIN);
                  }
                  m = this.getNextFragmentLoopLoading(m, u, s, Pi.MAIN, f);
                }
                m &&
                  (m.initSegment &&
                    !m.initSegment.data &&
                    !this.bitrateTest &&
                    (m = m.initSegment),
                  this.loadFragment(m, d, p));
              }
            }
          }
        }),
        (a.loadFragment = function n(t, a, r) {
          var o = this.fragmentTracker.getState(t);
          (this.fragCurrent = t),
            o === qi.NOT_LOADED || o === qi.PARTIAL
              ? 'initSegment' === t.sn
                ? this._loadInitSegment(t, a)
                : this.bitrateTest
                ? (this.log(
                    'Fragment ' +
                      t.sn +
                      ' of level ' +
                      t.level +
                      ' is being downloaded to test bitrate and will not be buffered'
                  ),
                  this._loadBitrateTestFrag(t, a))
                : ((this.startFragRequested = !0),
                  e.prototype.loadFragment.call(this, t, a, r))
              : this.clearTrackerIfNeeded(t);
        }),
        (a.getBufferedFrag = function t(e) {
          return this.fragmentTracker.getBufferedFrag(e, Pi.MAIN);
        }),
        (a.followingBufferedFrag = function t(e) {
          return e ? this.getBufferedFrag(e.end + 0.5) : null;
        }),
        (a.immediateLevelSwitch = function e() {
          this.abortCurrentFrag(),
            this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
        }),
        (a.nextLevelSwitch = function e() {
          var t = this.levels,
            a = this.media;
          if (null != a && a.readyState) {
            var r = this.getAppendedFrag(a.currentTime),
              n;
            r && 1 < r.start && this.flushMainBuffer(0, r.start - 1);
            var o = this.getLevelDetails();
            if (null != o && o.live) {
              var i = this.getMainFwdBufferInfo();
              if (!i || i.len < 2 * o.targetduration) return;
            }
            if (!a.paused && t) {
              var d = this.hls.nextLoadLevel,
                s = t[d],
                l = this.fragLastKbps;
              n =
                l && this.fragCurrent
                  ? (this.fragCurrent.duration * s.maxBitrate) / (1e3 * l) + 1
                  : 0;
            } else n = 0;
            var c = this.getBufferedFrag(a.currentTime + n);
            if (c) {
              var u = this.followingBufferedFrag(c);
              if (u) {
                this.abortCurrentFrag();
                var g = u.maxStartPTS ? u.maxStartPTS : u.start,
                  f = u.duration,
                  p = C(
                    c.end,
                    g +
                      L(
                        C(f - this.config.maxFragLookUpTolerance, 0.5 * f),
                        0.75 * f
                      )
                  );
                this.flushMainBuffer(p, Number.POSITIVE_INFINITY);
              }
            }
          }
        }),
        (a.abortCurrentFrag = function e() {
          var t = this.fragCurrent;
          switch (
            ((this.fragCurrent = null),
            (this.backtrackFragment = null),
            t && (t.abortRequests(), this.fragmentTracker.removeFragment(t)),
            this.state)
          ) {
            case dd.KEY_LOADING:
            case dd.FRAG_LOADING:
            case dd.FRAG_LOADING_WAITING_RETRY:
            case dd.PARSING:
            case dd.PARSED:
              this.state = dd.IDLE;
          }
          this.nextLoadPosition = this.getLoadPosition();
        }),
        (a.flushMainBuffer = function r(t, a) {
          e.prototype.flushMainBuffer.call(
            this,
            t,
            a,
            this.altAudio ? 'video' : null
          );
        }),
        (a.onMediaAttached = function r(t, a) {
          e.prototype.onMediaAttached.call(this, t, a);
          var n = a.media;
          (this.onvplaying = this.onMediaPlaying.bind(this)),
            (this.onvseeked = this.onMediaSeeked.bind(this)),
            n.addEventListener('playing', this.onvplaying),
            n.addEventListener('seeked', this.onvseeked),
            (this.gapController = new zd(
              this.config,
              n,
              this.fragmentTracker,
              this.hls
            ));
        }),
        (a.onMediaDetaching = function t() {
          var a = this.media;
          a &&
            this.onvplaying &&
            this.onvseeked &&
            (a.removeEventListener('playing', this.onvplaying),
            a.removeEventListener('seeked', this.onvseeked),
            (this.onvplaying = this.onvseeked = null),
            (this.videoBuffer = null)),
            (this.fragPlaying = null),
            this.gapController &&
              (this.gapController.destroy(), (this.gapController = null)),
            e.prototype.onMediaDetaching.call(this);
        }),
        (a.onMediaPlaying = function e() {
          this.tick();
        }),
        (a.onMediaSeeked = function e() {
          var t = this.media,
            a = t ? t.currentTime : null;
          _o(a) && this.log('Media seeked to ' + a.toFixed(3));
          var r = this.getMainFwdBufferInfo();
          return null === r || 0 === r.len
            ? void this.warn(
                'Main forward buffer length on "seeked" event ' +
                  (r ? r.len : 'empty') +
                  ')'
              )
            : void this.tick();
        }),
        (a.onManifestLoading = function e() {
          this.log('Trigger BUFFER_RESET'),
            this.hls.trigger(xo.BUFFER_RESET, void 0),
            this.fragmentTracker.removeAllFragments(),
            (this.couldBacktrack = !1),
            (this.startPosition = this.lastCurrentTime = 0),
            (this.levels = this.fragPlaying = this.backtrackFragment = null),
            (this.altAudio = this.audioOnly = !1);
        }),
        (a.onManifestParsed = function a(e, t) {
          var r = !1,
            n = !1,
            o;
          t.levels.forEach(function(e) {
            (o = e.audioCodec),
              o &&
                (-1 !== o.indexOf('mp4a.40.2') && (r = !0),
                -1 !== o.indexOf('mp4a.40.5') && (n = !0));
          }),
            (this.audioCodecSwitch = r && n && !Ba()),
            this.audioCodecSwitch &&
              this.log(
                'Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC'
              ),
            (this.levels = t.levels),
            (this.startFragRequested = !1);
        }),
        (a.onLevelLoading = function a(e, t) {
          var r = this.levels;
          if (r && this.state === dd.IDLE) {
            var n = r[t.level];
            (!n.details ||
              (n.details.live && this.levelLastLoaded !== t.level) ||
              this.waitForCdnTuneIn(n.details)) &&
              (this.state = dd.WAITING_LEVEL);
          }
        }),
        (a.onLevelLoaded = function a(e, t) {
          var r = this.levels,
            n = t.level,
            o = t.details,
            i = o.totalduration,
            d;
          if (!r)
            return void this.warn('Levels were reset while loading level ' + n);
          this.log(
            'Level ' +
              n +
              ' loaded [' +
              o.startSN +
              ',' +
              o.endSN +
              ']' +
              (o.lastPartSn
                ? '[part-' + o.lastPartSn + '-' + o.lastPartIndex + ']'
                : '') +
              ', cc [' +
              o.startCC +
              ', ' +
              o.endCC +
              '] duration:' +
              i
          );
          var s = r[n],
            l = this.fragCurrent;
          l &&
            (this.state === dd.FRAG_LOADING ||
              this.state === dd.FRAG_LOADING_WAITING_RETRY) &&
            (l.level !== t.level || l.urlId !== s.urlId) &&
            l.loader &&
            this.abortCurrentFrag();
          var c = 0;
          if (o.live || (null != (d = s.details) && d.live)) {
            if (
              (o.fragments[0] || (o.deltaUpdateFailed = !0),
              o.deltaUpdateFailed)
            )
              return;
            c = this.alignPlaylists(o, s.details);
          }
          if (
            ((s.details = o),
            (this.levelLastLoaded = n),
            this.hls.trigger(xo.LEVEL_UPDATED, { details: o, level: n }),
            this.state === dd.WAITING_LEVEL)
          ) {
            if (this.waitForCdnTuneIn(o)) return;
            this.state = dd.IDLE;
          }
          this.startFragRequested
            ? o.live && this.synchronizeToLiveEdge(o)
            : this.setStartPosition(o, c),
            this.tick();
        }),
        (a._handleFragmentLoadProgress = function t(e) {
          var a = e.frag,
            r = e.part,
            n = e.payload,
            o = this.levels,
            i;
          if (!o)
            return void this.warn(
              'Levels were reset while fragment load was in progress. Fragment ' +
                a.sn +
                ' of level ' +
                a.level +
                ' will not be buffered'
            );
          var d = o[a.level],
            s = d.details;
          if (!s)
            return (
              this.warn(
                'Dropping fragment ' +
                  a.sn +
                  ' of level ' +
                  a.level +
                  ' after level details were reset'
              ),
              void this.fragmentTracker.removeFragment(a)
            );
          var l = d.videoCodec,
            c = s.PTSKnown || !s.live,
            u = null == (i = a.initSegment) ? void 0 : i.data,
            g = this._getAudioCodec(d),
            f = (this.transmuxer =
              this.transmuxer ||
              new qd(
                this.hls,
                Pi.MAIN,
                this._handleTransmuxComplete.bind(this),
                this._handleTransmuxerFlush.bind(this)
              )),
            p = r ? r.index : -1,
            m = -1 !== p,
            y = new td(a.level, a.sn, a.stats.chunkCount, n.byteLength, p, m),
            h = this.initPTS[a.cc];
          f.push(n, u, g, l, a, r, s.totalduration, c, y, h);
        }),
        (a.onAudioTrackSwitching = function a(e, t) {
          var r = this.altAudio,
            n = !!t.url;
          if (!n) {
            if (this.mediaBuffer !== this.media) {
              this.log(
                'Switching on main audio, use media.buffered to schedule main fragment loading'
              ),
                (this.mediaBuffer = this.media);
              var o = this.fragCurrent;
              o &&
                (this.log(
                  'Switching to main audio track, cancel main fragment load'
                ),
                o.abortRequests(),
                this.fragmentTracker.removeFragment(o)),
                this.resetTransmuxer(),
                this.resetLoadingState();
            } else this.audioOnly && this.resetTransmuxer();
            var i = this.hls;
            r &&
              (i.trigger(xo.BUFFER_FLUSHING, {
                startOffset: 0,
                endOffset: T,
                type: null
              }),
              this.fragmentTracker.removeAllFragments()),
              i.trigger(xo.AUDIO_TRACK_SWITCHED, t);
          }
        }),
        (a.onAudioTrackSwitched = function a(e, t) {
          var r = t.id,
            n = !!this.hls.audioTracks[r].url;
          if (n) {
            var o = this.videoBuffer;
            o &&
              this.mediaBuffer !== o &&
              (this.log(
                'Switching on alternate audio, use video.buffered to schedule main fragment loading'
              ),
              (this.mediaBuffer = o));
          }
          (this.altAudio = n), this.tick();
        }),
        (a.onBufferCreated = function a(e, t) {
          var r = t.tracks,
            n = !1,
            o,
            i;
          for (var d in r) {
            var s = r[d];
            if ('main' !== s.id) n = !0;
            else if (((i = d), (o = s), 'video' === d)) {
              var l = r[d];
              l && (this.videoBuffer = l.buffer);
            }
          }
          n && o
            ? (this.log(
                'Alternate track found, use ' +
                  i +
                  '.buffered to schedule main fragment loading'
              ),
              (this.mediaBuffer = o.buffer))
            : (this.mediaBuffer = this.media);
        }),
        (a.onFragBuffered = function a(e, t) {
          var r = t.frag,
            n = t.part;
          if (!(r && r.type !== Pi.MAIN)) {
            if (this.fragContextChanged(r))
              return (
                this.warn(
                  'Fragment ' +
                    r.sn +
                    (n ? ' p: ' + n.index : '') +
                    ' of level ' +
                    r.level +
                    ' finished buffering, but was aborted. state: ' +
                    this.state
                ),
                void (this.state === dd.PARSED && (this.state = dd.IDLE))
              );
            var o = n ? n.stats : r.stats;
            (this.fragLastKbps = S(
              (8 * o.total) / (o.buffering.end - o.loading.first)
            )),
              'initSegment' !== r.sn && (this.fragPrevious = r),
              this.fragBufferedComplete(r, n);
          }
        }),
        (a.onError = function a(e, t) {
          var r;
          if (t.fatal) return void (this.state = dd.ERROR);
          switch (t.details) {
            case No.FRAG_GAP:
            case No.FRAG_PARSING_ERROR:
            case No.FRAG_DECRYPT_ERROR:
            case No.FRAG_LOAD_ERROR:
            case No.FRAG_LOAD_TIMEOUT:
            case No.KEY_LOAD_ERROR:
            case No.KEY_LOAD_TIMEOUT:
              this.onFragmentOrKeyLoadError(Pi.MAIN, t);
              break;
            case No.LEVEL_LOAD_ERROR:
            case No.LEVEL_LOAD_TIMEOUT:
            case No.LEVEL_PARSING_ERROR:
              t.levelRetry ||
                this.state !== dd.WAITING_LEVEL ||
                (null == (r = t.context) ? void 0 : r.type) !== Ci.LEVEL ||
                (this.state = dd.IDLE);
              break;
            case No.BUFFER_FULL_ERROR:
              if (!t.parent || 'main' !== t.parent) return;
              this.reduceLengthAndFlushBuffer(t) &&
                this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
              break;
            case No.INTERNAL_EXCEPTION:
              this.recoverWorkerError(t);
          }
        }),
        (a.checkBuffer = function e() {
          var t = this.media,
            a = this.gapController;
          if (t && a && t.readyState) {
            if (this.loadedmetadata || !ed.getBuffered(t).length) {
              var r = this.state === dd.IDLE ? null : this.fragCurrent;
              a.poll(this.lastCurrentTime, r);
            }
            this.lastCurrentTime = t.currentTime;
          }
        }),
        (a.onFragLoadEmergencyAborted = function e() {
          (this.state = dd.IDLE),
            this.loadedmetadata ||
              ((this.startFragRequested = !1),
              (this.nextLoadPosition = this.startPosition)),
            this.tickImmediate();
        }),
        (a.onBufferFlushed = function a(e, t) {
          var r = t.type;
          if (r !== Wo.AUDIO || (this.audioOnly && !this.altAudio)) {
            var n =
              (r === Wo.VIDEO ? this.videoBuffer : this.mediaBuffer) ||
              this.media;
            this.afterBufferFlushed(n, r, Pi.MAIN);
          }
        }),
        (a.onLevelsUpdated = function a(e, t) {
          this.levels = t.levels;
        }),
        (a.swapAudioCodec = function e() {
          this.audioCodecSwap = !this.audioCodecSwap;
        }),
        (a.seekToStartPos = function e() {
          var t = this.media;
          if (t) {
            var a = t.currentTime,
              r = this.startPosition;
            if (0 <= r && a < r) {
              if (t.seeking)
                return void this.log(
                  'could not seek to ' + r + ', already seeking at ' + a
                );
              var n = ed.getBuffered(t),
                o = n.length ? n.start(0) : 0,
                i = o - r;
              0 < i &&
                (i < this.config.maxBufferHole ||
                  i < this.config.maxFragLookUpTolerance) &&
                (this.log(
                  'adjusting start position by ' + i + ' to match buffer start'
                ),
                (r += i),
                (this.startPosition = r)),
                this.log(
                  'seek to target start position ' +
                    r +
                    ' from current time ' +
                    a
                ),
                (t.currentTime = r);
            }
          }
        }),
        (a._getAudioCodec = function t(e) {
          var a = this.config.defaultAudioCodec || e.audioCodec;
          return (
            this.audioCodecSwap &&
              a &&
              (this.log('Swapping audio codec'),
              (a = -1 === a.indexOf('mp4a.40.5') ? 'mp4a.40.5' : 'mp4a.40.2')),
            a
          );
        }),
        (a._loadBitrateTestFrag = function a(e, t) {
          var r = this;
          (e.bitrateTest = !0),
            this._doFragLoad(e, t).then(function(a) {
              var n = r.hls;
              if (a && !r.fragContextChanged(e)) {
                (t.fragmentError = 0),
                  (r.state = dd.IDLE),
                  (r.startFragRequested = !1),
                  (r.bitrateTest = !1);
                var o = e.stats;
                (o.parsing.start = o.parsing.end = o.buffering.start = o.buffering.end = self.performance.now()),
                  n.trigger(xo.FRAG_LOADED, a),
                  (e.bitrateTest = !1);
              }
            });
        }),
        (a._handleTransmuxComplete = function t(e) {
          var a = 'main',
            r = this.hls,
            n = e.remuxResult,
            o = e.chunkMeta,
            i = this.getCurrentContext(o),
            d;
          if (!i) return void this.resetWhenMissingContext(o);
          var s = i.frag,
            l = i.part,
            c = i.level,
            u = n.video,
            g = n.text,
            f = n.id3,
            p = n.initSegment,
            m = c.details,
            y = this.altAudio ? void 0 : n.audio;
          if (this.fragContextChanged(s))
            return void this.fragmentTracker.removeFragment(s);
          if (((this.state = dd.PARSING), p)) {
            if (null != p && p.tracks) {
              var h = s.initSegment || s;
              this._bufferInitSegment(c, p.tracks, h, o),
                r.trigger(xo.FRAG_PARSING_INIT_SEGMENT, {
                  frag: h,
                  id: a,
                  tracks: p.tracks
                });
            }
            var T = p.initPTS,
              E = p.timescale;
            _o(T) &&
              ((this.initPTS[s.cc] = { baseTime: T, timescale: E }),
              r.trigger(xo.INIT_PTS_FOUND, {
                frag: s,
                id: a,
                initPTS: T,
                timescale: E
              }));
          }
          if (u && m && 'initSegment' !== s.sn) {
            var v = m.fragments[s.sn - 1 - m.startSN],
              S = s.sn === m.startSN,
              L = !v || s.cc > v.cc;
            if (!1 !== n.independent) {
              var A = u.startPTS,
                R = u.endPTS,
                k = u.startDTS,
                D = u.endDTS;
              if (l)
                l.elementaryStreams[u.type] = {
                  startPTS: A,
                  endPTS: R,
                  startDTS: k,
                  endDTS: D
                };
              else if (
                (u.firstKeyFrame &&
                  u.independent &&
                  1 === o.id &&
                  !L &&
                  (this.couldBacktrack = !0),
                u.dropped && u.independent)
              ) {
                var I = this.getMainFwdBufferInfo(),
                  b =
                    (I ? I.end : this.getLoadPosition()) +
                    this.config.maxBufferHole,
                  C = u.firstKeyFramePTS ? u.firstKeyFramePTS : A;
                if (!S && b < C - this.config.maxBufferHole && !L)
                  return void this.backtrack(s);
                L && (s.gap = !0),
                  s.setElementaryStreamInfo(u.type, s.start, R, s.start, D, !0);
              }
              s.setElementaryStreamInfo(u.type, A, R, k, D),
                this.backtrackFragment && (this.backtrackFragment = s),
                this.bufferFragmentData(u, s, l, o, S || L);
            } else if (S || L) s.gap = !0;
            else return void this.backtrack(s);
          }
          if (y) {
            var P = y.startPTS,
              _ = y.endPTS,
              x = y.startDTS,
              F = y.endDTS;
            l &&
              (l.elementaryStreams[Wo.AUDIO] = {
                startPTS: P,
                endPTS: _,
                startDTS: x,
                endDTS: F
              }),
              s.setElementaryStreamInfo(Wo.AUDIO, P, _, x, F),
              this.bufferFragmentData(y, s, l, o);
          }
          if (m && null != f && null != (d = f.samples) && d.length) {
            var N = { id: a, frag: s, details: m, samples: f.samples };
            r.trigger(xo.FRAG_PARSING_METADATA, N);
          }
          if (m && g) {
            var O = { id: a, frag: s, details: m, samples: g.samples };
            r.trigger(xo.FRAG_PARSING_USERDATA, O);
          }
        }),
        (a._bufferInitSegment = function n(e, t, a, r) {
          var o = this;
          if (this.state === dd.PARSING) {
            (this.audioOnly = !!t.audio && !t.video),
              this.altAudio && !this.audioOnly && delete t.audio;
            var i = t.audio,
              d = t.video,
              s = t.audiovideo;
            if (i) {
              var l = e.audioCodec,
                c = navigator.userAgent.toLowerCase();
              this.audioCodecSwitch &&
                (l &&
                  (-1 === l.indexOf('mp4a.40.5')
                    ? (l = 'mp4a.40.5')
                    : (l = 'mp4a.40.2')),
                1 !== i.metadata.channelCount &&
                  -1 === c.indexOf('firefox') &&
                  (l = 'mp4a.40.5')),
                -1 !== c.indexOf('android') &&
                  'audio/mpeg' !== i.container &&
                  ((l = 'mp4a.40.2'),
                  this.log('Android: force audio codec to ' + l)),
                e.audioCodec &&
                  e.audioCodec !== l &&
                  this.log(
                    'Swapping manifest audio codec "' +
                      e.audioCodec +
                      '" for "' +
                      l +
                      '"'
                  ),
                (i.levelCodec = l),
                (i.id = 'main'),
                this.log(
                  'Init audio buffer, container:' +
                    i.container +
                    ', codecs[selected/level/parsed]=[' +
                    (l || '') +
                    '/' +
                    (e.audioCodec || '') +
                    '/' +
                    i.codec +
                    ']'
                );
            }
            d &&
              ((d.levelCodec = e.videoCodec),
              (d.id = 'main'),
              this.log(
                'Init video buffer, container:' +
                  d.container +
                  ', codecs[level/parsed]=[' +
                  (e.videoCodec || '') +
                  '/' +
                  d.codec +
                  ']'
              )),
              s &&
                this.log(
                  'Init audiovideo buffer, container:' +
                    s.container +
                    ', codecs[level/parsed]=[' +
                    (e.attrs.CODECS || '') +
                    '/' +
                    s.codec +
                    ']'
                ),
              this.hls.trigger(xo.BUFFER_CODECS, t),
              Object.keys(t).forEach(function(e) {
                var n = t[e],
                  i = n.initSegment;
                null != i &&
                  i.byteLength &&
                  o.hls.trigger(xo.BUFFER_APPENDING, {
                    type: e,
                    data: i,
                    frag: a,
                    part: null,
                    chunkMeta: r,
                    parent: a.type
                  });
              }),
              this.tick();
          }
        }),
        (a.getMainFwdBufferInfo = function e() {
          return this.getFwdBufferInfo(
            this.mediaBuffer ? this.mediaBuffer : this.media,
            Pi.MAIN
          );
        }),
        (a.backtrack = function t(e) {
          (this.couldBacktrack = !0),
            (this.backtrackFragment = e),
            this.resetTransmuxer(),
            this.flushBufferGap(e),
            this.fragmentTracker.removeFragment(e),
            (this.fragPrevious = null),
            (this.nextLoadPosition = e.start),
            (this.state = dd.IDLE);
        }),
        (a.checkFragmentChanged = function e() {
          var t = this.media,
            a = null;
          if (t && 1 < t.readyState && !1 === t.seeking) {
            var r = t.currentTime;
            if (
              (ed.isBuffered(t, r)
                ? (a = this.getAppendedFrag(r))
                : ed.isBuffered(t, r + 0.1) &&
                  (a = this.getAppendedFrag(r + 0.1)),
              a)
            ) {
              this.backtrackFragment = null;
              var n = this.fragPlaying,
                o = a.level;
              (n && a.sn === n.sn && n.level === o && a.urlId === n.urlId) ||
                ((this.fragPlaying = a),
                this.hls.trigger(xo.FRAG_CHANGED, { frag: a }),
                (!n || n.level !== o) &&
                  this.hls.trigger(xo.LEVEL_SWITCHED, { level: o }));
            }
          }
        }),
        N(t, [
          {
            key: 'nextLevel',
            get: function e() {
              var t = this.nextBufferedFrag;
              return t ? t.level : -1;
            }
          },
          {
            key: 'currentFrag',
            get: function e() {
              var t = this.media;
              return t
                ? this.fragPlaying || this.getAppendedFrag(t.currentTime)
                : null;
            }
          },
          {
            key: 'currentProgramDateTime',
            get: function e() {
              var t = this.media;
              if (t) {
                var a = t.currentTime,
                  r = this.currentFrag;
                if (r && _o(a) && _o(r.programDateTime)) {
                  var n = r.programDateTime + 1e3 * (a - r.start);
                  return new Date(n);
                }
              }
              return null;
            }
          },
          {
            key: 'currentLevel',
            get: function e() {
              var t = this.currentFrag;
              return t ? t.level : -1;
            }
          },
          {
            key: 'nextBufferedFrag',
            get: function e() {
              var t = this.currentFrag;
              return t ? this.followingBufferedFrag(t) : null;
            }
          },
          {
            key: 'forceStartLoad',
            get: function e() {
              return this._forceStartLoad;
            }
          }
        ]),
        t
      );
    })(sd),
    Qd = (function() {
      function e(e, t, a) {
        var r = Math.log;
        void 0 === t && (t = 0),
          void 0 === a && (a = 0),
          (this.halfLife = void 0),
          (this.alpha_ = void 0),
          (this.estimate_ = void 0),
          (this.totalWeight_ = void 0),
          (this.halfLife = e),
          (this.alpha_ = e ? u(r(0.5) / e) : 0),
          (this.estimate_ = t),
          (this.totalWeight_ = a);
      }
      var t = e.prototype;
      return (
        (t.sample = function a(e, t) {
          var r = I(this.alpha_, e);
          (this.estimate_ = t * (1 - r) + r * this.estimate_),
            (this.totalWeight_ += e);
        }),
        (t.getTotalWeight = function e() {
          return this.totalWeight_;
        }),
        (t.getEstimate = function e() {
          if (this.alpha_) {
            var t = 1 - I(this.alpha_, this.totalWeight_);
            if (t) return this.estimate_ / t;
          }
          return this.estimate_;
        }),
        e
      );
    })(),
    $d = (function() {
      function e(e, t, a, r) {
        void 0 === r && (r = 100),
          (this.defaultEstimate_ = void 0),
          (this.minWeight_ = void 0),
          (this.minDelayMs_ = void 0),
          (this.slow_ = void 0),
          (this.fast_ = void 0),
          (this.defaultTTFB_ = void 0),
          (this.ttfb_ = void 0),
          (this.defaultEstimate_ = a),
          (this.minWeight_ = 0.001),
          (this.minDelayMs_ = 50),
          (this.slow_ = new Qd(e)),
          (this.fast_ = new Qd(t)),
          (this.defaultTTFB_ = r),
          (this.ttfb_ = new Qd(e));
      }
      var t = e.prototype;
      return (
        (t.update = function a(e, t) {
          var r = this.slow_,
            n = this.fast_,
            o = this.ttfb_;
          r.halfLife !== e &&
            (this.slow_ = new Qd(e, r.getEstimate(), r.getTotalWeight())),
            n.halfLife !== t &&
              (this.fast_ = new Qd(t, n.getEstimate(), n.getTotalWeight())),
            o.halfLife !== e &&
              (this.ttfb_ = new Qd(e, o.getEstimate(), o.getTotalWeight()));
        }),
        (t.sample = function a(e, t) {
          e = C(e, this.minDelayMs_);
          var r = 8 * t,
            n = e / 1e3,
            o = r / n;
          this.fast_.sample(n, o), this.slow_.sample(n, o);
        }),
        (t.sampleTTFB = function t(e) {
          var a = Math.sqrt,
            r = e / 1e3,
            n = a(2) * u(-I(r, 2) / 2);
          this.ttfb_.sample(n, C(e, 5));
        }),
        (t.canEstimate = function e() {
          return this.fast_.getTotalWeight() >= this.minWeight_;
        }),
        (t.getEstimate = function e() {
          return this.canEstimate()
            ? L(this.fast_.getEstimate(), this.slow_.getEstimate())
            : this.defaultEstimate_;
        }),
        (t.getEstimateTTFB = function e() {
          return this.ttfb_.getTotalWeight() >= this.minWeight_
            ? this.ttfb_.getEstimate()
            : this.defaultTTFB_;
        }),
        (t.destroy = function e() {}),
        e
      );
    })(),
    Zd = (function() {
      function e(e) {
        (this.hls = void 0),
          (this.lastLevelLoadSec = 0),
          (this.lastLoadedFragLevel = 0),
          (this._nextAutoLevel = -1),
          (this.timer = -1),
          (this.onCheck = this._abandonRulesCheck.bind(this)),
          (this.fragCurrent = null),
          (this.partCurrent = null),
          (this.bitrateTestDelay = 0),
          (this.bwEstimator = void 0),
          (this.hls = e);
        var t = e.config;
        (this.bwEstimator = new $d(
          t.abrEwmaSlowVoD,
          t.abrEwmaFastVoD,
          t.abrEwmaDefaultEstimate
        )),
          this.registerListeners();
      }
      var t = e.prototype;
      return (
        (t.registerListeners = function e() {
          var t = this.hls;
          t.on(xo.FRAG_LOADING, this.onFragLoading, this),
            t.on(xo.FRAG_LOADED, this.onFragLoaded, this),
            t.on(xo.FRAG_BUFFERED, this.onFragBuffered, this),
            t.on(xo.LEVEL_SWITCHING, this.onLevelSwitching, this),
            t.on(xo.LEVEL_LOADED, this.onLevelLoaded, this);
        }),
        (t.unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.FRAG_LOADING, this.onFragLoading, this),
            t.off(xo.FRAG_LOADED, this.onFragLoaded, this),
            t.off(xo.FRAG_BUFFERED, this.onFragBuffered, this),
            t.off(xo.LEVEL_SWITCHING, this.onLevelSwitching, this),
            t.off(xo.LEVEL_LOADED, this.onLevelLoaded, this);
        }),
        (t.destroy = function e() {
          this.unregisterListeners(),
            this.clearTimer(),
            (this.hls = this.onCheck = null),
            (this.fragCurrent = this.partCurrent = null);
        }),
        (t.onFragLoading = function a(e, t) {
          var r = t.frag,
            n;
          this.ignoreFragment(r) ||
            ((this.fragCurrent = r),
            (this.partCurrent = null == (n = t.part) ? null : n),
            this.clearTimer(),
            (this.timer = self.setInterval(this.onCheck, 100)));
        }),
        (t.onLevelSwitching = function a(e, t) {
          this.clearTimer();
        }),
        (t.getTimeToLoadFrag = function n(e, t, a, r) {
          var o = e + a / t,
            i = r ? this.lastLevelLoadSec : 0;
          return o + i;
        }),
        (t.onLevelLoaded = function a(e, t) {
          var r = this.hls.config,
            n = t.stats,
            o = n.total,
            i = n.bwEstimate;
          _o(o) && _o(i) && (this.lastLevelLoadSec = (8 * o) / i),
            t.details.live
              ? this.bwEstimator.update(r.abrEwmaSlowLive, r.abrEwmaFastLive)
              : this.bwEstimator.update(r.abrEwmaSlowVoD, r.abrEwmaFastVoD);
        }),
        (t._abandonRulesCheck = function e() {
          var t = this.fragCurrent,
            a = this.partCurrent,
            r = this.hls,
            n = r.autoLevelEnabled,
            o = r.media;
          if (t && o) {
            var i = performance.now(),
              d = a ? a.stats : t.stats,
              s = a ? a.duration : t.duration,
              l = i - d.loading.start;
            if (
              d.aborted ||
              (d.loaded && d.loaded === d.total) ||
              0 === t.level
            )
              return this.clearTimer(), void (this._nextAutoLevel = -1);
            if (n && !o.paused && o.playbackRate && o.readyState) {
              var c = r.mainForwardBufferInfo;
              if (null !== c) {
                var u = this.bwEstimator.getEstimateTTFB(),
                  g = R(o.playbackRate);
                if (!(l <= C(u, 1e3 * (s / (2 * g))))) {
                  var f = c.len / g;
                  if (!(f >= (2 * s) / g)) {
                    var p = d.loading.first
                        ? d.loading.first - d.loading.start
                        : -1,
                      m = d.loaded && -1 < p,
                      y = this.bwEstimator.getEstimate(),
                      h = r.levels,
                      E = r.minAutoLevel,
                      v = h[t.level],
                      A = d.total || C(d.loaded, S((s * v.maxBitrate) / 8)),
                      k = l - p;
                    1 > k && m && (k = L(l, (8 * d.loaded) / y));
                    var D = m ? (1e3 * d.loaded) / k : 0,
                      I = D ? (A - d.loaded) / D : (8 * A) / y + u / 1e3;
                    if (!(I <= f)) {
                      var b = D ? 8 * D : y,
                        P = T,
                        _;
                      for (_ = t.level - 1; _ > E; _--) {
                        var x = h[_].maxBitrate;
                        if (
                          ((P = this.getTimeToLoadFrag(
                            u / 1e3,
                            b,
                            s * x,
                            !h[_].details
                          )),
                          P < f)
                        )
                          break;
                      }
                      P >= I ||
                        P > 10 * s ||
                        ((r.nextLoadLevel = _),
                        m
                          ? this.bwEstimator.sample(l - L(u, p), d.loaded)
                          : this.bwEstimator.sampleTTFB(l),
                        this.clearTimer(),
                        Bo.warn(
                          '[abr] Fragment ' +
                            t.sn +
                            (a ? ' part ' + a.index : '') +
                            ' of level ' +
                            t.level +
                            ' is loading too slowly;\n      Time to underbuffer: ' +
                            f.toFixed(3) +
                            ' s\n      Estimated load time for current fragment: ' +
                            I.toFixed(3) +
                            ' s\n      Estimated load time for down switch fragment: ' +
                            P.toFixed(3) +
                            ' s\n      TTFB estimate: ' +
                            p +
                            '\n      Current BW estimate: ' +
                            (_o(y) ? (y / 1024).toFixed(3) : 'Unknown') +
                            ' Kb/s\n      New BW estimate: ' +
                            (this.bwEstimator.getEstimate() / 1024).toFixed(3) +
                            ' Kb/s\n      Aborting and switching to level ' +
                            _
                        ),
                        t.loader &&
                          ((this.fragCurrent = this.partCurrent = null),
                          t.abortRequests()),
                        r.trigger(xo.FRAG_LOAD_EMERGENCY_ABORTED, {
                          frag: t,
                          part: a,
                          stats: d
                        }));
                    }
                  }
                }
              }
            }
          }
        }),
        (t.onFragLoaded = function a(e, t) {
          var r = t.frag,
            n = t.part,
            o = n ? n.stats : r.stats;
          if (
            (r.type === Pi.MAIN &&
              this.bwEstimator.sampleTTFB(o.loading.first - o.loading.start),
            !this.ignoreFragment(r))
          ) {
            if (
              (this.clearTimer(),
              (this.lastLoadedFragLevel = r.level),
              (this._nextAutoLevel = -1),
              this.hls.config.abrMaxWithRealBitrate)
            ) {
              var i = n ? n.duration : r.duration,
                d = this.hls.levels[r.level],
                s = (d.loaded ? d.loaded.bytes : 0) + o.loaded,
                l = (d.loaded ? d.loaded.duration : 0) + i;
              (d.loaded = { bytes: s, duration: l }),
                (d.realBitrate = S((8 * s) / l));
            }
            if (r.bitrateTest) {
              var c = { stats: o, frag: r, part: n, id: r.type };
              this.onFragBuffered(xo.FRAG_BUFFERED, c), (r.bitrateTest = !1);
            }
          }
        }),
        (t.onFragBuffered = function a(e, t) {
          var r = t.frag,
            n = t.part,
            o = null != n && n.stats.loaded ? n.stats : r.stats;
          if (!o.aborted && !this.ignoreFragment(r)) {
            var i =
              o.parsing.end -
              o.loading.start -
              L(
                o.loading.first - o.loading.start,
                this.bwEstimator.getEstimateTTFB()
              );
            this.bwEstimator.sample(i, o.loaded),
              (o.bwEstimate = this.bwEstimator.getEstimate()),
              (this.bitrateTestDelay = r.bitrateTest ? i / 1e3 : 0);
          }
        }),
        (t.ignoreFragment = function t(e) {
          return e.type !== Pi.MAIN || 'initSegment' === e.sn;
        }),
        (t.clearTimer = function e() {
          self.clearInterval(this.timer);
        }),
        (t.getNextABRAutoLevel = function e() {
          var t = this.fragCurrent,
            a = this.partCurrent,
            r = this.hls,
            n = r.maxAutoLevel,
            o = r.config,
            i = r.minAutoLevel,
            d = r.media,
            s = a ? a.duration : t ? t.duration : 0,
            l = d && 0 !== d.playbackRate ? R(d.playbackRate) : 1,
            c = this.bwEstimator
              ? this.bwEstimator.getEstimate()
              : o.abrEwmaDefaultEstimate,
            u = r.mainForwardBufferInfo,
            g = (u ? u.len : 0) / l,
            f = this.findBestLevel(
              c,
              i,
              n,
              g,
              o.abrBandWidthFactor,
              o.abrBandWidthUpFactor
            );
          if (0 <= f) return f;
          Bo.trace(
            '[abr] ' +
              (g ? 'rebuffering expected' : 'buffer is empty') +
              ', finding optimal quality level'
          );
          var p = s ? L(s, o.maxStarvationDelay) : o.maxStarvationDelay,
            m = o.abrBandWidthFactor,
            y = o.abrBandWidthUpFactor;
          if (!g) {
            var h = this.bitrateTestDelay;
            if (h) {
              var T = s ? L(s, o.maxLoadingDelay) : o.maxLoadingDelay;
              (p = T - h),
                Bo.trace(
                  '[abr] bitrate test took ' +
                    S(1e3 * h) +
                    'ms, set first fragment max fetchDuration to ' +
                    S(1e3 * p) +
                    ' ms'
                ),
                (m = y = 1);
            }
          }
          return (f = this.findBestLevel(c, i, n, g + p, m, y)), C(f, 0);
        }),
        (t.findBestLevel = function d(e, t, a, r, n, o) {
          for (
            var s = this.fragCurrent,
              l = this.partCurrent,
              c = this.lastLoadedFragLevel,
              u = this.hls.levels,
              g = u[c],
              f = !!(null != g && null != (v = g.details) && v.live),
              p = null == g ? void 0 : g.codecSet,
              m = l ? l.duration : s ? s.duration : 0,
              y = this.bwEstimator.getEstimateTTFB() / 1e3,
              h = t,
              T = -1,
              E = a,
              v,
              A;
            E >= t;
            E--
          ) {
            if (((A = u[E]), !A || (p && A.codecSet !== p))) {
              A && ((h = L(E, h)), (T = C(E, T)));
              continue;
            }
            -1 !== T &&
              Bo.trace(
                '[abr] Skipped level(s) ' +
                  h +
                  '-' +
                  T +
                  ' with CODECS:"' +
                  u[T].attrs.CODECS +
                  '"; not compatible with "' +
                  g.attrs.CODECS +
                  '"'
              );
            var R = A.details,
              k =
                (l
                  ? null == R
                    ? void 0
                    : R.partTarget
                  : null == R
                  ? void 0
                  : R.averagetargetduration) || m,
              D = void 0;
            D = E <= c ? n * e : o * e;
            var I = u[E].maxBitrate,
              b = this.getTimeToLoadFrag(y, D, I * k, void 0 === R);
            if (
              (Bo.trace(
                '[abr] level:' +
                  E +
                  ' adjustedbw-bitrate:' +
                  S(D - I) +
                  ' avgDuration:' +
                  k.toFixed(1) +
                  ' maxFetchDuration:' +
                  r.toFixed(1) +
                  ' fetchDuration:' +
                  b.toFixed(1)
              ),
              D > I &&
                (0 === b || !_o(b) || (f && !this.bitrateTestDelay) || b < r))
            )
              return E;
          }
          return -1;
        }),
        N(e, [
          {
            key: 'nextAutoLevel',
            get: function e() {
              var t = this._nextAutoLevel,
                a = this.bwEstimator;
              if (-1 !== t && !a.canEstimate()) return t;
              var r = this.getNextABRAutoLevel();
              if (-1 !== t) {
                var n = this.hls.levels;
                if (n.length > C(t, r) && n[t].loadError <= n[r].loadError)
                  return t;
              }
              return -1 !== t && (r = L(t, r)), r;
            },
            set: function t(e) {
              this._nextAutoLevel = e;
            }
          }
        ]),
        e
      );
    })(),
    Jd = (function() {
      function e() {
        (this.chunks = []), (this.dataLength = 0);
      }
      var t = e.prototype;
      return (
        (t.push = function t(e) {
          this.chunks.push(e), (this.dataLength += e.length);
        }),
        (t.flush = function e() {
          var t = this.chunks,
            a = this.dataLength,
            r;
          return t.length
            ? ((r = 1 === t.length ? t[0] : kr(t, a)), this.reset(), r)
            : new Uint8Array(0);
        }),
        (t.reset = function e() {
          (this.chunks.length = 0), (this.dataLength = 0);
        }),
        e
      );
    })(),
    es = 100,
    ts = (function(e) {
      function t(t, a, r) {
        var n;
        return (
          (n =
            e.call(this, t, a, r, '[audio-stream-controller]', Pi.AUDIO) ||
            this),
          (n.videoBuffer = null),
          (n.videoTrackCC = -1),
          (n.waitingVideoCC = -1),
          (n.bufferedTrack = null),
          (n.switchingTrack = null),
          (n.trackId = -1),
          (n.waitingData = null),
          (n.mainDetails = null),
          (n.bufferFlushed = !1),
          (n.cachedTrackLoadedData = null),
          n._registerListeners(),
          n
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.onHandlerDestroying = function e() {
          this._unregisterListeners(),
            (this.mainDetails = null),
            (this.bufferedTrack = null),
            (this.switchingTrack = null);
        }),
        (a._registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.on(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.LEVEL_LOADED, this.onLevelLoaded, this),
            t.on(xo.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this),
            t.on(xo.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this),
            t.on(xo.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this),
            t.on(xo.ERROR, this.onError, this),
            t.on(xo.BUFFER_RESET, this.onBufferReset, this),
            t.on(xo.BUFFER_CREATED, this.onBufferCreated, this),
            t.on(xo.BUFFER_FLUSHED, this.onBufferFlushed, this),
            t.on(xo.INIT_PTS_FOUND, this.onInitPtsFound, this),
            t.on(xo.FRAG_BUFFERED, this.onFragBuffered, this);
        }),
        (a._unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.off(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.LEVEL_LOADED, this.onLevelLoaded, this),
            t.off(xo.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this),
            t.off(xo.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this),
            t.off(xo.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this),
            t.off(xo.ERROR, this.onError, this),
            t.off(xo.BUFFER_RESET, this.onBufferReset, this),
            t.off(xo.BUFFER_CREATED, this.onBufferCreated, this),
            t.off(xo.BUFFER_FLUSHED, this.onBufferFlushed, this),
            t.off(xo.INIT_PTS_FOUND, this.onInitPtsFound, this),
            t.off(xo.FRAG_BUFFERED, this.onFragBuffered, this);
        }),
        (a.onInitPtsFound = function a(e, t) {
          var r = t.frag,
            n = t.id,
            o = t.initPTS,
            i = t.timescale;
          if ('main' === n) {
            var d = r.cc;
            (this.initPTS[r.cc] = { baseTime: o, timescale: i }),
              this.log('InitPTS for cc: ' + d + ' found from main: ' + o),
              (this.videoTrackCC = d),
              this.state === dd.WAITING_INIT_PTS && this.tick();
          }
        }),
        (a.startLoad = function t(e) {
          if (!this.levels)
            return (this.startPosition = e), void (this.state = dd.STOPPED);
          var a = this.lastCurrentTime;
          this.stopLoad(),
            this.setInterval(es),
            0 < a && -1 === e
              ? (this.log(
                  'Override startPosition with lastCurrentTime @' + a.toFixed(3)
                ),
                (e = a),
                (this.state = dd.IDLE))
              : ((this.loadedmetadata = !1), (this.state = dd.WAITING_TRACK)),
            (this.nextLoadPosition = this.startPosition = this.lastCurrentTime = e),
            this.tick();
        }),
        (a.doTick = function t() {
          switch (this.state) {
            case dd.IDLE:
              this.doTickIdle();
              break;
            case dd.WAITING_TRACK: {
              var a = this.levels,
                r = this.trackId,
                n = null == a || null == (o = a[r]) ? void 0 : o.details,
                o;
              if (n) {
                if (this.waitForCdnTuneIn(n)) break;
                this.state = dd.WAITING_INIT_PTS;
              }
              break;
            }
            case dd.FRAG_LOADING_WAITING_RETRY: {
              var i = performance.now(),
                d = this.retryDate,
                s;
              (!d || i >= d || (null != (s = this.media) && s.seeking)) &&
                (this.log('RetryDate reached, switch back to IDLE state'),
                this.resetStartWhenNotLoaded(this.trackId),
                (this.state = dd.IDLE));
              break;
            }
            case dd.WAITING_INIT_PTS: {
              var l = this.waitingData;
              if (l) {
                var c = l.frag,
                  u = l.part,
                  g = l.cache,
                  f = l.complete;
                if (void 0 !== this.initPTS[c.cc]) {
                  (this.waitingData = null),
                    (this.waitingVideoCC = -1),
                    (this.state = dd.FRAG_LOADING);
                  var p = g.flush(),
                    m = { frag: c, part: u, payload: p, networkDetails: null };
                  this._handleFragmentLoadProgress(m),
                    f && e.prototype._handleFragmentLoadComplete.call(this, m);
                } else if (this.videoTrackCC !== this.waitingVideoCC)
                  this.log(
                    'Waiting fragment cc (' +
                      c.cc +
                      ') cancelled because video is at cc ' +
                      this.videoTrackCC
                  ),
                    this.clearWaitingFragment();
                else {
                  var y = this.getLoadPosition(),
                    h = ed.bufferInfo(
                      this.mediaBuffer,
                      y,
                      this.config.maxBufferHole
                    ),
                    T = ma(h.end, this.config.maxFragLookUpTolerance, c);
                  0 > T &&
                    (this.log(
                      'Waiting fragment cc (' +
                        c.cc +
                        ') @ ' +
                        c.start +
                        ' cancelled because another fragment at ' +
                        h.end +
                        ' is needed'
                    ),
                    this.clearWaitingFragment());
                }
              } else this.state = dd.IDLE;
            }
          }
          this.onTickEnd();
        }),
        (a.clearWaitingFragment = function e() {
          var t = this.waitingData;
          t &&
            (this.fragmentTracker.removeFragment(t.frag),
            (this.waitingData = null),
            (this.waitingVideoCC = -1),
            (this.state = dd.IDLE));
        }),
        (a.resetLoadingState = function t() {
          this.clearWaitingFragment(), e.prototype.resetLoadingState.call(this);
        }),
        (a.onTickEnd = function e() {
          var t = this.media;
          null != t && t.readyState && (this.lastCurrentTime = t.currentTime);
        }),
        (a.doTickIdle = function e() {
          var t = this.hls,
            a = this.levels,
            r = this.media,
            n = this.trackId,
            o = t.config;
          if (
            null != a &&
            a[n] &&
            (r || (!this.startFragRequested && o.startFragPrefetch))
          ) {
            var i = a[n],
              d = i.details;
            if (
              !d ||
              (d.live && this.levelLastLoaded !== n) ||
              this.waitForCdnTuneIn(d)
            )
              return void (this.state = dd.WAITING_TRACK);
            var s = this.mediaBuffer ? this.mediaBuffer : this.media;
            this.bufferFlushed &&
              s &&
              ((this.bufferFlushed = !1),
              this.afterBufferFlushed(s, Wo.AUDIO, Pi.AUDIO));
            var l = this.getFwdBufferInfo(s, Pi.AUDIO);
            if (null !== l) {
              var c = this.bufferedTrack,
                u = this.switchingTrack;
              if (!u && this._streamEnded(l, d))
                return (
                  t.trigger(xo.BUFFER_EOS, { type: 'audio' }),
                  void (this.state = dd.ENDED)
                );
              var g = this.getFwdBufferInfo(
                  this.videoBuffer ? this.videoBuffer : this.media,
                  Pi.MAIN
                ),
                f = l.len,
                p = this.getMaxBufferLength(null == g ? void 0 : g.len);
              if (!(f >= p) || u) {
                var m = d.fragments,
                  y = m[0].start,
                  h = l.end;
                if (u && r) {
                  var T = this.getLoadPosition();
                  c && u.attrs !== c.attrs && (h = T),
                    d.PTSKnown &&
                      T < y &&
                      (l.end > y || l.nextStart) &&
                      (this.log(
                        'Alt audio track ahead of main track, seek to start of alt audio track'
                      ),
                      (r.currentTime = y + 0.05));
                }
                var E = this.getNextFragment(h, d),
                  v = !1;
                if (
                  (E &&
                    this.isLoopLoading(E, h) &&
                    ((v = !!E.gap),
                    (E = this.getNextFragmentLoopLoading(E, d, l, Pi.MAIN, p))),
                  !E)
                )
                  return void (this.bufferFlushed = !0);
                var S = g && E.start > g.end + d.targetduration;
                if (S || (!(null != g && g.len) && l.len)) {
                  var L = this.getAppendedFrag(E.start, Pi.MAIN);
                  if (null === L) return;
                  if (
                    (v || (v = !!L.gap || (!!S && 0 === g.len)),
                    (S && !v) || (v && l.nextStart && l.nextStart < L.end))
                  )
                    return;
                }
                this.loadFragment(E, i, h);
              }
            }
          }
        }),
        (a.getMaxBufferLength = function a(t) {
          var r = e.prototype.getMaxBufferLength.call(this);
          return t ? L(C(r, t), this.config.maxMaxBufferLength) : r;
        }),
        (a.onMediaDetaching = function t() {
          (this.videoBuffer = null), e.prototype.onMediaDetaching.call(this);
        }),
        (a.onAudioTracksUpdated = function a(e, t) {
          var r = t.audioTracks;
          this.resetTransmuxer(),
            (this.levels = r.map(function(e) {
              return new Ui(e);
            }));
        }),
        (a.onAudioTrackSwitching = function a(e, t) {
          var r = !!t.url;
          this.trackId = t.id;
          var n = this.fragCurrent;
          n && (n.abortRequests(), this.removeUnbufferedFrags(n.start)),
            this.resetLoadingState(),
            r ? this.setInterval(es) : this.resetTransmuxer(),
            r
              ? ((this.switchingTrack = t), (this.state = dd.IDLE))
              : ((this.switchingTrack = null),
                (this.bufferedTrack = t),
                (this.state = dd.STOPPED)),
            this.tick();
        }),
        (a.onManifestLoading = function e() {
          this.fragmentTracker.removeAllFragments(),
            (this.startPosition = this.lastCurrentTime = 0),
            (this.bufferFlushed = !1),
            (this.levels = this.mainDetails = this.waitingData = this.bufferedTrack = this.cachedTrackLoadedData = this.switchingTrack = null),
            (this.startFragRequested = !1),
            (this.trackId = this.videoTrackCC = this.waitingVideoCC = -1);
        }),
        (a.onLevelLoaded = function a(e, t) {
          (this.mainDetails = t.details),
            null !== this.cachedTrackLoadedData &&
              (this.hls.trigger(
                xo.AUDIO_TRACK_LOADED,
                this.cachedTrackLoadedData
              ),
              (this.cachedTrackLoadedData = null));
        }),
        (a.onAudioTrackLoaded = function a(e, t) {
          var r;
          if (null == this.mainDetails)
            return void (this.cachedTrackLoadedData = t);
          var n = this.levels,
            o = t.details,
            i = t.id;
          if (!n)
            return void this.warn(
              'Audio tracks were reset while loading level ' + i
            );
          this.log(
            'Track ' +
              i +
              ' loaded [' +
              o.startSN +
              ',' +
              o.endSN +
              ']' +
              (o.lastPartSn
                ? '[part-' + o.lastPartSn + '-' + o.lastPartIndex + ']'
                : '') +
              ',duration:' +
              o.totalduration
          );
          var d = n[i],
            s = 0;
          if (o.live || (null != (r = d.details) && r.live)) {
            var l = this.mainDetails;
            if (
              (o.fragments[0] || (o.deltaUpdateFailed = !0),
              o.deltaUpdateFailed || !l)
            )
              return;
            !d.details && o.hasProgramDateTime && l.hasProgramDateTime
              ? (Na(o, l), (s = o.fragments[0].start))
              : (s = this.alignPlaylists(o, d.details));
          }
          (d.details = o),
            (this.levelLastLoaded = i),
            this.startFragRequested ||
              (!this.mainDetails && o.live) ||
              this.setStartPosition(d.details, s),
            this.state !== dd.WAITING_TRACK ||
              this.waitForCdnTuneIn(o) ||
              (this.state = dd.IDLE),
            this.tick();
        }),
        (a._handleFragmentLoadProgress = function t(e) {
          var a = e.frag,
            r = e.part,
            n = e.payload,
            o = this.config,
            i = this.trackId,
            d = this.levels,
            s;
          if (!d)
            return void this.warn(
              'Audio tracks were reset while fragment load was in progress. Fragment ' +
                a.sn +
                ' of level ' +
                a.level +
                ' will not be buffered'
            );
          var l = d[i];
          if (!l)
            return void this.warn(
              'Audio track is undefined on fragment load progress'
            );
          var c = l.details;
          if (!c)
            return (
              this.warn(
                'Audio track details undefined on fragment load progress'
              ),
              void this.removeUnbufferedFrags(a.start)
            );
          var u = o.defaultAudioCodec || l.audioCodec || 'mp4a.40.2',
            g = this.transmuxer;
          g ||
            (g = this.transmuxer = new qd(
              this.hls,
              Pi.AUDIO,
              this._handleTransmuxComplete.bind(this),
              this._handleTransmuxerFlush.bind(this)
            ));
          var f = this.initPTS[a.cc],
            p = null == (s = a.initSegment) ? void 0 : s.data;
          if (void 0 !== f) {
            var m = !1,
              y = r ? r.index : -1,
              h = -1 !== y,
              T = new td(a.level, a.sn, a.stats.chunkCount, n.byteLength, y, h);
            g.push(n, p, u, '', a, r, c.totalduration, !1, T, f);
          } else {
            this.log(
              'Unknown video PTS for cc ' +
                a.cc +
                ', waiting for video PTS before demuxing audio frag ' +
                a.sn +
                ' of [' +
                c.startSN +
                ' ,' +
                c.endSN +
                '],track ' +
                i
            );
            var E = (this.waitingData = this.waitingData || {
                frag: a,
                part: r,
                cache: new Jd(),
                complete: !1
              }),
              v = E.cache;
            v.push(new Uint8Array(n)),
              (this.waitingVideoCC = this.videoTrackCC),
              (this.state = dd.WAITING_INIT_PTS);
          }
        }),
        (a._handleFragmentLoadComplete = function a(t) {
          return this.waitingData
            ? void (this.waitingData.complete = !0)
            : void e.prototype._handleFragmentLoadComplete.call(this, t);
        }),
        (a.onBufferReset = function e() {
          (this.mediaBuffer = this.videoBuffer = null),
            (this.loadedmetadata = !1);
        }),
        (a.onBufferCreated = function a(e, t) {
          var r = t.tracks.audio;
          r && (this.mediaBuffer = r.buffer || null),
            t.tracks.video &&
              (this.videoBuffer = t.tracks.video.buffer || null);
        }),
        (a.onFragBuffered = function a(e, t) {
          var r = t.frag,
            n = t.part;
          if (r.type !== Pi.AUDIO) {
            if (!this.loadedmetadata && r.type === Pi.MAIN) {
              var o = this.videoBuffer || this.media;
              if (o) {
                var i = ed.getBuffered(o);
                i.length && (this.loadedmetadata = !0);
              }
            }
            return;
          }
          if (this.fragContextChanged(r))
            return void this.warn(
              'Fragment ' +
                r.sn +
                (n ? ' p: ' + n.index : '') +
                ' of level ' +
                r.level +
                ' finished buffering, but was aborted. state: ' +
                this.state +
                ', audioSwitch: ' +
                (this.switchingTrack ? this.switchingTrack.name : 'false')
            );
          if ('initSegment' !== r.sn) {
            this.fragPrevious = r;
            var d = this.switchingTrack;
            d &&
              ((this.bufferedTrack = d),
              (this.switchingTrack = null),
              this.hls.trigger(xo.AUDIO_TRACK_SWITCHED, De({}, d)));
          }
          this.fragBufferedComplete(r, n);
        }),
        (a.onError = function r(t, a) {
          var n;
          if (a.fatal) return void (this.state = dd.ERROR);
          switch (a.details) {
            case No.FRAG_GAP:
            case No.FRAG_PARSING_ERROR:
            case No.FRAG_DECRYPT_ERROR:
            case No.FRAG_LOAD_ERROR:
            case No.FRAG_LOAD_TIMEOUT:
            case No.KEY_LOAD_ERROR:
            case No.KEY_LOAD_TIMEOUT:
              this.onFragmentOrKeyLoadError(Pi.AUDIO, a);
              break;
            case No.AUDIO_TRACK_LOAD_ERROR:
            case No.AUDIO_TRACK_LOAD_TIMEOUT:
            case No.LEVEL_PARSING_ERROR:
              a.levelRetry ||
                this.state !== dd.WAITING_TRACK ||
                (null == (n = a.context) ? void 0 : n.type) !==
                  Ci.AUDIO_TRACK ||
                (this.state = dd.IDLE);
              break;
            case No.BUFFER_FULL_ERROR:
              if (!a.parent || 'audio' !== a.parent) return;
              this.reduceLengthAndFlushBuffer(a) &&
                ((this.bufferedTrack = null),
                e.prototype.flushMainBuffer.call(
                  this,
                  0,
                  Number.POSITIVE_INFINITY,
                  'audio'
                ));
              break;
            case No.INTERNAL_EXCEPTION:
              this.recoverWorkerError(a);
          }
        }),
        (a.onBufferFlushed = function a(e, t) {
          var r = t.type;
          r === Wo.AUDIO &&
            ((this.bufferFlushed = !0),
            this.state === dd.ENDED && (this.state = dd.IDLE));
        }),
        (a._handleTransmuxComplete = function t(e) {
          var a = 'audio',
            r = this.hls,
            n = e.remuxResult,
            o = e.chunkMeta,
            i = this.getCurrentContext(o),
            d;
          if (!i) return void this.resetWhenMissingContext(o);
          var s = i.frag,
            l = i.part,
            c = i.level,
            u = c.details,
            g = n.audio,
            f = n.text,
            p = n.id3,
            m = n.initSegment;
          if (this.fragContextChanged(s) || !u)
            return void this.fragmentTracker.removeFragment(s);
          if (
            ((this.state = dd.PARSING),
            this.switchingTrack &&
              g &&
              this.completeAudioSwitch(this.switchingTrack),
            null != m && m.tracks)
          ) {
            var y = s.initSegment || s;
            this._bufferInitSegment(m.tracks, y, o),
              r.trigger(xo.FRAG_PARSING_INIT_SEGMENT, {
                frag: y,
                id: a,
                tracks: m.tracks
              });
          }
          if (g) {
            var h = g.startPTS,
              T = g.endPTS,
              E = g.startDTS,
              v = g.endDTS;
            l &&
              (l.elementaryStreams[Wo.AUDIO] = {
                startPTS: h,
                endPTS: T,
                startDTS: E,
                endDTS: v
              }),
              s.setElementaryStreamInfo(Wo.AUDIO, h, T, E, v),
              this.bufferFragmentData(g, s, l, o);
          }
          if (null != p && null != (d = p.samples) && d.length) {
            var S = be({ id: a, frag: s, details: u }, p);
            r.trigger(xo.FRAG_PARSING_METADATA, S);
          }
          if (f) {
            var L = be({ id: a, frag: s, details: u }, f);
            r.trigger(xo.FRAG_PARSING_USERDATA, L);
          }
        }),
        (a._bufferInitSegment = function r(e, t, a) {
          if (this.state === dd.PARSING) {
            e.video && delete e.video;
            var n = e.audio;
            if (n) {
              (n.levelCodec = n.codec),
                (n.id = 'audio'),
                this.log(
                  'Init audio buffer, container:' +
                    n.container +
                    ', codecs[parsed]=[' +
                    n.codec +
                    ']'
                ),
                this.hls.trigger(xo.BUFFER_CODECS, e);
              var o = n.initSegment;
              if (null != o && o.byteLength) {
                var i = {
                  type: 'audio',
                  frag: t,
                  part: null,
                  chunkMeta: a,
                  parent: t.type,
                  data: o
                };
                this.hls.trigger(xo.BUFFER_APPENDING, i);
              }
              this.tick();
            }
          }
        }),
        (a.loadFragment = function n(t, a, r) {
          var o = this.fragmentTracker.getState(t);
          if (
            ((this.fragCurrent = t),
            this.switchingTrack || o === qi.NOT_LOADED || o === qi.PARTIAL)
          ) {
            var i;
            'initSegment' === t.sn
              ? this._loadInitSegment(t, a)
              : null != (i = a.details) && i.live && !this.initPTS[t.cc]
              ? (this.log(
                  'Waiting for video PTS in continuity counter ' +
                    t.cc +
                    ' of live stream before loading audio fragment ' +
                    t.sn +
                    ' of level ' +
                    this.trackId
                ),
                (this.state = dd.WAITING_INIT_PTS))
              : ((this.startFragRequested = !0),
                e.prototype.loadFragment.call(this, t, a, r));
          } else this.clearTrackerIfNeeded(t);
        }),
        (a.completeAudioSwitch = function a(t) {
          var r = this.hls,
            n = this.media,
            o = this.bufferedTrack,
            i = null == o ? void 0 : o.attrs,
            d = t.attrs;
          n &&
            i &&
            (i.CHANNELS !== d.CHANNELS ||
              i.NAME !== d.NAME ||
              i.LANGUAGE !== d.LANGUAGE) &&
            (this.log('Switching audio track : flushing all audio'),
            e.prototype.flushMainBuffer.call(
              this,
              0,
              Number.POSITIVE_INFINITY,
              'audio'
            )),
            (this.bufferedTrack = t),
            (this.switchingTrack = null),
            r.trigger(xo.AUDIO_TRACK_SWITCHED, De({}, t));
        }),
        t
      );
    })(sd),
    as = (function(e) {
      function t(t) {
        var a;
        return (
          (a = e.call(this, t, '[audio-track-controller]') || this),
          (a.tracks = []),
          (a.groupId = null),
          (a.tracksInGroup = []),
          (a.trackId = -1),
          (a.currentTrack = null),
          (a.selectDefaultTrack = !0),
          a.registerListeners(),
          a
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.on(xo.LEVEL_LOADING, this.onLevelLoading, this),
            t.on(xo.LEVEL_SWITCHING, this.onLevelSwitching, this),
            t.on(xo.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this),
            t.on(xo.ERROR, this.onError, this);
        }),
        (a.unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.off(xo.LEVEL_LOADING, this.onLevelLoading, this),
            t.off(xo.LEVEL_SWITCHING, this.onLevelSwitching, this),
            t.off(xo.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this),
            t.off(xo.ERROR, this.onError, this);
        }),
        (a.destroy = function t() {
          this.unregisterListeners(),
            (this.tracks.length = 0),
            (this.tracksInGroup.length = 0),
            (this.currentTrack = null),
            e.prototype.destroy.call(this);
        }),
        (a.onManifestLoading = function e() {
          (this.tracks = []),
            (this.groupId = null),
            (this.tracksInGroup = []),
            (this.trackId = -1),
            (this.currentTrack = null),
            (this.selectDefaultTrack = !0);
        }),
        (a.onManifestParsed = function a(e, t) {
          this.tracks = t.audioTracks || [];
        }),
        (a.onAudioTrackLoaded = function a(e, t) {
          var r = t.id,
            n = t.groupId,
            o = t.details,
            i = this.tracksInGroup[r];
          if (!i || i.groupId !== n)
            return void this.warn(
              'Track with id:' +
                r +
                ' and group:' +
                n +
                ' not found in active group ' +
                i.groupId
            );
          var d = i.details;
          (i.details = t.details),
            this.log(
              'audio-track ' +
                r +
                ' "' +
                i.name +
                '" lang:' +
                i.lang +
                ' group:' +
                n +
                ' loaded [' +
                o.startSN +
                '-' +
                o.endSN +
                ']'
            ),
            r === this.trackId && this.playlistLoaded(r, t, d);
        }),
        (a.onLevelLoading = function a(e, t) {
          this.switchLevel(t.level);
        }),
        (a.onLevelSwitching = function a(e, t) {
          this.switchLevel(t.level);
        }),
        (a.switchLevel = function t(e) {
          var a = this.hls.levels[e];
          if (null != a && a.audioGroupIds) {
            var r = a.audioGroupIds[a.urlId];
            if (this.groupId !== r) {
              this.groupId = r || null;
              var n = this.tracks.filter(function(e) {
                return !r || e.groupId === r;
              });
              this.selectDefaultTrack &&
                !n.some(function(e) {
                  return e.default;
                }) &&
                (this.selectDefaultTrack = !1),
                (this.tracksInGroup = n);
              var o = { audioTracks: n };
              this.log(
                'Updating audio tracks, ' +
                  n.length +
                  ' track(s) found in group:' +
                  r
              ),
                this.hls.trigger(xo.AUDIO_TRACKS_UPDATED, o),
                this.selectInitialTrack();
            } else
              this.shouldReloadPlaylist(this.currentTrack) &&
                this.setAudioTrack(this.trackId);
          }
        }),
        (a.onError = function a(e, t) {
          t.fatal ||
            !t.context ||
            (t.context.type === Ci.AUDIO_TRACK &&
              t.context.id === this.trackId &&
              t.context.groupId === this.groupId &&
              ((this.requestScheduled = -1), this.checkRetry(t)));
        }),
        (a.setAudioTrack = function t(e) {
          var a = this.tracksInGroup;
          if (0 > e || e >= a.length)
            return void this.warn(
              'Invalid id passed to audio-track controller'
            );
          this.clearTimer();
          var r = this.currentTrack;
          a[this.trackId];
          var n = a[e],
            o = n.groupId,
            i = n.name;
          if (
            (this.log(
              'Switching to audio-track ' +
                e +
                ' "' +
                i +
                '" lang:' +
                n.lang +
                ' group:' +
                o
            ),
            (this.trackId = e),
            (this.currentTrack = n),
            (this.selectDefaultTrack = !1),
            this.hls.trigger(xo.AUDIO_TRACK_SWITCHING, De({}, n)),
            !n.details || n.details.live)
          ) {
            var d = this.switchParams(n.url, null == r ? void 0 : r.details);
            this.loadPlaylist(d);
          }
        }),
        (a.selectInitialTrack = function e() {
          var t = this.tracksInGroup,
            a = this.findTrackId(this.currentTrack) | this.findTrackId(null);
          if (-1 !== a) this.setAudioTrack(a);
          else {
            var r = new Error(
              'No track found for running audio group-ID: ' +
                this.groupId +
                ' track count: ' +
                t.length
            );
            this.warn(r.message),
              this.hls.trigger(xo.ERROR, {
                type: Fo.MEDIA_ERROR,
                details: No.AUDIO_TRACK_LOAD_ERROR,
                fatal: !0,
                error: r
              });
          }
        }),
        (a.findTrackId = function t(e) {
          for (var a = this.tracksInGroup, r = 0, n; r < a.length; r++)
            if (((n = a[r]), !this.selectDefaultTrack || n.default)) {
              if (
                !e ||
                (void 0 !== e.attrs['STABLE-RENDITION-ID'] &&
                  e.attrs['STABLE-RENDITION-ID'] ===
                    n.attrs['STABLE-RENDITION-ID'])
              )
                return n.id;
              if (e.name === n.name && e.lang === n.lang) return n.id;
            }
          return -1;
        }),
        (a.loadPlaylist = function a(t) {
          e.prototype.loadPlaylist.call(this);
          var r = this.tracksInGroup[this.trackId];
          if (this.shouldLoadPlaylist(r)) {
            var n = r.id,
              o = r.groupId,
              i = r.url;
            if (t)
              try {
                i = t.addDirectives(i);
              } catch (e) {
                this.warn(
                  'Could not construct new URL with HLS Delivery Directives: ' +
                    e
                );
              }
            this.log(
              'loading audio-track playlist ' +
                n +
                ' "' +
                r.name +
                '" lang:' +
                r.lang +
                ' group:' +
                o
            ),
              this.clearTimer(),
              this.hls.trigger(xo.AUDIO_TRACK_LOADING, {
                url: i,
                id: n,
                groupId: o,
                deliveryDirectives: t || null
              });
          }
        }),
        N(t, [
          {
            key: 'audioTracks',
            get: function e() {
              return this.tracksInGroup;
            }
          },
          {
            key: 'audioTrack',
            get: function e() {
              return this.trackId;
            },
            set: function t(e) {
              (this.selectDefaultTrack = !1), this.setAudioTrack(e);
            }
          }
        ]),
        t
      );
    })(Wi),
    rs = 500,
    ns = (function(e) {
      function t(t, a, r) {
        var n;
        return (
          (n =
            e.call(
              this,
              t,
              a,
              r,
              '[subtitle-stream-controller]',
              Pi.SUBTITLE
            ) || this),
          (n.levels = []),
          (n.currentTrackId = -1),
          (n.tracksBuffered = []),
          (n.mainDetails = null),
          n._registerListeners(),
          n
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.onHandlerDestroying = function e() {
          this._unregisterListeners(), (this.mainDetails = null);
        }),
        (a._registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.on(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.LEVEL_LOADED, this.onLevelLoaded, this),
            t.on(xo.ERROR, this.onError, this),
            t.on(
              xo.SUBTITLE_TRACKS_UPDATED,
              this.onSubtitleTracksUpdated,
              this
            ),
            t.on(xo.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this),
            t.on(xo.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this),
            t.on(
              xo.SUBTITLE_FRAG_PROCESSED,
              this.onSubtitleFragProcessed,
              this
            ),
            t.on(xo.BUFFER_FLUSHING, this.onBufferFlushing, this),
            t.on(xo.FRAG_BUFFERED, this.onFragBuffered, this);
        }),
        (a._unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.off(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.LEVEL_LOADED, this.onLevelLoaded, this),
            t.off(xo.ERROR, this.onError, this),
            t.off(
              xo.SUBTITLE_TRACKS_UPDATED,
              this.onSubtitleTracksUpdated,
              this
            ),
            t.off(xo.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this),
            t.off(xo.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this),
            t.off(
              xo.SUBTITLE_FRAG_PROCESSED,
              this.onSubtitleFragProcessed,
              this
            ),
            t.off(xo.BUFFER_FLUSHING, this.onBufferFlushing, this),
            t.off(xo.FRAG_BUFFERED, this.onFragBuffered, this);
        }),
        (a.startLoad = function t(e) {
          this.stopLoad(),
            (this.state = dd.IDLE),
            this.setInterval(rs),
            (this.nextLoadPosition = this.startPosition = this.lastCurrentTime = e),
            this.tick();
        }),
        (a.onManifestLoading = function e() {
          (this.mainDetails = null), this.fragmentTracker.removeAllFragments();
        }),
        (a.onMediaDetaching = function t() {
          (this.tracksBuffered = []), e.prototype.onMediaDetaching.call(this);
        }),
        (a.onLevelLoaded = function a(e, t) {
          this.mainDetails = t.details;
        }),
        (a.onSubtitleFragProcessed = function a(e, t) {
          var r = t.frag,
            n = t.success;
          if (((this.fragPrevious = r), (this.state = dd.IDLE), !!n)) {
            var o = this.tracksBuffered[this.currentTrackId];
            if (o) {
              for (var d = r.start, s = 0, l; s < o.length; s++)
                if (d >= o[s].start && d <= o[s].end) {
                  l = o[s];
                  break;
                }
              var c = r.start + r.duration;
              l ? (l.end = c) : ((l = { start: d, end: c }), o.push(l)),
                this.fragmentTracker.fragBuffered(r);
            }
          }
        }),
        (a.onBufferFlushing = function a(e, t) {
          var r = t.startOffset,
            n = t.endOffset;
          if (0 === r && n !== T) {
            var o = n - 1;
            if (0 >= o) return;
            (t.endOffsetSubtitles = C(0, o)),
              this.tracksBuffered.forEach(function(e) {
                for (var t = 0; t < e.length; ) {
                  if (e[t].end <= o) {
                    e.shift();
                    continue;
                  } else if (e[t].start < o) e[t].start = o;
                  else break;
                  t++;
                }
              }),
              this.fragmentTracker.removeFragmentsInRange(r, o, Pi.SUBTITLE);
          }
        }),
        (a.onFragBuffered = function a(e, t) {
          if (!this.loadedmetadata && t.frag.type === Pi.MAIN) {
            var r;
            null != (r = this.media) &&
              r.buffered.length &&
              (this.loadedmetadata = !0);
          }
        }),
        (a.onError = function a(e, t) {
          var r = t.frag;
          (null == r ? void 0 : r.type) === Pi.SUBTITLE &&
            (this.fragCurrent && this.fragCurrent.abortRequests(),
            this.state !== dd.STOPPED && (this.state = dd.IDLE));
        }),
        (a.onSubtitleTracksUpdated = function a(e, t) {
          var r = this,
            n = t.subtitleTracks;
          return Dr(this.levels, n)
            ? void (this.levels = n.map(function(e) {
                return new Ui(e);
              }))
            : void ((this.tracksBuffered = []),
              (this.levels = n.map(function(e) {
                var t = new Ui(e);
                return (r.tracksBuffered[t.id] = []), t;
              })),
              this.fragmentTracker.removeFragmentsInRange(
                0,
                Number.POSITIVE_INFINITY,
                Pi.SUBTITLE
              ),
              (this.fragPrevious = null),
              (this.mediaBuffer = null));
        }),
        (a.onSubtitleTrackSwitch = function a(e, t) {
          if (
            ((this.currentTrackId = t.id),
            !this.levels.length || -1 === this.currentTrackId)
          )
            return void this.clearInterval();
          var r = this.levels[this.currentTrackId];
          (this.mediaBuffer =
            null != r && r.details ? this.mediaBufferTimeRanges : null),
            r && this.setInterval(rs);
        }),
        (a.onSubtitleTrackLoaded = function a(e, t) {
          var r = t.details,
            n = t.id,
            o = this.currentTrackId,
            i = this.levels,
            d;
          if (i.length) {
            var s = i[o];
            if (!(n >= i.length) && n === o && s) {
              this.mediaBuffer = this.mediaBufferTimeRanges;
              var l = 0;
              if (r.live || (null != (d = s.details) && d.live)) {
                var c = this.mainDetails;
                if (r.deltaUpdateFailed || !c) return;
                var u = c.fragments[0];
                s.details
                  ? ((l = this.alignPlaylists(r, s.details)),
                    0 === l && u && ((l = u.start), aa(r, l)))
                  : r.hasProgramDateTime && c.hasProgramDateTime
                  ? (Na(r, c), (l = r.fragments[0].start))
                  : u && ((l = u.start), aa(r, l));
              }
              if (
                ((s.details = r),
                (this.levelLastLoaded = n),
                this.startFragRequested ||
                  (!this.mainDetails && r.live) ||
                  this.setStartPosition(s.details, l),
                this.tick(),
                r.live &&
                  !this.fragCurrent &&
                  this.media &&
                  this.state === dd.IDLE)
              ) {
                var g = pa(null, r.fragments, this.media.currentTime, 0);
                g ||
                  (this.warn('Subtitle playlist not aligned with playback'),
                  (s.details = void 0));
              }
            }
          }
        }),
        (a._handleFragmentLoadComplete = function t(e) {
          var a = this,
            r = e.frag,
            n = e.payload,
            o = r.decryptdata,
            i = this.hls;
          if (
            !this.fragContextChanged(r) &&
            n &&
            0 < n.byteLength &&
            o &&
            o.key &&
            o.iv &&
            'AES-128' === o.method
          ) {
            var d = performance.now();
            this.decrypter
              .decrypt(new Uint8Array(n), o.key.buffer, o.iv.buffer)
              .catch(function(e) {
                throw (i.trigger(xo.ERROR, {
                  type: Fo.MEDIA_ERROR,
                  details: No.FRAG_DECRYPT_ERROR,
                  fatal: !1,
                  error: e,
                  reason: e.message,
                  frag: r
                }),
                e);
              })
              .then(function(e) {
                var t = performance.now();
                i.trigger(xo.FRAG_DECRYPTED, {
                  frag: r,
                  payload: e,
                  stats: { tstart: d, tdecrypt: t }
                });
              })
              .catch(function(e) {
                a.warn(e.name + ': ' + e.message), (a.state = dd.IDLE);
              });
          }
        }),
        (a.doTick = function e() {
          if (!this.media) return void (this.state = dd.IDLE);
          if (this.state === dd.IDLE) {
            var t = this.currentTrackId,
              a = this.levels,
              r = a[t];
            if (!a.length || !r || !r.details) return;
            var n = this.config,
              o = this.getLoadPosition(),
              i = ed.bufferedInfo(
                this.tracksBuffered[this.currentTrackId] || [],
                o,
                n.maxBufferHole
              ),
              d = i.end,
              s = i.len,
              l = this.getFwdBufferInfo(this.media, Pi.MAIN),
              c = r.details,
              u =
                this.getMaxBufferLength(null == l ? void 0 : l.len) +
                c.levelTargetDuration;
            if (s > u) return;
            var g = c.fragments,
              f = g.length,
              p = c.edge,
              m = null,
              y = this.fragPrevious;
            if (d < p) {
              var h = n.maxFragLookUpTolerance,
                T = d > p - h ? 0 : h;
              (m = pa(y, g, C(g[0].start, d), T)),
                !m && y && y.start < g[0].start && (m = g[0]);
            } else m = g[f - 1];
            if (!m) return;
            if (
              ((m = this.mapToInitFragWhenRequired(m)), 'initSegment' !== m.sn)
            ) {
              var E = m.sn - c.startSN,
                v = g[E - 1];
              v &&
                v.cc === m.cc &&
                this.fragmentTracker.getState(v) === qi.NOT_LOADED &&
                (m = v);
            }
            this.fragmentTracker.getState(m) === qi.NOT_LOADED &&
              this.loadFragment(m, r, d);
          }
        }),
        (a.getMaxBufferLength = function a(t) {
          var r = e.prototype.getMaxBufferLength.call(this);
          return t ? C(r, t) : r;
        }),
        (a.loadFragment = function n(t, a, r) {
          (this.fragCurrent = t),
            'initSegment' === t.sn
              ? this._loadInitSegment(t, a)
              : ((this.startFragRequested = !0),
                e.prototype.loadFragment.call(this, t, a, r));
        }),
        N(t, [
          {
            key: 'mediaBufferTimeRanges',
            get: function e() {
              return new os(this.tracksBuffered[this.currentTrackId] || []);
            }
          }
        ]),
        t
      );
    })(sd),
    os = function t(e) {
      this.buffered = void 0;
      var a = function n(t, a, r) {
        if (((a >>>= 0), a > r - 1))
          throw new DOMException(
            "Failed to execute '" +
              t +
              "' on 'TimeRanges': The index provided (" +
              a +
              ') is greater than the maximum bound (' +
              r +
              ')'
          );
        return e[a][t];
      };
      this.buffered = {
        get length() {
          return e.length;
        },
        end: function r(t) {
          return a('end', t, e.length);
        },
        start: function r(t) {
          return a('start', t, e.length);
        }
      };
    },
    is = (function(e) {
      function t(t) {
        var a;
        return (
          (a = e.call(this, t, '[subtitle-track-controller]') || this),
          (a.media = null),
          (a.tracks = []),
          (a.groupId = null),
          (a.tracksInGroup = []),
          (a.trackId = -1),
          (a.selectDefaultTrack = !0),
          (a.queuedDefaultTrack = -1),
          (a.trackChangeListener = function() {
            return a.onTextTracksChanged();
          }),
          (a.asyncPollTrackChange = function() {
            return a.pollTrackChange(0);
          }),
          (a.useTextTrackPolling = !1),
          (a.subtitlePollingInterval = -1),
          (a._subtitleDisplay = !0),
          a.registerListeners(),
          a
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.destroy = function t() {
          this.unregisterListeners(),
            (this.tracks.length = 0),
            (this.tracksInGroup.length = 0),
            (this.trackChangeListener = this.asyncPollTrackChange = null),
            e.prototype.destroy.call(this);
        }),
        (a.registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.on(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.on(xo.LEVEL_LOADING, this.onLevelLoading, this),
            t.on(xo.LEVEL_SWITCHING, this.onLevelSwitching, this),
            t.on(xo.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this),
            t.on(xo.ERROR, this.onError, this);
        }),
        (a.unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.off(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.off(xo.LEVEL_LOADING, this.onLevelLoading, this),
            t.off(xo.LEVEL_SWITCHING, this.onLevelSwitching, this),
            t.off(xo.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this),
            t.off(xo.ERROR, this.onError, this);
        }),
        (a.onMediaAttached = function a(e, t) {
          (this.media = t.media),
            this.media &&
              (-1 < this.queuedDefaultTrack &&
                ((this.subtitleTrack = this.queuedDefaultTrack),
                (this.queuedDefaultTrack = -1)),
              (this.useTextTrackPolling = !(
                this.media.textTracks && 'onchange' in this.media.textTracks
              )),
              this.useTextTrackPolling
                ? this.pollTrackChange(500)
                : this.media.textTracks.addEventListener(
                    'change',
                    this.asyncPollTrackChange
                  ));
        }),
        (a.pollTrackChange = function t(e) {
          self.clearInterval(this.subtitlePollingInterval),
            (this.subtitlePollingInterval = self.setInterval(
              this.trackChangeListener,
              e
            ));
        }),
        (a.onMediaDetaching = function e() {
          if (this.media) {
            self.clearInterval(this.subtitlePollingInterval),
              this.useTextTrackPolling ||
                this.media.textTracks.removeEventListener(
                  'change',
                  this.asyncPollTrackChange
                ),
              -1 < this.trackId && (this.queuedDefaultTrack = this.trackId);
            var t = br(this.media.textTracks);
            t.forEach(function(e) {
              Kt(e);
            }),
              (this.subtitleTrack = -1),
              (this.media = null);
          }
        }),
        (a.onManifestLoading = function e() {
          (this.tracks = []),
            (this.groupId = null),
            (this.tracksInGroup = []),
            (this.trackId = -1),
            (this.selectDefaultTrack = !0);
        }),
        (a.onManifestParsed = function a(e, t) {
          this.tracks = t.subtitleTracks;
        }),
        (a.onSubtitleTrackLoaded = function a(e, t) {
          var r = t.id,
            n = t.details,
            o = this.trackId,
            i = this.tracksInGroup[o];
          if (!i) return void this.warn('Invalid subtitle track id ' + r);
          var d = i.details;
          (i.details = t.details),
            this.log(
              'subtitle track ' +
                r +
                ' loaded [' +
                n.startSN +
                '-' +
                n.endSN +
                ']'
            ),
            r === this.trackId && this.playlistLoaded(r, t, d);
        }),
        (a.onLevelLoading = function a(e, t) {
          this.switchLevel(t.level);
        }),
        (a.onLevelSwitching = function a(e, t) {
          this.switchLevel(t.level);
        }),
        (a.switchLevel = function t(e) {
          var a = this.hls.levels[e];
          if (null != a && a.textGroupIds) {
            var r = a.textGroupIds[a.urlId],
              n = this.tracksInGroup
                ? this.tracksInGroup[this.trackId]
                : void 0;
            if (this.groupId !== r) {
              var o = this.tracks.filter(function(e) {
                return !r || e.groupId === r;
              });
              this.tracksInGroup = o;
              var i =
                this.findTrackId(null == n ? void 0 : n.name) ||
                this.findTrackId();
              this.groupId = r || null;
              var d = { subtitleTracks: o };
              this.log(
                'Updating subtitle tracks, ' +
                  o.length +
                  ' track(s) found in "' +
                  r +
                  '" group-id'
              ),
                this.hls.trigger(xo.SUBTITLE_TRACKS_UPDATED, d),
                -1 !== i && this.setSubtitleTrack(i, n);
            } else
              this.shouldReloadPlaylist(n) &&
                this.setSubtitleTrack(this.trackId, n);
          }
        }),
        (a.findTrackId = function t(e) {
          for (var a = this.tracksInGroup, r = 0, n; r < a.length; r++)
            if (
              ((n = a[r]),
              (!this.selectDefaultTrack || n.default) && (!e || e === n.name))
            )
              return n.id;
          return -1;
        }),
        (a.onError = function a(e, t) {
          t.fatal ||
            !t.context ||
            (t.context.type === Ci.SUBTITLE_TRACK &&
              t.context.id === this.trackId &&
              t.context.groupId === this.groupId &&
              this.checkRetry(t));
        }),
        (a.loadPlaylist = function a(t) {
          e.prototype.loadPlaylist.call(this);
          var r = this.tracksInGroup[this.trackId];
          if (this.shouldLoadPlaylist(r)) {
            var n = r.id,
              o = r.groupId,
              i = r.url;
            if (t)
              try {
                i = t.addDirectives(i);
              } catch (e) {
                this.warn(
                  'Could not construct new URL with HLS Delivery Directives: ' +
                    e
                );
              }
            this.log('Loading subtitle playlist for id ' + n),
              this.hls.trigger(xo.SUBTITLE_TRACK_LOADING, {
                url: i,
                id: n,
                groupId: o,
                deliveryDirectives: t || null
              });
          }
        }),
        (a.toggleTrackModes = function t(e) {
          var a = this,
            r = this.media,
            n = this.trackId;
          if (r) {
            var o = br(r.textTracks),
              i = o.filter(function(e) {
                return e.groupId === a.groupId;
              });
            if (-1 === e)
              [].slice.call(o).forEach(function(e) {
                e.mode = 'disabled';
              });
            else {
              var d = i[n];
              d && (d.mode = 'disabled');
            }
            var s = i[e];
            s && (s.mode = this.subtitleDisplay ? 'showing' : 'hidden');
          }
        }),
        (a.setSubtitleTrack = function a(e, t) {
          var r = this.tracksInGroup,
            n;
          if (!this.media) return void (this.queuedDefaultTrack = e);
          if (
            (this.trackId !== e && this.toggleTrackModes(e),
            !(
              (this.trackId === e &&
                (-1 === e || (null != (n = r[e]) && n.details))) ||
              -1 > e ||
              e >= r.length
            ))
          ) {
            this.clearTimer();
            var o = r[e];
            if (
              (this.log(
                'Switching to subtitle-track ' +
                  e +
                  (o
                    ? ' "' + o.name + '" lang:' + o.lang + ' group:' + o.groupId
                    : '')
              ),
              (this.trackId = e),
              o)
            ) {
              var i = o.id,
                d = o.groupId,
                s = void 0 === d ? '' : d,
                l = o.name,
                c = o.type,
                u = o.url;
              this.hls.trigger(xo.SUBTITLE_TRACK_SWITCH, {
                id: i,
                groupId: s,
                name: l,
                type: c,
                url: u
              });
              var g = this.switchParams(o.url, null == t ? void 0 : t.details);
              this.loadPlaylist(g);
            } else this.hls.trigger(xo.SUBTITLE_TRACK_SWITCH, { id: e });
          }
        }),
        (a.onTextTracksChanged = function e() {
          if (
            (this.useTextTrackPolling ||
              self.clearInterval(this.subtitlePollingInterval),
            this.media && this.hls.config.renderTextTracksNatively)
          ) {
            for (
              var t = -1, a = br(this.media.textTracks), r = 0;
              r < a.length;
              r++
            )
              if ('hidden' === a[r].mode) t = r;
              else if ('showing' === a[r].mode) {
                t = r;
                break;
              }
            this.subtitleTrack !== t && (this.subtitleTrack = t);
          }
        }),
        N(t, [
          {
            key: 'subtitleDisplay',
            get: function e() {
              return this._subtitleDisplay;
            },
            set: function t(e) {
              (this._subtitleDisplay = e),
                -1 < this.trackId && this.toggleTrackModes(this.trackId);
            }
          },
          {
            key: 'subtitleTracks',
            get: function e() {
              return this.tracksInGroup;
            }
          },
          {
            key: 'subtitleTrack',
            get: function e() {
              return this.trackId;
            },
            set: function t(e) {
              this.selectDefaultTrack = !1;
              var a = this.tracksInGroup
                ? this.tracksInGroup[this.trackId]
                : void 0;
              this.setSubtitleTrack(e, a);
            }
          }
        ]),
        t
      );
    })(Wi),
    ds = (function() {
      function e(e) {
        (this.buffers = void 0),
          (this.queues = { video: [], audio: [], audiovideo: [] }),
          (this.buffers = e);
      }
      var t = e.prototype;
      return (
        (t.append = function a(e, t) {
          var r = this.queues[t];
          r.push(e), 1 === r.length && this.buffers[t] && this.executeNext(t);
        }),
        (t.insertAbort = function a(e, t) {
          var r = this.queues[t];
          r.unshift(e), this.executeNext(t);
        }),
        (t.appendBlocker = function t(e) {
          var a = new Promise(function(e) {
              n = e;
            }),
            r = {
              execute: n,
              onStart: function e() {},
              onComplete: function e() {},
              onError: function e() {}
            },
            n;
          return this.append(r, e), a;
        }),
        (t.executeNext = function a(t) {
          var r = this.buffers,
            n = this.queues,
            o = r[t],
            i = n[t];
          if (i.length) {
            var d = i[0];
            try {
              d.execute();
            } catch (a) {
              Bo.warn(
                '[buffer-operation-queue]: Unhandled exception executing the current operation'
              ),
                d.onError(a),
                (null != o && o.updating) || (i.shift(), this.executeNext(t));
            }
          }
        }),
        (t.shiftAndExecuteNext = function t(e) {
          this.queues[e].shift(), this.executeNext(e);
        }),
        (t.current = function t(e) {
          return this.queues[e][0];
        }),
        e
      );
    })(),
    ss = Dt(),
    ls = /([ha]vc.)(?:\.[^.,]+)+/,
    cs = (function() {
      function e(e) {
        var t = this;
        (this.details = null),
          (this._objectUrl = null),
          (this.operationQueue = void 0),
          (this.listeners = void 0),
          (this.hls = void 0),
          (this.bufferCodecEventsExpected = 0),
          (this._bufferCodecEventsTotal = 0),
          (this.media = null),
          (this.mediaSource = null),
          (this.lastMpegAudioChunk = null),
          (this.appendError = 0),
          (this.tracks = {}),
          (this.pendingTracks = {}),
          (this.sourceBuffer = void 0),
          (this._onMediaSourceOpen = function() {
            var e = t.media,
              a = t.mediaSource;
            Bo.log('[buffer-controller]: Media source opened'),
              e &&
                (e.removeEventListener('emptied', t._onMediaEmptied),
                t.updateMediaElementDuration(),
                t.hls.trigger(xo.MEDIA_ATTACHED, { media: e })),
              a && a.removeEventListener('sourceopen', t._onMediaSourceOpen),
              t.checkPendingTracks();
          }),
          (this._onMediaSourceClose = function() {
            Bo.log('[buffer-controller]: Media source closed');
          }),
          (this._onMediaSourceEnded = function() {
            Bo.log('[buffer-controller]: Media source ended');
          }),
          (this._onMediaEmptied = function() {
            var e = t.media,
              a = t._objectUrl;
            e &&
              e.src !== a &&
              Bo.error(
                'Media element src was set while attaching MediaSource (' +
                  a +
                  ' > ' +
                  e.src +
                  ')'
              );
          }),
          (this.hls = e),
          this._initSourceBuffer(),
          this.registerListeners();
      }
      var t = e.prototype;
      return (
        (t.hasSourceTypes = function e() {
          return (
            0 < this.getSourceBufferTypes().length ||
            0 < Object.keys(this.pendingTracks).length
          );
        }),
        (t.destroy = function e() {
          this.unregisterListeners(),
            (this.details = null),
            (this.lastMpegAudioChunk = null);
        }),
        (t.registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MEDIA_ATTACHING, this.onMediaAttaching, this),
            t.on(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.on(xo.BUFFER_RESET, this.onBufferReset, this),
            t.on(xo.BUFFER_APPENDING, this.onBufferAppending, this),
            t.on(xo.BUFFER_CODECS, this.onBufferCodecs, this),
            t.on(xo.BUFFER_EOS, this.onBufferEos, this),
            t.on(xo.BUFFER_FLUSHING, this.onBufferFlushing, this),
            t.on(xo.LEVEL_UPDATED, this.onLevelUpdated, this),
            t.on(xo.FRAG_PARSED, this.onFragParsed, this),
            t.on(xo.FRAG_CHANGED, this.onFragChanged, this);
        }),
        (t.unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.MEDIA_ATTACHING, this.onMediaAttaching, this),
            t.off(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.off(xo.BUFFER_RESET, this.onBufferReset, this),
            t.off(xo.BUFFER_APPENDING, this.onBufferAppending, this),
            t.off(xo.BUFFER_CODECS, this.onBufferCodecs, this),
            t.off(xo.BUFFER_EOS, this.onBufferEos, this),
            t.off(xo.BUFFER_FLUSHING, this.onBufferFlushing, this),
            t.off(xo.LEVEL_UPDATED, this.onLevelUpdated, this),
            t.off(xo.FRAG_PARSED, this.onFragParsed, this),
            t.off(xo.FRAG_CHANGED, this.onFragChanged, this);
        }),
        (t._initSourceBuffer = function e() {
          (this.sourceBuffer = {}),
            (this.operationQueue = new ds(this.sourceBuffer)),
            (this.listeners = { audio: [], video: [], audiovideo: [] }),
            (this.lastMpegAudioChunk = null);
        }),
        (t.onManifestLoading = function e() {
          (this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = 0),
            (this.details = null);
        }),
        (t.onManifestParsed = function a(e, t) {
          var r = 2;
          ((!t.audio || t.video) && t.altAudio && !0) || (r = 1),
            (this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = r),
            Bo.log(
              this.bufferCodecEventsExpected + ' bufferCodec event(s) expected'
            );
        }),
        (t.onMediaAttaching = function a(e, t) {
          var r = (this.media = t.media);
          if (r && ss) {
            var n = (this.mediaSource = new ss());
            n.addEventListener('sourceopen', this._onMediaSourceOpen),
              n.addEventListener('sourceended', this._onMediaSourceEnded),
              n.addEventListener('sourceclose', this._onMediaSourceClose),
              (r.src = self.URL.createObjectURL(n)),
              (this._objectUrl = r.src),
              r.addEventListener('emptied', this._onMediaEmptied);
          }
        }),
        (t.onMediaDetaching = function e() {
          var t = this.media,
            a = this.mediaSource,
            r = this._objectUrl;
          if (a) {
            if (
              (Bo.log('[buffer-controller]: media source detaching'),
              'open' === a.readyState)
            )
              try {
                a.endOfStream();
              } catch (e) {
                Bo.warn(
                  '[buffer-controller]: onMediaDetaching: ' +
                    e.message +
                    ' while calling endOfStream'
                );
              }
            this.onBufferReset(),
              a.removeEventListener('sourceopen', this._onMediaSourceOpen),
              a.removeEventListener('sourceended', this._onMediaSourceEnded),
              a.removeEventListener('sourceclose', this._onMediaSourceClose),
              t &&
                (t.removeEventListener('emptied', this._onMediaEmptied),
                r && self.URL.revokeObjectURL(r),
                t.src === r
                  ? (t.removeAttribute('src'), t.load())
                  : Bo.warn(
                      '[buffer-controller]: media.src was changed by a third party - skip cleanup'
                    )),
              (this.mediaSource = null),
              (this.media = null),
              (this._objectUrl = null),
              (this.bufferCodecEventsExpected = this._bufferCodecEventsTotal),
              (this.pendingTracks = {}),
              (this.tracks = {});
          }
          this.hls.trigger(xo.MEDIA_DETACHED, void 0);
        }),
        (t.onBufferReset = function e() {
          var t = this;
          this.getSourceBufferTypes().forEach(function(e) {
            var a = t.sourceBuffer[e];
            try {
              a &&
                (t.removeBufferListeners(e),
                t.mediaSource && t.mediaSource.removeSourceBuffer(a),
                (t.sourceBuffer[e] = void 0));
            } catch (t) {
              Bo.warn(
                '[buffer-controller]: Failed to reset the ' + e + ' buffer',
                t
              );
            }
          }),
            this._initSourceBuffer();
        }),
        (t.onBufferCodecs = function a(e, t) {
          var r = this,
            n = this.getSourceBufferTypes().length;
          Object.keys(t).forEach(function(e) {
            if (n) {
              var a = r.tracks[e];
              if (a && 'function' == typeof a.buffer.changeType) {
                var o = t[e],
                  i = o.id,
                  d = o.codec,
                  s = o.levelCodec,
                  l = o.container,
                  c = o.metadata,
                  u = (a.levelCodec || a.codec).replace(ls, '$1'),
                  g = (s || d).replace(ls, '$1');
                if (u !== g) {
                  var f = l + ';codecs=' + (s || d);
                  r.appendChangeType(e, f),
                    Bo.log(
                      '[buffer-controller]: switching codec ' + u + ' to ' + g
                    ),
                    (r.tracks[e] = {
                      buffer: a.buffer,
                      codec: d,
                      container: l,
                      levelCodec: s,
                      metadata: c,
                      id: i
                    });
                }
              }
            } else r.pendingTracks[e] = t[e];
          }),
            n ||
              ((this.bufferCodecEventsExpected = C(
                this.bufferCodecEventsExpected - 1,
                0
              )),
              this.mediaSource &&
                'open' === this.mediaSource.readyState &&
                this.checkPendingTracks());
        }),
        (t.appendChangeType = function r(t, a) {
          var n = this,
            o = this.operationQueue,
            i = {
              execute: function e() {
                var r = n.sourceBuffer[t];
                r &&
                  (Bo.log(
                    '[buffer-controller]: changing ' +
                      t +
                      ' sourceBuffer type to ' +
                      a
                  ),
                  r.changeType(a)),
                  o.shiftAndExecuteNext(t);
              },
              onStart: function e() {},
              onComplete: function e() {},
              onError: function e(a) {
                Bo.warn(
                  '[buffer-controller]: Failed to change ' +
                    t +
                    ' SourceBuffer type',
                  a
                );
              }
            };
          o.append(i, t);
        }),
        (t.onBufferAppending = function a(e, t) {
          var r = this,
            n = this.hls,
            o = this.operationQueue,
            i = this.tracks,
            d = t.data,
            s = t.type,
            l = t.frag,
            c = t.part,
            u = t.chunkMeta,
            g = u.buffering[s],
            f = self.performance.now();
          g.start = f;
          var p = l.stats.buffering,
            m = c ? c.stats.buffering : null;
          0 === p.start && (p.start = f), m && 0 === m.start && (m.start = f);
          var y = i.audio,
            h = !1;
          'audio' === s &&
            'audio/mpeg' === (null == y ? void 0 : y.container) &&
            ((h =
              !this.lastMpegAudioChunk ||
              1 === u.id ||
              this.lastMpegAudioChunk.sn !== u.sn),
            (this.lastMpegAudioChunk = u));
          var T = l.start,
            E = {
              execute: function e() {
                if (((g.executeStart = self.performance.now()), h)) {
                  var t = r.sourceBuffer[s];
                  if (t) {
                    var a = T - t.timestampOffset;
                    0.1 <= R(a) &&
                      (Bo.log(
                        '[buffer-controller]: Updating audio SourceBuffer timestampOffset to ' +
                          T +
                          ' (delta: ' +
                          a +
                          ') sn: ' +
                          l.sn +
                          ')'
                      ),
                      (t.timestampOffset = T));
                  }
                }
                r.appendExecutor(d, s);
              },
              onStart: function e() {},
              onComplete: function e() {
                var t = self.performance.now();
                (g.executeEnd = g.end = t),
                  0 === p.first && (p.first = t),
                  m && 0 === m.first && (m.first = t);
                var a = r.sourceBuffer,
                  n = {};
                for (var o in a) n[o] = ed.getBuffered(a[o]);
                (r.appendError = 0),
                  r.hls.trigger(xo.BUFFER_APPENDED, {
                    type: s,
                    frag: l,
                    part: c,
                    chunkMeta: u,
                    parent: l.type,
                    timeRanges: n
                  });
              },
              onError: function t(e) {
                Bo.error(
                  '[buffer-controller]: Error encountered while trying to append to the ' +
                    s +
                    ' SourceBuffer',
                  e
                );
                var a = {
                  type: Fo.MEDIA_ERROR,
                  parent: l.type,
                  details: No.BUFFER_APPEND_ERROR,
                  frag: l,
                  part: c,
                  chunkMeta: u,
                  error: e,
                  err: e,
                  fatal: !1
                };
                e.code === DOMException.QUOTA_EXCEEDED_ERR
                  ? (a.details = No.BUFFER_FULL_ERROR)
                  : (r.appendError++,
                    (a.details = No.BUFFER_APPEND_ERROR),
                    r.appendError > n.config.appendErrorMaxRetry &&
                      (Bo.error(
                        '[buffer-controller]: Failed ' +
                          n.config.appendErrorMaxRetry +
                          ' times to append segment in sourceBuffer'
                      ),
                      (a.fatal = !0))),
                  n.trigger(xo.ERROR, a);
              }
            };
          o.append(E, s);
        }),
        (t.onBufferFlushing = function a(e, t) {
          var r = this,
            n = this.operationQueue,
            o = function n(a) {
              return {
                execute: r.removeExecutor.bind(
                  r,
                  a,
                  t.startOffset,
                  t.endOffset
                ),
                onStart: function e() {},
                onComplete: function e() {
                  r.hls.trigger(xo.BUFFER_FLUSHED, { type: a });
                },
                onError: function e(t) {
                  Bo.warn(
                    '[buffer-controller]: Failed to remove from ' +
                      a +
                      ' SourceBuffer',
                    t
                  );
                }
              };
            };
          t.type
            ? n.append(o(t.type), t.type)
            : this.getSourceBufferTypes().forEach(function(e) {
                n.append(o(e), e);
              });
        }),
        (t.onFragParsed = function a(e, t) {
          var r = this,
            n = t.frag,
            o = t.part,
            i = [],
            d = o ? o.elementaryStreams : n.elementaryStreams;
          d[Wo.AUDIOVIDEO]
            ? i.push('audiovideo')
            : (d[Wo.AUDIO] && i.push('audio'), d[Wo.VIDEO] && i.push('video'));
          var s = function e() {
            var t = self.performance.now();
            (n.stats.buffering.end = t), o && (o.stats.buffering.end = t);
            var a = o ? o.stats : n.stats;
            r.hls.trigger(xo.FRAG_BUFFERED, {
              frag: n,
              part: o,
              stats: a,
              id: n.type
            });
          };
          0 === i.length &&
            Bo.warn(
              'Fragments must have at least one ElementaryStreamType set. type: ' +
                n.type +
                ' level: ' +
                n.level +
                ' sn: ' +
                n.sn
            ),
            this.blockBuffers(s, i);
        }),
        (t.onFragChanged = function a(e, t) {
          this.flushBackBuffer();
        }),
        (t.onBufferEos = function a(e, t) {
          var r = this,
            n = this.getSourceBufferTypes().reduce(function(e, a) {
              var n = r.sourceBuffer[a];
              return (
                n &&
                  (!t.type || t.type === a) &&
                  ((n.ending = !0),
                  !n.ended &&
                    ((n.ended = !0),
                    Bo.log(
                      '[buffer-controller]: ' + a + ' sourceBuffer now EOS'
                    ))),
                e && (!n || n.ended)
              );
            }, !0);
          n &&
            (Bo.log('[buffer-controller]: Queueing mediaSource.endOfStream()'),
            this.blockBuffers(function() {
              r.getSourceBufferTypes().forEach(function(e) {
                var t = r.sourceBuffer[e];
                t && (t.ending = !1);
              });
              var e = r.mediaSource;
              return e && 'open' === e.readyState
                ? void (Bo.log(
                    '[buffer-controller]: Calling mediaSource.endOfStream()'
                  ),
                  e.endOfStream())
                : void (
                    e &&
                    Bo.info(
                      '[buffer-controller]: Could not call mediaSource.endOfStream(). mediaSource.readyState: ' +
                        e.readyState
                    )
                  );
            }));
        }),
        (t.onLevelUpdated = function a(e, t) {
          var r = t.details;
          r.fragments.length &&
            ((this.details = r),
            this.getSourceBufferTypes().length
              ? this.blockBuffers(this.updateMediaElementDuration.bind(this))
              : this.updateMediaElementDuration());
        }),
        (t.flushBackBuffer = function e() {
          var t = this.hls,
            a = this.details,
            r = this.media,
            n = this.sourceBuffer;
          if (r && null !== a) {
            var o = this.getSourceBufferTypes();
            if (o.length) {
              var i =
                a.live && null !== t.config.liveBackBufferLength
                  ? t.config.liveBackBufferLength
                  : t.config.backBufferLength;
              if (_o(i) && !(0 > i)) {
                var d = r.currentTime,
                  s = a.levelTargetDuration,
                  l = C(i, s),
                  c = P(d / s) * s - l;
                o.forEach(function(e) {
                  var r = n[e];
                  if (r) {
                    var o = ed.getBuffered(r);
                    if (0 < o.length && c > o.start(0)) {
                      if (
                        (t.trigger(xo.BACK_BUFFER_REACHED, { bufferEnd: c }),
                        a.live)
                      )
                        t.trigger(xo.LIVE_BACK_BUFFER_REACHED, {
                          bufferEnd: c
                        });
                      else if (r.ended && o.end(o.length - 1) - d < 2 * s)
                        return void Bo.info(
                          '[buffer-controller]: Cannot flush ' +
                            e +
                            ' back buffer while SourceBuffer is in ended state'
                        );
                      t.trigger(xo.BUFFER_FLUSHING, {
                        startOffset: 0,
                        endOffset: c,
                        type: e
                      });
                    }
                  }
                });
              }
            }
          }
        }),
        (t.updateMediaElementDuration = function e() {
          if (
            this.details &&
            this.media &&
            this.mediaSource &&
            'open' === this.mediaSource.readyState
          ) {
            var t = this.details,
              a = this.hls,
              r = this.media,
              n = this.mediaSource,
              o = t.fragments[0].start + t.totalduration,
              i = r.duration,
              d = _o(n.duration) ? n.duration : 0;
            t.live && a.config.liveDurationInfinity
              ? (Bo.log(
                  '[buffer-controller]: Media Source duration is set to Infinity'
                ),
                (n.duration = 1 / 0),
                this.updateSeekableRange(t))
              : ((o > d && o > i) || !_o(i)) &&
                (Bo.log(
                  '[buffer-controller]: Updating Media Source duration to ' +
                    o.toFixed(3)
                ),
                (n.duration = o));
          }
        }),
        (t.updateSeekableRange = function t(e) {
          var a = this.mediaSource,
            r = e.fragments,
            n = r.length;
          if (n && e.live && null != a && a.setLiveSeekableRange) {
            var o = C(0, r[0].start),
              i = C(o, o + e.totalduration);
            a.setLiveSeekableRange(o, i);
          }
        }),
        (t.checkPendingTracks = function e() {
          var t = this.bufferCodecEventsExpected,
            a = this.operationQueue,
            r = this.pendingTracks,
            n = Object.keys(r).length;
          if ((n && !t) || 2 === n) {
            this.createSourceBuffers(r), (this.pendingTracks = {});
            var o = this.getSourceBufferTypes();
            if (o.length)
              this.hls.trigger(xo.BUFFER_CREATED, { tracks: this.tracks }),
                o.forEach(function(e) {
                  a.executeNext(e);
                });
            else {
              var i = new Error(
                'could not create source buffer for media codec(s)'
              );
              this.hls.trigger(xo.ERROR, {
                type: Fo.MEDIA_ERROR,
                details: No.BUFFER_INCOMPATIBLE_CODECS_ERROR,
                fatal: !0,
                error: i,
                reason: i.message
              });
            }
          }
        }),
        (t.createSourceBuffers = function t(e) {
          var a = this.sourceBuffer,
            r = this.mediaSource;
          if (!r)
            throw Error('createSourceBuffers called when mediaSource was null');
          for (var n in e)
            if (!a[n]) {
              var o = e[n];
              if (!o)
                throw Error(
                  'source buffer exists for track ' +
                    n +
                    ', however track does not'
                );
              var i = o.levelCodec || o.codec,
                d = o.container + ';codecs=' + i;
              Bo.log('[buffer-controller]: creating sourceBuffer(' + d + ')');
              try {
                var s = (a[n] = r.addSourceBuffer(d)),
                  l = n;
                this.addBufferListener(l, 'updatestart', this._onSBUpdateStart),
                  this.addBufferListener(l, 'updateend', this._onSBUpdateEnd),
                  this.addBufferListener(l, 'error', this._onSBUpdateError),
                  (this.tracks[n] = {
                    buffer: s,
                    codec: i,
                    container: o.container,
                    levelCodec: o.levelCodec,
                    metadata: o.metadata,
                    id: o.id
                  });
              } catch (e) {
                Bo.error(
                  '[buffer-controller]: error while trying to add sourceBuffer: ' +
                    e.message
                ),
                  this.hls.trigger(xo.ERROR, {
                    type: Fo.MEDIA_ERROR,
                    details: No.BUFFER_ADD_CODEC_ERROR,
                    fatal: !1,
                    error: e,
                    mimeType: d
                  });
              }
            }
        }),
        (t._onSBUpdateStart = function t(e) {
          var a = this.operationQueue,
            r = a.current(e);
          r.onStart();
        }),
        (t._onSBUpdateEnd = function t(e) {
          var a = this.operationQueue,
            r = a.current(e);
          r.onComplete(), a.shiftAndExecuteNext(e);
        }),
        (t._onSBUpdateError = function a(e, t) {
          var r = new Error(e + ' SourceBuffer error');
          Bo.error('[buffer-controller]: ' + r, t),
            this.hls.trigger(xo.ERROR, {
              type: Fo.MEDIA_ERROR,
              details: No.BUFFER_APPENDING_ERROR,
              error: r,
              fatal: !1
            });
          var n = this.operationQueue.current(e);
          n && n.onError(t);
        }),
        (t.removeExecutor = function r(e, t, a) {
          var n = this.media,
            o = this.mediaSource,
            i = this.operationQueue,
            d = this.sourceBuffer,
            s = d[e];
          if (!n || !o || !s)
            return (
              Bo.warn(
                '[buffer-controller]: Attempting to remove from the ' +
                  e +
                  ' SourceBuffer, but it does not exist'
              ),
              void i.shiftAndExecuteNext(e)
            );
          var l = _o(n.duration) ? n.duration : 1 / 0,
            c = _o(o.duration) ? o.duration : 1 / 0,
            u = C(0, t),
            g = L(a, l, c);
          g > u && !s.ending
            ? ((s.ended = !1),
              Bo.log(
                '[buffer-controller]: Removing [' +
                  u +
                  ',' +
                  g +
                  '] from the ' +
                  e +
                  ' SourceBuffer'
              ),
              s.remove(u, g))
            : i.shiftAndExecuteNext(e);
        }),
        (t.appendExecutor = function a(e, t) {
          var r = this.operationQueue,
            n = this.sourceBuffer,
            o = n[t];
          return o
            ? void ((o.ended = !1), o.appendBuffer(e))
            : (Bo.warn(
                '[buffer-controller]: Attempting to append to the ' +
                  t +
                  ' SourceBuffer, but it does not exist'
              ),
              void r.shiftAndExecuteNext(t));
        }),
        (t.blockBuffers = function a(e, t) {
          var r = this;
          if ((void 0 === t && (t = this.getSourceBufferTypes()), !t.length))
            return (
              Bo.log(
                '[buffer-controller]: Blocking operation requested, but no SourceBuffers exist'
              ),
              void Promise.resolve().then(e)
            );
          var n = this.operationQueue,
            o = t.map(function(e) {
              return n.appendBlocker(e);
            });
          Promise.all(o).then(function() {
            e(),
              t.forEach(function(e) {
                var t = r.sourceBuffer[e];
                (null != t && t.updating) || n.shiftAndExecuteNext(e);
              });
          });
        }),
        (t.getSourceBufferTypes = function e() {
          return Object.keys(this.sourceBuffer);
        }),
        (t.addBufferListener = function r(e, t, a) {
          var n = this.sourceBuffer[e];
          if (n) {
            var o = a.bind(this, e);
            this.listeners[e].push({ event: t, listener: o }),
              n.addEventListener(t, o);
          }
        }),
        (t.removeBufferListeners = function t(e) {
          var a = this.sourceBuffer[e];
          a &&
            this.listeners[e].forEach(function(e) {
              a.removeEventListener(e.event, e.listener);
            });
        }),
        e
      );
    })(),
    us = {
      42: 225,
      92: 233,
      94: 237,
      95: 243,
      96: 250,
      123: 231,
      124: 247,
      125: 209,
      126: 241,
      127: 9608,
      128: 174,
      129: 176,
      130: 189,
      131: 191,
      132: 8482,
      133: 162,
      134: 163,
      135: 9834,
      136: 224,
      137: 32,
      138: 232,
      139: 226,
      140: 234,
      141: 238,
      142: 244,
      143: 251,
      144: 193,
      145: 201,
      146: 211,
      147: 218,
      148: 220,
      149: 252,
      150: 8216,
      151: 161,
      152: 42,
      153: 8217,
      154: 9473,
      155: 169,
      156: 8480,
      157: 8226,
      158: 8220,
      159: 8221,
      160: 192,
      161: 194,
      162: 199,
      163: 200,
      164: 202,
      165: 203,
      166: 235,
      167: 206,
      168: 207,
      169: 239,
      170: 212,
      171: 217,
      172: 249,
      173: 219,
      174: 171,
      175: 187,
      176: 195,
      177: 227,
      178: 205,
      179: 204,
      180: 236,
      181: 210,
      182: 242,
      183: 213,
      184: 245,
      185: 123,
      186: 125,
      187: 92,
      188: 94,
      189: 95,
      190: 124,
      191: 8764,
      192: 196,
      193: 228,
      194: 214,
      195: 246,
      196: 223,
      197: 165,
      198: 164,
      199: 9475,
      200: 197,
      201: 229,
      202: 216,
      203: 248,
      204: 9487,
      205: 9491,
      206: 9495,
      207: 9499
    },
    gs = function t(e) {
      var a = e;
      return us.hasOwnProperty(e) && (a = us[e]), _(a);
    },
    fs = 15,
    ps = 100,
    ms = { 17: 1, 18: 3, 21: 5, 22: 7, 23: 9, 16: 11, 19: 12, 20: 14 },
    ys = { 17: 2, 18: 4, 21: 6, 22: 8, 23: 10, 19: 13, 20: 15 },
    hs = { 25: 1, 26: 3, 29: 5, 30: 7, 31: 9, 24: 11, 27: 12, 28: 14 },
    Ts = { 25: 2, 26: 4, 29: 6, 30: 8, 31: 10, 27: 13, 28: 15 },
    Es = [
      'white',
      'green',
      'blue',
      'cyan',
      'red',
      'yellow',
      'magenta',
      'black',
      'transparent'
    ],
    vs = (function() {
      function e() {
        (this.time = null), (this.verboseLevel = 0);
      }
      var t = e.prototype;
      return (
        (t.log = function a(e, t) {
          if (this.verboseLevel >= e) {
            var r = 'function' == typeof t ? t() : t;
            Bo.log(this.time + ' [' + e + '] ' + r);
          }
        }),
        e
      );
    })(),
    Ss = function t(e) {
      for (var a = [], r = 0; r < e.length; r++) a.push(e[r].toString(16));
      return a;
    },
    Ls = (function() {
      function e(e, t, a, r, n) {
        (this.foreground = void 0),
          (this.underline = void 0),
          (this.italics = void 0),
          (this.background = void 0),
          (this.flash = void 0),
          (this.foreground = e || 'white'),
          (this.underline = t || !1),
          (this.italics = a || !1),
          (this.background = r || 'black'),
          (this.flash = n || !1);
      }
      var t = e.prototype;
      return (
        (t.reset = function e() {
          (this.foreground = 'white'),
            (this.underline = !1),
            (this.italics = !1),
            (this.background = 'black'),
            (this.flash = !1);
        }),
        (t.setStyles = function t(e) {
          for (
            var a = [
                'foreground',
                'underline',
                'italics',
                'background',
                'flash'
              ],
              r = 0,
              n;
            r < a.length;
            r++
          )
            (n = a[r]), e.hasOwnProperty(n) && (this[n] = e[n]);
        }),
        (t.isDefault = function e() {
          return (
            'white' === this.foreground &&
            !this.underline &&
            !this.italics &&
            'black' === this.background &&
            !this.flash
          );
        }),
        (t.equals = function t(e) {
          return (
            this.foreground === e.foreground &&
            this.underline === e.underline &&
            this.italics === e.italics &&
            this.background === e.background &&
            this.flash === e.flash
          );
        }),
        (t.copy = function t(e) {
          (this.foreground = e.foreground),
            (this.underline = e.underline),
            (this.italics = e.italics),
            (this.background = e.background),
            (this.flash = e.flash);
        }),
        (t.toString = function e() {
          return (
            'color=' +
            this.foreground +
            ', underline=' +
            this.underline +
            ', italics=' +
            this.italics +
            ', background=' +
            this.background +
            ', flash=' +
            this.flash
          );
        }),
        e
      );
    })(),
    As = (function() {
      function e(e, t, a, r, n, o) {
        (this.uchar = void 0),
          (this.penState = void 0),
          (this.uchar = e || ' '),
          (this.penState = new Ls(t, a, r, n, o));
      }
      var t = e.prototype;
      return (
        (t.reset = function e() {
          (this.uchar = ' '), this.penState.reset();
        }),
        (t.setChar = function a(e, t) {
          (this.uchar = e), this.penState.copy(t);
        }),
        (t.setPenState = function t(e) {
          this.penState.copy(e);
        }),
        (t.equals = function t(e) {
          return this.uchar === e.uchar && this.penState.equals(e.penState);
        }),
        (t.copy = function t(e) {
          (this.uchar = e.uchar), this.penState.copy(e.penState);
        }),
        (t.isEmpty = function e() {
          return ' ' === this.uchar && this.penState.isDefault();
        }),
        e
      );
    })(),
    Rs = (function() {
      function e(e) {
        (this.chars = void 0),
          (this.pos = void 0),
          (this.currPenState = void 0),
          (this.cueStartTime = void 0),
          (this.logger = void 0),
          (this.chars = []);
        for (var t = 0; t < ps; t++) this.chars.push(new As());
        (this.logger = e), (this.pos = 0), (this.currPenState = new Ls());
      }
      var t = e.prototype;
      return (
        (t.equals = function t(e) {
          for (var a = !0, r = 0; r < ps; r++)
            if (!this.chars[r].equals(e.chars[r])) {
              a = !1;
              break;
            }
          return a;
        }),
        (t.copy = function t(e) {
          for (var a = 0; a < ps; a++) this.chars[a].copy(e.chars[a]);
        }),
        (t.isEmpty = function e() {
          for (var t = !0, a = 0; a < ps; a++)
            if (!this.chars[a].isEmpty()) {
              t = !1;
              break;
            }
          return t;
        }),
        (t.setCursor = function t(e) {
          this.pos !== e && (this.pos = e),
            0 > this.pos
              ? (this.logger.log(3, 'Negative cursor position ' + this.pos),
                (this.pos = 0))
              : this.pos > ps &&
                (this.logger.log(3, 'Too large cursor position ' + this.pos),
                (this.pos = ps));
        }),
        (t.moveCursor = function t(e) {
          var a = this.pos + e;
          if (1 < e)
            for (var r = this.pos + 1; r < a + 1; r++)
              this.chars[r].setPenState(this.currPenState);
          this.setCursor(a);
        }),
        (t.backSpace = function e() {
          this.moveCursor(-1),
            this.chars[this.pos].setChar(' ', this.currPenState);
        }),
        (t.insertChar = function t(e) {
          var a = this;
          144 <= e && this.backSpace();
          var r = gs(e);
          return this.pos >= ps
            ? void this.logger.log(0, function() {
                return (
                  'Cannot insert ' +
                  e.toString(16) +
                  ' (' +
                  r +
                  ') at position ' +
                  a.pos +
                  '. Skipping it!'
                );
              })
            : void (this.chars[this.pos].setChar(r, this.currPenState),
              this.moveCursor(1));
        }),
        (t.clearFromPos = function t(e) {
          var a;
          for (a = e; a < ps; a++) this.chars[a].reset();
        }),
        (t.clear = function e() {
          this.clearFromPos(0), (this.pos = 0), this.currPenState.reset();
        }),
        (t.clearToEndOfRow = function e() {
          this.clearFromPos(this.pos);
        }),
        (t.getTextString = function e() {
          for (var t = [], a = !0, r = 0, n; r < ps; r++)
            (n = this.chars[r].uchar), ' ' !== n && (a = !1), t.push(n);
          return a ? '' : t.join('');
        }),
        (t.setPenStyles = function t(e) {
          this.currPenState.setStyles(e);
          var a = this.chars[this.pos];
          a.setPenState(this.currPenState);
        }),
        e
      );
    })(),
    ks = (function() {
      function e(e) {
        (this.rows = void 0),
          (this.currRow = void 0),
          (this.nrRollUpRows = void 0),
          (this.lastOutputScreen = void 0),
          (this.logger = void 0),
          (this.rows = []);
        for (var t = 0; t < fs; t++) this.rows.push(new Rs(e));
        (this.logger = e),
          (this.currRow = fs - 1),
          (this.nrRollUpRows = null),
          (this.lastOutputScreen = null),
          this.reset();
      }
      var t = e.prototype;
      return (
        (t.reset = function e() {
          for (var t = 0; t < fs; t++) this.rows[t].clear();
          this.currRow = fs - 1;
        }),
        (t.equals = function t(e) {
          for (var a = !0, r = 0; r < fs; r++)
            if (!this.rows[r].equals(e.rows[r])) {
              a = !1;
              break;
            }
          return a;
        }),
        (t.copy = function t(e) {
          for (var a = 0; a < fs; a++) this.rows[a].copy(e.rows[a]);
        }),
        (t.isEmpty = function e() {
          for (var t = !0, a = 0; a < fs; a++)
            if (!this.rows[a].isEmpty()) {
              t = !1;
              break;
            }
          return t;
        }),
        (t.backSpace = function e() {
          var t = this.rows[this.currRow];
          t.backSpace();
        }),
        (t.clearToEndOfRow = function e() {
          var t = this.rows[this.currRow];
          t.clearToEndOfRow();
        }),
        (t.insertChar = function t(e) {
          var a = this.rows[this.currRow];
          a.insertChar(e);
        }),
        (t.setPen = function t(e) {
          var a = this.rows[this.currRow];
          a.setPenStyles(e);
        }),
        (t.moveCursor = function t(e) {
          var a = this.rows[this.currRow];
          a.moveCursor(e);
        }),
        (t.setCursor = function t(e) {
          this.logger.log(2, 'setCursor: ' + e);
          var a = this.rows[this.currRow];
          a.setCursor(e);
        }),
        (t.setPAC = function t(e) {
          this.logger.log(2, function() {
            return 'pacData = ' + JSON.stringify(e);
          });
          var a = e.row - 1;
          if (
            (this.nrRollUpRows &&
              a < this.nrRollUpRows - 1 &&
              (a = this.nrRollUpRows - 1),
            this.nrRollUpRows && this.currRow !== a)
          ) {
            for (var r = 0; r < fs; r++) this.rows[r].clear();
            var n = this.currRow + 1 - this.nrRollUpRows,
              o = this.lastOutputScreen;
            if (o) {
              var d = o.rows[n].cueStartTime,
                s = this.logger.time;
              if (d && null !== s && d < s)
                for (var l = 0; l < this.nrRollUpRows; l++)
                  this.rows[a - this.nrRollUpRows + l + 1].copy(o.rows[n + l]);
            }
          }
          this.currRow = a;
          var c = this.rows[this.currRow];
          if (null !== e.indent) {
            var u = e.indent,
              g = C(u - 1, 0);
            c.setCursor(e.indent), (e.color = c.chars[g].penState.foreground);
          }
          var f = {
            foreground: e.color,
            underline: e.underline,
            italics: e.italics,
            background: 'black',
            flash: !1
          };
          this.setPen(f);
        }),
        (t.setBkgData = function t(e) {
          this.logger.log(2, function() {
            return 'bkgData = ' + JSON.stringify(e);
          }),
            this.backSpace(),
            this.setPen(e),
            this.insertChar(32);
        }),
        (t.setRollUpRows = function t(e) {
          this.nrRollUpRows = e;
        }),
        (t.rollUp = function e() {
          var t = this;
          if (null === this.nrRollUpRows)
            return void this.logger.log(
              3,
              'roll_up but nrRollUpRows not set yet'
            );
          this.logger.log(1, function() {
            return t.getDisplayText();
          });
          var a = this.currRow + 1 - this.nrRollUpRows,
            r = this.rows.splice(a, 1)[0];
          r.clear(),
            this.rows.splice(this.currRow, 0, r),
            this.logger.log(2, 'Rolling up');
        }),
        (t.getDisplayText = function t(e) {
          e = e || !1;
          for (var a = [], r = '', n = -1, o = 0, d; o < fs; o++)
            (d = this.rows[o].getTextString()),
              d &&
                ((n = o + 1),
                e ? a.push('Row ' + n + ": '" + d + "'") : a.push(d.trim()));
          return (
            0 < a.length &&
              (e ? (r = '[' + a.join(' | ') + ']') : (r = a.join('\n'))),
            r
          );
        }),
        (t.getTextAndFormat = function e() {
          return this.rows;
        }),
        e
      );
    })(),
    Ds = (function() {
      function e(e, t, a) {
        (this.chNr = void 0),
          (this.outputFilter = void 0),
          (this.mode = void 0),
          (this.verbose = void 0),
          (this.displayedMemory = void 0),
          (this.nonDisplayedMemory = void 0),
          (this.lastOutputScreen = void 0),
          (this.currRollUpRow = void 0),
          (this.writeScreen = void 0),
          (this.cueStartTime = void 0),
          (this.logger = void 0),
          (this.chNr = e),
          (this.outputFilter = t),
          (this.mode = null),
          (this.verbose = 0),
          (this.displayedMemory = new ks(a)),
          (this.nonDisplayedMemory = new ks(a)),
          (this.lastOutputScreen = new ks(a)),
          (this.currRollUpRow = this.displayedMemory.rows[fs - 1]),
          (this.writeScreen = this.displayedMemory),
          (this.mode = null),
          (this.cueStartTime = null),
          (this.logger = a);
      }
      var t = e.prototype;
      return (
        (t.reset = function e() {
          (this.mode = null),
            this.displayedMemory.reset(),
            this.nonDisplayedMemory.reset(),
            this.lastOutputScreen.reset(),
            this.outputFilter.reset(),
            (this.currRollUpRow = this.displayedMemory.rows[fs - 1]),
            (this.writeScreen = this.displayedMemory),
            (this.mode = null),
            (this.cueStartTime = null);
        }),
        (t.getHandler = function e() {
          return this.outputFilter;
        }),
        (t.setHandler = function t(e) {
          this.outputFilter = e;
        }),
        (t.setPAC = function t(e) {
          this.writeScreen.setPAC(e);
        }),
        (t.setBkgData = function t(e) {
          this.writeScreen.setBkgData(e);
        }),
        (t.setMode = function t(e) {
          e === this.mode ||
            ((this.mode = e),
            this.logger.log(2, function() {
              return 'MODE=' + e;
            }),
            'MODE_POP-ON' === this.mode
              ? (this.writeScreen = this.nonDisplayedMemory)
              : ((this.writeScreen = this.displayedMemory),
                this.writeScreen.reset()),
            'MODE_ROLL-UP' !== this.mode &&
              ((this.displayedMemory.nrRollUpRows = null),
              (this.nonDisplayedMemory.nrRollUpRows = null)),
            (this.mode = e));
        }),
        (t.insertChars = function t(e) {
          for (var a = this, r = 0; r < e.length; r++)
            this.writeScreen.insertChar(e[r]);
          var n =
            this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';
          this.logger.log(2, function() {
            return n + ': ' + a.writeScreen.getDisplayText(!0);
          }),
            ('MODE_PAINT-ON' === this.mode || 'MODE_ROLL-UP' === this.mode) &&
              (this.logger.log(1, function() {
                return 'DISPLAYED: ' + a.displayedMemory.getDisplayText(!0);
              }),
              this.outputDataUpdate());
        }),
        (t.ccRCL = function e() {
          this.logger.log(2, 'RCL - Resume Caption Loading'),
            this.setMode('MODE_POP-ON');
        }),
        (t.ccBS = function e() {
          this.logger.log(2, 'BS - BackSpace'),
            'MODE_TEXT' === this.mode ||
              (this.writeScreen.backSpace(),
              this.writeScreen === this.displayedMemory &&
                this.outputDataUpdate());
        }),
        (t.ccAOF = function e() {}),
        (t.ccAON = function e() {}),
        (t.ccDER = function e() {
          this.logger.log(2, 'DER- Delete to End of Row'),
            this.writeScreen.clearToEndOfRow(),
            this.outputDataUpdate();
        }),
        (t.ccRU = function t(e) {
          this.logger.log(2, 'RU(' + e + ') - Roll Up'),
            (this.writeScreen = this.displayedMemory),
            this.setMode('MODE_ROLL-UP'),
            this.writeScreen.setRollUpRows(e);
        }),
        (t.ccFON = function e() {
          this.logger.log(2, 'FON - Flash On'),
            this.writeScreen.setPen({ flash: !0 });
        }),
        (t.ccRDC = function e() {
          this.logger.log(2, 'RDC - Resume Direct Captioning'),
            this.setMode('MODE_PAINT-ON');
        }),
        (t.ccTR = function e() {
          this.logger.log(2, 'TR'), this.setMode('MODE_TEXT');
        }),
        (t.ccRTD = function e() {
          this.logger.log(2, 'RTD'), this.setMode('MODE_TEXT');
        }),
        (t.ccEDM = function e() {
          this.logger.log(2, 'EDM - Erase Displayed Memory'),
            this.displayedMemory.reset(),
            this.outputDataUpdate(!0);
        }),
        (t.ccCR = function e() {
          this.logger.log(2, 'CR - Carriage Return'),
            this.writeScreen.rollUp(),
            this.outputDataUpdate(!0);
        }),
        (t.ccENM = function e() {
          this.logger.log(2, 'ENM - Erase Non-displayed Memory'),
            this.nonDisplayedMemory.reset();
        }),
        (t.ccEOC = function e() {
          var t = this;
          if (
            (this.logger.log(2, 'EOC - End Of Caption'),
            'MODE_POP-ON' === this.mode)
          ) {
            var a = this.displayedMemory;
            (this.displayedMemory = this.nonDisplayedMemory),
              (this.nonDisplayedMemory = a),
              (this.writeScreen = this.nonDisplayedMemory),
              this.logger.log(1, function() {
                return 'DISP: ' + t.displayedMemory.getDisplayText();
              });
          }
          this.outputDataUpdate(!0);
        }),
        (t.ccTO = function t(e) {
          this.logger.log(2, 'TO(' + e + ') - Tab Offset'),
            this.writeScreen.moveCursor(e);
        }),
        (t.ccMIDROW = function t(e) {
          var a = { flash: !1, underline: 1 == e % 2, italics: 46 <= e };
          if (!a.italics) {
            var r = P(e / 2) - 16,
              n = [
                'white',
                'green',
                'blue',
                'cyan',
                'red',
                'yellow',
                'magenta'
              ];
            a.foreground = n[r];
          } else a.foreground = 'white';
          this.logger.log(2, 'MIDROW: ' + JSON.stringify(a)),
            this.writeScreen.setPen(a);
        }),
        (t.outputDataUpdate = function t(e) {
          void 0 === e && (e = !1);
          var a = this.logger.time;
          null === a ||
            (this.outputFilter &&
              (null !== this.cueStartTime || this.displayedMemory.isEmpty()
                ? !this.displayedMemory.equals(this.lastOutputScreen) &&
                  (this.outputFilter.newCue(
                    this.cueStartTime,
                    a,
                    this.lastOutputScreen
                  ),
                  e &&
                    this.outputFilter.dispatchCue &&
                    this.outputFilter.dispatchCue(),
                  (this.cueStartTime = this.displayedMemory.isEmpty()
                    ? null
                    : a))
                : (this.cueStartTime = a),
              this.lastOutputScreen.copy(this.displayedMemory)));
        }),
        (t.cueSplitAtTime = function t(e) {
          this.outputFilter &&
            !this.displayedMemory.isEmpty() &&
            (this.outputFilter.newCue &&
              this.outputFilter.newCue(
                this.cueStartTime,
                e,
                this.displayedMemory
              ),
            (this.cueStartTime = e));
        }),
        e
      );
    })(),
    Is = (function() {
      function e(e, t, a) {
        (this.channels = void 0),
          (this.currentChannel = 0),
          (this.cmdHistory = void 0),
          (this.logger = void 0);
        var r = new vs();
        (this.channels = [null, new Ds(e, t, r), new Ds(e + 1, a, r)]),
          (this.cmdHistory = _r()),
          (this.logger = r);
      }
      var t = e.prototype;
      return (
        (t.getHandler = function t(e) {
          return this.channels[e].getHandler();
        }),
        (t.setHandler = function a(e, t) {
          this.channels[e].setHandler(t);
        }),
        (t.addData = function r(e, t) {
          var n = !1,
            o,
            d,
            s;
          this.logger.time = e;
          for (var l = 0; l < t.length; l += 2) {
            if (((d = 127 & t[l]), (s = 127 & t[l + 1]), 0 === d && 0 === s))
              continue;
            else
              this.logger.log(
                3,
                '[' + Ss([t[l], t[l + 1]]) + '] -> (' + Ss([d, s]) + ')'
              );
            if (
              ((o = this.parseCmd(d, s)),
              o || (o = this.parseMidrow(d, s)),
              o || (o = this.parsePAC(d, s)),
              o || (o = this.parseBackgroundAttributes(d, s)),
              !o && ((n = this.parseChars(d, s)), n))
            ) {
              var c = this.currentChannel;
              if (c && 0 < c) {
                var u = this.channels[c];
                u.insertChars(n);
              } else this.logger.log(2, 'No channel found yet. TEXT-MODE?');
            }
            o ||
              n ||
              this.logger.log(
                2,
                "Couldn't parse cleaned data " +
                  Ss([d, s]) +
                  ' orig: ' +
                  Ss([t[l], t[l + 1]])
              );
          }
        }),
        (t.parseCmd = function a(e, t) {
          var r = this.cmdHistory,
            n =
              (20 === e || 28 === e || 21 === e || 29 === e) &&
              32 <= t &&
              47 >= t,
            o = (23 === e || 31 === e) && 33 <= t && 35 >= t;
          if (!(n || o)) return !1;
          if (Pr(e, t, r))
            return (
              Cr(null, null, r),
              this.logger.log(
                3,
                'Repeated command (' + Ss([e, t]) + ') is dropped'
              ),
              !0
            );
          var i = 20 === e || 21 === e || 23 === e ? 1 : 2,
            d = this.channels[i];
          return (
            20 === e || 21 === e || 28 === e || 29 === e
              ? 32 === t
                ? d.ccRCL()
                : 33 === t
                ? d.ccBS()
                : 34 === t
                ? d.ccAOF()
                : 35 === t
                ? d.ccAON()
                : 36 === t
                ? d.ccDER()
                : 37 === t
                ? d.ccRU(2)
                : 38 === t
                ? d.ccRU(3)
                : 39 === t
                ? d.ccRU(4)
                : 40 === t
                ? d.ccFON()
                : 41 === t
                ? d.ccRDC()
                : 42 === t
                ? d.ccTR()
                : 43 === t
                ? d.ccRTD()
                : 44 === t
                ? d.ccEDM()
                : 45 === t
                ? d.ccCR()
                : 46 === t
                ? d.ccENM()
                : 47 == t && d.ccEOC()
              : d.ccTO(t - 32),
            Cr(e, t, r),
            (this.currentChannel = i),
            !0
          );
        }),
        (t.parseMidrow = function a(e, t) {
          var r = 0;
          if ((17 === e || 25 === e) && 32 <= t && 47 >= t) {
            if (((r = 17 === e ? 1 : 2), r !== this.currentChannel))
              return (
                this.logger.log(0, 'Mismatch channel in midrow parsing'), !1
              );
            var n = this.channels[r];
            return (
              !!n &&
              (n.ccMIDROW(t),
              this.logger.log(3, 'MIDROW (' + Ss([e, t]) + ')'),
              !0)
            );
          }
          return !1;
        }),
        (t.parsePAC = function a(e, t) {
          var r = this.cmdHistory,
            n =
              ((17 <= e && 23 >= e) || (25 <= e && 31 >= e)) &&
              64 <= t &&
              127 >= t,
            o = (16 === e || 24 === e) && 64 <= t && 95 >= t,
            i;
          if (!(n || o)) return !1;
          if (Pr(e, t, r)) return Cr(null, null, r), !0;
          var d = 23 >= e ? 1 : 2;
          i =
            64 <= t && 95 >= t
              ? 1 === d
                ? ms[e]
                : hs[e]
              : 1 === d
              ? ys[e]
              : Ts[e];
          var s = this.channels[d];
          return (
            !!s &&
            (s.setPAC(this.interpretPAC(i, t)),
            Cr(e, t, r),
            (this.currentChannel = d),
            !0)
          );
        }),
        (t.interpretPAC = function a(e, t) {
          var r = {
              color: null,
              italics: !1,
              indent: null,
              underline: !1,
              row: e
            },
            n;
          return (
            (n = 95 < t ? t - 96 : t - 64),
            (r.underline = 1 == (1 & n)),
            13 >= n
              ? (r.color = [
                  'white',
                  'green',
                  'blue',
                  'cyan',
                  'red',
                  'yellow',
                  'magenta',
                  'white'
                ][P(n / 2)])
              : 15 >= n
              ? ((r.italics = !0), (r.color = 'white'))
              : (r.indent = 4 * P((n - 16) / 2)),
            r
          );
        }),
        (t.parseChars = function a(e, t) {
          var r = null,
            n = null,
            o;
          if (
            (25 <= e ? ((o = 2), (n = e - 8)) : ((o = 1), (n = e)),
            17 <= n && 19 >= n)
          ) {
            var i;
            (i = 17 === n ? t + 80 : 18 === n ? t + 112 : t + 144),
              this.logger.log(
                2,
                "Special char '" + gs(i) + "' in channel " + o
              ),
              (r = [i]);
          } else 32 <= e && 127 >= e && (r = 0 === t ? [e] : [e, t]);
          if (r) {
            var d = Ss(r);
            this.logger.log(3, 'Char codes =  ' + d.join(',')),
              Cr(e, t, this.cmdHistory);
          }
          return r;
        }),
        (t.parseBackgroundAttributes = function a(e, t) {
          var r = (16 === e || 24 === e) && 32 <= t && 47 >= t,
            n = (23 === e || 31 === e) && 45 <= t && 47 >= t;
          if (!(r || n)) return !1;
          var o = {},
            i;
          16 === e || 24 === e
            ? ((i = P((t - 32) / 2)),
              (o.background = Es[i]),
              1 == t % 2 && (o.background += '_semi'))
            : 45 === t
            ? (o.background = 'transparent')
            : ((o.foreground = 'black'), 47 == t && (o.underline = !0));
          var d = 23 >= e ? 1 : 2,
            s = this.channels[d];
          return s.setBkgData(o), Cr(e, t, this.cmdHistory), !0;
        }),
        (t.reset = function e() {
          for (var t = 0, a; t < Object.keys(this.channels).length; t++)
            (a = this.channels[t]), a && a.reset();
          this.cmdHistory = _r();
        }),
        (t.cueSplitAtTime = function t(e) {
          for (var a = 0, r; a < this.channels.length; a++)
            (r = this.channels[a]), r && r.cueSplitAtTime(e);
        }),
        e
      );
    })(),
    bs = (function() {
      function e(e, t) {
        (this.timelineController = void 0),
          (this.cueRanges = []),
          (this.trackName = void 0),
          (this.startTime = null),
          (this.endTime = null),
          (this.screen = null),
          (this.timelineController = e),
          (this.trackName = t);
      }
      var t = e.prototype;
      return (
        (t.dispatchCue = function e() {
          null === this.startTime ||
            (this.timelineController.addCues(
              this.trackName,
              this.startTime,
              this.endTime,
              this.screen,
              this.cueRanges
            ),
            (this.startTime = null));
        }),
        (t.newCue = function r(e, t, a) {
          (null === this.startTime || this.startTime > e) &&
            (this.startTime = e),
            (this.endTime = t),
            (this.screen = a),
            this.timelineController.createCaptionsTrack(this.trackName);
        }),
        (t.reset = function e() {
          (this.cueRanges = []), (this.startTime = null);
        }),
        e
      );
    })(),
    Cs = (function() {
      function e(e, t) {
        if ('string' != typeof t) return !1;
        if (!Array.isArray(e)) return !1;
        var a = t.toLowerCase();
        return !!~e.indexOf(a) && a;
      }
      function t(t) {
        return e(o, t);
      }
      function a(t) {
        return e(i, t);
      }
      function r(e) {
        for (
          var t = arguments.length, a = Array(1 < t ? t - 1 : 0), r = 1;
          r < t;
          r++
        )
          a[r - 1] = arguments[r];
        for (var n = 1, o; n < arguments.length; n++)
          for (var d in ((o = arguments[n]), o)) e[d] = o[d];
        return e;
      }
      function n(e, n, o) {
        var i = this,
          d = { enumerable: !0 };
        i.hasBeenReset = !1;
        var s = '',
          l = !1,
          c = e,
          u = n,
          g = o,
          f = null,
          p = '',
          m = !0,
          y = 'auto',
          h = 'start',
          T = 50,
          E = 'middle',
          v = 50,
          S = 'middle';
        Object.defineProperty(
          i,
          'id',
          r({}, d, {
            get: function e() {
              return s;
            },
            set: function t(e) {
              s = '' + e;
            }
          })
        ),
          Object.defineProperty(
            i,
            'pauseOnExit',
            r({}, d, {
              get: function e() {
                return l;
              },
              set: function t(e) {
                l = !!e;
              }
            })
          ),
          Object.defineProperty(
            i,
            'startTime',
            r({}, d, {
              get: function e() {
                return c;
              },
              set: function t(e) {
                if ('number' != typeof e)
                  throw new TypeError('Start time must be set to a number.');
                (c = e), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'endTime',
            r({}, d, {
              get: function e() {
                return u;
              },
              set: function t(e) {
                if ('number' != typeof e)
                  throw new TypeError('End time must be set to a number.');
                (u = e), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'text',
            r({}, d, {
              get: function e() {
                return g;
              },
              set: function t(e) {
                (g = '' + e), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'region',
            r({}, d, {
              get: function e() {
                return f;
              },
              set: function t(e) {
                (f = e), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'vertical',
            r({}, d, {
              get: function e() {
                return p;
              },
              set: function a(e) {
                var r = t(e);
                if (!1 === r)
                  throw new SyntaxError(
                    'An invalid or illegal string was specified.'
                  );
                (p = r), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'snapToLines',
            r({}, d, {
              get: function e() {
                return m;
              },
              set: function t(e) {
                (m = !!e), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'line',
            r({}, d, {
              get: function e() {
                return y;
              },
              set: function t(e) {
                if ('number' != typeof e && 'auto' !== e)
                  throw new SyntaxError(
                    'An invalid number or illegal string was specified.'
                  );
                (y = e), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'lineAlign',
            r({}, d, {
              get: function e() {
                return h;
              },
              set: function t(e) {
                var r = a(e);
                if (!r)
                  throw new SyntaxError(
                    'An invalid or illegal string was specified.'
                  );
                (h = r), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'position',
            r({}, d, {
              get: function e() {
                return T;
              },
              set: function t(e) {
                if (0 > e || 100 < e)
                  throw new Error('Position must be between 0 and 100.');
                (T = e), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'positionAlign',
            r({}, d, {
              get: function e() {
                return E;
              },
              set: function t(e) {
                var r = a(e);
                if (!r)
                  throw new SyntaxError(
                    'An invalid or illegal string was specified.'
                  );
                (E = r), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'size',
            r({}, d, {
              get: function e() {
                return v;
              },
              set: function t(e) {
                if (0 > e || 100 < e)
                  throw new Error('Size must be between 0 and 100.');
                (v = e), (this.hasBeenReset = !0);
              }
            })
          ),
          Object.defineProperty(
            i,
            'align',
            r({}, d, {
              get: function e() {
                return S;
              },
              set: function t(e) {
                var r = a(e);
                if (!r)
                  throw new SyntaxError(
                    'An invalid or illegal string was specified.'
                  );
                (S = r), (this.hasBeenReset = !0);
              }
            })
          ),
          (i.displayState = void 0);
      }
      if ('undefined' != typeof self && self.VTTCue) return self.VTTCue;
      var o = ['', 'lr', 'rl'],
        i = ['start', 'middle', 'end', 'left', 'right'];
      return (
        (n.prototype.getCueAsHTML = function() {
          var e = self.WebVTT;
          return e.convertCueToDOMTree(self, this.text);
        }),
        n
      );
    })(),
    Ps = (function() {
      function e() {}
      var t = e.prototype;
      return (
        (t.decode = function a(e, t) {
          if (!e) return '';
          if ('string' != typeof e)
            throw new Error('Error - expected string data.');
          return decodeURIComponent(encodeURIComponent(e));
        }),
        e
      );
    })(),
    _s = (function() {
      function e() {
        this.values = Object.create(null);
      }
      var t = e.prototype;
      return (
        (t.set = function a(e, t) {
          this.get(e) || '' === t || (this.values[e] = t);
        }),
        (t.get = function r(e, t, a) {
          return a
            ? this.has(e)
              ? this.values[e]
              : t[a]
            : this.has(e)
            ? this.values[e]
            : t;
        }),
        (t.has = function t(e) {
          return e in this.values;
        }),
        (t.alt = function a(e, t, r) {
          for (var o = 0; o < r.length; ++o)
            if (t === r[o]) {
              this.set(e, t);
              break;
            }
        }),
        (t.integer = function a(e, t) {
          /^-?\d+$/.test(t) && this.set(e, parseInt(t, 10));
        }),
        (t.percent = function a(e, t) {
          if (/^([\d]{1,3})(\.[\d]*)?%$/.test(t)) {
            var a = parseFloat(t);
            if (0 <= a && 100 >= a) return this.set(e, a), !0;
          }
          return !1;
        }),
        e
      );
    })(),
    xs = new Cs(0, 0, ''),
    Fs = 'middle' === xs.align ? 'middle' : 'center',
    Ns = (function() {
      function e() {
        (this.state = 'INITIAL'),
          (this.buffer = ''),
          (this.decoder = new Ps()),
          (this.regionList = []),
          (this.cue = null),
          (this.oncue = void 0),
          (this.onparsingerror = void 0),
          (this.onflush = void 0);
      }
      var t = e.prototype;
      return (
        (t.parse = function t(e) {
          function a() {
            var e = n.buffer,
              t = 0;
            for (e = Or(e); t < e.length && '\r' !== e[t] && '\n' !== e[t]; )
              ++t;
            var a = e.slice(0, t);
            return (
              '\r' === e[t] && ++t,
              '\n' === e[t] && ++t,
              (n.buffer = e.slice(t)),
              a
            );
          }
          function r(e) {
            Fr(e, function(e, t) {}, /:/);
          }
          var n = this;
          e && (n.buffer += n.decoder.decode(e, { stream: !0 }));
          try {
            var o = '';
            if ('INITIAL' === n.state) {
              if (!/\r\n|\n/.test(n.buffer)) return this;
              o = a();
              var i = o.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
              if (!(null != i && i[0]))
                throw new Error('Malformed WebVTT signature.');
              n.state = 'HEADER';
            }
            for (var d = !1; n.buffer; ) {
              if (!/\r\n|\n/.test(n.buffer)) return this;
              switch ((d ? (d = !1) : (o = a()), n.state)) {
                case 'HEADER':
                  /:/.test(o) ? r(o) : !o && (n.state = 'ID');
                  continue;
                case 'NOTE':
                  o || (n.state = 'ID');
                  continue;
                case 'ID':
                  if (/^NOTE($|[ \t])/.test(o)) {
                    n.state = 'NOTE';
                    break;
                  }
                  if (!o) continue;
                  if (
                    ((n.cue = new Cs(0, 0, '')),
                    (n.state = 'CUE'),
                    -1 === o.indexOf('-->'))
                  ) {
                    n.cue.id = o;
                    continue;
                  }
                case 'CUE':
                  if (!n.cue) {
                    n.state = 'BADCUE';
                    continue;
                  }
                  try {
                    Nr(o, n.cue, n.regionList);
                  } catch (t) {
                    (n.cue = null), (n.state = 'BADCUE');
                    continue;
                  }
                  n.state = 'CUETEXT';
                  continue;
                case 'CUETEXT':
                  {
                    var s = -1 !== o.indexOf('-->');
                    if (!o || (s && (d = !0))) {
                      n.oncue && n.cue && n.oncue(n.cue),
                        (n.cue = null),
                        (n.state = 'ID');
                      continue;
                    }
                    if (null === n.cue) continue;
                    n.cue.text && (n.cue.text += '\n'), (n.cue.text += o);
                  }
                  continue;
                case 'BADCUE':
                  o || (n.state = 'ID');
              }
            }
          } catch (t) {
            'CUETEXT' === n.state && n.cue && n.oncue && n.oncue(n.cue),
              (n.cue = null),
              (n.state = 'INITIAL' === n.state ? 'BADWEBVTT' : 'BADCUE');
          }
          return this;
        }),
        (t.flush = function e() {
          var t = this;
          try {
            if (
              ((t.cue || 'HEADER' === t.state) &&
                ((t.buffer += '\n\n'), t.parse()),
              'INITIAL' === t.state || 'BADWEBVTT' === t.state)
            )
              throw new Error('Malformed WebVTT signature.');
          } catch (a) {
            t.onparsingerror && t.onparsingerror(a);
          }
          return t.onflush && t.onflush(), this;
        }),
        e
      );
    })(),
    Os = /\r\n|\n\r|\n|\r/g,
    Ms = function r(e, t, a) {
      return void 0 === a && (a = 0), e.slice(a, a + t.length) === t;
    },
    ws = function t(e) {
      var a = parseInt(e.slice(-3)),
        r = parseInt(e.slice(-6, -4)),
        n = parseInt(e.slice(-9, -7)),
        o = 9 < e.length ? parseInt(e.substring(0, e.indexOf(':'))) : 0;
      if (!_o(a) || !_o(r) || !_o(n) || !_o(o))
        throw Error('Malformed X-TIMESTAMP-MAP: Local:' + e);
      return (a += 1e3 * r), (a += 60000 * n), (a += 3600000 * o), a;
    },
    Bs = function t(e) {
      for (var a = 5381, r = e.length; r; ) a = (33 * a) ^ e.charCodeAt(--r);
      return (a >>> 0).toString();
    },
    Us = function r(e, t, a) {
      var n = e[t],
        o = e[n.prevCC];
      if (!o || (!o.new && n.new))
        return (e.ccOffset = e.presentationOffset = n.start), void (n.new = !1);
      for (; null != (i = o) && i.new; ) {
        var i;
        (e.ccOffset += n.start - o.start),
          (n.new = !1),
          (n = o),
          (o = e[n.prevCC]);
      }
      e.presentationOffset = a;
    },
    Gs = 'stpp.ttml.im1t',
    Ks = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/,
    Hs = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/,
    Vs = {
      left: 'start',
      center: 'center',
      right: 'end',
      start: 'start',
      end: 'end'
    },
    Ws = (function() {
      function e(e) {
        if (
          ((this.hls = void 0),
          (this.media = null),
          (this.config = void 0),
          (this.enabled = !0),
          (this.Cues = void 0),
          (this.textTracks = []),
          (this.tracks = []),
          (this.initPTS = []),
          (this.unparsedVttFrags = []),
          (this.captionsTracks = {}),
          (this.nonNativeCaptionsTracks = {}),
          (this.cea608Parser1 = void 0),
          (this.cea608Parser2 = void 0),
          (this.lastSn = -1),
          (this.lastPartIndex = -1),
          (this.prevCC = -1),
          (this.vttCCs = $r()),
          (this.captionsProperties = void 0),
          (this.hls = e),
          (this.config = e.config),
          (this.Cues = e.config.cueHandler),
          (this.captionsProperties = {
            textTrack1: {
              label: this.config.captionsTextTrack1Label,
              languageCode: this.config.captionsTextTrack1LanguageCode
            },
            textTrack2: {
              label: this.config.captionsTextTrack2Label,
              languageCode: this.config.captionsTextTrack2LanguageCode
            },
            textTrack3: {
              label: this.config.captionsTextTrack3Label,
              languageCode: this.config.captionsTextTrack3LanguageCode
            },
            textTrack4: {
              label: this.config.captionsTextTrack4Label,
              languageCode: this.config.captionsTextTrack4LanguageCode
            }
          }),
          this.config.enableCEA708Captions)
        ) {
          var t = new bs(this, 'textTrack1'),
            a = new bs(this, 'textTrack2'),
            r = new bs(this, 'textTrack3'),
            n = new bs(this, 'textTrack4');
          (this.cea608Parser1 = new Is(1, t, a)),
            (this.cea608Parser2 = new Is(3, r, n));
        }
        e.on(xo.MEDIA_ATTACHING, this.onMediaAttaching, this),
          e.on(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
          e.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
          e.on(xo.MANIFEST_LOADED, this.onManifestLoaded, this),
          e.on(xo.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this),
          e.on(xo.FRAG_LOADING, this.onFragLoading, this),
          e.on(xo.FRAG_LOADED, this.onFragLoaded, this),
          e.on(xo.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this),
          e.on(xo.FRAG_DECRYPTED, this.onFragDecrypted, this),
          e.on(xo.INIT_PTS_FOUND, this.onInitPtsFound, this),
          e.on(xo.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this),
          e.on(xo.BUFFER_FLUSHING, this.onBufferFlushing, this);
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          var t = this.hls;
          t.off(xo.MEDIA_ATTACHING, this.onMediaAttaching, this),
            t.off(xo.MEDIA_DETACHING, this.onMediaDetaching, this),
            t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.MANIFEST_LOADED, this.onManifestLoaded, this),
            t.off(
              xo.SUBTITLE_TRACKS_UPDATED,
              this.onSubtitleTracksUpdated,
              this
            ),
            t.off(xo.FRAG_LOADING, this.onFragLoading, this),
            t.off(xo.FRAG_LOADED, this.onFragLoaded, this),
            t.off(xo.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this),
            t.off(xo.FRAG_DECRYPTED, this.onFragDecrypted, this),
            t.off(xo.INIT_PTS_FOUND, this.onInitPtsFound, this),
            t.off(
              xo.SUBTITLE_TRACKS_CLEARED,
              this.onSubtitleTracksCleared,
              this
            ),
            t.off(xo.BUFFER_FLUSHING, this.onBufferFlushing, this),
            (this.hls = this.config = this.cea608Parser1 = this.cea608Parser2 = null);
        }),
        (t.addCues = function o(e, t, a, r, n) {
          for (var d = !1, s = n.length; s--; ) {
            var l = n[s],
              c = Qr(l[0], l[1], t, a);
            if (
              0 <= c &&
              ((l[0] = L(l[0], t)),
              (l[1] = C(l[1], a)),
              (d = !0),
              0.5 < c / (a - t))
            )
              return;
          }
          if ((d || n.push([t, a]), this.config.renderTextTracksNatively)) {
            var u = this.captionsTracks[e];
            this.Cues.newCue(u, t, a, r);
          } else {
            var g = this.Cues.newCue(null, t, a, r);
            this.hls.trigger(xo.CUES_PARSED, {
              type: 'captions',
              cues: g,
              track: e
            });
          }
        }),
        (t.onInitPtsFound = function a(e, t) {
          var r = this,
            n = t.frag,
            o = t.id,
            i = t.initPTS,
            d = t.timescale,
            s = this.unparsedVttFrags;
          'main' === o && (this.initPTS[n.cc] = { baseTime: i, timescale: d }),
            s.length &&
              ((this.unparsedVttFrags = []),
              s.forEach(function(e) {
                r.onFragLoaded(xo.FRAG_LOADED, e);
              }));
        }),
        (t.getExistingTrack = function t(e) {
          var a = this.media;
          if (a)
            for (var r = 0, n; r < a.textTracks.length; r++)
              if (((n = a.textTracks[r]), n[e])) return n;
          return null;
        }),
        (t.createCaptionsTrack = function t(e) {
          this.config.renderTextTracksNatively
            ? this.createNativeTrack(e)
            : this.createNonNativeTrack(e);
        }),
        (t.createNativeTrack = function t(e) {
          if (!this.captionsTracks[e]) {
            var a = this.captionsProperties,
              r = this.captionsTracks,
              n = this.media,
              o = a[e],
              i = o.label,
              d = o.languageCode,
              s = this.getExistingTrack(e);
            if (!s) {
              var l = this.createTextTrack('captions', i, d);
              l && ((l[e] = !0), (r[e] = l));
            } else (r[e] = s), Kt(r[e]), Ut(r[e], n);
          }
        }),
        (t.createNonNativeTrack = function t(e) {
          if (!this.nonNativeCaptionsTracks[e]) {
            var a = this.captionsProperties[e];
            if (a) {
              var r = a.label,
                n = {
                  _id: e,
                  label: r,
                  kind: 'captions',
                  default: !!a.media && !!a.media.default,
                  closedCaptions: a.media
                };
              (this.nonNativeCaptionsTracks[e] = n),
                this.hls.trigger(xo.NON_NATIVE_TEXT_TRACKS_FOUND, {
                  tracks: [n]
                });
            }
          }
        }),
        (t.createTextTrack = function r(e, t, a) {
          var n = this.media;
          return n ? n.addTextTrack(e, t, a) : void 0;
        }),
        (t.onMediaAttaching = function a(e, t) {
          (this.media = t.media), this._cleanTracks();
        }),
        (t.onMediaDetaching = function e() {
          var t = this.captionsTracks;
          Object.keys(t).forEach(function(e) {
            Kt(t[e]), delete t[e];
          }),
            (this.nonNativeCaptionsTracks = {});
        }),
        (t.onManifestLoading = function e() {
          (this.lastSn = -1),
            (this.lastPartIndex = -1),
            (this.prevCC = -1),
            (this.vttCCs = $r()),
            this._cleanTracks(),
            (this.tracks = []),
            (this.captionsTracks = {}),
            (this.nonNativeCaptionsTracks = {}),
            (this.textTracks = []),
            (this.unparsedVttFrags = []),
            (this.initPTS = []),
            this.cea608Parser1 &&
              this.cea608Parser2 &&
              (this.cea608Parser1.reset(), this.cea608Parser2.reset());
        }),
        (t._cleanTracks = function e() {
          var t = this.media;
          if (t) {
            var a = t.textTracks;
            if (a) for (var r = 0; r < a.length; r++) Kt(a[r]);
          }
        }),
        (t.onSubtitleTracksUpdated = function a(e, t) {
          var r = this,
            n = t.subtitleTracks || [],
            o = n.some(function(e) {
              return e.textCodec === Gs;
            });
          if (this.config.enableWebVTT || (o && this.config.enableIMSC1)) {
            var i = Dr(this.tracks, n);
            if (i) return void (this.tracks = n);
            if (
              ((this.textTracks = []),
              (this.tracks = n),
              this.config.renderTextTracksNatively)
            ) {
              var d = this.media ? this.media.textTracks : null;
              this.tracks.forEach(function(e, t) {
                var a;
                if (d && t < d.length) {
                  for (var n = null, o = 0; o < d.length; o++)
                    if (Xr(d[o], e)) {
                      n = d[o];
                      break;
                    }
                  n && (a = n);
                }
                if (a) Kt(a);
                else {
                  var s = r._captionsOrSubtitlesFromCharacteristics(e);
                  (a = r.createTextTrack(s, e.name, e.lang)),
                    a && (a.mode = 'disabled');
                }
                a && ((a.groupId = e.groupId), r.textTracks.push(a));
              });
            } else if (this.tracks.length) {
              var s = this.tracks.map(function(e) {
                return {
                  label: e.name,
                  kind: e.type.toLowerCase(),
                  default: e.default,
                  subtitleTrack: e
                };
              });
              this.hls.trigger(xo.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: s });
            }
          }
        }),
        (t._captionsOrSubtitlesFromCharacteristics = function t(e) {
          if (e.attrs.CHARACTERISTICS) {
            var a = /transcribes-spoken-dialog/gi.test(e.attrs.CHARACTERISTICS),
              r = /describes-music-and-sound/gi.test(e.attrs.CHARACTERISTICS);
            if (a && r) return 'captions';
          }
          return 'subtitles';
        }),
        (t.onManifestLoaded = function a(e, t) {
          var r = this;
          this.config.enableCEA708Captions &&
            t.captions &&
            t.captions.forEach(function(e) {
              var t = /(?:CC|SERVICE)([1-4])/.exec(e.instreamId);
              if (t) {
                var a = 'textTrack' + t[1],
                  n = r.captionsProperties[a];
                n &&
                  ((n.label = e.name),
                  e.lang && (n.languageCode = e.lang),
                  (n.media = e));
              }
            });
        }),
        (t.closedCaptionsForLevel = function t(e) {
          var a = this.hls.levels[e.level];
          return null == a ? void 0 : a.attrs['CLOSED-CAPTIONS'];
        }),
        (t.onFragLoading = function a(e, t) {
          var r = this.cea608Parser1,
            n = this.cea608Parser2,
            o = this.lastSn,
            i = this.lastPartIndex;
          if (this.enabled && r && n && t.frag.type === Pi.MAIN) {
            var d = t.frag.sn,
              s =
                null ==
                (l = null == t || null == (c = t.part) ? void 0 : c.index)
                  ? -1
                  : l,
              l,
              c;
            d === o + 1 || (d === o && s === i + 1) || (r.reset(), n.reset()),
              (this.lastSn = d),
              (this.lastPartIndex = s);
          }
        }),
        (t.onFragLoaded = function a(e, t) {
          var r = t.frag,
            n = t.payload;
          if (r.type === Pi.SUBTITLE)
            if (n.byteLength) {
              var o = r.decryptdata,
                i = 'stats' in t;
              if (null == o || !o.encrypted || i) {
                var d = this.tracks[r.level],
                  s = this.vttCCs;
                s[r.cc] ||
                  ((s[r.cc] = { start: r.start, prevCC: this.prevCC, new: !0 }),
                  (this.prevCC = r.cc)),
                  d && d.textCodec === Gs
                    ? this._parseIMSC1(r, n)
                    : this._parseVTTs(t);
              }
            } else
              this.hls.trigger(xo.SUBTITLE_FRAG_PROCESSED, {
                success: !1,
                frag: r,
                error: new Error('Empty subtitle payload')
              });
        }),
        (t._parseIMSC1 = function a(e, t) {
          var r = this,
            n = this.hls;
          Br(
            t,
            this.initPTS[e.cc],
            function(t) {
              r._appendCues(t, e.level),
                n.trigger(xo.SUBTITLE_FRAG_PROCESSED, { success: !0, frag: e });
            },
            function(t) {
              Bo.log('Failed to parse IMSC1: ' + t),
                n.trigger(xo.SUBTITLE_FRAG_PROCESSED, {
                  success: !1,
                  frag: e,
                  error: t
                });
            }
          );
        }),
        (t._parseVTTs = function t(e) {
          var a = this,
            r = e.frag,
            n = e.payload,
            o = this.initPTS,
            i = this.unparsedVttFrags,
            d = o.length - 1,
            s;
          if (!o[r.cc] && -1 === d) return void i.push(e);
          var l = this.hls,
            c =
              null != (s = r.initSegment) && s.data
                ? ct(r.initSegment.data, new Uint8Array(n))
                : n;
          wr(
            c,
            this.initPTS[r.cc],
            this.vttCCs,
            r.cc,
            r.start,
            function(e) {
              a._appendCues(e, r.level),
                l.trigger(xo.SUBTITLE_FRAG_PROCESSED, { success: !0, frag: r });
            },
            function(t) {
              var o = 'Missing initPTS for VTT MPEGTS' === t.message;
              o ? i.push(e) : a._fallbackToIMSC1(r, n),
                Bo.log('Failed to parse VTT cue: ' + t),
                (o && d > r.cc) ||
                  l.trigger(xo.SUBTITLE_FRAG_PROCESSED, {
                    success: !1,
                    frag: r,
                    error: t
                  });
            }
          );
        }),
        (t._fallbackToIMSC1 = function a(e, t) {
          var r = this,
            n = this.tracks[e.level];
          n.textCodec ||
            Br(
              t,
              this.initPTS[e.cc],
              function() {
                (n.textCodec = Gs), r._parseIMSC1(e, t);
              },
              function() {
                n.textCodec = 'wvtt';
              }
            );
        }),
        (t._appendCues = function a(e, t) {
          var r = this.hls;
          if (this.config.renderTextTracksNatively) {
            var n = this.textTracks[t];
            if (!n || 'disabled' === n.mode) return;
            e.forEach(function(e) {
              return Gt(n, e);
            });
          } else {
            var o = this.tracks[t];
            if (!o) return;
            var i = o.default ? 'default' : 'subtitles' + t;
            r.trigger(xo.CUES_PARSED, { type: 'subtitles', cues: e, track: i });
          }
        }),
        (t.onFragDecrypted = function a(e, t) {
          var r = t.frag;
          r.type === Pi.SUBTITLE && this.onFragLoaded(xo.FRAG_LOADED, t);
        }),
        (t.onSubtitleTracksCleared = function e() {
          (this.tracks = []), (this.captionsTracks = {});
        }),
        (t.onFragParsingUserdata = function a(e, t) {
          var r = this.cea608Parser1,
            n = this.cea608Parser2;
          if (this.enabled && r && n) {
            var o = t.frag,
              d = t.samples;
            if (o.type !== Pi.MAIN || 'NONE' !== this.closedCaptionsForLevel(o))
              for (var s = 0, l; s < d.length; s++)
                if (((l = d[s].bytes), l)) {
                  var c = this.extractCea608Data(l);
                  r.addData(d[s].pts, c[0]), n.addData(d[s].pts, c[1]);
                }
          }
        }),
        (t.onBufferFlushing = function a(e, t) {
          var r = t.startOffset,
            n = t.endOffset,
            o = t.endOffsetSubtitles,
            i = t.type,
            d = this.media;
          if (d && !(d.currentTime < n)) {
            if (!i || 'video' === i) {
              var s = this.captionsTracks;
              Object.keys(s).forEach(function(e) {
                return Ht(s[e], r, n);
              });
            }
            if (
              this.config.renderTextTracksNatively &&
              0 === r &&
              void 0 !== o
            ) {
              var l = this.textTracks;
              Object.keys(l).forEach(function(e) {
                return Ht(l[e], r, o);
              });
            }
          }
        }),
        (t.extractCea608Data = function t(e) {
          for (var a = [[], []], r = 31 & e[0], n = 2, o = 0; o < r; o++) {
            var i = e[n++],
              d = 127 & e[n++],
              s = 127 & e[n++];
            if (0 !== d || 0 !== s) {
              var l = 0 != (4 & i);
              if (l) {
                var c = 3 & i;
                (0 == c || 1 === c) && (a[c].push(d), a[c].push(s));
              }
            }
          }
          return a;
        }),
        e
      );
    })(),
    Ys = (function() {
      function e(e) {
        (this.hls = void 0),
          (this.autoLevelCapping = void 0),
          (this.firstLevel = void 0),
          (this.media = void 0),
          (this.restrictedLevels = void 0),
          (this.timer = void 0),
          (this.clientRect = void 0),
          (this.streamController = void 0),
          (this.hls = e),
          (this.autoLevelCapping = T),
          (this.firstLevel = -1),
          (this.media = null),
          (this.restrictedLevels = []),
          (this.timer = void 0),
          (this.clientRect = null),
          this.registerListeners();
      }
      var t = e.prototype;
      return (
        (t.setStreamController = function t(e) {
          this.streamController = e;
        }),
        (t.destroy = function e() {
          this.unregisterListener(),
            this.hls.config.capLevelToPlayerSize && this.stopCapping(),
            (this.media = null),
            (this.clientRect = null),
            (this.hls = this.streamController = null);
        }),
        (t.registerListeners = function e() {
          var t = this.hls;
          t.on(xo.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this),
            t.on(xo.MEDIA_ATTACHING, this.onMediaAttaching, this),
            t.on(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.on(xo.BUFFER_CODECS, this.onBufferCodecs, this),
            t.on(xo.MEDIA_DETACHING, this.onMediaDetaching, this);
        }),
        (t.unregisterListener = function e() {
          var t = this.hls;
          t.off(xo.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this),
            t.off(xo.MEDIA_ATTACHING, this.onMediaAttaching, this),
            t.off(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.off(xo.BUFFER_CODECS, this.onBufferCodecs, this),
            t.off(xo.MEDIA_DETACHING, this.onMediaDetaching, this);
        }),
        (t.onFpsDropLevelCapping = function a(e, t) {
          var r = this.hls.levels[t.droppedLevel];
          this.isLevelAllowed(r) &&
            this.restrictedLevels.push({
              bitrate: r.bitrate,
              height: r.height,
              width: r.width
            });
        }),
        (t.onMediaAttaching = function a(e, t) {
          (this.media = t.media instanceof HTMLVideoElement ? t.media : null),
            (this.clientRect = null);
        }),
        (t.onManifestParsed = function a(e, t) {
          var r = this.hls;
          (this.restrictedLevels = []),
            (this.firstLevel = t.firstLevel),
            r.config.capLevelToPlayerSize && t.video && this.startCapping();
        }),
        (t.onBufferCodecs = function a(e, t) {
          var r = this.hls;
          r.config.capLevelToPlayerSize && t.video && this.startCapping();
        }),
        (t.onMediaDetaching = function e() {
          this.stopCapping();
        }),
        (t.detectPlayerSize = function e() {
          if (this.media && 0 < this.mediaHeight && 0 < this.mediaWidth) {
            var t = this.hls.levels;
            if (t.length) {
              var a = this.hls;
              (a.autoLevelCapping = this.getMaxLevel(t.length - 1)),
                a.autoLevelCapping > this.autoLevelCapping &&
                  this.streamController &&
                  this.streamController.nextLevelSwitch(),
                (this.autoLevelCapping = a.autoLevelCapping);
            }
          }
        }),
        (t.getMaxLevel = function a(t) {
          var r = this,
            n = this.hls.levels;
          if (!n.length) return -1;
          var o = n.filter(function(e, a) {
            return r.isLevelAllowed(e) && a <= t;
          });
          return (
            (this.clientRect = null),
            e.getMaxLevelByMediaSize(o, this.mediaWidth, this.mediaHeight)
          );
        }),
        (t.startCapping = function e() {
          this.timer ||
            ((this.autoLevelCapping = T),
            (this.hls.firstLevel = this.getMaxLevel(this.firstLevel)),
            self.clearInterval(this.timer),
            (this.timer = self.setInterval(
              this.detectPlayerSize.bind(this),
              1e3
            )),
            this.detectPlayerSize());
        }),
        (t.stopCapping = function e() {
          (this.restrictedLevels = []),
            (this.firstLevel = -1),
            (this.autoLevelCapping = T),
            this.timer &&
              (self.clearInterval(this.timer), (this.timer = void 0));
        }),
        (t.getDimensions = function e() {
          if (this.clientRect) return this.clientRect;
          var t = this.media,
            a = { width: 0, height: 0 };
          if (t) {
            var r = t.getBoundingClientRect();
            (a.width = r.width),
              (a.height = r.height),
              a.width ||
                a.height ||
                ((a.width = r.right - r.left || t.width || 0),
                (a.height = r.bottom - r.top || t.height || 0));
          }
          return (this.clientRect = a), a;
        }),
        (t.isLevelAllowed = function t(e) {
          var a = this.restrictedLevels;
          return !a.some(function(t) {
            return (
              e.bitrate === t.bitrate &&
              e.width === t.width &&
              e.height === t.height
            );
          });
        }),
        (e.getMaxLevelByMediaSize = function r(e, t, a) {
          if (!(null != e && e.length)) return -1;
          for (
            var n = function a(e, t) {
                return !t || e.width !== t.width || e.height !== t.height;
              },
              o = e.length - 1,
              d = 0,
              s;
            d < e.length;
            d += 1
          )
            if (
              ((s = e[d]), (s.width >= t || s.height >= a) && n(s, e[d + 1]))
            ) {
              o = d;
              break;
            }
          return o;
        }),
        N(e, [
          {
            key: 'mediaWidth',
            get: function e() {
              return this.getDimensions().width * this.contentScaleFactor;
            }
          },
          {
            key: 'mediaHeight',
            get: function e() {
              return this.getDimensions().height * this.contentScaleFactor;
            }
          },
          {
            key: 'contentScaleFactor',
            get: function e() {
              var t = 1;
              if (!this.hls.config.ignoreDevicePixelRatio)
                try {
                  t = self.devicePixelRatio;
                } catch (t) {}
              return t;
            }
          }
        ]),
        e
      );
    })(),
    qs = (function() {
      function e(e) {
        (this.hls = void 0),
          (this.isVideoPlaybackQualityAvailable = !1),
          (this.timer = void 0),
          (this.media = null),
          (this.lastTime = void 0),
          (this.lastDroppedFrames = 0),
          (this.lastDecodedFrames = 0),
          (this.streamController = void 0),
          (this.hls = e),
          this.registerListeners();
      }
      var t = e.prototype;
      return (
        (t.setStreamController = function t(e) {
          this.streamController = e;
        }),
        (t.registerListeners = function e() {
          this.hls.on(xo.MEDIA_ATTACHING, this.onMediaAttaching, this);
        }),
        (t.unregisterListeners = function e() {
          this.hls.off(xo.MEDIA_ATTACHING, this.onMediaAttaching, this);
        }),
        (t.destroy = function e() {
          this.timer && clearInterval(this.timer),
            this.unregisterListeners(),
            (this.isVideoPlaybackQualityAvailable = !1),
            (this.media = null);
        }),
        (t.onMediaAttaching = function a(e, t) {
          var r = this.hls.config;
          if (r.capLevelOnFPSDrop) {
            var n = t.media instanceof self.HTMLVideoElement ? t.media : null;
            (this.media = n),
              n &&
                'function' == typeof n.getVideoPlaybackQuality &&
                (this.isVideoPlaybackQualityAvailable = !0),
              self.clearInterval(this.timer),
              (this.timer = self.setInterval(
                this.checkFPSInterval.bind(this),
                r.fpsDroppedMonitoringPeriod
              ));
          }
        }),
        (t.checkFPS = function r(e, t, a) {
          var n = performance.now();
          if (t) {
            if (this.lastTime) {
              var o = n - this.lastTime,
                i = a - this.lastDroppedFrames,
                d = t - this.lastDecodedFrames,
                s = (1e3 * i) / o,
                l = this.hls;
              if (
                (l.trigger(xo.FPS_DROP, {
                  currentDropped: i,
                  currentDecoded: d,
                  totalDroppedFrames: a
                }),
                0 < s && i > l.config.fpsDroppedMonitoringThreshold * d)
              ) {
                var c = l.currentLevel;
                Bo.warn(
                  'drop FPS ratio greater than max allowed value for currentLevel: ' +
                    c
                ),
                  0 < c &&
                    (-1 === l.autoLevelCapping || l.autoLevelCapping >= c) &&
                    (--c,
                    l.trigger(xo.FPS_DROP_LEVEL_CAPPING, {
                      level: c,
                      droppedLevel: l.currentLevel
                    }),
                    (l.autoLevelCapping = c),
                    this.streamController.nextLevelSwitch());
              }
            }
            (this.lastTime = n),
              (this.lastDroppedFrames = a),
              (this.lastDecodedFrames = t);
          }
        }),
        (t.checkFPSInterval = function e() {
          var t = this.media;
          if (t)
            if (this.isVideoPlaybackQualityAvailable) {
              var a = t.getVideoPlaybackQuality();
              this.checkFPS(t, a.totalVideoFrames, a.droppedVideoFrames);
            } else
              this.checkFPS(
                t,
                t.webkitDecodedFrameCount,
                t.webkitDroppedFrameCount
              );
        }),
        e
      );
    })(),
    js = '[eme]',
    zs = (function() {
      function e(t) {
        (this.hls = void 0),
          (this.config = void 0),
          (this.media = null),
          (this.keyFormatPromise = null),
          (this.keySystemAccessPromises = {}),
          (this._requestLicenseFailureCount = 0),
          (this.mediaKeySessions = []),
          (this.keyIdToKeySessionPromise = {}),
          (this.setMediaKeysQueue = e.CDMCleanupPromise
            ? [e.CDMCleanupPromise]
            : []),
          (this.onMediaEncrypted = this._onMediaEncrypted.bind(this)),
          (this.onWaitingForKey = this._onWaitingForKey.bind(this)),
          (this.debug = Bo.debug.bind(Bo, js)),
          (this.log = Bo.log.bind(Bo, js)),
          (this.warn = Bo.warn.bind(Bo, js)),
          (this.error = Bo.error.bind(Bo, js)),
          (this.hls = t),
          (this.config = t.config),
          this.registerListeners();
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          this.unregisterListeners(), this.onMediaDetached();
          var t = this.config;
          (t.requestMediaKeySystemAccessFunc = null),
            (t.licenseXhrSetup = t.licenseResponseCallback = void 0),
            (t.drmSystems = t.drmSystemOptions = {}),
            (this.hls = this.onMediaEncrypted = this.onWaitingForKey = this.keyIdToKeySessionPromise = null),
            (this.config = null);
        }),
        (t.registerListeners = function e() {
          this.hls.on(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            this.hls.on(xo.MEDIA_DETACHED, this.onMediaDetached, this),
            this.hls.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            this.hls.on(xo.MANIFEST_LOADED, this.onManifestLoaded, this);
        }),
        (t.unregisterListeners = function e() {
          this.hls.off(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            this.hls.off(xo.MEDIA_DETACHED, this.onMediaDetached, this),
            this.hls.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            this.hls.off(xo.MANIFEST_LOADED, this.onManifestLoaded, this);
        }),
        (t.getLicenseServerUrl = function t(e) {
          var a = this.config,
            r = a.drmSystems,
            n = a.widevineLicenseUrl,
            o = r[e];
          if (o) return o.licenseUrl;
          if (e === Xo.WIDEVINE && n) return n;
          throw new Error(
            'no license server URL configured for key-system "' + e + '"'
          );
        }),
        (t.getServerCertificateUrl = function t(e) {
          var a = this.config.drmSystems,
            r = a[e];
          return r
            ? r.serverCertificateUrl
            : void this.log(
                'No Server Certificate in config.drmSystems["' + e + '"]'
              );
        }),
        (t.attemptKeySystemAccess = function t(e) {
          var a = this,
            r = this.hls.levels,
            n = function a(e, t, r) {
              return !!e && r.indexOf(e) === t;
            },
            o = r
              .map(function(e) {
                return e.audioCodec;
              })
              .filter(n),
            i = r
              .map(function(e) {
                return e.videoCodec;
              })
              .filter(n);
          return (
            0 === o.length + i.length && i.push('avc1.42e01e'),
            new Promise(function(t, r) {
              var n = function n(e) {
                var d = e.shift();
                a.getMediaKeysPromise(d, o, i)
                  .then(function(e) {
                    return t({ keySystem: d, mediaKeys: e });
                  })
                  .catch(function(t) {
                    e.length
                      ? n(e)
                      : t instanceof Xs
                      ? r(t)
                      : r(
                          new Xs(
                            {
                              type: Fo.KEY_SYSTEM_ERROR,
                              details: No.KEY_SYSTEM_NO_ACCESS,
                              error: t,
                              fatal: !0
                            },
                            t.message
                          )
                        );
                  });
              };
              n(e);
            })
          );
        }),
        (t.requestMediaKeySystemAccess = function a(e, t) {
          var r = this.config.requestMediaKeySystemAccessFunc;
          if ('function' != typeof r) {
            var n =
              'Configured requestMediaKeySystemAccess is not a function ' + r;
            return (
              null === Zo &&
                'http:' === self.location.protocol &&
                (n =
                  'navigator.requestMediaKeySystemAccess is not available over insecure protocol ' +
                  location.protocol),
              Promise.reject(new Error(n))
            );
          }
          return r(e, t);
        }),
        (t.getMediaKeysPromise = function r(e, t, a) {
          var n = this,
            o = Ye(e, t, a, this.config.drmSystemOptions),
            i = this.keySystemAccessPromises[e],
            d = null == i ? void 0 : i.keySystemAccess;
          if (!d) {
            this.log(
              'Requesting encrypted media "' +
                e +
                '" key-system access with config: ' +
                JSON.stringify(o)
            ),
              (d = this.requestMediaKeySystemAccess(e, o));
            var s = (this.keySystemAccessPromises[e] = { keySystemAccess: d });
            return (
              d.catch(function(t) {
                n.log(
                  'Failed to obtain access to key-system "' + e + '": ' + t
                );
              }),
              d.then(function(t) {
                n.log('Access for key-system "' + t.keySystem + '" obtained');
                var a = n.fetchServerCertificate(e);
                return (
                  n.log('Create media-keys for "' + e + '"'),
                  (s.mediaKeys = t.createMediaKeys().then(function(t) {
                    return (
                      n.log('Media-keys created for "' + e + '"'),
                      a.then(function(a) {
                        return a ? n.setMediaKeysServerCertificate(t, e, a) : t;
                      })
                    );
                  })),
                  s.mediaKeys.catch(function(t) {
                    n.error(
                      'Failed to create media-keys for "' + e + '"}: ' + t
                    );
                  }),
                  s.mediaKeys
                );
              })
            );
          }
          return d.then(function() {
            return i.mediaKeys;
          });
        }),
        (t.createMediaKeySessionContext = function t(e) {
          var a = e.decryptdata,
            r = e.keySystem,
            n = e.mediaKeys;
          this.log(
            'Creating key-system session "' +
              r +
              '" keyId: ' +
              pi.hexDump(a.keyId || [])
          );
          var o = n.createSession(),
            i = {
              decryptdata: a,
              keySystem: r,
              mediaKeys: n,
              mediaKeysSession: o,
              keyStatus: 'status-pending'
            };
          return this.mediaKeySessions.push(i), i;
        }),
        (t.renewKeySession = function t(e) {
          var a = e.decryptdata;
          if (a.pssh) {
            var r = this.createMediaKeySessionContext(e),
              n = this.getKeyIdString(a),
              o = 'cenc';
            this.keyIdToKeySessionPromise[
              n
            ] = this.generateRequestWithPreferredKeySession(
              r,
              o,
              a.pssh,
              'expired'
            );
          } else
            this.warn(
              'Could not renew expired session. Missing pssh initData.'
            );
          this.removeSession(e);
        }),
        (t.getKeyIdString = function t(e) {
          if (!e)
            throw new Error('Could not read keyId of undefined decryptdata');
          if (null === e.keyId) throw new Error('keyId is null');
          return pi.hexDump(e.keyId);
        }),
        (t.updateKeySession = function a(e, t) {
          var r = e.mediaKeysSession,
            n;
          return (
            this.log(
              'Updating key-session "' +
                r.sessionId +
                '" for keyID ' +
                pi.hexDump(
                  (null == (n = e.decryptdata) ? void 0 : n.keyId) || []
                ) +
                '\n      } (data length: ' +
                (t ? t.byteLength : t) +
                ')'
            ),
            r.update(t)
          );
        }),
        (t.selectKeySystemFormat = function t(e) {
          var a = Object.keys(e.levelkeys || {});
          return (
            this.keyFormatPromise ||
              (this.log(
                'Selecting key-system from fragment (sn: ' +
                  e.sn +
                  ' ' +
                  e.type +
                  ': ' +
                  e.level +
                  ') key formats ' +
                  a.join(', ')
              ),
              (this.keyFormatPromise = this.getKeyFormatPromise(a))),
            this.keyFormatPromise
          );
        }),
        (t.getKeyFormatPromise = function t(e) {
          var a = this;
          return new Promise(function(t, r) {
            var n = We(a.config),
              o = e.map(Ke).filter(function(e) {
                return !!e && -1 !== n.indexOf(e);
              });
            return a
              .getKeySystemSelectionPromise(o)
              .then(function(e) {
                var a = e.keySystem,
                  n = Ve(a);
                n
                  ? t(n)
                  : r(
                      new Error(
                        'Unable to find format for key-system "' + a + '"'
                      )
                    );
              })
              .catch(r);
          });
        }),
        (t.loadKey = function t(e) {
          var a = this,
            r = e.keyInfo.decryptdata,
            n = this.getKeyIdString(r),
            o =
              '(keyId: ' +
              n +
              ' format: "' +
              r.keyFormat +
              '" method: ' +
              r.method +
              ' uri: ' +
              r.uri +
              ')';
          this.log('Starting session for key ' + o);
          var i = this.keyIdToKeySessionPromise[n];
          return (
            i ||
              ((i = this.keyIdToKeySessionPromise[
                n
              ] = this.getKeySystemForKeyPromise(r).then(function(t) {
                var n = t.keySystem,
                  i = t.mediaKeys;
                return (
                  a.throwIfDestroyed(),
                  a.log(
                    'Handle encrypted media sn: ' +
                      e.frag.sn +
                      ' ' +
                      e.frag.type +
                      ': ' +
                      e.frag.level +
                      ' using key ' +
                      o
                  ),
                  a.attemptSetMediaKeys(n, i).then(function() {
                    a.throwIfDestroyed();
                    var e = a.createMediaKeySessionContext({
                        keySystem: n,
                        mediaKeys: i,
                        decryptdata: r
                      }),
                      t = 'cenc';
                    return a.generateRequestWithPreferredKeySession(
                      e,
                      t,
                      r.pssh,
                      'playlist-key'
                    );
                  })
                );
              })),
              i.catch(function(e) {
                return a.handleError(e);
              })),
            i
          );
        }),
        (t.throwIfDestroyed = function t(e) {
          if (!this.hls) throw new Error('invalid state');
        }),
        (t.handleError = function t(e) {
          this.hls &&
            (this.error(e.message),
            e instanceof Xs
              ? this.hls.trigger(xo.ERROR, e.data)
              : this.hls.trigger(xo.ERROR, {
                  type: Fo.KEY_SYSTEM_ERROR,
                  details: No.KEY_SYSTEM_NO_KEYS,
                  error: e,
                  fatal: !0
                }));
        }),
        (t.getKeySystemForKeyPromise = function t(e) {
          var a = this.getKeyIdString(e),
            r = this.keyIdToKeySessionPromise[a];
          if (!r) {
            var n = Ke(e.keyFormat),
              o = n ? [n] : We(this.config);
            return this.attemptKeySystemAccess(o);
          }
          return r;
        }),
        (t.getKeySystemSelectionPromise = function t(e) {
          if ((e.length || (e = We(this.config)), 0 === e.length))
            throw new Xs(
              {
                type: Fo.KEY_SYSTEM_ERROR,
                details: No.KEY_SYSTEM_NO_CONFIGURED_LICENSE,
                fatal: !0
              },
              'Missing key-system license configuration options ' +
                JSON.stringify({ drmSystems: this.config.drmSystems })
            );
          return this.attemptKeySystemAccess(e);
        }),
        (t._onMediaEncrypted = function t(e) {
          var a = this,
            r = e.initDataType,
            n = e.initData;
          if (
            (this.debug('"' + e.type + '" event: init data type: "' + r + '"'),
            null !== n)
          ) {
            var o, d;
            if ('sinf' === r && this.config.drmSystems[Xo.FAIRPLAY]) {
              var s = Xe(new Uint8Array(n));
              try {
                var l = Me(JSON.parse(s).sinf),
                  c = nt(new Uint8Array(l));
                if (!c) return;
                (o = c.subarray(8, 24)), (d = Xo.FAIRPLAY);
              } catch (e) {
                return void this.warn(
                  'Failed to parse sinf "encrypted" event message initData'
                );
              }
            } else {
              var u = Et(n);
              if (null === u) return;
              0 === u.version &&
                u.systemId === $o.WIDEVINE &&
                u.data &&
                (o = u.data.subarray(8, 24)),
                (d = He(u.systemId));
            }
            if (d && o) {
              for (
                var g = pi.hexDump(o),
                  f = this.keyIdToKeySessionPromise,
                  p = this.mediaKeySessions,
                  m = f[g],
                  y = function e() {
                    var t = p[h],
                      i = t.decryptdata;
                    if (i.pssh || !i.keyId) return 'continue';
                    var d = pi.hexDump(i.keyId);
                    if (g === d || -1 !== i.uri.replace(/-/g, '').indexOf(g))
                      return (
                        (m = f[d]),
                        delete f[d],
                        (i.pssh = new Uint8Array(n)),
                        (i.keyId = o),
                        (m = f[g] = m.then(function() {
                          return a.generateRequestWithPreferredKeySession(
                            t,
                            r,
                            n,
                            'encrypted-event-key-match'
                          );
                        })),
                        'break'
                      );
                  },
                  h = 0,
                  T;
                h < p.length && ((T = y()), 'continue' === T || 'break' !== T);
                h++
              );
              m ||
                (m = f[g] = this.getKeySystemSelectionPromise([d]).then(
                  function(e) {
                    var t = e.keySystem,
                      i = e.mediaKeys,
                      d;
                    a.throwIfDestroyed();
                    var s = new Ei(
                      'ISO-23001-7',
                      g,
                      null == (d = Ve(t)) ? '' : d
                    );
                    return (
                      (s.pssh = new Uint8Array(n)),
                      (s.keyId = o),
                      a.attemptSetMediaKeys(t, i).then(function() {
                        a.throwIfDestroyed();
                        var e = a.createMediaKeySessionContext({
                          decryptdata: s,
                          keySystem: t,
                          mediaKeys: i
                        });
                        return a.generateRequestWithPreferredKeySession(
                          e,
                          r,
                          n,
                          'encrypted-event-no-match'
                        );
                      })
                    );
                  }
                )),
                m.catch(function(e) {
                  return a.handleError(e);
                });
            }
          }
        }),
        (t._onWaitingForKey = function t(e) {
          this.log('"' + e.type + '" event');
        }),
        (t.attemptSetMediaKeys = function a(e, t) {
          var r = this,
            n = this.setMediaKeysQueue.slice();
          this.log('Setting media-keys for "' + e + '"');
          var o = Promise.all(n).then(function() {
            if (!r.media)
              throw new Error(
                'Attempted to set mediaKeys without media element attached'
              );
            return r.media.setMediaKeys(t);
          });
          return (
            this.setMediaKeysQueue.push(o),
            o.then(function() {
              r.log('Media-keys set for "' + e + '"'),
                n.push(o),
                (r.setMediaKeysQueue = r.setMediaKeysQueue.filter(function(e) {
                  return -1 === n.indexOf(e);
                }));
            })
          );
        }),
        (t.generateRequestWithPreferredKeySession = function n(e, t, a, r) {
          var o = this,
            i =
              null == (d = this.config.drmSystems) ||
              null == (s = d[e.keySystem])
                ? void 0
                : s.generateRequest,
            d,
            s;
          if (i)
            try {
              var l = i.call(this.hls, t, a, e);
              if (!l)
                throw new Error(
                  'Invalid response from configured generateRequest filter'
                );
              (t = l.initDataType),
                (a = e.decryptdata.pssh = l.initData
                  ? new Uint8Array(l.initData)
                  : null);
            } catch (e) {
              var c;
              if (
                (this.warn(e.message), null != (c = this.hls) && c.config.debug)
              )
                throw e;
            }
          if (null === a)
            return (
              this.log(
                'Skipping key-session request for "' + r + '" (no initData)'
              ),
              Promise.resolve(e)
            );
          var u = this.getKeyIdString(e.decryptdata);
          this.log(
            'Generating key-session request for "' +
              r +
              '": ' +
              u +
              ' (init data type: ' +
              t +
              ' length: ' +
              (a ? a.byteLength : null) +
              ')'
          );
          var g = new Wd();
          (e.mediaKeysSession.onmessage = function(t) {
            var a = e.mediaKeysSession;
            if (!a) return void g.emit('error', new Error('invalid state'));
            var r = t.messageType,
              n = t.message;
            o.log(
              '"' +
                r +
                '" message event for session "' +
                a.sessionId +
                '" message size: ' +
                n.byteLength
            ),
              'license-request' === r || 'license-renewal' === r
                ? o.renewLicense(e, n).catch(function(e) {
                    o.handleError(e), g.emit('error', e);
                  })
                : 'license-release' === r
                ? e.keySystem === Xo.FAIRPLAY &&
                  (o.updateKeySession(e, Ge('acknowledged')),
                  o.removeSession(e))
                : o.warn('unhandled media key message type "' + r + '"');
          }),
            (e.mediaKeysSession.onkeystatuseschange = function(t) {
              var a = e.mediaKeysSession;
              if (!a) return void g.emit('error', new Error('invalid state'));
              o.onKeyStatusChange(e);
              var r = e.keyStatus;
              g.emit('keyStatus', r),
                'expired' === r &&
                  (o.warn(e.keySystem + ' expired for key ' + u),
                  o.renewKeySession(e));
            });
          var f = new Promise(function(e, t) {
            g.on('error', t),
              g.on('keyStatus', function(a) {
                a.startsWith('usable')
                  ? e()
                  : 'output-restricted' === a
                  ? t(
                      new Xs(
                        {
                          type: Fo.KEY_SYSTEM_ERROR,
                          details: No.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED,
                          fatal: !1
                        },
                        'HDCP level output restricted'
                      )
                    )
                  : 'internal-error' === a
                  ? t(
                      new Xs(
                        {
                          type: Fo.KEY_SYSTEM_ERROR,
                          details: No.KEY_SYSTEM_STATUS_INTERNAL_ERROR,
                          fatal: !0
                        },
                        'key status changed to "' + a + '"'
                      )
                    )
                  : 'expired' === a
                  ? t(new Error('key expired while generating request'))
                  : o.warn('unhandled key status change "' + a + '"');
              });
          });
          return e.mediaKeysSession
            .generateRequest(t, a)
            .then(function() {
              var t;
              o.log(
                'Request generated for key-session "' +
                  (null == (t = e.mediaKeysSession) ? void 0 : t.sessionId) +
                  '" keyId: ' +
                  u
              );
            })
            .catch(function(e) {
              throw new Xs(
                {
                  type: Fo.KEY_SYSTEM_ERROR,
                  details: No.KEY_SYSTEM_NO_SESSION,
                  error: e,
                  fatal: !1
                },
                'Error generating key-session request: ' + e
              );
            })
            .then(function() {
              return f;
            })
            .catch(function(t) {
              throw (g.removeAllListeners(), o.removeSession(e), t);
            })
            .then(function() {
              return g.removeAllListeners(), e;
            });
        }),
        (t.onKeyStatusChange = function t(e) {
          var a = this;
          e.mediaKeysSession.keyStatuses.forEach(function(t, r) {
            a.log(
              'key status change "' +
                t +
                '" for keyStatuses keyId: ' +
                pi.hexDump(
                  'buffer' in r
                    ? new Uint8Array(r.buffer, r.byteOffset, r.byteLength)
                    : new Uint8Array(r)
                ) +
                ' session keyId: ' +
                pi.hexDump(new Uint8Array(e.decryptdata.keyId || [])) +
                ' uri: ' +
                e.decryptdata.uri
            ),
              (e.keyStatus = t);
          });
        }),
        (t.fetchServerCertificate = function t(e) {
          var a = this.config,
            r = a.loader,
            n = new r(a),
            o = this.getServerCertificateUrl(e);
          return o
            ? (this.log('Fetching serverCertificate for "' + e + '"'),
              new Promise(function(t, r) {
                var i = { responseType: 'arraybuffer', url: o },
                  d = a.certLoadPolicy.default,
                  s = {
                    loadPolicy: d,
                    timeout: d.maxLoadTimeMs,
                    maxRetry: 0,
                    retryDelay: 0,
                    maxRetryDelay: 0
                  },
                  l = {
                    onSuccess: function o(e, a, r, n) {
                      t(e.data);
                    },
                    onError: function s(t, a, n, d) {
                      r(
                        new Xs(
                          {
                            type: Fo.KEY_SYSTEM_ERROR,
                            details:
                              No.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,
                            fatal: !0,
                            networkDetails: n,
                            response: De({ url: i.url, data: void 0 }, t)
                          },
                          '"' +
                            e +
                            '" certificate request failed (' +
                            o +
                            '). Status: ' +
                            t.code +
                            ' (' +
                            t.text +
                            ')'
                        )
                      );
                    },
                    onTimeout: function d(t, a, n) {
                      r(
                        new Xs(
                          {
                            type: Fo.KEY_SYSTEM_ERROR,
                            details:
                              No.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,
                            fatal: !0,
                            networkDetails: n,
                            response: { url: i.url, data: void 0 }
                          },
                          '"' +
                            e +
                            '" certificate request timed out (' +
                            o +
                            ')'
                        )
                      );
                    },
                    onAbort: function n(e, t, a) {
                      r(new Error('aborted'));
                    }
                  };
                n.load(i, s, l);
              }))
            : Promise.resolve();
        }),
        (t.setMediaKeysServerCertificate = function r(e, t, a) {
          var n = this;
          return new Promise(function(r, o) {
            e.setServerCertificate(a)
              .then(function(o) {
                n.log(
                  'setServerCertificate ' +
                    (o ? 'success' : 'not supported by CDM') +
                    ' (' +
                    (null == a ? void 0 : a.byteLength) +
                    ') on "' +
                    t +
                    '"'
                ),
                  r(e);
              })
              .catch(function(e) {
                o(
                  new Xs(
                    {
                      type: Fo.KEY_SYSTEM_ERROR,
                      details: No.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED,
                      error: e,
                      fatal: !0
                    },
                    e.message
                  )
                );
              });
          });
        }),
        (t.renewLicense = function a(e, t) {
          var r = this;
          return this.requestLicense(e, new Uint8Array(t)).then(function(t) {
            return r.updateKeySession(e, new Uint8Array(t)).catch(function(e) {
              throw new Xs(
                {
                  type: Fo.KEY_SYSTEM_ERROR,
                  details: No.KEY_SYSTEM_SESSION_UPDATE_FAILED,
                  error: e,
                  fatal: !0
                },
                e.message
              );
            });
          });
        }),
        (t.setupLicenseXHR = function n(e, t, a, r) {
          var o = this,
            i = this.config.licenseXhrSetup;
          return i
            ? Promise.resolve()
                .then(function() {
                  if (!a.decryptdata) throw new Error('Key removed');
                  return i.call(o.hls, e, t, a, r);
                })
                .catch(function(n) {
                  if (!a.decryptdata) throw n;
                  return e.open('POST', t, !0), i.call(o.hls, e, t, a, r);
                })
                .then(function(a) {
                  e.readyState || e.open('POST', t, !0);
                  var n = a ? a : r;
                  return { xhr: e, licenseChallenge: n };
                })
            : (e.open('POST', t, !0),
              Promise.resolve({ xhr: e, licenseChallenge: r }));
        }),
        (t.requestLicense = function a(e, t) {
          var r = this,
            n = this.config.keyLoadPolicy.default;
          return new Promise(function(a, o) {
            var i = r.getLicenseServerUrl(e.keySystem);
            r.log('Sending license request to URL: ' + i);
            var d = new XMLHttpRequest();
            (d.responseType = 'arraybuffer'),
              (d.onreadystatechange = function() {
                if (!r.hls || !e.mediaKeysSession)
                  return o(new Error('invalid state'));
                if (4 === d.readyState)
                  if (200 === d.status) {
                    r._requestLicenseFailureCount = 0;
                    var s = d.response;
                    r.log(
                      'License received ' +
                        (s instanceof ArrayBuffer ? s.byteLength : s)
                    );
                    var l = r.config.licenseResponseCallback;
                    if (l)
                      try {
                        s = l.call(r.hls, d, i, e);
                      } catch (e) {
                        r.error(e);
                      }
                    a(s);
                  } else {
                    var c = n.errorRetry,
                      u = c ? c.maxNumRetry : 0;
                    if (
                      (r._requestLicenseFailureCount++,
                      r._requestLicenseFailureCount > u ||
                        (400 <= d.status && 500 > d.status))
                    )
                      o(
                        new Xs(
                          {
                            type: Fo.KEY_SYSTEM_ERROR,
                            details: No.KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                            fatal: !0,
                            networkDetails: d,
                            response: {
                              url: i,
                              data: void 0,
                              code: d.status,
                              text: d.statusText
                            }
                          },
                          'License Request XHR failed (' +
                            i +
                            '). Status: ' +
                            d.status +
                            ' (' +
                            d.statusText +
                            ')'
                        )
                      );
                    else {
                      var g = u - r._requestLicenseFailureCount + 1;
                      r.warn(
                        'Retrying license request, ' + g + ' attempts left'
                      ),
                        r.requestLicense(e, t).then(a, o);
                    }
                  }
              }),
              e.licenseXhr &&
                e.licenseXhr.readyState !== XMLHttpRequest.DONE &&
                e.licenseXhr.abort(),
              (e.licenseXhr = d),
              r.setupLicenseXHR(d, i, e, t).then(function(e) {
                var t = e.xhr,
                  a = e.licenseChallenge;
                t.send(a);
              });
          });
        }),
        (t.onMediaAttached = function a(e, t) {
          if (this.config.emeEnabled) {
            var r = t.media;
            (this.media = r),
              r.addEventListener('encrypted', this.onMediaEncrypted),
              r.addEventListener('waitingforkey', this.onWaitingForKey);
          }
        }),
        (t.onMediaDetached = function t() {
          var a = this,
            r = this.media,
            n = this.mediaKeySessions;
          r &&
            (r.removeEventListener('encrypted', this.onMediaEncrypted),
            r.removeEventListener('waitingforkey', this.onWaitingForKey),
            (this.media = null)),
            (this._requestLicenseFailureCount = 0),
            (this.setMediaKeysQueue = []),
            (this.mediaKeySessions = []),
            (this.keyIdToKeySessionPromise = {}),
            Ei.clearKeyUriToKeyIdMap();
          var o = n.length;
          e.CDMCleanupPromise = Promise.all(
            n
              .map(function(e) {
                return a.removeSession(e);
              })
              .concat(
                null == r
                  ? void 0
                  : r.setMediaKeys(null).catch(function(e) {
                      a.log(
                        'Could not clear media keys: ' +
                          e +
                          '. media.src: ' +
                          (null == r ? void 0 : r.src)
                      );
                    })
              )
          )
            .then(function() {
              o &&
                (a.log('finished closing key sessions and clearing media keys'),
                (n.length = 0));
            })
            .catch(function(e) {
              a.log(
                'Could not close sessions and clear media keys: ' +
                  e +
                  '. media.src: ' +
                  (null == r ? void 0 : r.src)
              );
            });
        }),
        (t.onManifestLoading = function e() {
          this.keyFormatPromise = null;
        }),
        (t.onManifestLoaded = function a(e, t) {
          var r = t.sessionKeys;
          if (r && this.config.emeEnabled && !this.keyFormatPromise) {
            var n = r.reduce(function(e, t) {
              return -1 === e.indexOf(t.keyFormat) && e.push(t.keyFormat), e;
            }, []);
            this.log('Selecting key-system from session-keys ' + n.join(', ')),
              (this.keyFormatPromise = this.getKeyFormatPromise(n));
          }
        }),
        (t.removeSession = function t(e) {
          var a = this,
            r = e.mediaKeysSession,
            n = e.licenseXhr;
          if (r) {
            this.log(
              'Remove licenses and keys and close session ' + r.sessionId
            ),
              (r.onmessage = null),
              (r.onkeystatuseschange = null),
              n && n.readyState !== XMLHttpRequest.DONE && n.abort(),
              (e.mediaKeysSession = e.decryptdata = e.licenseXhr = void 0);
            var o = this.mediaKeySessions.indexOf(e);
            return (
              -1 < o && this.mediaKeySessions.splice(o, 1),
              r
                .remove()
                .catch(function(e) {
                  a.log('Could not remove session: ' + e);
                })
                .then(function() {
                  return r.close();
                })
                .catch(function(e) {
                  a.log('Could not close session: ' + e);
                })
            );
          }
        }),
        e
      );
    })();
  zs.CDMCleanupPromise = void 0;
  var Xs = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, a) || this),
          (r.data = void 0),
          t.error || (t.error = new Error(a)),
          (r.data = t),
          (t.err = t.error),
          r
        );
      }
      return M(t, e), t;
    })(V(Error)),
    Qs = {
      MANIFEST: 'm',
      AUDIO: 'a',
      VIDEO: 'v',
      MUXED: 'av',
      INIT: 'i',
      CAPTION: 'c',
      TIMED_TEXT: 'tt',
      KEY: 'k',
      OTHER: 'o'
    },
    $s = (function() {
      function e(t) {
        var a = this;
        (this.hls = void 0),
          (this.config = void 0),
          (this.media = void 0),
          (this.sid = void 0),
          (this.cid = void 0),
          (this.useHeaders = !1),
          (this.initialized = !1),
          (this.starved = !1),
          (this.buffering = !0),
          (this.audioBuffer = void 0),
          (this.videoBuffer = void 0),
          (this.onWaiting = function() {
            a.initialized && (a.starved = !0), (a.buffering = !0);
          }),
          (this.onPlaying = function() {
            a.initialized || (a.initialized = !0), (a.buffering = !1);
          }),
          (this.applyPlaylistData = function(e) {
            try {
              a.apply(e, { ot: Qs.MANIFEST, su: !a.initialized });
            } catch (e) {
              Bo.warn('Could not generate manifest CMCD data.', e);
            }
          }),
          (this.applyFragmentData = function(e) {
            try {
              var t = e.frag,
                r = a.hls.levels[t.level],
                n = a.getObjectType(t),
                o = { d: 1e3 * t.duration, ot: n };
              (n === Qs.VIDEO || n === Qs.AUDIO || n == Qs.MUXED) &&
                ((o.br = r.bitrate / 1e3),
                (o.tb = a.getTopBandwidth(n) / 1e3),
                (o.bl = a.getBufferLength(n))),
                a.apply(e, o);
            } catch (e) {
              Bo.warn('Could not generate segment CMCD data.', e);
            }
          }),
          (this.hls = t);
        var r = (this.config = t.config),
          n = r.cmcd;
        null != n &&
          ((r.pLoader = this.createPlaylistLoader()),
          (r.fLoader = this.createFragmentLoader()),
          (this.sid = n.sessionId || e.uuid()),
          (this.cid = n.contentId),
          (this.useHeaders = !0 === n.useHeaders),
          this.registerListeners());
      }
      var t = e.prototype;
      return (
        (t.registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.on(xo.MEDIA_DETACHED, this.onMediaDetached, this),
            t.on(xo.BUFFER_CREATED, this.onBufferCreated, this);
        }),
        (t.unregisterListeners = function e() {
          var t = this.hls;
          t.off(xo.MEDIA_ATTACHED, this.onMediaAttached, this),
            t.off(xo.MEDIA_DETACHED, this.onMediaDetached, this),
            t.off(xo.BUFFER_CREATED, this.onBufferCreated, this);
        }),
        (t.destroy = function e() {
          this.unregisterListeners(),
            this.onMediaDetached(),
            (this.hls = this.config = this.audioBuffer = this.videoBuffer = null);
        }),
        (t.onMediaAttached = function a(e, t) {
          (this.media = t.media),
            this.media.addEventListener('waiting', this.onWaiting),
            this.media.addEventListener('playing', this.onPlaying);
        }),
        (t.onMediaDetached = function e() {
          this.media &&
            (this.media.removeEventListener('waiting', this.onWaiting),
            this.media.removeEventListener('playing', this.onPlaying),
            (this.media = null));
        }),
        (t.onBufferCreated = function a(e, t) {
          var r, n;
          (this.audioBuffer = null == (r = t.tracks.audio) ? void 0 : r.buffer),
            (this.videoBuffer =
              null == (n = t.tracks.video) ? void 0 : n.buffer);
        }),
        (t.createData = function e() {
          var t;
          return {
            v: 1,
            sf: 'h',
            sid: this.sid,
            cid: this.cid,
            pr: null == (t = this.media) ? void 0 : t.playbackRate,
            mtp: this.hls.bandwidthEstimate / 1e3
          };
        }),
        (t.apply = function r(t, a) {
          void 0 === a && (a = {}), be(a, this.createData());
          var n = a.ot === Qs.INIT || a.ot === Qs.VIDEO || a.ot === Qs.MUXED;
          if (
            (this.starved &&
              n &&
              ((a.bs = !0), (a.su = !0), (this.starved = !1)),
            null == a.su && (a.su = this.buffering),
            this.useHeaders)
          ) {
            var o = e.toHeaders(a);
            if (!Object.keys(o).length) return;
            t.headers || (t.headers = {}), be(t.headers, o);
          } else {
            var i = e.toQuery(a);
            if (!i) return;
            t.url = e.appendQueryToUri(t.url, i);
          }
        }),
        (t.getObjectType = function t(e) {
          var a = e.type;
          return 'subtitle' === a
            ? Qs.TIMED_TEXT
            : 'initSegment' === e.sn
            ? Qs.INIT
            : 'audio' === a
            ? Qs.AUDIO
            : 'main' === a
            ? this.hls.audioTracks.length
              ? Qs.VIDEO
              : Qs.MUXED
            : void 0;
        }),
        (t.getTopBandwidth = function t(e) {
          var a = 0,
            r = this.hls,
            n;
          if (e === Qs.AUDIO) n = r.audioTracks;
          else {
            var o = r.maxAutoLevel,
              i = -1 < o ? o + 1 : r.levels.length;
            n = r.levels.slice(0, i);
          }
          for (var d = Q(n), s, l; !(s = d()).done; )
            (l = s.value), l.bitrate > a && (a = l.bitrate);
          return 0 < a ? a : NaN;
        }),
        (t.getBufferLength = function t(e) {
          var a = this.hls.media,
            r = e === Qs.AUDIO ? this.audioBuffer : this.videoBuffer;
          if (!r || !a) return NaN;
          var n = ed.bufferInfo(r, a.currentTime, this.config.maxBufferHole);
          return 1e3 * n.len;
        }),
        (t.createPlaylistLoader = function e() {
          var t = this.config.pLoader,
            a = this.applyPlaylistData,
            r = t || this.config.loader;
          return (function() {
            function e(e) {
              (this.loader = void 0), (this.loader = new r(e));
            }
            var t = e.prototype;
            return (
              (t.destroy = function e() {
                this.loader.destroy();
              }),
              (t.abort = function e() {
                this.loader.abort();
              }),
              (t.load = function n(e, t, r) {
                a(e), this.loader.load(e, t, r);
              }),
              N(e, [
                {
                  key: 'stats',
                  get: function e() {
                    return this.loader.stats;
                  }
                },
                {
                  key: 'context',
                  get: function e() {
                    return this.loader.context;
                  }
                }
              ]),
              e
            );
          })();
        }),
        (t.createFragmentLoader = function e() {
          var t = this.config.fLoader,
            a = this.applyFragmentData,
            r = t || this.config.loader;
          return (function() {
            function e(e) {
              (this.loader = void 0), (this.loader = new r(e));
            }
            var t = e.prototype;
            return (
              (t.destroy = function e() {
                this.loader.destroy();
              }),
              (t.abort = function e() {
                this.loader.abort();
              }),
              (t.load = function n(e, t, r) {
                a(e), this.loader.load(e, t, r);
              }),
              N(e, [
                {
                  key: 'stats',
                  get: function e() {
                    return this.loader.stats;
                  }
                },
                {
                  key: 'context',
                  get: function e() {
                    return this.loader.context;
                  }
                }
              ]),
              e
            );
          })();
        }),
        (e.uuid = function e() {
          var t = URL.createObjectURL(new Blob()),
            e = t.toString();
          return URL.revokeObjectURL(t), e.slice(e.lastIndexOf('/') + 1);
        }),
        (e.serialize = function t(e) {
          for (
            var a = [],
              r = function t(e) {
                return !E(e) && null != e && '' !== e && !1 !== e;
              },
              n = function t(e) {
                return S(e);
              },
              o = function t(e) {
                return 100 * n(e / 100);
              },
              i = function t(e) {
                return encodeURIComponent(e);
              },
              d = { br: n, d: n, bl: o, dl: o, mtp: o, nor: i, rtp: o, tb: n },
              s = Object.keys(e || {}).sort(),
              l = Q(s),
              c;
            !(c = l()).done;

          ) {
            var u = c.value,
              g = e[u];
            if (r(g) && ('v' !== u || 1 !== g) && ('pr' != u || 1 !== g)) {
              var f = d[u];
              f && (g = f(g));
              var p = typeof g,
                m = void 0;
              (m =
                'ot' === u || 'sf' === u || 'st' === u
                  ? u + '=' + g
                  : 'boolean' === p
                  ? u
                  : 'number' === p
                  ? u + '=' + g
                  : u + '=' + JSON.stringify(g)),
                a.push(m);
            }
          }
          return a.join(',');
        }),
        (e.toHeaders = function a(t) {
          for (
            var r = Object.keys(t),
              n = {},
              o = ['Object', 'Request', 'Session', 'Status'],
              d = [{}, {}, {}, {}],
              s = {
                br: 0,
                d: 0,
                ot: 0,
                tb: 0,
                bl: 1,
                dl: 1,
                mtp: 1,
                nor: 1,
                nrr: 1,
                su: 1,
                cid: 2,
                pr: 2,
                sf: 2,
                sid: 2,
                st: 2,
                v: 2,
                bs: 3,
                rtp: 3
              },
              l = 0,
              c = r;
            l < c.length;
            l++
          ) {
            var u = c[l],
              g = null == s[u] ? 1 : s[u];
            d[g][u] = t[u];
          }
          for (var f = 0, p; f < d.length; f++)
            (p = e.serialize(d[f])), p && (n['CMCD-' + o[f]] = p);
          return n;
        }),
        (e.toQuery = function a(t) {
          return 'CMCD=' + encodeURIComponent(e.serialize(t));
        }),
        (e.appendQueryToUri = function a(e, t) {
          if (!t) return e;
          var r = e.includes('?') ? '&' : '?';
          return '' + e + r + t;
        }),
        e
      );
    })(),
    Zs = (function() {
      function e(e) {
        (this.hls = void 0),
          (this.log = void 0),
          (this.loader = null),
          (this.uri = null),
          (this.pathwayId = '.'),
          (this.pathwayPriority = null),
          (this.timeToLoad = 300),
          (this.reloadTimer = -1),
          (this.updated = 0),
          (this.started = !1),
          (this.enabled = !0),
          (this.levels = null),
          (this.audioTracks = null),
          (this.subtitleTracks = null),
          (this.penalizedPathways = {}),
          (this.hls = e),
          (this.log = Bo.log.bind(Bo, '[content-steering]:')),
          this.registerListeners();
      }
      var t = e.prototype;
      return (
        (t.registerListeners = function e() {
          var t = this.hls;
          t.on(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.on(xo.MANIFEST_LOADED, this.onManifestLoaded, this),
            t.on(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.on(xo.ERROR, this.onError, this);
        }),
        (t.unregisterListeners = function e() {
          var t = this.hls;
          t &&
            (t.off(xo.MANIFEST_LOADING, this.onManifestLoading, this),
            t.off(xo.MANIFEST_LOADED, this.onManifestLoaded, this),
            t.off(xo.MANIFEST_PARSED, this.onManifestParsed, this),
            t.off(xo.ERROR, this.onError, this));
        }),
        (t.startLoad = function e() {
          if (
            ((this.started = !0),
            self.clearTimeout(this.reloadTimer),
            this.enabled && this.uri)
          )
            if (this.updated) {
              var t = C(
                1e3 * this.timeToLoad - (performance.now() - this.updated),
                0
              );
              this.scheduleRefresh(this.uri, t);
            } else this.loadSteeringManifest(this.uri);
        }),
        (t.stopLoad = function e() {
          (this.started = !1),
            this.loader && (this.loader.destroy(), (this.loader = null)),
            self.clearTimeout(this.reloadTimer);
        }),
        (t.destroy = function e() {
          this.unregisterListeners(),
            this.stopLoad(),
            (this.hls = null),
            (this.levels = this.audioTracks = this.subtitleTracks = null);
        }),
        (t.removeLevel = function t(e) {
          var a = this.levels;
          a &&
            (this.levels = a.filter(function(t) {
              return t !== e;
            }));
        }),
        (t.onManifestLoading = function e() {
          this.stopLoad(),
            (this.enabled = !0),
            (this.timeToLoad = 300),
            (this.updated = 0),
            (this.uri = null),
            (this.pathwayId = '.'),
            (this.levels = this.audioTracks = this.subtitleTracks = null);
        }),
        (t.onManifestLoaded = function a(e, t) {
          var r = t.contentSteering;
          null === r ||
            ((this.pathwayId = r.pathwayId),
            (this.uri = r.uri),
            this.started && this.startLoad());
        }),
        (t.onManifestParsed = function a(e, t) {
          (this.audioTracks = t.audioTracks),
            (this.subtitleTracks = t.subtitleTracks);
        }),
        (t.onError = function a(e, t) {
          var r = t.errorAction;
          if (
            (null == r ? void 0 : r.action) === Ki.SendAlternateToPenaltyBox &&
            r.flags === Hi.MoveAllAlternatesMatchingHost
          ) {
            var n = this.pathwayPriority,
              o = this.pathwayId;
            this.penalizedPathways[o] ||
              (this.penalizedPathways[o] = performance.now()),
              !n &&
                this.levels &&
                (n = this.levels.reduce(function(e, t) {
                  return (
                    -1 === e.indexOf(t.pathwayId) && e.push(t.pathwayId), e
                  );
                }, [])),
              n &&
                1 < n.length &&
                (this.updatePathwayPriority(n),
                (r.resolved = this.pathwayId !== o));
          }
        }),
        (t.filterParsedLevels = function t(e) {
          this.levels = e;
          var a = this.getLevelsForPathway(this.pathwayId);
          if (0 === a.length) {
            var r = e[0].pathwayId;
            this.log(
              'No levels found in Pathway ' +
                this.pathwayId +
                '. Setting initial Pathway to "' +
                r +
                '"'
            ),
              (a = this.getLevelsForPathway(r)),
              (this.pathwayId = r);
          }
          return a.length === e.length
            ? e
            : (this.log(
                'Found ' +
                  a.length +
                  '/' +
                  e.length +
                  ' levels in Pathway "' +
                  this.pathwayId +
                  '"'
              ),
              a);
        }),
        (t.getLevelsForPathway = function t(e) {
          return null === this.levels
            ? []
            : this.levels.filter(function(t) {
                return e === t.pathwayId;
              });
        }),
        (t.updatePathwayPriority = function t(e) {
          this.pathwayPriority = e;
          var a = this.penalizedPathways,
            r = performance.now(),
            n;
          Object.keys(a).forEach(function(e) {
            r - a[e] > 3e5 && delete a[e];
          });
          for (var o = 0, d; o < e.length; o++)
            if (((d = e[o]), !a[d])) {
              if (d === this.pathwayId) return;
              var s = this.hls.nextLoadLevel,
                l = this.hls.levels[s];
              if (((n = this.getLevelsForPathway(d)), 0 < n.length)) {
                this.log('Setting Pathway to "' + d + '"'),
                  (this.pathwayId = d),
                  this.hls.trigger(xo.LEVELS_UPDATED, { levels: n });
                var c = this.hls.levels[s];
                l &&
                  c &&
                  this.levels &&
                  (c.attrs['STABLE-VARIANT-ID'] !==
                    l.attrs['STABLE-VARIANT-ID'] &&
                    c.bitrate !== l.bitrate &&
                    this.log(
                      'Unstable Pathways change from bitrate ' +
                        l.bitrate +
                        ' to ' +
                        c.bitrate
                    ),
                  (this.hls.nextLoadLevel = s));
                break;
              }
            }
        }),
        (t.clonePathways = function t(e) {
          var a = this,
            r = this.levels;
          if (r) {
            var n = {},
              o = {};
            e.forEach(function(e) {
              var t = e.ID,
                i = e['BASE-ID'],
                d = e['URI-REPLACEMENT'];
              if (
                !r.some(function(e) {
                  return e.pathwayId === t;
                })
              ) {
                var s = a.getLevelsForPathway(i).map(function(e) {
                  var a = be({}, e);
                  (a.details = void 0),
                    (a.url = Jr(
                      e.uri,
                      e.attrs['STABLE-VARIANT-ID'],
                      'PER-VARIANT-URIS',
                      d
                    ));
                  var r = new Ko(e.attrs);
                  r['PATHWAY-ID'] = t;
                  var i = r.AUDIO && r.AUDIO + '_clone_' + t,
                    s = r.SUBTITLES && r.SUBTITLES + '_clone_' + t;
                  i && ((n[r.AUDIO] = i), (r.AUDIO = i)),
                    s && ((o[r.SUBTITLES] = s), (r.SUBTITLES = s)),
                    (a.attrs = r);
                  var l = new Ui(a);
                  return Ea(l, 'audio', i), Ea(l, 'text', s), l;
                });
                r.push.apply(r, s),
                  Zr(a.audioTracks, n, d, t),
                  Zr(a.subtitleTracks, o, d, t);
              }
            });
          }
        }),
        (t.loadSteeringManifest = function t(e) {
          var a = this,
            r = this.hls.config,
            n = r.loader;
          this.loader && this.loader.destroy(), (this.loader = new n(r));
          var o;
          try {
            o = new self.URL(e);
          } catch (t) {
            return (
              (this.enabled = !1),
              void this.log('Failed to parse Steering Manifest URI: ' + e)
            );
          }
          if ('data:' !== o.protocol) {
            var i =
              0 | (this.hls.bandwidthEstimate || r.abrEwmaDefaultEstimate);
            o.searchParams.set('_HLS_pathway', this.pathwayId),
              o.searchParams.set('_HLS_throughput', '' + i);
          }
          var d = { responseType: 'json', url: o.href },
            s = r.steeringManifestLoadPolicy.default,
            l = s.errorRetry || s.timeoutRetry || {},
            c = {
              loadPolicy: s,
              timeout: s.maxLoadTimeMs,
              maxRetry: l.maxNumRetry || 0,
              retryDelay: l.retryDelayMs || 0,
              maxRetryDelay: l.maxRetryDelayMs || 0
            },
            u = {
              onSuccess: function i(e, t, r, n) {
                a.log('Loaded steering manifest: "' + o + '"');
                var d = e.data;
                if (1 !== d.VERSION)
                  return void a.log(
                    'Steering VERSION ' + d.VERSION + ' not supported!'
                  );
                (a.updated = performance.now()), (a.timeToLoad = d.TTL);
                var s = d['RELOAD-URI'],
                  l = d['PATHWAY-CLONES'],
                  c = d['PATHWAY-PRIORITY'];
                if (s)
                  try {
                    a.uri = new self.URL(s, o).href;
                  } catch (e) {
                    return (
                      (a.enabled = !1),
                      void a.log(
                        'Failed to parse Steering Manifest RELOAD-URI: ' + s
                      )
                    );
                  }
                a.scheduleRefresh(a.uri || r.url),
                  l && a.clonePathways(l),
                  c && a.updatePathwayPriority(c);
              },
              onError: function o(e, t, r, n) {
                if (
                  (a.log(
                    'Error loading steering manifest: ' +
                      e.code +
                      ' ' +
                      e.text +
                      ' (' +
                      t.url +
                      ')'
                  ),
                  a.stopLoad(),
                  410 === e.code)
                )
                  return (
                    (a.enabled = !1),
                    void a.log(
                      'Steering manifest ' + t.url + ' no longer available'
                    )
                  );
                var i = 1e3 * a.timeToLoad;
                if (429 === e.code) {
                  var d = a.loader;
                  if (
                    'function' ==
                    typeof (null == d ? void 0 : d.getResponseHeader)
                  ) {
                    var s = d.getResponseHeader('Retry-After');
                    s && (i = 1e3 * parseFloat(s));
                  }
                  return void a.log(
                    'Steering manifest ' + t.url + ' rate limited'
                  );
                }
                a.scheduleRefresh(a.uri || t.url, i);
              },
              onTimeout: function n(e, t, r) {
                a.log('Timeout loading steering manifest (' + t.url + ')'),
                  a.scheduleRefresh(a.uri || t.url);
              }
            };
          this.log('Requesting steering manifest: ' + o),
            this.loader.load(d, c, u);
        }),
        (t.scheduleRefresh = function a(e, t) {
          var r = this;
          void 0 === t && (t = 1e3 * this.timeToLoad),
            self.clearTimeout(this.reloadTimer),
            (this.reloadTimer = self.setTimeout(function() {
              r.loadSteeringManifest(e);
            }, t));
        }),
        e
      );
    })(),
    Js = /^age:\s*[\d.]+\s*$/im,
    el = (function() {
      function e(e) {
        (this.xhrSetup = void 0),
          (this.requestTimeout = void 0),
          (this.retryTimeout = void 0),
          (this.retryDelay = void 0),
          (this.config = null),
          (this.callbacks = null),
          (this.context = void 0),
          (this.loader = null),
          (this.stats = void 0),
          (this.xhrSetup = e ? e.xhrSetup || null : null),
          (this.stats = new Vo()),
          (this.retryDelay = 0);
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          (this.callbacks = null),
            this.abortInternal(),
            (this.loader = null),
            (this.config = null);
        }),
        (t.abortInternal = function e() {
          var t = this.loader;
          self.clearTimeout(this.requestTimeout),
            self.clearTimeout(this.retryTimeout),
            t &&
              ((t.onreadystatechange = null),
              (t.onprogress = null),
              4 !== t.readyState && ((this.stats.aborted = !0), t.abort()));
        }),
        (t.abort = function e() {
          var t;
          this.abortInternal(),
            null != (t = this.callbacks) &&
              t.onAbort &&
              this.callbacks.onAbort(this.stats, this.context, this.loader);
        }),
        (t.load = function r(e, t, a) {
          if (this.stats.loading.start)
            throw new Error('Loader can only be used once.');
          (this.stats.loading.start = self.performance.now()),
            (this.context = e),
            (this.config = t),
            (this.callbacks = a),
            this.loadInternal();
        }),
        (t.loadInternal = function e() {
          var t = this,
            a = this.config,
            r = this.context;
          if (a) {
            var n = (this.loader = new self.XMLHttpRequest()),
              o = this.stats;
            (o.loading.first = 0), (o.loaded = 0), (o.aborted = !1);
            var i = this.xhrSetup;
            i
              ? Promise.resolve()
                  .then(function() {
                    return t.stats.aborted ? void 0 : i(n, r.url);
                  })
                  .catch(function(e) {
                    return n.open('GET', r.url, !0), i(n, r.url);
                  })
                  .then(function() {
                    t.stats.aborted || t.openAndSendXhr(n, r, a);
                  })
                  .catch(function(e) {
                    t.callbacks.onError(
                      { code: n.status, text: e.message },
                      r,
                      n,
                      o
                    );
                  })
              : this.openAndSendXhr(n, r, a);
          }
        }),
        (t.openAndSendXhr = function r(e, t, a) {
          e.readyState || e.open('GET', t.url, !0);
          var n = this.context.headers,
            o = a.loadPolicy,
            i = o.maxTimeToFirstByteMs,
            d = o.maxLoadTimeMs;
          if (n) for (var s in n) e.setRequestHeader(s, n[s]);
          t.rangeEnd &&
            e.setRequestHeader(
              'Range',
              'bytes=' + t.rangeStart + '-' + (t.rangeEnd - 1)
            ),
            (e.onreadystatechange = this.readystatechange.bind(this)),
            (e.onprogress = this.loadprogress.bind(this)),
            (e.responseType = t.responseType),
            self.clearTimeout(this.requestTimeout),
            (a.timeout = i && _o(i) ? i : d),
            (this.requestTimeout = self.setTimeout(
              this.loadtimeout.bind(this),
              a.timeout
            )),
            e.send();
        }),
        (t.readystatechange = function e() {
          var t = this.context,
            a = this.loader,
            r = this.stats;
          if (t && a) {
            var n = a.readyState,
              o = this.config;
            if (
              !r.aborted &&
              2 <= n &&
              (0 === r.loading.first &&
                ((r.loading.first = C(self.performance.now(), r.loading.start)),
                o.timeout !== o.loadPolicy.maxLoadTimeMs &&
                  (self.clearTimeout(this.requestTimeout),
                  (o.timeout = o.loadPolicy.maxLoadTimeMs),
                  (this.requestTimeout = self.setTimeout(
                    this.loadtimeout.bind(this),
                    o.loadPolicy.maxLoadTimeMs -
                      (r.loading.first - r.loading.start)
                  )))),
              4 === n)
            ) {
              self.clearTimeout(this.requestTimeout),
                (a.onreadystatechange = null),
                (a.onprogress = null);
              var i = a.status,
                d = 'text' !== a.responseType;
              if (
                200 <= i &&
                300 > i &&
                ((d && a.response) || null !== a.responseText)
              ) {
                r.loading.end = C(self.performance.now(), r.loading.first);
                var s = d ? a.response : a.responseText,
                  l =
                    'arraybuffer' === a.responseType ? s.byteLength : s.length;
                if (
                  ((r.loaded = r.total = l),
                  (r.bwEstimate =
                    (8e3 * r.total) / (r.loading.end - r.loading.first)),
                  !this.callbacks)
                )
                  return;
                var c = this.callbacks.onProgress;
                if ((c && c(r, t, s, a), !this.callbacks)) return;
                var u = { url: a.responseURL, data: s, code: i };
                this.callbacks.onSuccess(u, r, t, a);
              } else {
                var g = o.loadPolicy.errorRetry,
                  f = r.retry;
                ua(g, f, !1, i)
                  ? this.retry(g)
                  : (Bo.error(i + ' while loading ' + t.url),
                    this.callbacks.onError(
                      { code: i, text: a.statusText },
                      t,
                      a,
                      r
                    ));
              }
            }
          }
        }),
        (t.loadtimeout = function e() {
          var t =
              null == (r = this.config) ? void 0 : r.loadPolicy.timeoutRetry,
            a = this.stats.retry,
            r;
          if (ua(t, a, !0)) this.retry(t);
          else {
            Bo.warn('timeout while loading ' + this.context.url);
            var n = this.callbacks;
            n &&
              (this.abortInternal(),
              n.onTimeout(this.stats, this.context, this.loader));
          }
        }),
        (t.retry = function t(e) {
          var a = this.context,
            r = this.stats;
          (this.retryDelay = la(e, r.retry)),
            r.retry++,
            Bo.warn(
              (status ? 'HTTP Status ' + status : 'Timeout') +
                ' while loading ' +
                a.url +
                ', retrying ' +
                r.retry +
                '/' +
                e.maxNumRetry +
                ' in ' +
                this.retryDelay +
                'ms'
            ),
            this.abortInternal(),
            (this.loader = null),
            self.clearTimeout(this.retryTimeout),
            (this.retryTimeout = self.setTimeout(
              this.loadInternal.bind(this),
              this.retryDelay
            ));
        }),
        (t.loadprogress = function t(e) {
          var a = this.stats;
          (a.loaded = e.loaded), e.lengthComputable && (a.total = e.total);
        }),
        (t.getCacheAge = function e() {
          var t = null;
          if (this.loader && Js.test(this.loader.getAllResponseHeaders())) {
            var a = this.loader.getResponseHeader('age');
            t = a ? parseFloat(a) : null;
          }
          return t;
        }),
        (t.getResponseHeader = function t(e) {
          return this.loader &&
            new RegExp('^' + e + ':\\s*[\\d.]+\\s*$', 'im').test(
              this.loader.getAllResponseHeaders()
            )
            ? this.loader.getResponseHeader(e)
            : null;
        }),
        e
      );
    })(),
    tl = /(\d+)-(\d+)\/(\d+)/,
    al = (function() {
      function e(e) {
        (this.fetchSetup = void 0),
          (this.requestTimeout = void 0),
          (this.request = void 0),
          (this.response = void 0),
          (this.controller = void 0),
          (this.context = void 0),
          (this.config = null),
          (this.callbacks = null),
          (this.stats = void 0),
          (this.loader = null),
          (this.fetchSetup = e.fetchSetup || nn),
          (this.controller = new self.AbortController()),
          (this.stats = new Vo());
      }
      var t = e.prototype;
      return (
        (t.destroy = function e() {
          (this.loader = this.callbacks = null), this.abortInternal();
        }),
        (t.abortInternal = function e() {
          var t = this.response;
          (null != t && t.ok) ||
            ((this.stats.aborted = !0), this.controller.abort());
        }),
        (t.abort = function e() {
          var t;
          this.abortInternal(),
            null != (t = this.callbacks) &&
              t.onAbort &&
              this.callbacks.onAbort(this.stats, this.context, this.response);
        }),
        (t.load = function r(e, t, a) {
          var n = this,
            o = this.stats;
          if (o.loading.start) throw new Error('Loader can only be used once.');
          o.loading.start = self.performance.now();
          var i = tn(e, this.controller.signal),
            d = a.onProgress,
            s = 'arraybuffer' === e.responseType,
            l = s ? 'byteLength' : 'length',
            c = t.loadPolicy,
            u = c.maxTimeToFirstByteMs,
            g = c.maxLoadTimeMs;
          (this.context = e),
            (this.config = t),
            (this.callbacks = a),
            (this.request = this.fetchSetup(e, i)),
            self.clearTimeout(this.requestTimeout),
            (t.timeout = u && _o(u) ? u : g),
            (this.requestTimeout = self.setTimeout(function() {
              n.abortInternal(), a.onTimeout(o, e, n.response);
            }, t.timeout)),
            self
              .fetch(this.request)
              .then(function(r) {
                n.response = n.loader = r;
                var i = C(self.performance.now(), o.loading.start);
                if (
                  (self.clearTimeout(n.requestTimeout),
                  (t.timeout = g),
                  (n.requestTimeout = self.setTimeout(function() {
                    n.abortInternal(), a.onTimeout(o, e, n.response);
                  }, g - (i - o.loading.start))),
                  !r.ok)
                ) {
                  var l = r.status,
                    c = r.statusText;
                  throw new rl(c || 'fetch, bad network response', l, r);
                }
                return (
                  (o.loading.first = i),
                  (o.total = rn(r.headers) || o.total),
                  d && _o(t.highWaterMark)
                    ? n.loadProgressively(r, o, e, t.highWaterMark, d)
                    : s
                    ? r.arrayBuffer()
                    : 'json' === e.responseType
                    ? r.json()
                    : r.text()
                );
              })
              .then(function(r) {
                var i = n.response;
                self.clearTimeout(n.requestTimeout),
                  (o.loading.end = C(self.performance.now(), o.loading.first));
                var s = r[l];
                s && (o.loaded = o.total = s);
                var c = { url: i.url, data: r, code: i.status };
                d && !_o(t.highWaterMark) && d(o, e, r, i),
                  a.onSuccess(c, o, e, i);
              })
              .catch(function(t) {
                if ((self.clearTimeout(n.requestTimeout), !o.aborted)) {
                  var r = t ? t.code || 0 : 0,
                    i = t ? t.message : null;
                  a.onError({ code: r, text: i }, e, t ? t.details : null, o);
                }
              });
        }),
        (t.getCacheAge = function e() {
          var t = null;
          if (this.response) {
            var a = this.response.headers.get('age');
            t = a ? parseFloat(a) : null;
          }
          return t;
        }),
        (t.getResponseHeader = function t(e) {
          return this.response ? this.response.headers.get(e) : null;
        }),
        (t.loadProgressively = function o(e, t, a, r, n) {
          void 0 === r && (r = 0);
          var i = new Jd(),
            d = e.body.getReader(),
            s = function o() {
              return d
                .read()
                .then(function(d) {
                  if (d.done)
                    return (
                      i.dataLength && n(t, a, i.flush(), e),
                      Promise.resolve(new ArrayBuffer(0))
                    );
                  var s = d.value,
                    l = s.length;
                  return (
                    (t.loaded += l),
                    l < r || i.dataLength
                      ? (i.push(s), i.dataLength >= r && n(t, a, i.flush(), e))
                      : n(t, a, s, e),
                    o()
                  );
                })
                .catch(function() {
                  return Promise.reject();
                });
            };
          return s();
        }),
        e
      );
    })(),
    rl = (function(e) {
      function t(t, a, r) {
        var n;
        return (
          (n = e.call(this, t) || this),
          (n.code = void 0),
          (n.details = void 0),
          (n.code = a),
          (n.details = r),
          n
        );
      }
      return M(t, e), t;
    })(V(Error)),
    nl = /\s/,
    ol = {
      newCue: function o(e, t, a, n) {
        for (
          var i = [],
            d = self.VTTCue || self.TextTrackCue,
            s = 0,
            l,
            u,
            g,
            f,
            p;
          s < n.rows.length;
          s++
        )
          if (((l = n.rows[s]), (g = !0), (f = 0), (p = ''), !l.isEmpty())) {
            for (var m = 0, y; m < l.chars.length; m++)
              nl.test(l.chars[m].uchar) && g
                ? f++
                : ((p += l.chars[m].uchar), (g = !1));
            (l.cueStartTime = t), t === a && (a += 1e-4), 16 <= f ? f-- : f++;
            var h = Or(p.trim()),
              T = Mr(t, a, h);
            (null != e && null != (y = e.cues) && y.getCueById(T)) ||
              ((u = new d(t, a, h)),
              (u.id = T),
              (u.line = s + 1),
              (u.align = 'left'),
              (u.position = 10 + L(80, 10 * P((8 * f) / 32))),
              i.push(u));
          }
        return (
          e &&
            i.length &&
            (i.sort(function(e, t) {
              return 'auto' === e.line || 'auto' === t.line
                ? 0
                : 8 < e.line && 8 < t.line
                ? t.line - e.line
                : e.line - t.line;
            }),
            i.forEach(function(t) {
              return Gt(e, t);
            })),
          i
        );
      }
    },
    il = De(
      De(
        {
          autoStartLoad: !0,
          startPosition: -1,
          defaultAudioCodec: void 0,
          debug: !1,
          capLevelOnFPSDrop: !1,
          capLevelToPlayerSize: !1,
          ignoreDevicePixelRatio: !1,
          initialLiveManifestSize: 1,
          maxBufferLength: 30,
          backBufferLength: 1 / 0,
          maxBufferSize: 60000000,
          maxBufferHole: 0.1,
          highBufferWatchdogPeriod: 2,
          nudgeOffset: 0.1,
          nudgeMaxRetry: 3,
          maxFragLookUpTolerance: 0.25,
          liveSyncDurationCount: 3,
          liveMaxLatencyDurationCount: 1 / 0,
          liveSyncDuration: void 0,
          liveMaxLatencyDuration: void 0,
          maxLiveSyncPlaybackRate: 1,
          liveDurationInfinity: !1,
          liveBackBufferLength: null,
          maxMaxBufferLength: 600,
          enableWorker: !0,
          workerPath: null,
          enableSoftwareAES: !0,
          startLevel: void 0,
          startFragPrefetch: !1,
          fpsDroppedMonitoringPeriod: 5e3,
          fpsDroppedMonitoringThreshold: 0.2,
          appendErrorMaxRetry: 3,
          loader: el,
          fLoader: void 0,
          pLoader: void 0,
          xhrSetup: void 0,
          licenseXhrSetup: void 0,
          licenseResponseCallback: void 0,
          abrController: Zd,
          bufferController: cs,
          capLevelController: Ys,
          errorController: Vi,
          fpsController: qs,
          stretchShortVideoTrack: !1,
          maxAudioFramesDrift: 1,
          forceKeyFrameOnDiscontinuity: !0,
          abrEwmaFastLive: 3,
          abrEwmaSlowLive: 9,
          abrEwmaFastVoD: 3,
          abrEwmaSlowVoD: 9,
          abrEwmaDefaultEstimate: 5e5,
          abrBandWidthFactor: 0.95,
          abrBandWidthUpFactor: 0.7,
          abrMaxWithRealBitrate: !1,
          maxStarvationDelay: 4,
          maxLoadingDelay: 4,
          minAutoBitrate: 0,
          emeEnabled: !1,
          widevineLicenseUrl: void 0,
          drmSystems: {},
          drmSystemOptions: {},
          requestMediaKeySystemAccessFunc: Zo,
          testBandwidth: !0,
          progressive: !1,
          lowLatencyMode: !0,
          cmcd: void 0,
          enableDateRangeMetadataCues: !0,
          enableEmsgMetadataCues: !0,
          enableID3MetadataCues: !0,
          certLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: 8e3,
              maxLoadTimeMs: 2e4,
              timeoutRetry: null,
              errorRetry: null
            }
          },
          keyLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: 8e3,
              maxLoadTimeMs: 2e4,
              timeoutRetry: {
                maxNumRetry: 1,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 2e4,
                backoff: 'linear'
              },
              errorRetry: {
                maxNumRetry: 8,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 2e4,
                backoff: 'linear'
              }
            }
          },
          manifestLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: 1 / 0,
              maxLoadTimeMs: 2e4,
              timeoutRetry: {
                maxNumRetry: 2,
                retryDelayMs: 0,
                maxRetryDelayMs: 0
              },
              errorRetry: {
                maxNumRetry: 1,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 8e3
              }
            }
          },
          playlistLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: 1e4,
              maxLoadTimeMs: 2e4,
              timeoutRetry: {
                maxNumRetry: 2,
                retryDelayMs: 0,
                maxRetryDelayMs: 0
              },
              errorRetry: {
                maxNumRetry: 2,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 8e3
              }
            }
          },
          fragLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: 1e4,
              maxLoadTimeMs: 12e4,
              timeoutRetry: {
                maxNumRetry: 4,
                retryDelayMs: 0,
                maxRetryDelayMs: 0
              },
              errorRetry: {
                maxNumRetry: 6,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 8e3
              }
            }
          },
          steeringManifestLoadPolicy: {
            default: {
              maxTimeToFirstByteMs: 1e4,
              maxLoadTimeMs: 2e4,
              timeoutRetry: {
                maxNumRetry: 2,
                retryDelayMs: 0,
                maxRetryDelayMs: 0
              },
              errorRetry: {
                maxNumRetry: 1,
                retryDelayMs: 1e3,
                maxRetryDelayMs: 8e3
              }
            }
          },
          manifestLoadingTimeOut: 1e4,
          manifestLoadingMaxRetry: 1,
          manifestLoadingRetryDelay: 1e3,
          manifestLoadingMaxRetryTimeout: 64e3,
          levelLoadingTimeOut: 1e4,
          levelLoadingMaxRetry: 4,
          levelLoadingRetryDelay: 1e3,
          levelLoadingMaxRetryTimeout: 64e3,
          fragLoadingTimeOut: 2e4,
          fragLoadingMaxRetry: 6,
          fragLoadingRetryDelay: 1e3,
          fragLoadingMaxRetryTimeout: 64e3
        },
        (function e() {
          return {
            cueHandler: ol,
            enableWebVTT: !0,
            enableIMSC1: !0,
            enableCEA708Captions: !0,
            captionsTextTrack1Label: 'English',
            captionsTextTrack1LanguageCode: 'en',
            captionsTextTrack2Label: 'Spanish',
            captionsTextTrack2LanguageCode: 'es',
            captionsTextTrack3Label: 'Unknown CC',
            captionsTextTrack3LanguageCode: '',
            captionsTextTrack4Label: 'Unknown CC',
            captionsTextTrack4LanguageCode: '',
            renderTextTracksNatively: !0
          };
        })()
      ),
      {},
      {
        subtitleStreamController: ns,
        subtitleTrackController: is,
        timelineController: Ws,
        audioStreamController: ts,
        audioTrackController: as,
        emeController: zs,
        cmcdController: $s,
        contentSteeringController: Zs
      }
    ),
    dl = (function() {
      function e(t) {
        void 0 === t && (t = {}),
          (this.config = void 0),
          (this.userConfig = void 0),
          (this.coreComponents = void 0),
          (this.networkControllers = void 0),
          (this._emitter = new Wd()),
          (this._autoLevelCapping = void 0),
          (this._maxHdcpLevel = null),
          (this.abrController = void 0),
          (this.bufferController = void 0),
          (this.capLevelController = void 0),
          (this.latencyController = void 0),
          (this.levelController = void 0),
          (this.streamController = void 0),
          (this.audioTrackController = void 0),
          (this.subtitleTrackController = void 0),
          (this.emeController = void 0),
          (this.cmcdController = void 0),
          (this._media = null),
          (this.url = null),
          Fe(t.debug || !1, 'Hls instance');
        var a = (this.config = on(e.DefaultConfig, t));
        (this.userConfig = t),
          (this._autoLevelCapping = -1),
          a.progressive && sn(a);
        var r = a.abrController,
          n = a.bufferController,
          o = a.capLevelController,
          i = a.errorController,
          d = a.fpsController,
          s = new i(this),
          l = (this.abrController = new r(this)),
          c = (this.bufferController = new n(this)),
          u = (this.capLevelController = new o(this)),
          g = new d(this),
          f = new _i(this),
          p = new Ni(this),
          m = a.contentSteeringController,
          y = m ? new m(this) : null,
          h = (this.levelController = new Yi(this, y)),
          T = new ji(this),
          E = new $i(this.config),
          v = (this.streamController = new Xd(this, T, E));
        u.setStreamController(v), g.setStreamController(v);
        var S = [f, h, v];
        y && S.splice(1, 0, y), (this.networkControllers = S);
        var L = [l, c, u, g, p, T];
        this.audioTrackController = this.createController(
          a.audioTrackController,
          S
        );
        var A = a.audioStreamController;
        A && S.push(new A(this, T, E)),
          (this.subtitleTrackController = this.createController(
            a.subtitleTrackController,
            S
          ));
        var R = a.subtitleStreamController;
        R && S.push(new R(this, T, E)),
          this.createController(a.timelineController, L),
          (E.emeController = this.emeController = this.createController(
            a.emeController,
            L
          )),
          (this.cmcdController = this.createController(a.cmcdController, L)),
          (this.latencyController = this.createController(Oi, L)),
          (this.coreComponents = L),
          S.push(s);
        var k = s.onErrorOut;
        'function' == typeof k && this.on(xo.ERROR, k, s);
      }
      e.isSupported = function e() {
        return wa();
      };
      var t = e.prototype;
      return (
        (t.createController = function a(e, t) {
          if (e) {
            var r = new e(this);
            return t && t.push(r), r;
          }
          return null;
        }),
        (t.on = function r(e, t, a) {
          void 0 === a && (a = this), this._emitter.on(e, t, a);
        }),
        (t.once = function r(e, t, a) {
          void 0 === a && (a = this), this._emitter.once(e, t, a);
        }),
        (t.removeAllListeners = function t(e) {
          this._emitter.removeAllListeners(e);
        }),
        (t.off = function n(e, t, a, r) {
          void 0 === a && (a = this), this._emitter.off(e, t, a, r);
        }),
        (t.listeners = function t(e) {
          return this._emitter.listeners(e);
        }),
        (t.emit = function r(e, t, a) {
          return this._emitter.emit(e, t, a);
        }),
        (t.trigger = function r(t, a) {
          if (this.config.debug) return this.emit(t, t, a);
          try {
            return this.emit(t, t, a);
          } catch (a) {
            Bo.error(
              'An internal error happened while handling event ' +
                t +
                '. Error message: "' +
                a.message +
                '". Here is a stacktrace:',
              a
            ),
              this.trigger(xo.ERROR, {
                type: Fo.OTHER_ERROR,
                details: No.INTERNAL_EXCEPTION,
                fatal: !1,
                event: t,
                error: a
              });
          }
          return !1;
        }),
        (t.listenerCount = function t(e) {
          return this._emitter.listenerCount(e);
        }),
        (t.destroy = function e() {
          Bo.log('destroy'),
            this.trigger(xo.DESTROYING, void 0),
            this.detachMedia(),
            this.removeAllListeners(),
            (this._autoLevelCapping = -1),
            (this.url = null),
            this.networkControllers.forEach(function(e) {
              return e.destroy();
            }),
            (this.networkControllers.length = 0),
            this.coreComponents.forEach(function(e) {
              return e.destroy();
            }),
            (this.coreComponents.length = 0);
          var t = this.config;
          (t.xhrSetup = t.fetchSetup = void 0), (this.userConfig = null);
        }),
        (t.attachMedia = function t(e) {
          Bo.log('attachMedia'),
            (this._media = e),
            this.trigger(xo.MEDIA_ATTACHING, { media: e });
        }),
        (t.detachMedia = function e() {
          Bo.log('detachMedia'),
            this.trigger(xo.MEDIA_DETACHING, void 0),
            (this._media = null);
        }),
        (t.loadSource = function t(e) {
          this.stopLoad();
          var a = this.media,
            r = this.url,
            n = (this.url = Po.buildAbsoluteURL(self.location.href, e, {
              alwaysNormalize: !0
            }));
          Bo.log('loadSource:' + n),
            a &&
              r &&
              (r !== n || this.bufferController.hasSourceTypes()) &&
              (this.detachMedia(), this.attachMedia(a)),
            this.trigger(xo.MANIFEST_LOADING, { url: e });
        }),
        (t.startLoad = function t(e) {
          void 0 === e && (e = -1),
            Bo.log('startLoad(' + e + ')'),
            this.networkControllers.forEach(function(t) {
              t.startLoad(e);
            });
        }),
        (t.stopLoad = function e() {
          Bo.log('stopLoad'),
            this.networkControllers.forEach(function(e) {
              e.stopLoad();
            });
        }),
        (t.swapAudioCodec = function e() {
          Bo.log('swapAudioCodec'), this.streamController.swapAudioCodec();
        }),
        (t.recoverMediaError = function e() {
          Bo.log('recoverMediaError');
          var t = this._media;
          this.detachMedia(), t && this.attachMedia(t);
        }),
        (t.removeLevel = function a(e, t) {
          void 0 === t && (t = 0), this.levelController.removeLevel(e, t);
        }),
        N(
          e,
          [
            {
              key: 'levels',
              get: function e() {
                var t = this.levelController.levels;
                return t ? t : [];
              }
            },
            {
              key: 'currentLevel',
              get: function e() {
                return this.streamController.currentLevel;
              },
              set: function t(e) {
                Bo.log('set currentLevel:' + e),
                  (this.loadLevel = e),
                  this.abrController.clearTimer(),
                  this.streamController.immediateLevelSwitch();
              }
            },
            {
              key: 'nextLevel',
              get: function e() {
                return this.streamController.nextLevel;
              },
              set: function t(e) {
                Bo.log('set nextLevel:' + e),
                  (this.levelController.manualLevel = e),
                  this.streamController.nextLevelSwitch();
              }
            },
            {
              key: 'loadLevel',
              get: function e() {
                return this.levelController.level;
              },
              set: function t(e) {
                Bo.log('set loadLevel:' + e),
                  (this.levelController.manualLevel = e);
              }
            },
            {
              key: 'nextLoadLevel',
              get: function e() {
                return this.levelController.nextLoadLevel;
              },
              set: function t(e) {
                this.levelController.nextLoadLevel = e;
              }
            },
            {
              key: 'firstLevel',
              get: function e() {
                return C(this.levelController.firstLevel, this.minAutoLevel);
              },
              set: function t(e) {
                Bo.log('set firstLevel:' + e),
                  (this.levelController.firstLevel = e);
              }
            },
            {
              key: 'startLevel',
              get: function e() {
                return this.levelController.startLevel;
              },
              set: function t(e) {
                Bo.log('set startLevel:' + e),
                  -1 !== e && (e = C(e, this.minAutoLevel)),
                  (this.levelController.startLevel = e);
              }
            },
            {
              key: 'capLevelToPlayerSize',
              get: function e() {
                return this.config.capLevelToPlayerSize;
              },
              set: function t(e) {
                var a = !!e;
                a !== this.config.capLevelToPlayerSize &&
                  (a
                    ? this.capLevelController.startCapping()
                    : (this.capLevelController.stopCapping(),
                      (this.autoLevelCapping = -1),
                      this.streamController.nextLevelSwitch()),
                  (this.config.capLevelToPlayerSize = a));
              }
            },
            {
              key: 'autoLevelCapping',
              get: function e() {
                return this._autoLevelCapping;
              },
              set: function t(e) {
                this._autoLevelCapping !== e &&
                  (Bo.log('set autoLevelCapping:' + e),
                  (this._autoLevelCapping = e));
              }
            },
            {
              key: 'bandwidthEstimate',
              get: function e() {
                var t = this.abrController.bwEstimator;
                return t ? t.getEstimate() : NaN;
              }
            },
            {
              key: 'ttfbEstimate',
              get: function e() {
                var t = this.abrController.bwEstimator;
                return t ? t.getEstimateTTFB() : NaN;
              }
            },
            {
              key: 'maxHdcpLevel',
              get: function e() {
                return this._maxHdcpLevel;
              },
              set: function t(e) {
                -1 < Mi.indexOf(e) && (this._maxHdcpLevel = e);
              }
            },
            {
              key: 'autoLevelEnabled',
              get: function e() {
                return -1 === this.levelController.manualLevel;
              }
            },
            {
              key: 'manualLevel',
              get: function e() {
                return this.levelController.manualLevel;
              }
            },
            {
              key: 'minAutoLevel',
              get: function e() {
                var t = this.levels,
                  a = this.config.minAutoBitrate;
                if (!t) return 0;
                for (var r = t.length, n = 0; n < r; n++)
                  if (t[n].maxBitrate >= a) return n;
                return 0;
              }
            },
            {
              key: 'maxAutoLevel',
              get: function e() {
                var t = this.levels,
                  a = this.autoLevelCapping,
                  r = this.maxHdcpLevel,
                  n;
                if (((n = -1 === a && t && t.length ? t.length - 1 : a), r))
                  for (var o = n, d; o--; )
                    if (((d = t[o].attrs['HDCP-LEVEL']), d && d <= r)) return o;
                return n;
              }
            },
            {
              key: 'nextAutoLevel',
              get: function e() {
                return L(
                  C(this.abrController.nextAutoLevel, this.minAutoLevel),
                  this.maxAutoLevel
                );
              },
              set: function t(e) {
                this.abrController.nextAutoLevel = C(this.minAutoLevel, e);
              }
            },
            {
              key: 'playingDate',
              get: function e() {
                return this.streamController.currentProgramDateTime;
              }
            },
            {
              key: 'mainForwardBufferInfo',
              get: function e() {
                return this.streamController.getMainFwdBufferInfo();
              }
            },
            {
              key: 'audioTracks',
              get: function e() {
                var t = this.audioTrackController;
                return t ? t.audioTracks : [];
              }
            },
            {
              key: 'audioTrack',
              get: function e() {
                var t = this.audioTrackController;
                return t ? t.audioTrack : -1;
              },
              set: function t(e) {
                var a = this.audioTrackController;
                a && (a.audioTrack = e);
              }
            },
            {
              key: 'subtitleTracks',
              get: function e() {
                var t = this.subtitleTrackController;
                return t ? t.subtitleTracks : [];
              }
            },
            {
              key: 'subtitleTrack',
              get: function e() {
                var t = this.subtitleTrackController;
                return t ? t.subtitleTrack : -1;
              },
              set: function t(e) {
                var a = this.subtitleTrackController;
                a && (a.subtitleTrack = e);
              }
            },
            {
              key: 'media',
              get: function e() {
                return this._media;
              }
            },
            {
              key: 'subtitleDisplay',
              get: function e() {
                var t = this.subtitleTrackController;
                return !!t && t.subtitleDisplay;
              },
              set: function t(e) {
                var a = this.subtitleTrackController;
                a && (a.subtitleDisplay = e);
              }
            },
            {
              key: 'lowLatencyMode',
              get: function e() {
                return this.config.lowLatencyMode;
              },
              set: function t(e) {
                this.config.lowLatencyMode = e;
              }
            },
            {
              key: 'liveSyncPosition',
              get: function e() {
                return this.latencyController.liveSyncPosition;
              }
            },
            {
              key: 'latency',
              get: function e() {
                return this.latencyController.latency;
              }
            },
            {
              key: 'maxLatency',
              get: function e() {
                return this.latencyController.maxLatency;
              }
            },
            {
              key: 'targetLatency',
              get: function e() {
                return this.latencyController.targetLatency;
              }
            },
            {
              key: 'drift',
              get: function e() {
                return this.latencyController.drift;
              }
            },
            {
              key: 'forceStartLoad',
              get: function e() {
                return this.streamController.forceStartLoad;
              }
            }
          ],
          [
            {
              key: 'version',
              get: function e() {
                return '1.4.9';
              }
            },
            {
              key: 'Events',
              get: function e() {
                return xo;
              }
            },
            {
              key: 'ErrorTypes',
              get: function e() {
                return Fo;
              }
            },
            {
              key: 'ErrorDetails',
              get: function e() {
                return No;
              }
            },
            {
              key: 'DefaultConfig',
              get: function t() {
                return e.defaultConfig ? e.defaultConfig : il;
              },
              set: function a(t) {
                e.defaultConfig = t;
              }
            }
          ]
        ),
        e
      );
    })();
  dl.defaultConfig = void 0;
  var sl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.hls = new dl(t.hlsConfig || {})),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {
          var t = this.props,
            a = t.src,
            r = t.video;
          dl.isSupported() &&
            (this.hls.loadSource(a),
            this.hls.attachMedia(r),
            this.hls.on(dl.Events.MANIFEST_PARSED, function() {
              r.play();
            }));
        }),
        (a.componentWillUnmount = function e() {
          this.hls && this.hls.destroy();
        }),
        (a.render = function e() {
          return Ln.createElement('source', {
            src: this.props.src,
            type: this.props.type || 'application/x-mpegURL'
          });
        }),
        t
      );
    })(o.Component),
    ll = {
      hlsConfig: so.object,
      actions: so.object,
      player: so.object,
      children: so.any,
      startTime: so.number,
      loop: so.bool,
      muted: so.bool,
      autoPlay: so.bool,
      playsInline: so.bool,
      src: so.string,
      poster: so.string,
      className: so.string,
      preload: so.oneOf(['auto', 'metadata', 'none']),
      crossOrigin: so.string,
      onLoadStart: so.func,
      onWaiting: so.func,
      onCanPlay: so.func,
      onCanPlayThrough: so.func,
      onPlaying: so.func,
      onEnded: so.func,
      onSeeking: so.func,
      onSeeked: so.func,
      onPlay: so.func,
      onPause: so.func,
      onProgress: so.func,
      onDurationChange: so.func,
      onError: so.func,
      onSuspend: so.func,
      onAbort: so.func,
      onEmptied: so.func,
      onStalled: so.func,
      onLoadedMetadata: so.func,
      onLoadedData: so.func,
      onTimeUpdate: so.func,
      onRateChange: so.func,
      onVolumeChange: so.func,
      onResize: so.func
    },
    cl = (function(e) {
      function t(t) {
        var a;
        return (
          (a = e.call(this, t) || this),
          (a.video = null),
          (a.hlsConfig = a.play.bind(Y(a))),
          (a.play = a.play.bind(Y(a))),
          (a.pause = a.pause.bind(Y(a))),
          (a.seek = a.seek.bind(Y(a))),
          (a.forward = a.forward.bind(Y(a))),
          (a.replay = a.replay.bind(Y(a))),
          (a.toggleFullscreen = a.toggleFullscreen.bind(Y(a))),
          (a.getProperties = a.getProperties.bind(Y(a))),
          (a.renderChildren = a.renderChildren.bind(Y(a))),
          (a.handleLoadStart = a.handleLoadStart.bind(Y(a))),
          (a.handleCanPlay = a.handleCanPlay.bind(Y(a))),
          (a.handleCanPlayThrough = a.handleCanPlayThrough.bind(Y(a))),
          (a.handlePlay = a.handlePlay.bind(Y(a))),
          (a.handlePlaying = a.handlePlaying.bind(Y(a))),
          (a.handlePause = a.handlePause.bind(Y(a))),
          (a.handleEnded = a.handleEnded.bind(Y(a))),
          (a.handleWaiting = a.handleWaiting.bind(Y(a))),
          (a.handleSeeking = a.handleSeeking.bind(Y(a))),
          (a.handleSeeked = a.handleSeeked.bind(Y(a))),
          (a.handleFullscreenChange = a.handleFullscreenChange.bind(Y(a))),
          (a.handleError = a.handleError.bind(Y(a))),
          (a.handleSuspend = a.handleSuspend.bind(Y(a))),
          (a.handleAbort = a.handleAbort.bind(Y(a))),
          (a.handleEmptied = a.handleEmptied.bind(Y(a))),
          (a.handleStalled = a.handleStalled.bind(Y(a))),
          (a.handleLoadedMetaData = a.handleLoadedMetaData.bind(Y(a))),
          (a.handleLoadedData = a.handleLoadedData.bind(Y(a))),
          (a.handleTimeUpdate = a.handleTimeUpdate.bind(Y(a))),
          (a.handleRateChange = a.handleRateChange.bind(Y(a))),
          (a.handleVolumeChange = a.handleVolumeChange.bind(Y(a))),
          (a.handleDurationChange = a.handleDurationChange.bind(Y(a))),
          (a.handleProgress = Re(a.handleProgress.bind(Y(a)), 250)),
          (a.handleKeypress = a.handleKeypress.bind(Y(a))),
          (a.handleTextTrackChange = a.handleTextTrackChange.bind(Y(a))),
          a
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {
          this.forceUpdate(),
            this.video &&
              this.video.textTracks &&
              ((this.video.textTracks.onaddtrack = this.handleTextTrackChange),
              (this.video.textTracks.onremovetrack = this.handleTextTrackChange));
        }),
        (a.getProperties = function e() {
          var t = this;
          return this.video
            ? bo.reduce(function(e, a) {
                return (e[a] = t.video[a]), e;
              }, {})
            : null;
        }),
        (a.handleTextTrackChange = function e() {
          var t = this.props,
            a = t.actions,
            r = t.player;
          if (this.video && this.video.textTracks) {
            var n = Array.from(this.video.textTracks).find(function(e) {
              return 'showing' === e.mode;
            });
            n !== r.activeTextTrack && a.activateTextTrack(n);
          }
        }),
        (a.play = function e() {
          var t = this.video.play();
          void 0 !== t && t.catch(function() {}).then(function() {});
        }),
        (a.pause = function e() {
          var t = this.video.pause();
          void 0 !== t && t.catch(function() {}).then(function() {});
        }),
        (a.load = function e() {
          this.video.load();
        }),
        (a.addTextTrack = function e() {
          var t;
          (t = this.video).addTextTrack.apply(t, arguments);
        }),
        (a.canPlayType = function e() {
          var t;
          (t = this.video).canPlayType.apply(t, arguments);
        }),
        (a.togglePlay = function e() {
          this.video.paused ? this.play() : this.pause();
        }),
        (a.seek = function t(e) {
          try {
            this.video.currentTime = e;
          } catch (t) {}
        }),
        (a.forward = function t(e) {
          this.seek(this.video.currentTime + e);
        }),
        (a.replay = function t(e) {
          this.forward(-e);
        }),
        (a.toggleFullscreen = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          r.toggleFullscreen(a);
        }),
        (a.handleLoadStart = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onLoadStart;
          a.handleLoadStart(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleCanPlay = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onCanPlay;
          a.handleCanPlay(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleCanPlayThrough = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onCanPlayThrough;
          a.handleCanPlayThrough(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handlePlaying = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onPlaying;
          a.handlePlaying(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handlePlay = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onPlay;
          a.handlePlay(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handlePause = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onPause;
          a.handlePause(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handleDurationChange = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onDurationChange;
          a.handleDurationChange(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleProgress = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onProgress;
          this.video && a.handleProgressChange(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleEnded = function e() {
          var t = this.props,
            a = t.loop,
            r = t.player,
            n = t.actions,
            o = t.onEnded;
          a ? (this.seek(0), this.play()) : !r.paused && this.pause(),
            n.handleEnd(this.getProperties()),
            o && o.apply(void 0, arguments);
        }),
        (a.handleWaiting = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onWaiting;
          a.handleWaiting(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleSeeking = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onSeeking;
          a.handleSeeking(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleSeeked = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onSeeked;
          a.handleSeeked(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handleFullscreenChange = function e() {}),
        (a.handleSuspend = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onSuspend;
          a.handleSuspend(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleAbort = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onAbort;
          a.handleAbort(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handleEmptied = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onEmptied;
          a.handleEmptied(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleStalled = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onStalled;
          a.handleStalled(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleLoadedMetaData = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onLoadedMetadata,
            n = t.startTime;
          n && 0 < n && (this.video.currentTime = n),
            a.handleLoadedMetaData(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleLoadedData = function e() {
          for (var t = arguments.length, a = Array(t), r = 0; r < t; r++)
            a[r] = arguments[r];
          console.log(2222, a);
          var n = this.props,
            o = n.actions,
            i = n.onLoadedData;
          o.handleLoadedData(this.getProperties()), i && i.apply(void 0, a);
        }),
        (a.handleTimeUpdate = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onTimeUpdate;
          a.handleTimeUpdate(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleRateChange = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onRateChange;
          a.handleRateChange(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleVolumeChange = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onVolumeChange;
          a.handleVolumeChange(this.getProperties()),
            r && r.apply(void 0, arguments);
        }),
        (a.handleError = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onError;
          a.handleError(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handleResize = function e() {
          var t = this.props,
            a = t.actions,
            r = t.onResize;
          a.handleResize(this.getProperties()), r && r.apply(void 0, arguments);
        }),
        (a.handleKeypress = function e() {}),
        (a.renderChildren = function e() {
          var t = this,
            a = O({}, this.props, { video: this.video });
          return this.video
            ? a.hlsConfig && a.src
              ? Ln.createElement(sl, {
                  isVideoChild: !0,
                  hlsConfig: a.hlsConfig,
                  src: a.src
                })
              : Ln.Children.toArray(this.props.children)
                  .filter(Se)
                  .map(function(e) {
                    var r;
                    if ('string' != typeof e.type) r = a;
                    else if ('source' === e.type) {
                      r = O({}, e.props);
                      var n = r.onError;
                      r.onError = function() {
                        n && n.apply(void 0, arguments),
                          t.handleError.apply(t, arguments);
                      };
                    }
                    return Ln.cloneElement(e, r);
                  })
            : null;
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.loop,
            n = a.poster,
            o = a.preload,
            i = a.src,
            d = a.autoPlay,
            s = a.playsInline,
            l = a.muted,
            c = a.crossOrigin,
            u = a.videoId,
            g = a.hlsConfig;
          return Ln.createElement(
            'video',
            O(
              {
                className: lo('video-react-video', this.props.className),
                id: u,
                crossOrigin: c,
                ref: function a(e) {
                  t.video = e;
                },
                muted: l,
                preload: o,
                loop: r,
                playsInline: s,
                autoPlay: d,
                poster: n,
                onLoadStart: this.handleLoadStart,
                onWaiting: this.handleWaiting,
                onCanPlay: this.handleCanPlay,
                onCanPlayThrough: this.handleCanPlayThrough,
                onPlaying: this.handlePlaying,
                onEnded: this.handleEnded,
                onSeeking: this.handleSeeking,
                onSeeked: this.handleSeeked,
                onPlay: this.handlePlay,
                onPause: this.handlePause,
                onProgress: this.handleProgress,
                onDurationChange: this.handleDurationChange,
                onError: this.handleError,
                onSuspend: this.handleSuspend,
                onAbort: this.handleAbort,
                onEmptied: this.handleEmptied,
                onStalled: this.handleStalled,
                onLoadedMetadata: this.handleLoadedMetaData,
                onLoadedData: this.handleLoadedData,
                onTimeUpdate: this.handleTimeUpdate,
                onRateChange: this.handleRateChange,
                onVolumeChange: this.handleVolumeChange,
                tabIndex: '-1'
              },
              g && i ? { src: i } : {}
            ),
            this.renderChildren()
          );
        }),
        N(t, [
          {
            key: 'playbackRate',
            get: function e() {
              return this.video.playbackRate;
            },
            set: function t(e) {
              this.video.playbackRate = e;
            }
          },
          {
            key: 'muted',
            get: function e() {
              return this.video.muted;
            },
            set: function t(e) {
              this.video.muted = e;
            }
          },
          {
            key: 'volume',
            get: function e() {
              return this.video.volume;
            },
            set: function t(e) {
              1 < e && (e = 1), 0 > e && (e = 0), (this.video.volume = e);
            }
          },
          {
            key: 'videoWidth',
            get: function e() {
              return this.video.videoWidth;
            }
          },
          {
            key: 'videoHeight',
            get: function e() {
              return this.video.videoHeight;
            }
          }
        ]),
        t
      );
    })(o.Component);
  (cl.propTypes = ll), (cl.displayName = 'Video');
  var ul = { manager: so.object, className: so.string },
    gl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.timer = null),
          t.manager.subscribeToOperationStateChange(
            r.handleStateChange.bind(Y(r))
          ),
          (r.state = { hidden: !0, operation: {} }),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.handleStateChange = function a(e, t) {
          var r = this;
          e.count !== t.count &&
            'shortcut' === e.operation.source &&
            (this.timer && (clearTimeout(this.timer), (this.timer = null)),
            this.setState({
              hidden: !1,
              count: e.count,
              operation: e.operation
            }),
            (this.timer = setTimeout(function() {
              r.setState({ hidden: !0 }), (r.timer = null);
            }, 500)));
        }),
        (a.render = function e() {
          if ('shortcut' !== this.state.operation.source) return null;
          var t = this.state.hidden ? { display: 'none' } : null;
          return Ln.createElement(
            'div',
            {
              className: lo(
                {
                  'video-react-bezel': !0,
                  'video-react-bezel-animation': 0 == this.state.count % 2,
                  'video-react-bezel-animation-alt': 1 == this.state.count % 2
                },
                this.props.className
              ),
              style: t,
              role: 'status',
              'aria-label': this.state.operation.action
            },
            Ln.createElement('div', {
              className: lo(
                'video-react-bezel-icon',
                'video-react-bezel-icon-' + this.state.operation.action
              )
            })
          );
        }),
        t
      );
    })(o.Component);
  (gl.propTypes = ul), (gl.displayName = 'Bezel');
  var fl = {
      clickable: so.bool,
      dblclickable: so.bool,
      manager: so.object,
      actions: so.object,
      player: so.object,
      shortcuts: so.array
    },
    pl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.defaultShortcuts = [
            { keyCode: 32, handle: r.togglePlay },
            { keyCode: 75, handle: r.togglePlay },
            { keyCode: 70, handle: r.toggleFullscreen },
            {
              keyCode: 37,
              handle: function a(e, t) {
                e.hasStarted &&
                  t.replay(5, { action: 'replay-5', source: 'shortcut' });
              }
            },
            {
              keyCode: 74,
              handle: function a(e, t) {
                e.hasStarted &&
                  t.replay(10, { action: 'replay-10', source: 'shortcut' });
              }
            },
            {
              keyCode: 39,
              handle: function a(e, t) {
                e.hasStarted &&
                  t.forward(5, { action: 'forward-5', source: 'shortcut' });
              }
            },
            {
              keyCode: 76,
              handle: function a(e, t) {
                e.hasStarted &&
                  t.forward(10, { action: 'forward-10', source: 'shortcut' });
              }
            },
            {
              keyCode: 36,
              handle: function a(e, t) {
                e.hasStarted && t.seek(0);
              }
            },
            {
              keyCode: 35,
              handle: function a(e, t) {
                e.hasStarted && t.seek(e.duration);
              }
            },
            {
              keyCode: 38,
              handle: function a(e, t) {
                var r = e.volume + 0.05;
                1 < r && (r = 1),
                  t.changeVolume(r, {
                    action: 'volume-up',
                    source: 'shortcut'
                  });
              }
            },
            {
              keyCode: 40,
              handle: function a(e, t) {
                var r = e.volume - 0.05;
                0 > r && (r = 0);
                var n = 0 < r ? 'volume-down' : 'volume-off';
                t.changeVolume(r, { action: n, source: 'shortcut' });
              }
            },
            {
              keyCode: 190,
              shift: !0,
              handle: function a(e, t) {
                var r = e.playbackRate;
                1.5 <= r
                  ? (r = 2)
                  : 1.25 <= r
                  ? (r = 1.5)
                  : 1 <= r
                  ? (r = 1.25)
                  : 0.5 <= r
                  ? (r = 1)
                  : 0.25 <= r
                  ? (r = 0.5)
                  : 0 <= r && (r = 0.25),
                  t.changeRate(r, {
                    action: 'fast-forward',
                    source: 'shortcut'
                  });
              }
            },
            {
              keyCode: 188,
              shift: !0,
              handle: function a(e, t) {
                var r = e.playbackRate;
                0.5 >= r
                  ? (r = 0.25)
                  : 1 >= r
                  ? (r = 0.5)
                  : 1.25 >= r
                  ? (r = 1)
                  : 1.5 >= r
                  ? (r = 1.25)
                  : 2 >= r && (r = 1.5),
                  t.changeRate(r, {
                    action: 'fast-rewind',
                    source: 'shortcut'
                  });
              }
            }
          ]),
          (r.shortcuts = [].concat(r.defaultShortcuts)),
          (r.mergeShortcuts = r.mergeShortcuts.bind(Y(r))),
          (r.handleKeyPress = r.handleKeyPress.bind(Y(r))),
          (r.handleClick = r.handleClick.bind(Y(r))),
          (r.handleDoubleClick = r.handleDoubleClick.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {
          this.mergeShortcuts(),
            document.addEventListener('keydown', this.handleKeyPress),
            document.addEventListener('click', this.handleClick),
            document.addEventListener('dblclick', this.handleDoubleClick);
        }),
        (a.componentDidUpdate = function t(e) {
          e.shortcuts !== this.props.shortcuts && this.mergeShortcuts();
        }),
        (a.componentWillUnmount = function e() {
          document.removeEventListener('keydown', this.handleKeyPress),
            document.removeEventListener('click', this.handleClick),
            document.removeEventListener('dblclick', this.handleDoubleClick);
        }),
        (a.mergeShortcuts = function e() {
          var t = function t(e) {
              var a = e.keyCode,
                r = void 0 === a ? 0 : a,
                n = e.ctrl,
                o = void 0 !== n && n,
                i = e.shift,
                d = void 0 !== i && i,
                s = e.alt,
                l = void 0 !== s && s;
              return r + ':' + o + ':' + d + ':' + l;
            },
            a = this.defaultShortcuts.reduce(function(e, a) {
              var r;
              return Object.assign(e, ((r = {}), (r[t(a)] = a), r));
            }, {}),
            r = (this.props.shortcuts || []).reduce(function(e, a) {
              var r = a.keyCode,
                n = a.handle;
              if (r && 'function' == typeof n) {
                var o;
                return Object.assign(e, ((o = {}), (o[t(a)] = a), o));
              }
              return e;
            }, a),
            n = function t(e) {
              var a = 0,
                r = ['ctrl', 'shift', 'alt'];
              return (
                r.forEach(function(t) {
                  e[t] && a++;
                }),
                a
              );
            };
          this.shortcuts = Object.keys(r)
            .map(function(e) {
              return r[e];
            })
            .sort(function(e, t) {
              return n(t) - n(e);
            });
        }),
        (a.togglePlay = function a(e, t) {
          e.paused
            ? t.play({ action: 'play', source: 'shortcut' })
            : t.pause({ action: 'pause', source: 'shortcut' });
        }),
        (a.toggleFullscreen = function a(e, t) {
          t.toggleFullscreen(e);
        }),
        (a.handleKeyPress = function e(t) {
          var a = this.props,
            r = a.player,
            n = a.actions;
          if (
            r.isActive &&
            !(
              document.activeElement &&
              (gn(document.activeElement, 'video-react-control') ||
                gn(document.activeElement, 'video-react-menu-button-active') ||
                gn(document.activeElement, 'video-react-big-play-button'))
            )
          ) {
            var o = t.keyCode || t.which,
              i = t.ctrlKey || t.metaKey,
              d = t.shiftKey,
              l = t.altKey,
              c = this.shortcuts.filter(function(e) {
                return (
                  !!(e.keyCode && 0 == e.keyCode - o) &&
                  (void 0 === e.ctrl || e.ctrl === i) &&
                  (void 0 === e.shift || e.shift === d) &&
                  (void 0 === e.alt || e.alt === l)
                );
              })[0];
            c && (c.handle(r, n), t.preventDefault());
          }
        }),
        (a.canBeClicked = function e(t, a) {
          return !!(
            t.isActive &&
            'VIDEO' === a.target.nodeName &&
            4 === t.readyState
          );
        }),
        (a.handleClick = function e(t) {
          var a = this.props,
            r = a.player,
            n = a.actions,
            o = a.clickable;
          this.canBeClicked(r, t) && o && this.togglePlay(r, n);
        }),
        (a.handleDoubleClick = function e(t) {
          var a = this.props,
            r = a.player,
            n = a.actions,
            o = a.dblclickable;
          this.canBeClicked(r, t) && o && this.toggleFullscreen(r, n);
        }),
        (a.render = function e() {
          return null;
        }),
        t
      );
    })(o.Component);
  (pl.propTypes = fl),
    (pl.defaultProps = { clickable: !0, dblclickable: !0 }),
    (pl.displayName = 'Shortcut');
  var ml = {
      className: so.string,
      onMouseDown: so.func,
      onMouseMove: so.func,
      stepForward: so.func,
      stepBack: so.func,
      sliderActive: so.func,
      sliderInactive: so.func,
      onMouseUp: so.func,
      onFocus: so.func,
      onBlur: so.func,
      onClick: so.func,
      getPercent: so.func,
      vertical: so.bool,
      children: so.node,
      label: so.string,
      valuenow: so.string,
      valuetext: so.string
    },
    yl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleMouseDown = r.handleMouseDown.bind(Y(r))),
          (r.handleMouseMove = r.handleMouseMove.bind(Y(r))),
          (r.handleMouseUp = r.handleMouseUp.bind(Y(r))),
          (r.handleFocus = r.handleFocus.bind(Y(r))),
          (r.handleBlur = r.handleBlur.bind(Y(r))),
          (r.handleClick = r.handleClick.bind(Y(r))),
          (r.handleKeyPress = r.handleKeyPress.bind(Y(r))),
          (r.stepForward = r.stepForward.bind(Y(r))),
          (r.stepBack = r.stepBack.bind(Y(r))),
          (r.calculateDistance = r.calculateDistance.bind(Y(r))),
          (r.getProgress = r.getProgress.bind(Y(r))),
          (r.renderChildren = r.renderChildren.bind(Y(r))),
          (r.state = { active: !1 }),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentWillUnmount = function e() {
          document.removeEventListener('mousemove', this.handleMouseMove, !0),
            document.removeEventListener('mouseup', this.handleMouseUp, !0),
            document.removeEventListener('touchmove', this.handleMouseMove, !0),
            document.removeEventListener('touchend', this.handleMouseUp, !0),
            document.removeEventListener('keydown', this.handleKeyPress, !0);
        }),
        (a.getProgress = function e() {
          var t = this.props.getPercent;
          if (!t) return 0;
          var a = t();
          return ('number' != typeof a || 0 > a || a === 1 / 0) && (a = 0), a;
        }),
        (a.handleMouseDown = function t(e) {
          var a = this.props.onMouseDown;
          document.addEventListener('mousemove', this.handleMouseMove, !0),
            document.addEventListener('mouseup', this.handleMouseUp, !0),
            document.addEventListener('touchmove', this.handleMouseMove, !0),
            document.addEventListener('touchend', this.handleMouseUp, !0),
            this.setState({ active: !0 }),
            this.props.sliderActive && this.props.sliderActive(e),
            this.handleMouseMove(e),
            a && a(e);
        }),
        (a.handleMouseMove = function t(e) {
          var a = this.props.onMouseMove;
          a && a(e);
        }),
        (a.handleMouseUp = function t(e) {
          e.preventDefault();
          var a = this.props.onMouseUp;
          document.removeEventListener('mousemove', this.handleMouseMove, !0),
            document.removeEventListener('mouseup', this.handleMouseUp, !0),
            document.removeEventListener('touchmove', this.handleMouseMove, !0),
            document.removeEventListener('touchend', this.handleMouseUp, !0),
            this.setState({ active: !1 }),
            this.props.sliderInactive && this.props.sliderInactive(e),
            a && a(e);
        }),
        (a.handleFocus = function e(t) {
          document.addEventListener('keydown', this.handleKeyPress, !0),
            this.props.onFocus && this.props.onFocus(t);
        }),
        (a.handleBlur = function e(t) {
          document.removeEventListener('keydown', this.handleKeyPress, !0),
            this.props.onBlur && this.props.onBlur(t);
        }),
        (a.handleClick = function t(e) {
          e.preventDefault(), this.props.onClick && this.props.onClick(e);
        }),
        (a.handleKeyPress = function t(e) {
          37 === e.which || 40 === e.which
            ? (e.preventDefault(), e.stopPropagation(), this.stepBack())
            : (38 === e.which || 39 === e.which) &&
              (e.preventDefault(), e.stopPropagation(), this.stepForward());
        }),
        (a.stepForward = function e() {
          this.props.stepForward && this.props.stepForward();
        }),
        (a.stepBack = function e() {
          this.props.stepBack && this.props.stepBack();
        }),
        (a.calculateDistance = function t(e) {
          var a = this.slider,
            r = cn(a, e);
          return this.props.vertical ? r.y : r.x;
        }),
        (a.renderChildren = function e() {
          var t = this.getProgress(),
            a = (100 * t).toFixed(2) + '%';
          return Ln.Children.map(this.props.children, function(e) {
            return Ln.cloneElement(e, { progress: t, percentage: a });
          });
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.vertical,
            n = a.label,
            o = a.valuenow,
            i = a.valuetext;
          return Ln.createElement(
            'div',
            {
              className: lo(
                this.props.className,
                {
                  'video-react-slider-vertical': r,
                  'video-react-slider-horizontal': !r,
                  'video-react-sliding': this.state.active
                },
                'video-react-slider'
              ),
              ref: function a(e) {
                t.slider = e;
              },
              tabIndex: '0',
              role: 'slider',
              onMouseDown: this.handleMouseDown,
              onTouchStart: this.handleMouseDown,
              onFocus: this.handleFocus,
              onBlur: this.handleBlur,
              onClick: this.handleClick,
              'aria-label': n || '',
              'aria-valuenow': o || '',
              'aria-valuetext': i || '',
              'aria-valuemin': 0,
              'aria-valuemax': 100
            },
            this.renderChildren()
          );
        }),
        t
      );
    })(o.Component);
  (yl.propTypes = ml), (yl.displayName = 'Slider');
  var hl = {
    currentTime: so.number,
    duration: so.number,
    percentage: so.string,
    className: so.string
  };
  (fn.propTypes = hl), (fn.displayName = 'PlayProgressBar');
  var Tl = { duration: so.number, buffered: so.object, className: so.string };
  (pn.propTypes = Tl),
    (pn.displayName = 'LoadProgressBar'),
    (mn.propTypes = {
      duration: so.number,
      mouseTime: so.object,
      className: so.string
    }),
    (mn.displayName = 'MouseTimeDisplay');
  var El = {
      player: so.object,
      mouseTime: so.object,
      actions: so.object,
      className: so.string
    },
    vl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.getPercent = r.getPercent.bind(Y(r))),
          (r.getNewTime = r.getNewTime.bind(Y(r))),
          (r.stepForward = r.stepForward.bind(Y(r))),
          (r.stepBack = r.stepBack.bind(Y(r))),
          (r.handleMouseDown = r.handleMouseDown.bind(Y(r))),
          (r.handleMouseMove = r.handleMouseMove.bind(Y(r))),
          (r.handleMouseUp = r.handleMouseUp.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {}),
        (a.componentDidUpdate = function e() {}),
        (a.getPercent = function e() {
          var t = this.props.player,
            a = t.currentTime,
            r = t.seekingTime,
            n = t.duration,
            o = r || a,
            i = o / n;
          return 1 <= i ? 1 : i;
        }),
        (a.getNewTime = function t(e) {
          var a = this.props.player.duration,
            r = this.slider.calculateDistance(e),
            n = r * a;
          return n === a ? n - 0.1 : n;
        }),
        (a.handleMouseDown = function e() {}),
        (a.handleMouseUp = function t(e) {
          var a = this.props.actions,
            r = this.getNewTime(e);
          a.seek(r), a.handleEndSeeking(r);
        }),
        (a.handleMouseMove = function t(e) {
          var a = this.props.actions,
            r = this.getNewTime(e);
          a.handleSeekingTime(r);
        }),
        (a.stepForward = function e() {
          var t = this.props.actions;
          t.forward(5);
        }),
        (a.stepBack = function e() {
          var t = this.props.actions;
          t.replay(5);
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.player,
            n = r.currentTime,
            o = r.seekingTime,
            i = r.duration,
            d = r.buffered,
            s = a.mouseTime,
            l = o || n;
          return Ln.createElement(
            yl,
            {
              ref: function a(e) {
                t.slider = e;
              },
              label: 'video progress bar',
              className: lo(
                'video-react-progress-holder',
                this.props.className
              ),
              valuenow: (100 * this.getPercent()).toFixed(2),
              valuetext: ve(l, i),
              onMouseDown: this.handleMouseDown,
              onMouseMove: this.handleMouseMove,
              onMouseUp: this.handleMouseUp,
              getPercent: this.getPercent,
              stepForward: this.stepForward,
              stepBack: this.stepBack
            },
            Ln.createElement(pn, { buffered: d, currentTime: l, duration: i }),
            Ln.createElement(mn, { duration: i, mouseTime: s }),
            Ln.createElement(fn, { currentTime: l, duration: i })
          );
        }),
        t
      );
    })(o.Component);
  (vl.propTypes = El), (vl.displayName = 'SeekBar');
  var Sl = { player: so.object, className: so.string },
    Ll = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.state = { mouseTime: { time: null, position: 0 } }),
          (r.handleMouseMoveThrottle = r.handleMouseMove.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.handleMouseMove = function t(e) {
          if (e.pageX) {
            var a = this.props.player.duration,
              r = this.seekBar,
              n = cn(r, e).x * a,
              o = e.pageX - ln(r).left;
            this.setState({ mouseTime: { time: n, position: o } });
          }
        }),
        (a.render = function e() {
          var t = this,
            a = this.props.className;
          return Ln.createElement(
            'div',
            {
              onMouseMove: this.handleMouseMoveThrottle,
              className: lo(
                'video-react-progress-control video-react-control',
                a
              )
            },
            Ln.createElement(
              vl,
              O(
                {
                  mouseTime: this.state.mouseTime,
                  ref: function a(e) {
                    t.seekBar = e;
                  }
                },
                this.props
              )
            )
          );
        }),
        t
      );
    })(o.Component);
  (Ll.propTypes = Sl), (Ll.displayName = 'ProgressControl');
  var Al = { actions: so.object, player: so.object, className: so.string },
    Rl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function e() {
          var t = this.props,
            a = t.actions,
            r = t.player;
          r.paused ? a.play() : a.pause();
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.player,
            n = a.className,
            o = r.paused ? 'Play' : 'Pause';
          return Ln.createElement(
            'button',
            {
              ref: function a(e) {
                t.button = e;
              },
              className: lo(n, {
                'video-react-play-control': !0,
                'video-react-control': !0,
                'video-react-button': !0,
                'video-react-paused': r.paused,
                'video-react-playing': !r.paused
              }),
              type: 'button',
              tabIndex: '0',
              onClick: this.handleClick
            },
            Ln.createElement(
              'span',
              { className: 'video-react-control-text' },
              o
            )
          );
        }),
        t
      );
    })(o.Component);
  (Rl.propTypes = Al), (Rl.displayName = 'PlayToggle');
  var kl = { actions: so.object, className: so.string, seconds: so.number },
    Dl = { seconds: 10 },
    Il = function(e) {
      var t = (function(t) {
        function a(e, a) {
          var r;
          return (
            (r = t.call(this, e, a) || this),
            (r.handleClick = r.handleClick.bind(Y(r))),
            r
          );
        }
        M(a, t);
        var r = a.prototype;
        return (
          (r.handleClick = function t() {
            var a = this.props,
              r = a.actions,
              n = a.seconds;
            'forward' === e ? r.forward(n) : r.replay(n);
          }),
          (r.render = function t() {
            var a = this,
              r = this.props,
              n = r.seconds,
              o = r.className,
              i = [
                'video-react-control',
                'video-react-button',
                'video-react-icon'
              ];
            return (
              i.push(
                'video-react-icon-' + e + '-' + n,
                'video-react-' + e + '-control'
              ),
              o && i.push(o),
              Ln.createElement(
                'button',
                {
                  ref: function t(e) {
                    a.button = e;
                  },
                  className: i.join(' '),
                  type: 'button',
                  onClick: this.handleClick
                },
                Ln.createElement(
                  'span',
                  { className: 'video-react-control-text' },
                  e + ' ' + n + ' seconds'
                )
              )
            );
          }),
          a
        );
      })(o.Component);
      return (t.propTypes = kl), (t.defaultProps = Dl), t;
    },
    bl = Il('forward');
  bl.displayName = 'ForwardControl';
  var Cl = Il('replay');
  Cl.displayName = 'ReplayControl';
  var Pl = { actions: so.object, player: so.object, className: so.string },
    _l = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          r.toggleFullscreen(a);
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.player,
            n = a.className;
          return Ln.createElement(
            'button',
            {
              className: lo(
                n,
                {
                  'video-react-icon-fullscreen-exit': r.isFullscreen,
                  'video-react-icon-fullscreen': !r.isFullscreen
                },
                'video-react-fullscreen-control video-react-control video-react-button video-react-icon'
              ),
              ref: function a(e) {
                t.button = e;
              },
              type: 'button',
              tabIndex: '0',
              onClick: this.handleClick
            },
            Ln.createElement(
              'span',
              { className: 'video-react-control-text' },
              'Non-Fullscreen'
            )
          );
        }),
        t
      );
    })(o.Component);
  (_l.propTypes = Pl), (_l.displayName = 'FullscreenToggle');
  var xl = { player: so.object, className: so.string };
  (yn.propTypes = xl), (yn.displayName = 'RemainingTimeDisplay');
  var Fl = { player: so.object, className: so.string };
  (hn.propTypes = Fl), (hn.displayName = 'CurrentTimeDisplay');
  var Nl = { player: so.object, className: so.string };
  (Tn.propTypes = Nl), (Tn.displayName = 'DurationDisplay');
  var Ol = { separator: so.string, className: so.string };
  (En.propTypes = Ol), (En.displayName = 'TimeDivider');
  var Ml = {
      tagName: so.string,
      onClick: so.func.isRequired,
      onFocus: so.func,
      onBlur: so.func,
      className: so.string
    },
    wl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(Y(r))),
          (r.handleFocus = r.handleFocus.bind(Y(r))),
          (r.handleBlur = r.handleBlur.bind(Y(r))),
          (r.handleKeypress = r.handleKeypress.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentWillUnmount = function e(t) {
          this.handleBlur(t);
        }),
        (a.handleKeypress = function t(e) {
          (32 === e.which || 13 === e.which) &&
            (e.preventDefault(), this.handleClick(e));
        }),
        (a.handleClick = function t(e) {
          var a = this.props.onClick;
          a(e);
        }),
        (a.handleFocus = function e(t) {
          document.addEventListener('keydown', this.handleKeypress),
            this.props.onFocus && this.props.onFocus(t);
        }),
        (a.handleBlur = function e(t) {
          document.removeEventListener('keydown', this.handleKeypress),
            this.props.onBlur && this.props.onBlur(t);
        }),
        (a.render = function e() {
          var t = this.props.tagName,
            a = O({}, this.props);
          return (
            delete a.tagName,
            delete a.className,
            Ln.createElement(
              t,
              O(
                {
                  className: lo(this.props.className),
                  role: 'button',
                  tabIndex: '0',
                  onClick: this.handleClick,
                  onFocus: this.handleFocus,
                  onBlur: this.handleBlur
                },
                a
              )
            )
          );
        }),
        t
      );
    })(o.Component);
  (wl.propTypes = Ml),
    (wl.defaultProps = { tagName: 'div' }),
    (wl.displayName = 'ClickableComponent');
  var Bl = { player: so.object, children: so.any },
    Ul = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function t(e) {
          e.preventDefault();
        }),
        (a.render = function e() {
          var t = this.props.children;
          return Ln.createElement(
            'div',
            { className: 'video-react-menu', onClick: this.handleClick },
            Ln.createElement(
              'div',
              { className: 'video-react-menu-content' },
              t
            )
          );
        }),
        t
      );
    })(o.Component);
  (Ul.propTypes = Bl), (Ul.displayName = 'Popup');
  var Gl = {
    inline: so.bool,
    onClick: so.func.isRequired,
    onFocus: so.func,
    onBlur: so.func,
    className: so.string
  };
  (vn.propTypes = Gl),
    (vn.defaultProps = { inline: !0 }),
    (vn.displayName = 'PopupButton');
  var Kl = { percentage: so.string, vertical: so.bool, className: so.string };
  (Sn.propTypes = Kl),
    (Sn.defaultProps = { percentage: '100%', vertical: !1 }),
    (Sn.displayName = 'VolumeLevel');
  var Hl = {
      actions: so.object,
      player: so.object,
      className: so.string,
      onFocus: so.func,
      onBlur: so.func
    },
    Vl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.state = { percentage: '0%' }),
          (r.handleMouseMove = r.handleMouseMove.bind(Y(r))),
          (r.handlePercentageChange = r.handlePercentageChange.bind(Y(r))),
          (r.checkMuted = r.checkMuted.bind(Y(r))),
          (r.getPercent = r.getPercent.bind(Y(r))),
          (r.stepForward = r.stepForward.bind(Y(r))),
          (r.stepBack = r.stepBack.bind(Y(r))),
          (r.handleFocus = r.handleFocus.bind(Y(r))),
          (r.handleBlur = r.handleBlur.bind(Y(r))),
          (r.handleClick = r.handleClick.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {}),
        (a.getPercent = function e() {
          var t = this.props.player;
          return t.muted ? 0 : t.volume;
        }),
        (a.checkMuted = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          a.muted && r.mute(!1);
        }),
        (a.handleMouseMove = function t(e) {
          var a = this.props.actions;
          this.checkMuted();
          var r = this.slider.calculateDistance(e);
          a.changeVolume(r);
        }),
        (a.stepForward = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          this.checkMuted(), r.changeVolume(a.volume + 0.1);
        }),
        (a.stepBack = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          this.checkMuted(), r.changeVolume(a.volume - 0.1);
        }),
        (a.handleFocus = function e(t) {
          this.props.onFocus && this.props.onFocus(t);
        }),
        (a.handleBlur = function e(t) {
          this.props.onBlur && this.props.onBlur(t);
        }),
        (a.handlePercentageChange = function t(e) {
          e !== this.state.percentage && this.setState({ percentage: e });
        }),
        (a.handleClick = function t(e) {
          e.stopPropagation();
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.player,
            n = a.className,
            o = (100 * r.volume).toFixed(2);
          return Ln.createElement(
            yl,
            O(
              {
                ref: function a(e) {
                  t.slider = e;
                },
                label: 'volume level',
                valuenow: o,
                valuetext: o + '%',
                onMouseMove: this.handleMouseMove,
                onFocus: this.handleFocus,
                onBlur: this.handleBlur,
                onClick: this.handleClick,
                sliderActive: this.handleFocus,
                sliderInactive: this.handleBlur,
                getPercent: this.getPercent,
                onPercentageChange: this.handlePercentageChange,
                stepForward: this.stepForward,
                stepBack: this.stepBack
              },
              this.props,
              {
                className: lo(
                  n,
                  'video-react-volume-bar video-react-slider-bar'
                )
              }
            ),
            Ln.createElement(Sn, this.props)
          );
        }),
        t
      );
    })(o.Component);
  (Vl.propTypes = Hl), (Vl.displayName = 'VolumeBar');
  var Wl = {
      player: so.object,
      actions: so.object,
      vertical: so.bool,
      className: so.string,
      alwaysShowVolume: so.bool
    },
    Yl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.state = { active: !1 }),
          (r.handleClick = r.handleClick.bind(Y(r))),
          (r.handleFocus = r.handleFocus.bind(Y(r))),
          (r.handleBlur = r.handleBlur.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function e() {
          var t = this.props,
            a = t.player,
            r = t.actions;
          r.mute(!a.muted);
        }),
        (a.handleFocus = function e() {
          this.setState({ active: !0 });
        }),
        (a.handleBlur = function e() {
          this.setState({ active: !1 });
        }),
        (a.render = function e() {
          var t = this.props,
            a = t.vertical,
            r = t.player,
            n = t.className,
            o = !a,
            i = this.volumeLevel;
          return Ln.createElement(
            vn,
            {
              className: lo(
                n,
                {
                  'video-react-volume-menu-button-vertical': a,
                  'video-react-volume-menu-button-horizontal': !a,
                  'video-react-vol-muted': r.muted,
                  'video-react-vol-0': 0 === i && !r.muted,
                  'video-react-vol-1': 1 === i,
                  'video-react-vol-2': 2 === i,
                  'video-react-vol-3': 3 === i,
                  'video-react-slider-active':
                    this.props.alwaysShowVolume || this.state.active,
                  'video-react-lock-showing':
                    this.props.alwaysShowVolume || this.state.active
                },
                'video-react-volume-menu-button'
              ),
              onClick: this.handleClick,
              inline: o
            },
            Ln.createElement(
              Vl,
              O(
                { onFocus: this.handleFocus, onBlur: this.handleBlur },
                this.props
              )
            )
          );
        }),
        N(t, [
          {
            key: 'volumeLevel',
            get: function e() {
              var t = this.props.player,
                a = t.volume,
                r = t.muted,
                n = 3;
              return (
                0 === a || r
                  ? (n = 0)
                  : 0.33 > a
                  ? (n = 1)
                  : 0.67 > a && (n = 2),
                n
              );
            }
          }
        ]),
        t
      );
    })(o.Component);
  (Yl.propTypes = Wl),
    (Yl.defaultProps = { vertical: !1 }),
    (Yl.displayName = 'VolumeMenuButton');
  var ql = { children: so.any },
    jl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function t(e) {
          e.preventDefault();
        }),
        (a.render = function e() {
          return Ln.createElement(
            'div',
            {
              className: 'video-react-menu video-react-lock-showing',
              role: 'presentation',
              onClick: this.handleClick
            },
            Ln.createElement(
              'ul',
              { className: 'video-react-menu-content' },
              this.props.children
            )
          );
        }),
        t
      );
    })(o.Component);
  (jl.propTypes = ql), (jl.displayName = 'Menu');
  var zl = {
      item: so.object,
      index: so.number,
      activateIndex: so.number,
      onSelectItem: so.func
    },
    Xl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleClick = r.handleClick.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.handleClick = function e() {
          var t = this.props,
            a = t.index,
            r = t.onSelectItem;
          r(a);
        }),
        (a.render = function e() {
          var t = this.props,
            a = t.item,
            r = t.index,
            n = t.activateIndex;
          return Ln.createElement(
            'li',
            {
              className: lo({
                'video-react-menu-item': !0,
                'video-react-selected': r === n
              }),
              role: 'menuitem',
              onClick: this.handleClick
            },
            a.label,
            Ln.createElement('span', { className: 'video-react-control-text' })
          );
        }),
        t
      );
    })(o.Component);
  (Xl.propTypes = zl), (Xl.displayName = 'MenuItem');
  var Ql = {
      inline: so.bool,
      items: so.array,
      className: so.string,
      onSelectItem: so.func,
      children: so.any,
      selectedIndex: so.number
    },
    $l = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.state = { active: !1, activateIndex: t.selectedIndex || 0 }),
          (r.commitSelection = r.commitSelection.bind(Y(r))),
          (r.activateMenuItem = r.activateMenuItem.bind(Y(r))),
          (r.handleClick = r.handleClick.bind(Y(r))),
          (r.renderMenu = r.renderMenu.bind(Y(r))),
          (r.handleFocus = r.handleFocus.bind(Y(r))),
          (r.handleBlur = r.handleBlur.bind(Y(r))),
          (r.handleUpArrow = r.handleUpArrow.bind(Y(r))),
          (r.handleDownArrow = r.handleDownArrow.bind(Y(r))),
          (r.handleEscape = r.handleEscape.bind(Y(r))),
          (r.handleReturn = r.handleReturn.bind(Y(r))),
          (r.handleTab = r.handleTab.bind(Y(r))),
          (r.handleKeyPress = r.handleKeyPress.bind(Y(r))),
          (r.handleSelectItem = r.handleSelectItem.bind(Y(r))),
          (r.handleIndexChange = r.handleIndexChange.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentDidUpdate = function t(e) {
          e.selectedIndex !== this.props.selectedIndex &&
            this.activateMenuItem(this.props.selectedIndex);
        }),
        (a.commitSelection = function t(e) {
          this.setState({ activateIndex: e }), this.handleIndexChange(e);
        }),
        (a.activateMenuItem = function t(e) {
          this.setState({ activateIndex: e }), this.handleIndexChange(e);
        }),
        (a.handleIndexChange = function t(e) {
          var a = this.props.onSelectItem;
          a(e);
        }),
        (a.handleClick = function e() {
          this.setState(function(e) {
            return { active: !e.active };
          });
        }),
        (a.handleFocus = function e() {
          document.addEventListener('keydown', this.handleKeyPress);
        }),
        (a.handleBlur = function e() {
          this.setState({ active: !1 }),
            document.removeEventListener('keydown', this.handleKeyPress);
        }),
        (a.handleUpArrow = function e(t) {
          var a = this.props.items;
          if (this.state.active) {
            t.preventDefault();
            var r = this.state.activateIndex - 1;
            0 > r && (r = a.length ? a.length - 1 : 0),
              this.activateMenuItem(r);
          }
        }),
        (a.handleDownArrow = function e(t) {
          var a = this.props.items;
          if (this.state.active) {
            t.preventDefault();
            var r = this.state.activateIndex + 1;
            r >= a.length && (r = 0), this.activateMenuItem(r);
          }
        }),
        (a.handleTab = function e(t) {
          this.state.active &&
            (t.preventDefault(),
            this.commitSelection(this.state.activateIndex));
        }),
        (a.handleReturn = function e(t) {
          t.preventDefault(),
            this.state.active
              ? this.commitSelection(this.state.activateIndex)
              : this.setState({ active: !0 });
        }),
        (a.handleEscape = function e() {
          this.setState({ active: !1, activateIndex: 0 });
        }),
        (a.handleKeyPress = function t(e) {
          27 === e.which
            ? this.handleEscape(e)
            : 9 === e.which
            ? this.handleTab(e)
            : 13 === e.which
            ? this.handleReturn(e)
            : 38 === e.which
            ? this.handleUpArrow(e)
            : 40 === e.which && this.handleDownArrow(e);
        }),
        (a.handleSelectItem = function t(e) {
          this.commitSelection(e);
        }),
        (a.renderMenu = function e() {
          var t = this;
          if (!this.state.active) return null;
          var a = this.props.items;
          return Ln.createElement(
            jl,
            null,
            a.map(function(e, a) {
              return Ln.createElement(Xl, {
                item: e,
                index: a,
                onSelectItem: t.handleSelectItem,
                activateIndex: t.state.activateIndex,
                key: 'item-' + a++
              });
            })
          );
        }),
        (a.render = function e() {
          var t = this,
            a = this.props,
            r = a.inline,
            n = a.className;
          return Ln.createElement(
            wl,
            {
              className: lo(
                n,
                {
                  'video-react-menu-button-inline': !!r,
                  'video-react-menu-button-popup': !r,
                  'video-react-menu-button-active': this.state.active
                },
                'video-react-control video-react-button video-react-menu-button'
              ),
              role: 'button',
              tabIndex: '0',
              ref: function a(e) {
                t.menuButton = e;
              },
              onClick: this.handleClick,
              onFocus: this.handleFocus,
              onBlur: this.handleBlur
            },
            this.props.children,
            this.renderMenu()
          );
        }),
        t
      );
    })(o.Component);
  ($l.propTypes = Ql), ($l.displayName = 'MenuButton');
  var Zl = {
      player: so.object,
      actions: so.object,
      rates: so.array,
      className: so.string
    },
    Jl = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.handleSelectItem = r.handleSelectItem.bind(Y(r))),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.handleSelectItem = function t(e) {
          var a = this.props,
            r = a.rates,
            n = a.actions;
          0 <= e && e < r.length && n.changeRate(r[e]);
        }),
        (a.render = function e() {
          var t = this.props,
            a = t.rates,
            r = t.player,
            n = a.map(function(e) {
              return { label: e + 'x', value: e };
            }),
            o = a.indexOf(r.playbackRate) || 0;
          return Ln.createElement(
            $l,
            {
              className: lo('video-react-playback-rate', this.props.className),
              onSelectItem: this.handleSelectItem,
              items: n,
              selectedIndex: o
            },
            Ln.createElement(
              'span',
              { className: 'video-react-control-text' },
              'Playback Rate'
            ),
            Ln.createElement(
              'div',
              { className: 'video-react-playback-rate-value' },
              r.playbackRate.toFixed(2) + 'x'
            )
          );
        }),
        t
      );
    })(o.Component);
  (Jl.propTypes = Zl),
    (Jl.defaultProps = { rates: [2, 1.5, 1.25, 1, 0.5, 0.25] }),
    (Jl.displayName = 'PlaybackRateMenuButton');
  var ec = ['className'],
    tc = {
      children: so.any,
      autoHide: so.bool,
      autoHideTime: so.number,
      disableDefaultControls: so.bool,
      disableCompletely: so.bool,
      className: so.string
    },
    ac = (function(e) {
      function t(t) {
        var a;
        return (
          (a = e.call(this, t) || this),
          (a.getDefaultChildren = a.getDefaultChildren.bind(Y(a))),
          (a.getFullChildren = a.getFullChildren.bind(Y(a))),
          a
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.getDefaultChildren = function e() {
          return [
            Ln.createElement(Rl, { key: 'play-toggle', order: 1 }),
            Ln.createElement(Yl, { key: 'volume-menu-button', order: 4 }),
            Ln.createElement(hn, { key: 'current-time-display', order: 5.1 }),
            Ln.createElement(En, { key: 'time-divider', order: 5.2 }),
            Ln.createElement(Tn, { key: 'duration-display', order: 5.3 }),
            Ln.createElement(Ll, { key: 'progress-control', order: 6 }),
            Ln.createElement(_l, { key: 'fullscreen-toggle', order: 8 })
          ];
        }),
        (a.getFullChildren = function e() {
          return [
            Ln.createElement(Rl, { key: 'play-toggle', order: 1 }),
            Ln.createElement(Cl, { key: 'replay-control', order: 2 }),
            Ln.createElement(bl, { key: 'forward-control', order: 3 }),
            Ln.createElement(Yl, { key: 'volume-menu-button', order: 4 }),
            Ln.createElement(hn, { key: 'current-time-display', order: 5 }),
            Ln.createElement(En, { key: 'time-divider', order: 6 }),
            Ln.createElement(Tn, { key: 'duration-display', order: 7 }),
            Ln.createElement(Ll, { key: 'progress-control', order: 8 }),
            Ln.createElement(yn, { key: 'remaining-time-display', order: 9 }),
            Ln.createElement(Jl, {
              rates: [1, 1.25, 1.5, 2],
              key: 'playback-rate',
              order: 10
            }),
            Ln.createElement(_l, { key: 'fullscreen-toggle', order: 11 })
          ];
        }),
        (a.getChildren = function e() {
          var t = Ln.Children.toArray(this.props.children),
            a = this.props.disableDefaultControls
              ? []
              : this.getDefaultChildren(),
            r = this.props,
            n = r.className,
            o = W(r, ec);
          return Le(a, t, o);
        }),
        (a.render = function e() {
          var t = this.props,
            a = t.autoHide,
            r = t.className,
            n = t.disableCompletely,
            o = this.getChildren();
          return n
            ? null
            : Ln.createElement(
                'div',
                {
                  className: lo(
                    'video-react-control-bar',
                    { 'video-react-control-bar-auto-hide': a },
                    r
                  )
                },
                o
              );
        }),
        t
      );
    })(o.Component);
  (ac.propTypes = tc),
    (ac.defaultProps = { autoHide: !0, disableCompletely: !1 }),
    (ac.displayName = 'ControlBar');
  var rc =
      'undefined' != typeof window && window.navigator
        ? window.navigator.userAgent
        : '',
    nc = /iPad/i.test(rc),
    oc = /iPhone/i.test(rc) && !nc,
    ic = /iPod/i.test(rc),
    dc = ['className', 'children'],
    sc = {
      children: so.any,
      width: so.oneOfType([so.string, so.number]),
      height: so.oneOfType([so.string, so.number]),
      fluid: so.bool,
      muted: so.bool,
      playsInline: so.bool,
      aspectRatio: so.string,
      className: so.string,
      videoId: so.string,
      startTime: so.number,
      loop: so.bool,
      autoPlay: so.bool,
      src: so.string,
      poster: so.string,
      preload: so.oneOf(['auto', 'metadata', 'none']),
      onLoadStart: so.func,
      onWaiting: so.func,
      onCanPlay: so.func,
      onCanPlayThrough: so.func,
      onPlaying: so.func,
      onEnded: so.func,
      onSeeking: so.func,
      onSeeked: so.func,
      onPlay: so.func,
      onPause: so.func,
      onProgress: so.func,
      onDurationChange: so.func,
      onError: so.func,
      onSuspend: so.func,
      onAbort: so.func,
      onEmptied: so.func,
      onStalled: so.func,
      onLoadedMetadata: so.func,
      onLoadedData: so.func,
      onTimeUpdate: so.func,
      onRateChange: so.func,
      onVolumeChange: so.func,
      store: so.object
    },
    lc = (function(e) {
      function t(t) {
        var a;
        return (
          (a = e.call(this, t) || this),
          (a.controlsHideTimer = null),
          (a.video = null),
          (a.manager = new Eo(t.store)),
          (a.actions = a.manager.getActions()),
          a.manager.subscribeToPlayerStateChange(
            a.handleStateChange.bind(Y(a))
          ),
          (a.getStyle = a.getStyle.bind(Y(a))),
          (a.handleResize = a.handleResize.bind(Y(a))),
          (a.getChildren = a.getChildren.bind(Y(a))),
          (a.handleMouseMove = Re(a.handleMouseMove.bind(Y(a)), 250)),
          (a.handleMouseDown = a.handleMouseDown.bind(Y(a))),
          (a.startControlsTimer = a.startControlsTimer.bind(Y(a))),
          (a.handleFullScreenChange = a.handleFullScreenChange.bind(Y(a))),
          (a.handleKeyDown = a.handleKeyDown.bind(Y(a))),
          (a.handleFocus = a.handleFocus.bind(Y(a))),
          (a.handleBlur = a.handleBlur.bind(Y(a))),
          a
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentDidMount = function e() {
          this.handleResize(),
            window.addEventListener('resize', this.handleResize),
            mo.addEventListener(this.handleFullScreenChange);
        }),
        (a.componentWillUnmount = function e() {
          window.removeEventListener('resize', this.handleResize),
            mo.removeEventListener(this.handleFullScreenChange),
            this.controlsHideTimer &&
              window.clearTimeout(this.controlsHideTimer);
        }),
        (a.getDefaultChildren = function t(e) {
          var a = this;
          return [
            Ln.createElement(
              cl,
              {
                ref: function t(e) {
                  (a.video = e), (a.manager.video = a.video);
                },
                key: 'video',
                order: 0
              },
              e
            ),
            Ln.createElement(Ee, { key: 'poster-image', order: 1 }),
            Ln.createElement(Te, { key: 'loading-spinner', order: 2 }),
            Ln.createElement(gl, { key: 'bezel', order: 3 }),
            Ln.createElement(So, { key: 'big-play-button', order: 4 }),
            Ln.createElement(ac, { key: 'control-bar', order: 5 }),
            Ln.createElement(pl, { key: 'shortcut', order: 99 })
          ];
        }),
        (a.getChildren = function t(e) {
          var a = e.className,
            r = e.children,
            n = W(e, dc),
            o = Ln.Children.toArray(this.props.children).filter(function(t) {
              return !Se(t);
            }),
            i = this.getDefaultChildren(r);
          return Le(i, o, n);
        }),
        (a.setWidthOrHeight = function r(e, t, a) {
          var n, o;
          'string' == typeof a
            ? 'auto' === a
              ? (o = 'auto')
              : a.match(/\d+%/) && (o = a)
            : 'number' == typeof a && (o = a + 'px'),
            Object.assign(e, ((n = {}), (n[t] = o), n));
        }),
        (a.getStyle = function e() {
          var t = this.props,
            a = t.fluid,
            r = t.aspectRatio,
            n = t.height,
            o = t.width,
            i = this.manager.getState(),
            d = i.player,
            s = {},
            l,
            c,
            u;
          u =
            void 0 !== r && 'auto' !== r
              ? r
              : d.videoWidth
              ? d.videoWidth + ':' + d.videoHeight
              : '16:9';
          var g = u.split(':'),
            f = g[1] / g[0];
          return (
            (l =
              void 0 === o ? (void 0 === n ? d.videoWidth || 400 : n / f) : o),
            (c = void 0 === n ? l * f : n),
            a
              ? (s.paddingTop = 100 * f + '%')
              : (this.setWidthOrHeight(s, 'width', l),
                this.setWidthOrHeight(s, 'height', c)),
            s
          );
        }),
        (a.getState = function e() {
          return this.manager.getState();
        }),
        (a.play = function e() {
          this.video.play();
        }),
        (a.pause = function e() {
          this.video.pause();
        }),
        (a.load = function e() {
          this.video.load();
        }),
        (a.addTextTrack = function e() {
          var t;
          (t = this.video).addTextTrack.apply(t, arguments);
        }),
        (a.canPlayType = function e() {
          var t;
          (t = this.video).canPlayType.apply(t, arguments);
        }),
        (a.seek = function t(e) {
          this.video.seek(e);
        }),
        (a.forward = function t(e) {
          this.video.forward(e);
        }),
        (a.replay = function t(e) {
          this.video.replay(e);
        }),
        (a.toggleFullscreen = function e() {
          this.video.toggleFullscreen();
        }),
        (a.subscribeToStateChange = function t(e) {
          return this.manager.subscribeToPlayerStateChange(e);
        }),
        (a.handleResize = function e() {}),
        (a.handleFullScreenChange = function t(e) {
          e.target === this.manager.rootElement &&
            this.actions.handleFullscreenChange(mo.isFullscreen);
        }),
        (a.handleMouseDown = function e() {
          this.startControlsTimer();
        }),
        (a.handleMouseMove = function e() {
          this.startControlsTimer();
        }),
        (a.handleKeyDown = function e() {
          this.startControlsTimer();
        }),
        (a.startControlsTimer = function e() {
          var t = this,
            a = 3e3;
          Ln.Children.forEach(this.props.children, function(e) {
            if (Ln.isValidElement(e) && e.type === ac) {
              var t = e.props.autoHideTime;
              'number' == typeof t && (a = t);
            }
          }),
            this.actions.userActivate(!0),
            clearTimeout(this.controlsHideTimer),
            (this.controlsHideTimer = setTimeout(function() {
              t.actions.userActivate(!1);
            }, a));
        }),
        (a.handleStateChange = function a(e, t) {
          e.isFullscreen !== t.isFullscreen &&
            (this.handleResize(), un(this.manager.rootElement)),
            this.forceUpdate();
        }),
        (a.handleFocus = function e() {
          this.actions.activate(!0);
        }),
        (a.handleBlur = function e() {
          this.actions.activate(!1);
        }),
        (a.render = function e() {
          var t = this,
            a = this.props.fluid,
            r = this.manager.getState(),
            n = r.player,
            o = n.paused,
            i = n.hasStarted,
            d = n.waiting,
            s = n.seeking,
            l = n.isFullscreen,
            c = n.userActivity,
            u = O({}, this.props, {
              player: n,
              actions: this.actions,
              manager: this.manager,
              store: this.manager.store,
              video: this.video ? this.video.video : null
            }),
            g = this.getChildren(u);
          return Ln.createElement(
            'div',
            {
              className: lo(
                {
                  'video-react-controls-enabled': !0,
                  'video-react-has-started': i,
                  'video-react-paused': o,
                  'video-react-playing': !o,
                  'video-react-waiting': d,
                  'video-react-seeking': s,
                  'video-react-fluid': a,
                  'video-react-fullscreen': l,
                  'video-react-user-inactive': !c,
                  'video-react-user-active': c,
                  'video-react-workinghover': !(oc || nc || ic)
                },
                'video-react',
                this.props.className
              ),
              style: this.getStyle(),
              ref: function a(e) {
                t.manager.rootElement = e;
              },
              role: 'region',
              onTouchStart: this.handleMouseDown,
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleMouseMove,
              onMouseMove: this.handleMouseMove,
              onKeyDown: this.handleKeyDown,
              onFocus: this.handleFocus,
              onBlur: this.handleBlur,
              tabIndex: '-1'
            },
            g
          );
        }),
        N(t, [
          {
            key: 'playbackRate',
            get: function e() {
              return this.video.playbackRate;
            },
            set: function t(e) {
              this.video.playbackRate = e;
            }
          },
          {
            key: 'muted',
            get: function e() {
              return this.video.muted;
            },
            set: function t(e) {
              this.video.muted = e;
            }
          },
          {
            key: 'volume',
            get: function e() {
              return this.video.volume;
            },
            set: function t(e) {
              this.video.volume = e;
            }
          },
          {
            key: 'videoWidth',
            get: function e() {
              return this.video.videoWidth;
            }
          },
          {
            key: 'videoHeight',
            get: function e() {
              return this.video.videoHeight;
            }
          }
        ]),
        t
      );
    })(o.Component);
  (lc.contextTypes = { store: so.object }),
    (lc.propTypes = sc),
    (lc.defaultProps = {
      fluid: !0,
      muted: !1,
      playsInline: !1,
      preload: 'auto',
      aspectRatio: 'auto'
    }),
    (lc.displayName = 'Player');
  var cc = (function(e) {
    function t(t, a) {
      var r;
      return (
        (r = e.call(this, t, a) || this),
        Ae('PlaybackRate', 'PlaybackRateMenuButton'),
        r
      );
    }
    M(t, e);
    var a = t.prototype;
    return (
      (a.render = function e() {
        return Ln.createElement(Jl, this.props);
      }),
      t
    );
  })(o.Component);
  cc.displayName = 'PlaybackRate';
  var uc = {
      player: so.object,
      actions: so.object,
      className: so.string,
      offMenuText: so.string,
      showOffMenu: so.bool,
      kinds: so.array
    },
    gc = (function(e) {
      function t(t, a) {
        var r;
        return (
          (r = e.call(this, t, a) || this),
          (r.getTextTrackItems = r.getTextTrackItems.bind(Y(r))),
          (r.updateState = r.updateState.bind(Y(r))),
          (r.handleSelectItem = r.handleSelectItem.bind(Y(r))),
          (r.state = r.getTextTrackItems()),
          r
        );
      }
      M(t, e);
      var a = t.prototype;
      return (
        (a.componentDidUpdate = function e() {
          this.updateState();
        }),
        (a.getTextTrackItems = function e() {
          var t = this.props,
            a = t.kinds,
            r = t.player,
            n = t.offMenuText,
            o = t.showOffMenu,
            i = r.textTracks,
            d = r.activeTextTrack,
            s = { items: [], selectedIndex: 0 },
            l = Array.from(i || []);
          return 0 === l.length
            ? s
            : (o && s.items.push({ label: n || 'Off', value: null }),
              l.forEach(function(e) {
                (a.length && !a.includes(e.kind)) ||
                  s.items.push({ label: e.label, value: e.language });
              }),
              (s.selectedIndex = s.items.findIndex(function(e) {
                return d && d.language === e.value;
              })),
              -1 === s.selectedIndex && (s.selectedIndex = 0),
              s);
        }),
        (a.updateState = function e() {
          var t = this.getTextTrackItems();
          (t.selectedIndex === this.state.selectedIndex &&
            this.textTrackItemsAreEqual(t.items, this.state.items)) ||
            this.setState(t);
        }),
        (a.textTrackItemsAreEqual = function a(e, t) {
          if (e.length !== t.length) return !1;
          for (var r = 0; r < e.length; r++)
            if (!t[r] || e[r].label !== t[r].label || e[r].value !== t[r].value)
              return !1;
          return !0;
        }),
        (a.handleSelectItem = function t(e) {
          var a = this.props,
            r = a.player,
            n = a.actions,
            o = a.showOffMenu,
            i = r.textTracks;
          Array.from(i).forEach(function(t, a) {
            e === (o ? a + 1 : a)
              ? ((t.mode = 'showing'), n.activateTextTrack(t))
              : (t.mode = 'hidden');
          });
        }),
        (a.render = function e() {
          var t = this.state,
            a = t.items,
            r = t.selectedIndex;
          return Ln.createElement(
            $l,
            {
              className: lo('video-react-closed-caption', this.props.className),
              onSelectItem: this.handleSelectItem,
              items: a,
              selectedIndex: r
            },
            Ln.createElement(
              'span',
              { className: 'video-react-control-text' },
              'Closed Caption'
            )
          );
        }),
        t
      );
    })(o.Component);
  (gc.propTypes = uc),
    (gc.defaultProps = {
      offMenuText: 'Off',
      showOffMenu: !0,
      kinds: ['captions', 'subtitles']
    }),
    (gc.displayName = 'ClosedCaptionButton'),
    (a.Bezel = gl),
    (a.BigPlayButton = So),
    (a.ClosedCaptionButton = gc),
    (a.ControlBar = ac),
    (a.CurrentTimeDisplay = hn),
    (a.DurationDisplay = Tn),
    (a.ForwardControl = bl),
    (a.FullscreenToggle = _l),
    (a.HLSSource = sl),
    (a.LoadProgressBar = pn),
    (a.LoadingSpinner = Te),
    (a.MenuButton = $l),
    (a.MouseTimeDisplay = mn),
    (a.PlayProgressBar = fn),
    (a.PlayToggle = Rl),
    (a.PlaybackRate = cc),
    (a.PlaybackRateMenuButton = Jl),
    (a.Player = lc),
    (a.PosterImage = Ee),
    (a.ProgressControl = Ll),
    (a.RemainingTimeDisplay = yn),
    (a.ReplayControl = Cl),
    (a.SeekBar = vl),
    (a.Shortcut = pl),
    (a.Slider = yl),
    (a.TimeDivider = En),
    (a.Video = cl),
    (a.VolumeMenuButton = Yl),
    (a.operationReducer = ye),
    (a.playerActions = yo),
    (a.playerReducer = me),
    (a.videoActions = fo),
    Object.defineProperty(a, '__esModule', { value: !0 });
});
//# sourceMappingURL=video-react.full.min.js.map
